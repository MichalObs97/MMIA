
cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017cc4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e624  08017e74  08017e74  00027e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026498  08026498  000401f0  2**0
                  CONTENTS
  4 .ARM          00000008  08026498  08026498  00036498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080264a0  080264a0  000401f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080264a0  080264a0  000364a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080264a4  080264a4  000364a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080264a8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f930  200001f0  08026698  000401f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000fb20  08026698  0004fb20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046a3f  00000000  00000000  00040220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008503  00000000  00000000  00086c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002418  00000000  00000000  0008f168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002190  00000000  00000000  00091580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036a09  00000000  00000000  00093710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00033bd9  00000000  00000000  000ca119  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe40b  00000000  00000000  000fdcf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fc0fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ca0  00000000  00000000  001fc178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017e5c 	.word	0x08017e5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	08017e5c 	.word	0x08017e5c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	2000020c 	.word	0x2000020c
 80005f0:	20000260 	.word	0x20000260

080005f4 <LEDS_CGI_Handler>:

/**
  * @brief  CGI handler for LEDs control 
  */
const char * LEDS_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	603b      	str	r3, [r7, #0]
  uint32_t i=0;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  
  /* We have only one SSI handler iIndex = 0 */
  if (iIndex==0)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d15b      	bne.n	80006c4 <LEDS_CGI_Handler+0xd0>
  {
    /* All leds off */
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2101      	movs	r1, #1
 8000610:	482f      	ldr	r0, [pc, #188]	; (80006d0 <LEDS_CGI_Handler+0xdc>)
 8000612:	f002 f953 	bl	80028bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	482d      	ldr	r0, [pc, #180]	; (80006d0 <LEDS_CGI_Handler+0xdc>)
 800061c:	f002 f94e 	bl	80028bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000626:	482a      	ldr	r0, [pc, #168]	; (80006d0 <LEDS_CGI_Handler+0xdc>)
 8000628:	f002 f948 	bl	80028bc <HAL_GPIO_WritePin>
    
    /* Check cgi parameter : application GET /leds.cgi?led=2&led=4 */
    for (i=0; i<iNumParams; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	e044      	b.n	80006bc <LEDS_CGI_Handler+0xc8>
    {
      /* check parameter "led" */
      if (strcmp(pcParam[i] , "led")==0)   
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4925      	ldr	r1, [pc, #148]	; (80006d4 <LEDS_CGI_Handler+0xe0>)
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fdd6 	bl	80001f0 <strcmp>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d135      	bne.n	80006b6 <LEDS_CGI_Handler+0xc2>
      {
        /* switch led1 ON if 1 */
        if(strcmp(pcValue[i], "1") ==0) 
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	4413      	add	r3, r2
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4920      	ldr	r1, [pc, #128]	; (80006d8 <LEDS_CGI_Handler+0xe4>)
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fdca 	bl	80001f0 <strcmp>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d105      	bne.n	800066e <LEDS_CGI_Handler+0x7a>
        	 HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	2101      	movs	r1, #1
 8000666:	481a      	ldr	r0, [pc, #104]	; (80006d0 <LEDS_CGI_Handler+0xdc>)
 8000668:	f002 f928 	bl	80028bc <HAL_GPIO_WritePin>
 800066c:	e023      	b.n	80006b6 <LEDS_CGI_Handler+0xc2>
          
        /* switch led2 ON if 2 */
        else if(strcmp(pcValue[i], "2") ==0) 
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	4413      	add	r3, r2
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4918      	ldr	r1, [pc, #96]	; (80006dc <LEDS_CGI_Handler+0xe8>)
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fdb8 	bl	80001f0 <strcmp>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d105      	bne.n	8000692 <LEDS_CGI_Handler+0x9e>
        	 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	2180      	movs	r1, #128	; 0x80
 800068a:	4811      	ldr	r0, [pc, #68]	; (80006d0 <LEDS_CGI_Handler+0xdc>)
 800068c:	f002 f916 	bl	80028bc <HAL_GPIO_WritePin>
 8000690:	e011      	b.n	80006b6 <LEDS_CGI_Handler+0xc2>
        
        /* switch led3 ON if 3 */
        else if(strcmp(pcValue[i], "3") ==0) 
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	4413      	add	r3, r2
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4910      	ldr	r1, [pc, #64]	; (80006e0 <LEDS_CGI_Handler+0xec>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fda6 	bl	80001f0 <strcmp>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d105      	bne.n	80006b6 <LEDS_CGI_Handler+0xc2>
        	 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b0:	4807      	ldr	r0, [pc, #28]	; (80006d0 <LEDS_CGI_Handler+0xdc>)
 80006b2:	f002 f903 	bl	80028bc <HAL_GPIO_WritePin>
    for (i=0; i<iNumParams; i++)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d3b6      	bcc.n	8000632 <LEDS_CGI_Handler+0x3e>
        
      }
    }
  }
  /* uri to send after cgi call*/
  return "/STM32F4xxLED.html";  
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <LEDS_CGI_Handler+0xf0>)
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020400 	.word	0x40020400
 80006d4:	08017e84 	.word	0x08017e84
 80006d8:	08017e88 	.word	0x08017e88
 80006dc:	08017e8c 	.word	0x08017e8c
 80006e0:	08017e90 	.word	0x08017e90
 80006e4:	08017e94 	.word	0x08017e94

080006e8 <http_server_init>:

/**
  * @brief  Http webserver Init
  */
void http_server_init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* Httpd Init */
  httpd_init();
 80006ec:	f00a fae0 	bl	800acb0 <httpd_init>
  

  /* configure CGI handlers (LEDs control CGI) */
  CGI_TAB[0] = LEDS_CGI;
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <http_server_init+0x20>)
 80006f2:	4a06      	ldr	r2, [pc, #24]	; (800070c <http_server_init+0x24>)
 80006f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f8:	e883 0003 	stmia.w	r3, {r0, r1}
  http_set_cgi_handlers(CGI_TAB, 1);  
 80006fc:	2101      	movs	r1, #1
 80006fe:	4802      	ldr	r0, [pc, #8]	; (8000708 <http_server_init+0x20>)
 8000700:	f00a fb22 	bl	800ad48 <http_set_cgi_handlers>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20008d90 	.word	0x20008d90
 800070c:	0801adc0 	.word	0x0801adc0

08000710 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000716:	f000 fe31 	bl	800137c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800071a:	f000 f821 	bl	8000760 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800071e:	f000 f8e1 	bl	80008e4 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000722:	f000 f887 	bl	8000834 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000726:	f000 f8af 	bl	8000888 <MX_USB_OTG_FS_PCD_Init>
	MX_LWIP_Init();
 800072a:	f003 ff55 	bl	80045d8 <MX_LWIP_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <main+0x48>)
 8000730:	1d3c      	adds	r4, r7, #4
 8000732:	461d      	mov	r5, r3
 8000734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000738:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800073c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f004 fb15 	bl	8004d74 <osThreadCreate>
 800074a:	4602      	mov	r2, r0
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <main+0x4c>)
 800074e:	601a      	str	r2, [r3, #0]
	/* add threads, ... */

	/* We should never get here as control is now taken by the scheduler */

	/* Start scheduler */
	osKernelStart();
 8000750:	f004 faf9 	bl	8004d46 <osKernelStart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000754:	e7fe      	b.n	8000754 <main+0x44>
 8000756:	bf00      	nop
 8000758:	08017eb4 	.word	0x08017eb4
 800075c:	20008d98 	.word	0x20008d98

08000760 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	; 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f016 f9fa 	bl	8016b68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <SystemClock_Config+0xcc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a27      	ldr	r2, [pc, #156]	; (800082c <SystemClock_Config+0xcc>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b25      	ldr	r3, [pc, #148]	; (800082c <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <SystemClock_Config+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <SystemClock_Config+0xd0>)
 80007aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80007d4:	23a8      	movs	r3, #168	; 0xa8
 80007d6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80007dc:	2307      	movs	r3, #7
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 f99f 	bl	8002b28 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80007f0:	f000 f948 	bl	8000a84 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2302      	movs	r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000800:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000804:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2105      	movs	r1, #5
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fbf8 	bl	8003008 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800081e:	f000 f931 	bl	8000a84 <Error_Handler>
	}
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	; 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_USART3_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 800086c:	f003 f82e 	bl	80038cc <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000876:	f000 f905 	bl	8000a84 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20008d9c 	.word	0x20008d9c
 8000884:	40004800 	.word	0x40004800

08000888 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000892:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2204      	movs	r2, #4
 8000898:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2202      	movs	r2, #2
 800089e:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	f002 f80f 	bl	80028ee <HAL_PCD_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USB_OTG_FS_PCD_Init+0x52>
	{
		Error_Handler();
 80008d6:	f000 f8d5 	bl	8000a84 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20008ddc 	.word	0x20008ddc

080008e4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	4b4b      	ldr	r3, [pc, #300]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a4a      	ldr	r2, [pc, #296]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b48      	ldr	r3, [pc, #288]	; (8000a2c <MX_GPIO_Init+0x148>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	4b44      	ldr	r3, [pc, #272]	; (8000a2c <MX_GPIO_Init+0x148>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a43      	ldr	r2, [pc, #268]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b41      	ldr	r3, [pc, #260]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a3c      	ldr	r2, [pc, #240]	; (8000a2c <MX_GPIO_Init+0x148>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b3a      	ldr	r3, [pc, #232]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a35      	ldr	r2, [pc, #212]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b33      	ldr	r3, [pc, #204]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a2e      	ldr	r2, [pc, #184]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <MX_GPIO_Init+0x148>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_GPIO_Init+0x148>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a8:	4821      	ldr	r0, [pc, #132]	; (8000a30 <MX_GPIO_Init+0x14c>)
 80009aa:	f001 ff87 	bl	80028bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2140      	movs	r1, #64	; 0x40
 80009b2:	4820      	ldr	r0, [pc, #128]	; (8000a34 <MX_GPIO_Init+0x150>)
 80009b4:	f001 ff82 	bl	80028bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_GPIO_Init+0x154>)
 80009c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	481b      	ldr	r0, [pc, #108]	; (8000a3c <MX_GPIO_Init+0x158>)
 80009ce:	f001 fdb3 	bl	8002538 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009d2:	f244 0381 	movw	r3, #16513	; 0x4081
 80009d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_GPIO_Init+0x14c>)
 80009ec:	f001 fda4 	bl	8002538 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <MX_GPIO_Init+0x150>)
 8000a08:	f001 fd96 	bl	8002538 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_GPIO_Init+0x150>)
 8000a20:	f001 fd8a 	bl	8002538 <HAL_GPIO_Init>

}
 8000a24:	bf00      	nop
 8000a26:	3730      	adds	r7, #48	; 0x30
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020400 	.word	0x40020400
 8000a34:	40021800 	.word	0x40021800
 8000a38:	10110000 	.word	0x10110000
 8000a3c:	40020800 	.word	0x40020800

08000a40 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	/* Initialize tcp echo server */
	tcpecho_init();
 8000a48:	f000 fa82 	bl	8000f50 <tcpecho_init>

	/* Initialize HTTP server */
	httpd_init();
 8000a4c:	f00a f930 	bl	800acb0 <httpd_init>

	/* Initialize telnet server */
	telnet_init();
 8000a50:	f000 fc56 	bl	8001300 <telnet_init>

	/* Initialize cgi server */
	http_server_init();
 8000a54:	f7ff fe48 	bl	80006e8 <http_server_init>
	/* USER CODE END RTOS_THREADS */

	for(;;)
	{
		osDelay(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f004 f9d7 	bl	8004e0c <osDelay>
 8000a5e:	e7fb      	b.n	8000a58 <StartDefaultTask+0x18>

08000a60 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a72:	f000 fca5 	bl	80013c0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40010000 	.word	0x40010000

08000a84 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_MspInit+0x54>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <HAL_MspInit+0x54>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_MspInit+0x54>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_MspInit+0x54>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_MspInit+0x54>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_MspInit+0x54>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	f06f 0001 	mvn.w	r0, #1
 8000ada:	f000 fd6b 	bl	80015b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <HAL_UART_MspInit+0x84>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d12c      	bne.n	8000b68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b58:	2307      	movs	r3, #7
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <HAL_UART_MspInit+0x8c>)
 8000b64:	f001 fce8 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40004800 	.word	0x40004800
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020c00 	.word	0x40020c00

08000b7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b9c:	d13f      	bne.n	8000c1e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bba:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bcc:	230a      	movs	r3, #10
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4815      	ldr	r0, [pc, #84]	; (8000c2c <HAL_PCD_MspInit+0xb0>)
 8000bd8:	f001 fcae 	bl	8002538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480e      	ldr	r0, [pc, #56]	; (8000c2c <HAL_PCD_MspInit+0xb0>)
 8000bf2:	f001 fca1 	bl	8002538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c00:	6353      	str	r3, [r2, #52]	; 0x34
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	; 0x30
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	2019      	movs	r0, #25
 8000c46:	f000 fcb5 	bl	80015b4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000c4a:	2019      	movs	r0, #25
 8000c4c:	f000 fcce 	bl	80015ec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <HAL_InitTick+0xa4>)
 8000c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c58:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <HAL_InitTick+0xa4>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6453      	str	r3, [r2, #68]	; 0x44
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <HAL_InitTick+0xa4>)
 8000c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c6c:	f107 0210 	add.w	r2, r7, #16
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 fbb8 	bl	80033ec <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c7c:	f002 fba2 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 8000c80:	4603      	mov	r3, r0
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c88:	4a13      	ldr	r2, [pc, #76]	; (8000cd8 <HAL_InitTick+0xa8>)
 8000c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8e:	0c9b      	lsrs	r3, r3, #18
 8000c90:	3b01      	subs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_InitTick+0xac>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <HAL_InitTick+0xb0>)
 8000c98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_InitTick+0xac>)
 8000c9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_InitTick+0xac>)
 8000ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_InitTick+0xac>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_InitTick+0xac>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cb4:	4809      	ldr	r0, [pc, #36]	; (8000cdc <HAL_InitTick+0xac>)
 8000cb6:	f002 fbcb 	bl	8003450 <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d104      	bne.n	8000cca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000cc0:	4806      	ldr	r0, [pc, #24]	; (8000cdc <HAL_InitTick+0xac>)
 8000cc2:	f002 fbfa 	bl	80034ba <HAL_TIM_Base_Start_IT>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3730      	adds	r7, #48	; 0x30
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	431bde83 	.word	0x431bde83
 8000cdc:	200091e4 	.word	0x200091e4
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d1e:	f002 fbf0 	bl	8003502 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200091e4 	.word	0x200091e4

08000d2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	e00a      	b.n	8000d54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d3e:	f3af 8000 	nop.w
 8000d42:	4601      	mov	r1, r0
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	60ba      	str	r2, [r7, #8]
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbf0      	blt.n	8000d3e <_read+0x12>
	}

return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	e009      	b.n	8000d8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	60ba      	str	r2, [r7, #8]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dbf1      	blt.n	8000d78 <_write+0x12>
	}
	return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_close>:

int _close(int file)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
	return -1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc6:	605a      	str	r2, [r3, #4]
	return 0;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_isatty>:

int _isatty(int file)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
	return 1;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
	return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x50>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x16>
		heap_end = &end;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <_sbrk+0x50>)
 8000e1a:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <_sbrk+0x54>)
 8000e1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <_sbrk+0x50>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <_sbrk+0x50>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	466a      	mov	r2, sp
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d905      	bls.n	8000e3e <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <_sbrk+0x58>)
 8000e34:	220c      	movs	r2, #12
 8000e36:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3c:	e006      	b.n	8000e4c <_sbrk+0x44>
	}

	heap_end += incr;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <_sbrk+0x50>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <_sbrk+0x50>)
 8000e48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	20000460 	.word	0x20000460
 8000e5c:	2000fb20 	.word	0x2000fb20
 8000e60:	2000fb18 	.word	0x2000fb18

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <SystemInit+0x28>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6e:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <SystemInit+0x28>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SystemInit+0x28>)
 8000e7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2010      	movs	r0, #16
 8000e9e:	f006 fee3 	bl	8007c68 <netconn_new_with_proto_and_callback>
 8000ea2:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d04e      	beq.n	8000f48 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000eaa:	2207      	movs	r2, #7
 8000eac:	2100      	movs	r1, #0
 8000eae:	69f8      	ldr	r0, [r7, #28]
 8000eb0:	f006 ff7a 	bl	8007da8 <netconn_bind>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000eb8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d13f      	bne.n	8000f40 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000ec0:	21ff      	movs	r1, #255	; 0xff
 8000ec2:	69f8      	ldr	r0, [r7, #28]
 8000ec4:	f006 ffa8 	bl	8007e18 <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	69f8      	ldr	r0, [r7, #28]
 8000ed0:	f006 ffce 	bl	8007e70 <netconn_accept>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000ed8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1f3      	bne.n	8000ec8 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000ee0:	e01b      	b.n	8000f1a <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	f107 020a 	add.w	r2, r7, #10
 8000ee8:	f107 010c 	add.w	r1, r7, #12
 8000eec:	4618      	mov	r0, r3
 8000eee:	f008 fe89 	bl	8009c04 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	68f9      	ldr	r1, [r7, #12]
 8000ef6:	897b      	ldrh	r3, [r7, #10]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2300      	movs	r3, #0
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2301      	movs	r3, #1
 8000f00:	f007 f97c 	bl	80081fc <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f008 fec6 	bl	8009c98 <netbuf_next>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	dae7      	bge.n	8000ee2 <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f008 fe55 	bl	8009bc4 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f107 0210 	add.w	r2, r7, #16
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f007 f8f2 	bl	800810c <netconn_recv>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0d9      	beq.n	8000ee2 <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f007 fa0b 	bl	800834c <netconn_close>
          netconn_delete(newconn);
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f006 ff0f 	bl	8007d5c <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000f3e:	e7c3      	b.n	8000ec8 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f006 ff0a 	bl	8007d5c <netconn_delete>
    }
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000f56:	2304      	movs	r3, #4
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4903      	ldr	r1, [pc, #12]	; (8000f70 <tcpecho_init+0x20>)
 8000f62:	4804      	ldr	r0, [pc, #16]	; (8000f74 <tcpecho_init+0x24>)
 8000f64:	f015 fd7e 	bl	8016a64 <sys_thread_new>
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	08000e91 	.word	0x08000e91
 8000f74:	08017ed0 	.word	0x08017ed0

08000f78 <telnet_process_command>:




static void telnet_process_command(char *cmd, struct netconn *conn)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	char *token, *saveptr;
	static char s[CHAR_BUFFER];
	token = strtok_r(cmd, " ",&saveptr);
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	461a      	mov	r2, r3
 8000f88:	497d      	ldr	r1, [pc, #500]	; (8001180 <telnet_process_command+0x208>)
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f015 fec7 	bl	8016d1e <strtok_r>
 8000f90:	60f8      	str	r0, [r7, #12]

	if (strcasecmp(token, "HELLO") == 0)
 8000f92:	497c      	ldr	r1, [pc, #496]	; (8001184 <telnet_process_command+0x20c>)
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f015 fe5b 	bl	8016c50 <strcasecmp>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d111      	bne.n	8000fc4 <telnet_process_command+0x4c>
	{
		sprintf(s, "Komunikacia OK\n");
 8000fa0:	4a79      	ldr	r2, [pc, #484]	; (8001188 <telnet_process_command+0x210>)
 8000fa2:	4b7a      	ldr	r3, [pc, #488]	; (800118c <telnet_process_command+0x214>)
 8000fa4:	4614      	mov	r4, r2
 8000fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000fac:	4876      	ldr	r0, [pc, #472]	; (8001188 <telnet_process_command+0x210>)
 8000fae:	f7ff f929 	bl	8000204 <strlen>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4973      	ldr	r1, [pc, #460]	; (8001188 <telnet_process_command+0x210>)
 8000fbc:	6838      	ldr	r0, [r7, #0]
 8000fbe:	f007 f91d 	bl	80081fc <netconn_write_partly>
			HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,0);
		}

	}

}
 8000fc2:	e0d8      	b.n	8001176 <telnet_process_command+0x1fe>
	else if (strcasecmp(token, "STATUS") == 0)
 8000fc4:	4972      	ldr	r1, [pc, #456]	; (8001190 <telnet_process_command+0x218>)
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f015 fe42 	bl	8016c50 <strcasecmp>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d158      	bne.n	8001084 <telnet_process_command+0x10c>
		token = strtok_r(cmd, " ",&saveptr);
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4969      	ldr	r1, [pc, #420]	; (8001180 <telnet_process_command+0x208>)
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f015 fe9f 	bl	8016d1e <strtok_r>
 8000fe0:	60f8      	str	r0, [r7, #12]
		if(HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin)==1) strcpy(LED1_status, "Zapnute");
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	486b      	ldr	r0, [pc, #428]	; (8001194 <telnet_process_command+0x21c>)
 8000fe6:	f001 fc51 	bl	800288c <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d106      	bne.n	8000ffe <telnet_process_command+0x86>
 8000ff0:	4b69      	ldr	r3, [pc, #420]	; (8001198 <telnet_process_command+0x220>)
 8000ff2:	4a6a      	ldr	r2, [pc, #424]	; (800119c <telnet_process_command+0x224>)
 8000ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ff8:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ffc:	e005      	b.n	800100a <telnet_process_command+0x92>
		else strcpy(LED1_status, "Vypnute");
 8000ffe:	4b66      	ldr	r3, [pc, #408]	; (8001198 <telnet_process_command+0x220>)
 8001000:	4a67      	ldr	r2, [pc, #412]	; (80011a0 <telnet_process_command+0x228>)
 8001002:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001006:	e883 0003 	stmia.w	r3, {r0, r1}
		if(HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin)==1) strcpy(LED2_status, "Zapnute");
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	4861      	ldr	r0, [pc, #388]	; (8001194 <telnet_process_command+0x21c>)
 800100e:	f001 fc3d 	bl	800288c <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	2b01      	cmp	r3, #1
 8001016:	d106      	bne.n	8001026 <telnet_process_command+0xae>
 8001018:	4b62      	ldr	r3, [pc, #392]	; (80011a4 <telnet_process_command+0x22c>)
 800101a:	4a60      	ldr	r2, [pc, #384]	; (800119c <telnet_process_command+0x224>)
 800101c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001020:	e883 0003 	stmia.w	r3, {r0, r1}
 8001024:	e005      	b.n	8001032 <telnet_process_command+0xba>
		else strcpy(LED2_status, "Vypnute");
 8001026:	4b5f      	ldr	r3, [pc, #380]	; (80011a4 <telnet_process_command+0x22c>)
 8001028:	4a5d      	ldr	r2, [pc, #372]	; (80011a0 <telnet_process_command+0x228>)
 800102a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102e:	e883 0003 	stmia.w	r3, {r0, r1}
		if(HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin)==1) strcpy(LED3_status, "Zapnute");
 8001032:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001036:	4857      	ldr	r0, [pc, #348]	; (8001194 <telnet_process_command+0x21c>)
 8001038:	f001 fc28 	bl	800288c <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b01      	cmp	r3, #1
 8001040:	d106      	bne.n	8001050 <telnet_process_command+0xd8>
 8001042:	4b59      	ldr	r3, [pc, #356]	; (80011a8 <telnet_process_command+0x230>)
 8001044:	4a55      	ldr	r2, [pc, #340]	; (800119c <telnet_process_command+0x224>)
 8001046:	e892 0003 	ldmia.w	r2, {r0, r1}
 800104a:	e883 0003 	stmia.w	r3, {r0, r1}
 800104e:	e005      	b.n	800105c <telnet_process_command+0xe4>
		else strcpy(LED3_status, "Vypnute");
 8001050:	4b55      	ldr	r3, [pc, #340]	; (80011a8 <telnet_process_command+0x230>)
 8001052:	4a53      	ldr	r2, [pc, #332]	; (80011a0 <telnet_process_command+0x228>)
 8001054:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001058:	e883 0003 	stmia.w	r3, {r0, r1}
		sprintf(s, "Status: LED1 %s LED2 %s LED3 %s", LED1_status, LED2_status,LED3_status);
 800105c:	4b52      	ldr	r3, [pc, #328]	; (80011a8 <telnet_process_command+0x230>)
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	4b50      	ldr	r3, [pc, #320]	; (80011a4 <telnet_process_command+0x22c>)
 8001062:	4a4d      	ldr	r2, [pc, #308]	; (8001198 <telnet_process_command+0x220>)
 8001064:	4951      	ldr	r1, [pc, #324]	; (80011ac <telnet_process_command+0x234>)
 8001066:	4848      	ldr	r0, [pc, #288]	; (8001188 <telnet_process_command+0x210>)
 8001068:	f015 fdd2 	bl	8016c10 <siprintf>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 800106c:	4846      	ldr	r0, [pc, #280]	; (8001188 <telnet_process_command+0x210>)
 800106e:	f7ff f8c9 	bl	8000204 <strlen>
 8001072:	4602      	mov	r2, r0
 8001074:	2300      	movs	r3, #0
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2301      	movs	r3, #1
 800107a:	4943      	ldr	r1, [pc, #268]	; (8001188 <telnet_process_command+0x210>)
 800107c:	6838      	ldr	r0, [r7, #0]
 800107e:	f007 f8bd 	bl	80081fc <netconn_write_partly>
}
 8001082:	e078      	b.n	8001176 <telnet_process_command+0x1fe>
	else if (strcasecmp(token, "LED1") == 0)
 8001084:	494a      	ldr	r1, [pc, #296]	; (80011b0 <telnet_process_command+0x238>)
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f015 fde2 	bl	8016c50 <strcasecmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d120      	bne.n	80010d4 <telnet_process_command+0x15c>
		token = strtok_r(cmd, " ",&saveptr);
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	461a      	mov	r2, r3
 8001098:	4939      	ldr	r1, [pc, #228]	; (8001180 <telnet_process_command+0x208>)
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f015 fe3f 	bl	8016d1e <strtok_r>
 80010a0:	60f8      	str	r0, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 80010a2:	4944      	ldr	r1, [pc, #272]	; (80011b4 <telnet_process_command+0x23c>)
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f015 fdd3 	bl	8016c50 <strcasecmp>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d104      	bne.n	80010ba <telnet_process_command+0x142>
			HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,1);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2101      	movs	r1, #1
 80010b4:	4837      	ldr	r0, [pc, #220]	; (8001194 <telnet_process_command+0x21c>)
 80010b6:	f001 fc01 	bl	80028bc <HAL_GPIO_WritePin>
		if (strcasecmp(token, "OFF") == 0)
 80010ba:	493f      	ldr	r1, [pc, #252]	; (80011b8 <telnet_process_command+0x240>)
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f015 fdc7 	bl	8016c50 <strcasecmp>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d156      	bne.n	8001176 <telnet_process_command+0x1fe>
			HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2101      	movs	r1, #1
 80010cc:	4831      	ldr	r0, [pc, #196]	; (8001194 <telnet_process_command+0x21c>)
 80010ce:	f001 fbf5 	bl	80028bc <HAL_GPIO_WritePin>
}
 80010d2:	e050      	b.n	8001176 <telnet_process_command+0x1fe>
	else if (strcasecmp(token, "LED2") == 0)
 80010d4:	4939      	ldr	r1, [pc, #228]	; (80011bc <telnet_process_command+0x244>)
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f015 fdba 	bl	8016c50 <strcasecmp>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d120      	bne.n	8001124 <telnet_process_command+0x1ac>
		token = strtok_r(cmd, " ",&saveptr);
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	461a      	mov	r2, r3
 80010e8:	4925      	ldr	r1, [pc, #148]	; (8001180 <telnet_process_command+0x208>)
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f015 fe17 	bl	8016d1e <strtok_r>
 80010f0:	60f8      	str	r0, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 80010f2:	4930      	ldr	r1, [pc, #192]	; (80011b4 <telnet_process_command+0x23c>)
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f015 fdab 	bl	8016c50 <strcasecmp>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d104      	bne.n	800110a <telnet_process_command+0x192>
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);
 8001100:	2201      	movs	r2, #1
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	4823      	ldr	r0, [pc, #140]	; (8001194 <telnet_process_command+0x21c>)
 8001106:	f001 fbd9 	bl	80028bc <HAL_GPIO_WritePin>
		if (strcasecmp(token, "OFF") == 0)
 800110a:	492b      	ldr	r1, [pc, #172]	; (80011b8 <telnet_process_command+0x240>)
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f015 fd9f 	bl	8016c50 <strcasecmp>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d12e      	bne.n	8001176 <telnet_process_command+0x1fe>
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,0);
 8001118:	2200      	movs	r2, #0
 800111a:	2180      	movs	r1, #128	; 0x80
 800111c:	481d      	ldr	r0, [pc, #116]	; (8001194 <telnet_process_command+0x21c>)
 800111e:	f001 fbcd 	bl	80028bc <HAL_GPIO_WritePin>
}
 8001122:	e028      	b.n	8001176 <telnet_process_command+0x1fe>
	else if (strcasecmp(token, "LED3") == 0)
 8001124:	4926      	ldr	r1, [pc, #152]	; (80011c0 <telnet_process_command+0x248>)
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f015 fd92 	bl	8016c50 <strcasecmp>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d121      	bne.n	8001176 <telnet_process_command+0x1fe>
		token = strtok_r(cmd, " ",&saveptr);
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	461a      	mov	r2, r3
 8001138:	4911      	ldr	r1, [pc, #68]	; (8001180 <telnet_process_command+0x208>)
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f015 fdef 	bl	8016d1e <strtok_r>
 8001140:	60f8      	str	r0, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 8001142:	491c      	ldr	r1, [pc, #112]	; (80011b4 <telnet_process_command+0x23c>)
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f015 fd83 	bl	8016c50 <strcasecmp>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d105      	bne.n	800115c <telnet_process_command+0x1e4>
			HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,1);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001156:	480f      	ldr	r0, [pc, #60]	; (8001194 <telnet_process_command+0x21c>)
 8001158:	f001 fbb0 	bl	80028bc <HAL_GPIO_WritePin>
		if (strcasecmp(token, "OFF") == 0)
 800115c:	4916      	ldr	r1, [pc, #88]	; (80011b8 <telnet_process_command+0x240>)
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f015 fd76 	bl	8016c50 <strcasecmp>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d105      	bne.n	8001176 <telnet_process_command+0x1fe>
			HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,0);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001170:	4808      	ldr	r0, [pc, #32]	; (8001194 <telnet_process_command+0x21c>)
 8001172:	f001 fba3 	bl	80028bc <HAL_GPIO_WritePin>
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	bd90      	pop	{r4, r7, pc}
 800117e:	bf00      	nop
 8001180:	08017ee0 	.word	0x08017ee0
 8001184:	08017ee4 	.word	0x08017ee4
 8001188:	20000464 	.word	0x20000464
 800118c:	08017eec 	.word	0x08017eec
 8001190:	08017efc 	.word	0x08017efc
 8001194:	40020400 	.word	0x40020400
 8001198:	200004c8 	.word	0x200004c8
 800119c:	08017f04 	.word	0x08017f04
 80011a0:	08017f0c 	.word	0x08017f0c
 80011a4:	2000052c 	.word	0x2000052c
 80011a8:	20000590 	.word	0x20000590
 80011ac:	08017f14 	.word	0x08017f14
 80011b0:	08017f34 	.word	0x08017f34
 80011b4:	08017f3c 	.word	0x08017f3c
 80011b8:	08017f40 	.word	0x08017f40
 80011bc:	08017f44 	.word	0x08017f44
 80011c0:	08017f4c 	.word	0x08017f4c

080011c4 <telnet_byte_available>:

static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <telnet_byte_available+0x64>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	2b63      	cmp	r3, #99	; 0x63
 80011d6:	d810      	bhi.n	80011fa <telnet_byte_available+0x36>
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b1f      	cmp	r3, #31
 80011dc:	d90d      	bls.n	80011fa <telnet_byte_available+0x36>
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db09      	blt.n	80011fa <telnet_byte_available+0x36>
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <telnet_byte_available+0x64>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	b291      	uxth	r1, r2
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <telnet_byte_available+0x64>)
 80011f0:	8011      	strh	r1, [r2, #0]
 80011f2:	4619      	mov	r1, r3
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <telnet_byte_available+0x68>)
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r') {
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b0a      	cmp	r3, #10
 80011fe:	d002      	beq.n	8001206 <telnet_byte_available+0x42>
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b0d      	cmp	r3, #13
 8001204:	d10c      	bne.n	8001220 <telnet_byte_available+0x5c>
		data[cnt] = '\0';
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <telnet_byte_available+0x64>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <telnet_byte_available+0x68>)
 800120e:	2100      	movs	r1, #0
 8001210:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 8001212:	6839      	ldr	r1, [r7, #0]
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <telnet_byte_available+0x68>)
 8001216:	f7ff feaf 	bl	8000f78 <telnet_process_command>
		cnt = 0;
 800121a:	4b03      	ldr	r3, [pc, #12]	; (8001228 <telnet_byte_available+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	801a      	strh	r2, [r3, #0]
	}
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200005f4 	.word	0x200005f4
 800122c:	200005f8 	.word	0x200005f8

08001230 <telnet_thread>:


static void telnet_thread(void *arg)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	u16_t len;

	LWIP_UNUSED_ARG(arg);

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	2010      	movs	r0, #16
 800123e:	f006 fd13 	bl	8007c68 <netconn_new_with_proto_and_callback>
 8001242:	61f8      	str	r0, [r7, #28]

	if (conn!=NULL)
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d055      	beq.n	80012f6 <telnet_thread+0xc6>
	{
		/* Bind connection to well known port number 7. */
		err = netconn_bind(conn, NULL, 23);
 800124a:	2217      	movs	r2, #23
 800124c:	2100      	movs	r1, #0
 800124e:	69f8      	ldr	r0, [r7, #28]
 8001250:	f006 fdaa 	bl	8007da8 <netconn_bind>
 8001254:	4603      	mov	r3, r0
 8001256:	76fb      	strb	r3, [r7, #27]

		if (err == ERR_OK)
 8001258:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d146      	bne.n	80012ee <telnet_thread+0xbe>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8001260:	21ff      	movs	r1, #255	; 0xff
 8001262:	69f8      	ldr	r0, [r7, #28]
 8001264:	f006 fdd8 	bl	8007e18 <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	69f8      	ldr	r0, [r7, #28]
 8001270:	f006 fdfe 	bl	8007e70 <netconn_accept>
 8001274:	4603      	mov	r3, r0
 8001276:	76bb      	strb	r3, [r7, #26]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 8001278:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f3      	bne.n	8001268 <telnet_thread+0x38>
				{

					while (netconn_recv(newconn, &buf) == ERR_OK)
 8001280:	e022      	b.n	80012c8 <telnet_thread+0x98>
					{
						do
						{

							netbuf_data(buf, (void**)&data, &len);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	f107 020a 	add.w	r2, r7, #10
 8001288:	f107 010c 	add.w	r1, r7, #12
 800128c:	4618      	mov	r0, r3
 800128e:	f008 fcb9 	bl	8009c04 <netbuf_data>
							while (len--) telnet_byte_available((uintptr_t)data++, newconn);
 8001292:	e008      	b.n	80012a6 <telnet_thread+0x76>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	60fa      	str	r2, [r7, #12]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff8f 	bl	80011c4 <telnet_byte_available>
 80012a6:	897b      	ldrh	r3, [r7, #10]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	b292      	uxth	r2, r2
 80012ac:	817a      	strh	r2, [r7, #10]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <telnet_thread+0x64>

						}
						while (netbuf_next(buf) >= 0);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f008 fcef 	bl	8009c98 <netbuf_next>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	dae0      	bge.n	8001282 <telnet_thread+0x52>

						netbuf_delete(buf);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f008 fc7e 	bl	8009bc4 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f107 0210 	add.w	r2, r7, #16
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f006 ff1b 	bl	800810c <netconn_recv>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0d2      	beq.n	8001282 <telnet_thread+0x52>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	4618      	mov	r0, r3
 80012e0:	f007 f834 	bl	800834c <netconn_close>
					netconn_delete(newconn);
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f006 fd38 	bl	8007d5c <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 80012ec:	e7bc      	b.n	8001268 <telnet_thread+0x38>
				}
			}
		}
		else
		{
			netconn_delete(newconn);
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f006 fd33 	bl	8007d5c <netconn_delete>
		}
	}
}
 80012f6:	bf00      	nop
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af02      	add	r7, sp, #8
	sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
 8001306:	2304      	movs	r3, #4
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130e:	2200      	movs	r2, #0
 8001310:	4903      	ldr	r1, [pc, #12]	; (8001320 <telnet_init+0x20>)
 8001312:	4804      	ldr	r0, [pc, #16]	; (8001324 <telnet_init+0x24>)
 8001314:	f015 fba6 	bl	8016a64 <sys_thread_new>
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	08001231 	.word	0x08001231
 8001324:	08017f54 	.word	0x08017f54

08001328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001360 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800132c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800132e:	e003      	b.n	8001338 <LoopCopyDataInit>

08001330 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001332:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001334:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001336:	3104      	adds	r1, #4

08001338 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800133c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800133e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001340:	d3f6      	bcc.n	8001330 <CopyDataInit>
  ldr  r2, =_sbss
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001344:	e002      	b.n	800134c <LoopFillZerobss>

08001346 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001346:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001348:	f842 3b04 	str.w	r3, [r2], #4

0800134c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800134e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001350:	d3f9      	bcc.n	8001346 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001352:	f7ff fd87 	bl	8000e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001356:	f015 fbc9 	bl	8016aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135a:	f7ff f9d9 	bl	8000710 <main>
  bx  lr    
 800135e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001360:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001364:	080264a8 	.word	0x080264a8
  ldr  r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800136c:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8001370:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8001374:	2000fb20 	.word	0x2000fb20

08001378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC_IRQHandler>
	...

0800137c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_Init+0x40>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <HAL_Init+0x40>)
 8001386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800138a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_Init+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <HAL_Init+0x40>)
 8001392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_Init+0x40>)
 800139e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 f8fa 	bl	800159e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fc40 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff fb70 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023c00 	.word	0x40023c00

080013c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_IncTick+0x20>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x24>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <HAL_IncTick+0x24>)
 80013d2:	6013      	str	r3, [r2, #0]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20009224 	.word	0x20009224

080013e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_GetTick+0x14>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20009224 	.word	0x20009224

08001400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001408:	f7ff ffee 	bl	80013e8 <HAL_GetTick>
 800140c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001418:	d005      	beq.n	8001426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_Delay+0x40>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001426:	bf00      	nop
 8001428:	f7ff ffde 	bl	80013e8 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	429a      	cmp	r2, r3
 8001436:	d8f7      	bhi.n	8001428 <HAL_Delay+0x28>
  {
  }
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000008 	.word	0x20000008

08001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800146c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	; (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	; (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
         );
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ff4c 	bl	8001444 <__NVIC_SetPriorityGrouping>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c6:	f7ff ff61 	bl	800148c <__NVIC_GetPriorityGrouping>
 80015ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	68b9      	ldr	r1, [r7, #8]
 80015d0:	6978      	ldr	r0, [r7, #20]
 80015d2:	f7ff ffb1 	bl	8001538 <NVIC_EncodePriority>
 80015d6:	4602      	mov	r2, r0
 80015d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff80 	bl	80014e4 <__NVIC_SetPriority>
}
 80015e4:	bf00      	nop
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff54 	bl	80014a8 <__NVIC_EnableIRQ>
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001618:	4baa      	ldr	r3, [pc, #680]	; (80018c4 <HAL_ETH_Init+0x2bc>)
 800161a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e185      	b.n	800193a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f003 f80a 	bl	800465c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	4b9e      	ldr	r3, [pc, #632]	; (80018c8 <HAL_ETH_Init+0x2c0>)
 800164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001650:	4a9d      	ldr	r2, [pc, #628]	; (80018c8 <HAL_ETH_Init+0x2c0>)
 8001652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001656:	6453      	str	r3, [r2, #68]	; 0x44
 8001658:	4b9b      	ldr	r3, [pc, #620]	; (80018c8 <HAL_ETH_Init+0x2c0>)
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001664:	4b99      	ldr	r3, [pc, #612]	; (80018cc <HAL_ETH_Init+0x2c4>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4a98      	ldr	r2, [pc, #608]	; (80018cc <HAL_ETH_Init+0x2c4>)
 800166a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800166e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001670:	4b96      	ldr	r3, [pc, #600]	; (80018cc <HAL_ETH_Init+0x2c4>)
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4994      	ldr	r1, [pc, #592]	; (80018cc <HAL_ETH_Init+0x2c4>)
 800167a:	4313      	orrs	r3, r2
 800167c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0201 	orr.w	r2, r2, #1
 8001690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001694:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001696:	f7ff fea7 	bl	80013e8 <HAL_GetTick>
 800169a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800169c:	e011      	b.n	80016c2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800169e:	f7ff fea3 	bl	80013e8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016ac:	d909      	bls.n	80016c2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2203      	movs	r2, #3
 80016b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e13b      	b.n	800193a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1e4      	bne.n	800169e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f023 031c 	bic.w	r3, r3, #28
 80016e2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80016e4:	f001 fe4e 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80016e8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4a78      	ldr	r2, [pc, #480]	; (80018d0 <HAL_ETH_Init+0x2c8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d908      	bls.n	8001704 <HAL_ETH_Init+0xfc>
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4a77      	ldr	r2, [pc, #476]	; (80018d4 <HAL_ETH_Init+0x2cc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d804      	bhi.n	8001704 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f043 0308 	orr.w	r3, r3, #8
 8001700:	61fb      	str	r3, [r7, #28]
 8001702:	e027      	b.n	8001754 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	4a73      	ldr	r2, [pc, #460]	; (80018d4 <HAL_ETH_Init+0x2cc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d908      	bls.n	800171e <HAL_ETH_Init+0x116>
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	4a72      	ldr	r2, [pc, #456]	; (80018d8 <HAL_ETH_Init+0x2d0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d804      	bhi.n	800171e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f043 030c 	orr.w	r3, r3, #12
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	e01a      	b.n	8001754 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4a6d      	ldr	r2, [pc, #436]	; (80018d8 <HAL_ETH_Init+0x2d0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d903      	bls.n	800172e <HAL_ETH_Init+0x126>
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4a6c      	ldr	r2, [pc, #432]	; (80018dc <HAL_ETH_Init+0x2d4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d911      	bls.n	8001752 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4a6a      	ldr	r2, [pc, #424]	; (80018dc <HAL_ETH_Init+0x2d4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d908      	bls.n	8001748 <HAL_ETH_Init+0x140>
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4a69      	ldr	r2, [pc, #420]	; (80018e0 <HAL_ETH_Init+0x2d8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d804      	bhi.n	8001748 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	e005      	b.n	8001754 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f043 0310 	orr.w	r3, r3, #16
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	e000      	b.n	8001754 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001752:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800175c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001760:	2100      	movs	r1, #0
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fb9e 	bl	8001ea4 <HAL_ETH_WritePHYRegister>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00b      	beq.n	8001786 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001772:	6939      	ldr	r1, [r7, #16]
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fc2b 	bl	8001fd0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e0d9      	b.n	800193a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001786:	20ff      	movs	r0, #255	; 0xff
 8001788:	f7ff fe3a 	bl	8001400 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a7 	beq.w	80018e4 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001796:	f7ff fe27 	bl	80013e8 <HAL_GetTick>
 800179a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	461a      	mov	r2, r3
 80017a2:	2101      	movs	r1, #1
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 fb15 	bl	8001dd4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80017aa:	f7ff fe1d 	bl	80013e8 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d90f      	bls.n	80017dc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80017c0:	6939      	ldr	r1, [r7, #16]
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fc04 	bl	8001fd0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e0ae      	b.n	800193a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0da      	beq.n	800179c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80017e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ea:	2100      	movs	r1, #0
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 fb59 	bl	8001ea4 <HAL_ETH_WritePHYRegister>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00b      	beq.n	8001810 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017fc:	6939      	ldr	r1, [r7, #16]
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 fbe6 	bl	8001fd0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800180c:	2301      	movs	r3, #1
 800180e:	e094      	b.n	800193a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001810:	f7ff fdea 	bl	80013e8 <HAL_GetTick>
 8001814:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	461a      	mov	r2, r3
 800181c:	2101      	movs	r1, #1
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fad8 	bl	8001dd4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001824:	f7ff fde0 	bl	80013e8 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d90f      	bls.n	8001856 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800183a:	6939      	ldr	r1, [r7, #16]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 fbc7 	bl	8001fd0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e071      	b.n	800193a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f003 0320 	and.w	r3, r3, #32
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0da      	beq.n	8001816 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	461a      	mov	r2, r3
 8001866:	211f      	movs	r1, #31
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 fab3 	bl	8001dd4 <HAL_ETH_ReadPHYRegister>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00b      	beq.n	800188c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001878:	6939      	ldr	r1, [r7, #16]
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 fba8 	bl	8001fd0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001888:	2301      	movs	r3, #1
 800188a:	e056      	b.n	800193a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	2b00      	cmp	r3, #0
 8001894:	d004      	beq.n	80018a0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	e002      	b.n	80018a6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	e037      	b.n	8001928 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	e032      	b.n	8001928 <HAL_ETH_Init+0x320>
 80018c2:	bf00      	nop
 80018c4:	03938700 	.word	0x03938700
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40013800 	.word	0x40013800
 80018d0:	01312cff 	.word	0x01312cff
 80018d4:	02160ebf 	.word	0x02160ebf
 80018d8:	039386ff 	.word	0x039386ff
 80018dc:	05f5e0ff 	.word	0x05f5e0ff
 80018e0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	08db      	lsrs	r3, r3, #3
 80018ea:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	085b      	lsrs	r3, r3, #1
 80018f2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	2100      	movs	r1, #0
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 fad1 	bl	8001ea4 <HAL_ETH_WritePHYRegister>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00b      	beq.n	8001920 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800190c:	6939      	ldr	r1, [r7, #16]
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fb5e 	bl	8001fd0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e00c      	b.n	800193a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001920:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001924:	f7ff fd6c 	bl	8001400 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001928:	6939      	ldr	r1, [r7, #16]
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 fb50 	bl	8001fd0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3720      	adds	r7, #32
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop

08001944 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_ETH_DMATxDescListInit+0x20>
 8001960:	2302      	movs	r3, #2
 8001962:	e052      	b.n	8001a0a <HAL_ETH_DMATxDescListInit+0xc6>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e030      	b.n	80019e2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	015b      	lsls	r3, r3, #5
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	4413      	add	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001990:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001998:	fb02 f303 	mul.w	r3, r2, r3
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d105      	bne.n	80019ba <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	3b01      	subs	r3, #1
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d208      	bcs.n	80019d6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	015b      	lsls	r3, r3, #5
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	4413      	add	r3, r2
 80019ce:	461a      	mov	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	e002      	b.n	80019dc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3301      	adds	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d3ca      	bcc.n	8001980 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f4:	3310      	adds	r3, #16
 80019f6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b087      	sub	sp, #28
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_ETH_DMARxDescListInit+0x20>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e056      	b.n	8001ae4 <HAL_ETH_DMARxDescListInit+0xce>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2202      	movs	r2, #2
 8001a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e034      	b.n	8001abc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	015b      	lsls	r3, r3, #5
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	4413      	add	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a62:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001a6a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d208      	bcs.n	8001ab0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	015b      	lsls	r3, r3, #5
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	e002      	b.n	8001ab6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d3c6      	bcc.n	8001a52 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ace:	330c      	adds	r3, #12
 8001ad0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	371c      	adds	r7, #28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_ETH_TransmitFrame+0x24>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e0cd      	b.n	8001cb0 <HAL_ETH_TransmitFrame+0x1c0>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0b8      	b.n	8001cb0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	da09      	bge.n	8001b5c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2212      	movs	r2, #18
 8001b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0a9      	b.n	8001cb0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d915      	bls.n	8001b92 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	4a54      	ldr	r2, [pc, #336]	; (8001cbc <HAL_ETH_TransmitFrame+0x1cc>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0a9b      	lsrs	r3, r3, #10
 8001b70:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <HAL_ETH_TransmitFrame+0x1cc>)
 8001b76:	fba3 1302 	umull	r1, r3, r3, r2
 8001b7a:	0a9b      	lsrs	r3, r3, #10
 8001b7c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e001      	b.n	8001b96 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001b92:	2301      	movs	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d11c      	bne.n	8001bd6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001baa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001bb6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bc6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bd4:	e04b      	b.n	8001c6e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	e044      	b.n	8001c66 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bea:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d107      	bne.n	8001c02 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c00:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c0a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d116      	bne.n	8001c44 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001c24:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	4a25      	ldr	r2, [pc, #148]	; (8001cc0 <HAL_ETH_TransmitFrame+0x1d0>)
 8001c2a:	fb02 f203 	mul.w	r2, r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001c36:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001c42:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c52:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	3301      	adds	r3, #1
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3b6      	bcc.n	8001bdc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c76:	3314      	adds	r3, #20
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00d      	beq.n	8001c9e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c8a:	3314      	adds	r3, #20
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	ac02b00b 	.word	0xac02b00b
 8001cc0:	fffffa0c 	.word	0xfffffa0c

08001cc4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e074      	b.n	8001dc8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001cee:	e05a      	b.n	8001da6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d04:	d10d      	bne.n	8001d22 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8001d20:	e041      	b.n	8001da6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10b      	bne.n	8001d48 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	461a      	mov	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	629a      	str	r2, [r3, #40]	; 0x28
 8001d46:	e02e      	b.n	8001da6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d103      	bne.n	8001d6a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0c1b      	lsrs	r3, r3, #16
 8001d72:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001d76:	1f1a      	subs	r2, r3, #4
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e010      	b.n	8001dc8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db02      	blt.n	8001db6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d99c      	bls.n	8001cf0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b82      	cmp	r3, #130	; 0x82
 8001df4:	d101      	bne.n	8001dfa <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001df6:	2302      	movs	r3, #2
 8001df8:	e050      	b.n	8001e9c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2282      	movs	r2, #130	; 0x82
 8001dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 031c 	and.w	r3, r3, #28
 8001e10:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8a1b      	ldrh	r3, [r3, #16]
 8001e16:	02db      	lsls	r3, r3, #11
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001e20:	897b      	ldrh	r3, [r7, #10]
 8001e22:	019b      	lsls	r3, r3, #6
 8001e24:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f023 0302 	bic.w	r3, r3, #2
 8001e34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e46:	f7ff facf 	bl	80013e8 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e4c:	e015      	b.n	8001e7a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001e4e:	f7ff facb 	bl	80013e8 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5c:	d309      	bcc.n	8001e72 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e014      	b.n	8001e9c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1e4      	bne.n	8001e4e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	460b      	mov	r3, r1
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b42      	cmp	r3, #66	; 0x42
 8001ec4:	d101      	bne.n	8001eca <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e04e      	b.n	8001f68 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2242      	movs	r2, #66	; 0x42
 8001ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 031c 	and.w	r3, r3, #28
 8001ee0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8a1b      	ldrh	r3, [r3, #16]
 8001ee6:	02db      	lsls	r3, r3, #11
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001ef0:	897b      	ldrh	r3, [r7, #10]
 8001ef2:	019b      	lsls	r3, r3, #6
 8001ef4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f20:	f7ff fa62 	bl	80013e8 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f26:	e015      	b.n	8001f54 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001f28:	f7ff fa5e 	bl	80013e8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f36:	d309      	bcc.n	8001f4c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e00d      	b.n	8001f68 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1e4      	bne.n	8001f28 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_ETH_Start+0x16>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e01f      	b.n	8001fc6 <HAL_ETH_Start+0x56>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fa1c 	bl	80023d4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 fa36 	bl	800240e <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fa80 	bl	80024a8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fa4d 	bl	8002448 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fa62 	bl	8002478 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b0b0      	sub	sp, #192	; 0xc0
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d007      	beq.n	8001ff6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fec:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ff4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001ffe:	2300      	movs	r3, #0
 8002000:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201a:	663b      	str	r3, [r7, #96]	; 0x60
 800201c:	e001      	b.n	8002022 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002026:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800202c:	2300      	movs	r3, #0
 800202e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800203c:	2340      	movs	r3, #64	; 0x40
 800203e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80020a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a8:	4bac      	ldr	r3, [pc, #688]	; (800235c <ETH_MACDMAConfig+0x38c>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80020b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80020b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80020b4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80020b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80020b8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80020ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80020bc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80020c2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80020c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80020c6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80020c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80020ca:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80020d0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80020d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80020d4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80020d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80020d8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80020da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80020dc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80020de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80020e0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80020e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80020e4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80020e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002104:	2001      	movs	r0, #1
 8002106:	f7ff f97b 	bl	8001400 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002112:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002114:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002118:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800211a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800211c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800211e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002122:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002124:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002128:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800212a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800212e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002134:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002138:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002140:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002142:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800214e:	2001      	movs	r0, #1
 8002150:	f7ff f956 	bl	8001400 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800215c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002166:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002170:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800217c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002180:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002184:	4013      	ands	r3, r2
 8002186:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800218a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800218e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002190:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002194:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800219a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800219c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80021a0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80021a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80021a6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80021a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80021ac:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80021ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f7ff f917 	bl	8001400 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021da:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80021dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80021e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f6:	2001      	movs	r0, #1
 80021f8:	f7ff f902 	bl	8001400 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002204:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800220a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800220e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002214:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002218:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800222a:	2304      	movs	r3, #4
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800222e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800223a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002244:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800224a:	2300      	movs	r3, #0
 800224c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800224e:	2300      	movs	r3, #0
 8002250:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225a:	3318      	adds	r3, #24
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002262:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002266:	4b3e      	ldr	r3, [pc, #248]	; (8002360 <ETH_MACDMAConfig+0x390>)
 8002268:	4013      	ands	r3, r2
 800226a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800226e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002270:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002272:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002274:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002276:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002278:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800227a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800227c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800227e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002280:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002282:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002284:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002286:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800228a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800228e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002290:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a2:	3318      	adds	r3, #24
 80022a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b2:	3318      	adds	r3, #24
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7ff f8a0 	bl	8001400 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c8:	3318      	adds	r3, #24
 80022ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ce:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022d4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80022d8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80022da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022dc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80022de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80022e0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80022e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80022e6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80022e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80022ea:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002308:	2001      	movs	r0, #1
 800230a:	f7ff f879 	bl	8001400 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002316:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800231a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d10f      	bne.n	8002344 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232c:	331c      	adds	r3, #28
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800233c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002340:	331c      	adds	r3, #28
 8002342:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	461a      	mov	r2, r3
 800234a:	2100      	movs	r1, #0
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f809 	bl	8002364 <ETH_MACAddressConfig>
}
 8002352:	bf00      	nop
 8002354:	37c0      	adds	r7, #192	; 0xc0
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	ff20810f 	.word	0xff20810f
 8002360:	f8de3f23 	.word	0xf8de3f23

08002364 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3305      	adds	r3, #5
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	3204      	adds	r2, #4
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <ETH_MACAddressConfig+0x68>)
 8002386:	4413      	add	r3, r2
 8002388:	461a      	mov	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3303      	adds	r3, #3
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	061a      	lsls	r2, r3, #24
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3302      	adds	r3, #2
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3301      	adds	r3, #1
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	4313      	orrs	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	7812      	ldrb	r2, [r2, #0]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <ETH_MACAddressConfig+0x6c>)
 80023b6:	4413      	add	r3, r2
 80023b8:	461a      	mov	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	6013      	str	r3, [r2, #0]
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40028040 	.word	0x40028040
 80023d0:	40028044 	.word	0x40028044

080023d4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0208 	orr.w	r2, r2, #8
 80023ee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023f8:	2001      	movs	r0, #1
 80023fa:	f000 f87f 	bl	80024fc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	601a      	str	r2, [r3, #0]
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0204 	orr.w	r2, r2, #4
 8002428:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002432:	2001      	movs	r0, #1
 8002434:	f000 f862 	bl	80024fc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	601a      	str	r2, [r3, #0]
}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002458:	3318      	adds	r3, #24
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002468:	3318      	adds	r3, #24
 800246a:	601a      	str	r2, [r3, #0]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002488:	3318      	adds	r3, #24
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0202 	orr.w	r2, r2, #2
 8002494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002498:	3318      	adds	r3, #24
 800249a:	601a      	str	r2, [r3, #0]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024bc:	3318      	adds	r3, #24
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024cc:	3318      	adds	r3, #24
 80024ce:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d8:	3318      	adds	r3, #24
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024de:	2001      	movs	r0, #1
 80024e0:	f000 f80c 	bl	80024fc <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ee:	3318      	adds	r3, #24
 80024f0:	601a      	str	r2, [r3, #0]
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <ETH_Delay+0x34>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <ETH_Delay+0x38>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0a5b      	lsrs	r3, r3, #9
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002518:	bf00      	nop
  } 
  while (Delay --);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1e5a      	subs	r2, r3, #1
 800251e:	60fa      	str	r2, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f9      	bne.n	8002518 <ETH_Delay+0x1c>
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	20000000 	.word	0x20000000
 8002534:	10624dd3 	.word	0x10624dd3

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e177      	b.n	8002844 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002554:	2201      	movs	r2, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	f040 8166 	bne.w	800283e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d00b      	beq.n	8002592 <HAL_GPIO_Init+0x5a>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d007      	beq.n	8002592 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002586:	2b11      	cmp	r3, #17
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b12      	cmp	r3, #18
 8002590:	d130      	bne.n	80025f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c8:	2201      	movs	r2, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 0201 	and.w	r2, r3, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0xfc>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b12      	cmp	r3, #18
 8002632:	d123      	bne.n	800267c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	08da      	lsrs	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3208      	adds	r2, #8
 800263c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	08da      	lsrs	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3208      	adds	r2, #8
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80c0 	beq.w	800283e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b65      	ldr	r3, [pc, #404]	; (8002858 <HAL_GPIO_Init+0x320>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a64      	ldr	r2, [pc, #400]	; (8002858 <HAL_GPIO_Init+0x320>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b62      	ldr	r3, [pc, #392]	; (8002858 <HAL_GPIO_Init+0x320>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026da:	4a60      	ldr	r2, [pc, #384]	; (800285c <HAL_GPIO_Init+0x324>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3302      	adds	r3, #2
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a57      	ldr	r2, [pc, #348]	; (8002860 <HAL_GPIO_Init+0x328>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d037      	beq.n	8002776 <HAL_GPIO_Init+0x23e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a56      	ldr	r2, [pc, #344]	; (8002864 <HAL_GPIO_Init+0x32c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d031      	beq.n	8002772 <HAL_GPIO_Init+0x23a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a55      	ldr	r2, [pc, #340]	; (8002868 <HAL_GPIO_Init+0x330>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d02b      	beq.n	800276e <HAL_GPIO_Init+0x236>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a54      	ldr	r2, [pc, #336]	; (800286c <HAL_GPIO_Init+0x334>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d025      	beq.n	800276a <HAL_GPIO_Init+0x232>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a53      	ldr	r2, [pc, #332]	; (8002870 <HAL_GPIO_Init+0x338>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d01f      	beq.n	8002766 <HAL_GPIO_Init+0x22e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a52      	ldr	r2, [pc, #328]	; (8002874 <HAL_GPIO_Init+0x33c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d019      	beq.n	8002762 <HAL_GPIO_Init+0x22a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a51      	ldr	r2, [pc, #324]	; (8002878 <HAL_GPIO_Init+0x340>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_GPIO_Init+0x226>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a50      	ldr	r2, [pc, #320]	; (800287c <HAL_GPIO_Init+0x344>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00d      	beq.n	800275a <HAL_GPIO_Init+0x222>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4f      	ldr	r2, [pc, #316]	; (8002880 <HAL_GPIO_Init+0x348>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d007      	beq.n	8002756 <HAL_GPIO_Init+0x21e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4e      	ldr	r2, [pc, #312]	; (8002884 <HAL_GPIO_Init+0x34c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d101      	bne.n	8002752 <HAL_GPIO_Init+0x21a>
 800274e:	2309      	movs	r3, #9
 8002750:	e012      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002752:	230a      	movs	r3, #10
 8002754:	e010      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002756:	2308      	movs	r3, #8
 8002758:	e00e      	b.n	8002778 <HAL_GPIO_Init+0x240>
 800275a:	2307      	movs	r3, #7
 800275c:	e00c      	b.n	8002778 <HAL_GPIO_Init+0x240>
 800275e:	2306      	movs	r3, #6
 8002760:	e00a      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002762:	2305      	movs	r3, #5
 8002764:	e008      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002766:	2304      	movs	r3, #4
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x240>
 800276a:	2303      	movs	r3, #3
 800276c:	e004      	b.n	8002778 <HAL_GPIO_Init+0x240>
 800276e:	2302      	movs	r3, #2
 8002770:	e002      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002776:	2300      	movs	r3, #0
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	f002 0203 	and.w	r2, r2, #3
 800277e:	0092      	lsls	r2, r2, #2
 8002780:	4093      	lsls	r3, r2
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002788:	4934      	ldr	r1, [pc, #208]	; (800285c <HAL_GPIO_Init+0x324>)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	089b      	lsrs	r3, r3, #2
 800278e:	3302      	adds	r3, #2
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002796:	4b3c      	ldr	r3, [pc, #240]	; (8002888 <HAL_GPIO_Init+0x350>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ba:	4a33      	ldr	r2, [pc, #204]	; (8002888 <HAL_GPIO_Init+0x350>)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027c0:	4b31      	ldr	r3, [pc, #196]	; (8002888 <HAL_GPIO_Init+0x350>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e4:	4a28      	ldr	r2, [pc, #160]	; (8002888 <HAL_GPIO_Init+0x350>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ea:	4b27      	ldr	r3, [pc, #156]	; (8002888 <HAL_GPIO_Init+0x350>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800280e:	4a1e      	ldr	r2, [pc, #120]	; (8002888 <HAL_GPIO_Init+0x350>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002814:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <HAL_GPIO_Init+0x350>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002838:	4a13      	ldr	r2, [pc, #76]	; (8002888 <HAL_GPIO_Init+0x350>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3301      	adds	r3, #1
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b0f      	cmp	r3, #15
 8002848:	f67f ae84 	bls.w	8002554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800284c:	bf00      	nop
 800284e:	3724      	adds	r7, #36	; 0x24
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40023800 	.word	0x40023800
 800285c:	40013800 	.word	0x40013800
 8002860:	40020000 	.word	0x40020000
 8002864:	40020400 	.word	0x40020400
 8002868:	40020800 	.word	0x40020800
 800286c:	40020c00 	.word	0x40020c00
 8002870:	40021000 	.word	0x40021000
 8002874:	40021400 	.word	0x40021400
 8002878:	40021800 	.word	0x40021800
 800287c:	40021c00 	.word	0x40021c00
 8002880:	40022000 	.word	0x40022000
 8002884:	40022400 	.word	0x40022400
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e001      	b.n	80028ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d8:	e003      	b.n	80028e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f0:	b08f      	sub	sp, #60	; 0x3c
 80028f2:	af0a      	add	r7, sp, #40	; 0x28
 80028f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e10f      	b.n	8002b20 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe f92e 	bl	8000b7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2203      	movs	r2, #3
 8002924:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f001 fbef 	bl	8004122 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	687e      	ldr	r6, [r7, #4]
 800294c:	466d      	mov	r5, sp
 800294e:	f106 0410 	add.w	r4, r6, #16
 8002952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800295a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800295e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002962:	1d33      	adds	r3, r6, #4
 8002964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002966:	6838      	ldr	r0, [r7, #0]
 8002968:	f001 fb7a 	bl	8004060 <USB_CoreInit>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2202      	movs	r2, #2
 8002976:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0d0      	b.n	8002b20 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f001 fbdd 	bl	8004144 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
 800298e:	e04a      	b.n	8002a26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	333d      	adds	r3, #61	; 0x3d
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	333c      	adds	r3, #60	; 0x3c
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	b298      	uxth	r0, r3
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3342      	adds	r3, #66	; 0x42
 80029cc:	4602      	mov	r2, r0
 80029ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	333f      	adds	r3, #63	; 0x3f
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	3344      	adds	r3, #68	; 0x44
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	3348      	adds	r3, #72	; 0x48
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	3350      	adds	r3, #80	; 0x50
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	3301      	adds	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d3af      	bcc.n	8002990 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	e044      	b.n	8002ac0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	3301      	adds	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d3b5      	bcc.n	8002a36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	687e      	ldr	r6, [r7, #4]
 8002ad2:	466d      	mov	r5, sp
 8002ad4:	f106 0410 	add.w	r4, r6, #16
 8002ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ade:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ae4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ae8:	1d33      	adds	r3, r6, #4
 8002aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aec:	6838      	ldr	r0, [r7, #0]
 8002aee:	f001 fb53 	bl	8004198 <USB_DevInit>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e00d      	b.n	8002b20 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f001 fd10 	bl	800453e <USB_DevDisconnect>

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e25b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d075      	beq.n	8002c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b46:	4ba3      	ldr	r3, [pc, #652]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d00c      	beq.n	8002b6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b52:	4ba0      	ldr	r3, [pc, #640]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d112      	bne.n	8002b84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5e:	4b9d      	ldr	r3, [pc, #628]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	4b99      	ldr	r3, [pc, #612]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d05b      	beq.n	8002c30 <HAL_RCC_OscConfig+0x108>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d157      	bne.n	8002c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e236      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCC_OscConfig+0x74>
 8002b8e:	4b91      	ldr	r3, [pc, #580]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a90      	ldr	r2, [pc, #576]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e01d      	b.n	8002bd8 <HAL_RCC_OscConfig+0xb0>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x98>
 8002ba6:	4b8b      	ldr	r3, [pc, #556]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a8a      	ldr	r2, [pc, #552]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b88      	ldr	r3, [pc, #544]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a87      	ldr	r2, [pc, #540]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_RCC_OscConfig+0xb0>
 8002bc0:	4b84      	ldr	r3, [pc, #528]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a83      	ldr	r2, [pc, #524]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	4b81      	ldr	r3, [pc, #516]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a80      	ldr	r2, [pc, #512]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe fc02 	bl	80013e8 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fe fbfe 	bl	80013e8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e1fb      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0xc0>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fbee 	bl	80013e8 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fe fbea 	bl	80013e8 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1e7      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	4b6c      	ldr	r3, [pc, #432]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0xe8>
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d063      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c3e:	4b65      	ldr	r3, [pc, #404]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4a:	4b62      	ldr	r3, [pc, #392]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d11c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c56:	4b5f      	ldr	r3, [pc, #380]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d116      	bne.n	8002c90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c62:	4b5c      	ldr	r3, [pc, #368]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_RCC_OscConfig+0x152>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e1bb      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7a:	4b56      	ldr	r3, [pc, #344]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4952      	ldr	r1, [pc, #328]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	e03a      	b.n	8002d06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c98:	4b4f      	ldr	r3, [pc, #316]	; (8002dd8 <HAL_RCC_OscConfig+0x2b0>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fba3 	bl	80013e8 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7fe fb9f 	bl	80013e8 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e19c      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc4:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4940      	ldr	r1, [pc, #256]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cda:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <HAL_RCC_OscConfig+0x2b0>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fb82 	bl	80013e8 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce8:	f7fe fb7e 	bl	80013e8 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e17b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d030      	beq.n	8002d74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d016      	beq.n	8002d48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1a:	4b30      	ldr	r3, [pc, #192]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7fe fb62 	bl	80013e8 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d28:	f7fe fb5e 	bl	80013e8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e15b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x200>
 8002d46:	e015      	b.n	8002d74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d48:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fb4b 	bl	80013e8 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d56:	f7fe fb47 	bl	80013e8 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e144      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d68:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f0      	bne.n	8002d56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80a0 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da0:	6413      	str	r3, [r2, #64]	; 0x40
 8002da2:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dae:	2301      	movs	r3, #1
 8002db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_OscConfig+0x2b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d121      	bne.n	8002e02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_RCC_OscConfig+0x2b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <HAL_RCC_OscConfig+0x2b8>)
 8002dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dca:	f7fe fb0d 	bl	80013e8 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd0:	e011      	b.n	8002df6 <HAL_RCC_OscConfig+0x2ce>
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	42470000 	.word	0x42470000
 8002ddc:	42470e80 	.word	0x42470e80
 8002de0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de4:	f7fe fb00 	bl	80013e8 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e0fd      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b81      	ldr	r3, [pc, #516]	; (8002ffc <HAL_RCC_OscConfig+0x4d4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d106      	bne.n	8002e18 <HAL_RCC_OscConfig+0x2f0>
 8002e0a:	4b7d      	ldr	r3, [pc, #500]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a7c      	ldr	r2, [pc, #496]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
 8002e16:	e01c      	b.n	8002e52 <HAL_RCC_OscConfig+0x32a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b05      	cmp	r3, #5
 8002e1e:	d10c      	bne.n	8002e3a <HAL_RCC_OscConfig+0x312>
 8002e20:	4b77      	ldr	r3, [pc, #476]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	4a76      	ldr	r2, [pc, #472]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e26:	f043 0304 	orr.w	r3, r3, #4
 8002e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2c:	4b74      	ldr	r3, [pc, #464]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	4a73      	ldr	r2, [pc, #460]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6713      	str	r3, [r2, #112]	; 0x70
 8002e38:	e00b      	b.n	8002e52 <HAL_RCC_OscConfig+0x32a>
 8002e3a:	4b71      	ldr	r3, [pc, #452]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	4a70      	ldr	r2, [pc, #448]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	6713      	str	r3, [r2, #112]	; 0x70
 8002e46:	4b6e      	ldr	r3, [pc, #440]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	4a6d      	ldr	r2, [pc, #436]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e4c:	f023 0304 	bic.w	r3, r3, #4
 8002e50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d015      	beq.n	8002e86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fac5 	bl	80013e8 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fe fac1 	bl	80013e8 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e0bc      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e78:	4b61      	ldr	r3, [pc, #388]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ee      	beq.n	8002e62 <HAL_RCC_OscConfig+0x33a>
 8002e84:	e014      	b.n	8002eb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e86:	f7fe faaf 	bl	80013e8 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7fe faab 	bl	80013e8 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e0a6      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea4:	4b56      	ldr	r3, [pc, #344]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1ee      	bne.n	8002e8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d105      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb6:	4b52      	ldr	r3, [pc, #328]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a51      	ldr	r2, [pc, #324]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8092 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ecc:	4b4c      	ldr	r3, [pc, #304]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d05c      	beq.n	8002f92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d141      	bne.n	8002f64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee0:	4b48      	ldr	r3, [pc, #288]	; (8003004 <HAL_RCC_OscConfig+0x4dc>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fa7f 	bl	80013e8 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe fa7b 	bl	80013e8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e078      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f00:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f0      	bne.n	8002eee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	019b      	lsls	r3, r3, #6
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	085b      	lsrs	r3, r3, #1
 8002f24:	3b01      	subs	r3, #1
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	061b      	lsls	r3, r3, #24
 8002f30:	4933      	ldr	r1, [pc, #204]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f36:	4b33      	ldr	r3, [pc, #204]	; (8003004 <HAL_RCC_OscConfig+0x4dc>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fa54 	bl	80013e8 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fe fa50 	bl	80013e8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e04d      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x41c>
 8002f62:	e045      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f64:	4b27      	ldr	r3, [pc, #156]	; (8003004 <HAL_RCC_OscConfig+0x4dc>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fa3d 	bl	80013e8 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fe fa39 	bl	80013e8 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e036      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f84:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x44a>
 8002f90:	e02e      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e029      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f9e:	4b18      	ldr	r3, [pc, #96]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d11c      	bne.n	8002fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d115      	bne.n	8002fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d10d      	bne.n	8002fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d106      	bne.n	8002fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40007000 	.word	0x40007000
 8003000:	40023800 	.word	0x40023800
 8003004:	42470060 	.word	0x42470060

08003008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0cc      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800301c:	4b68      	ldr	r3, [pc, #416]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d90c      	bls.n	8003044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b65      	ldr	r3, [pc, #404]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0b8      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800305c:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a58      	ldr	r2, [pc, #352]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003074:	4b53      	ldr	r3, [pc, #332]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800307e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003080:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	494d      	ldr	r1, [pc, #308]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d044      	beq.n	8003128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d119      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e07f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c6:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e06f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d6:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e067      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e6:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f023 0203 	bic.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4934      	ldr	r1, [pc, #208]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f8:	f7fe f976 	bl	80013e8 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003100:	f7fe f972 	bl	80013e8 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	; 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e04f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 020c 	and.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	429a      	cmp	r2, r3
 8003126:	d1eb      	bne.n	8003100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003128:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d20c      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e032      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4916      	ldr	r1, [pc, #88]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	490e      	ldr	r1, [pc, #56]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800318e:	f000 f821 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003192:	4601      	mov	r1, r0
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	5cd3      	ldrb	r3, [r2, r3]
 80031a2:	fa21 f303 	lsr.w	r3, r1, r3
 80031a6:	4a09      	ldr	r2, [pc, #36]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd fd3e 	bl	8000c30 <HAL_InitTick>

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023c00 	.word	0x40023c00
 80031c4:	40023800 	.word	0x40023800
 80031c8:	0801adc8 	.word	0x0801adc8
 80031cc:	20000000 	.word	0x20000000
 80031d0:	20000004 	.word	0x20000004

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	2300      	movs	r3, #0
 80031e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ea:	4b63      	ldr	r3, [pc, #396]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d007      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x32>
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d008      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x38>
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 80b4 	bne.w	8003368 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003200:	4b5e      	ldr	r3, [pc, #376]	; (800337c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003202:	60bb      	str	r3, [r7, #8]
       break;
 8003204:	e0b3      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003206:	4b5e      	ldr	r3, [pc, #376]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003208:	60bb      	str	r3, [r7, #8]
      break;
 800320a:	e0b0      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800320c:	4b5a      	ldr	r3, [pc, #360]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003214:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003216:	4b58      	ldr	r3, [pc, #352]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d04a      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003222:	4b55      	ldr	r3, [pc, #340]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	099b      	lsrs	r3, r3, #6
 8003228:	f04f 0400 	mov.w	r4, #0
 800322c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	ea03 0501 	and.w	r5, r3, r1
 8003238:	ea04 0602 	and.w	r6, r4, r2
 800323c:	4629      	mov	r1, r5
 800323e:	4632      	mov	r2, r6
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	f04f 0400 	mov.w	r4, #0
 8003248:	0154      	lsls	r4, r2, #5
 800324a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800324e:	014b      	lsls	r3, r1, #5
 8003250:	4619      	mov	r1, r3
 8003252:	4622      	mov	r2, r4
 8003254:	1b49      	subs	r1, r1, r5
 8003256:	eb62 0206 	sbc.w	r2, r2, r6
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	f04f 0400 	mov.w	r4, #0
 8003262:	0194      	lsls	r4, r2, #6
 8003264:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003268:	018b      	lsls	r3, r1, #6
 800326a:	1a5b      	subs	r3, r3, r1
 800326c:	eb64 0402 	sbc.w	r4, r4, r2
 8003270:	f04f 0100 	mov.w	r1, #0
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	00e2      	lsls	r2, r4, #3
 800327a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800327e:	00d9      	lsls	r1, r3, #3
 8003280:	460b      	mov	r3, r1
 8003282:	4614      	mov	r4, r2
 8003284:	195b      	adds	r3, r3, r5
 8003286:	eb44 0406 	adc.w	r4, r4, r6
 800328a:	f04f 0100 	mov.w	r1, #0
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	0262      	lsls	r2, r4, #9
 8003294:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003298:	0259      	lsls	r1, r3, #9
 800329a:	460b      	mov	r3, r1
 800329c:	4614      	mov	r4, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	4621      	mov	r1, r4
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f04f 0400 	mov.w	r4, #0
 80032a8:	461a      	mov	r2, r3
 80032aa:	4623      	mov	r3, r4
 80032ac:	f7fd f808 	bl	80002c0 <__aeabi_uldivmod>
 80032b0:	4603      	mov	r3, r0
 80032b2:	460c      	mov	r4, r1
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	e049      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b8:	4b2f      	ldr	r3, [pc, #188]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	099b      	lsrs	r3, r3, #6
 80032be:	f04f 0400 	mov.w	r4, #0
 80032c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	ea03 0501 	and.w	r5, r3, r1
 80032ce:	ea04 0602 	and.w	r6, r4, r2
 80032d2:	4629      	mov	r1, r5
 80032d4:	4632      	mov	r2, r6
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	f04f 0400 	mov.w	r4, #0
 80032de:	0154      	lsls	r4, r2, #5
 80032e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032e4:	014b      	lsls	r3, r1, #5
 80032e6:	4619      	mov	r1, r3
 80032e8:	4622      	mov	r2, r4
 80032ea:	1b49      	subs	r1, r1, r5
 80032ec:	eb62 0206 	sbc.w	r2, r2, r6
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	f04f 0400 	mov.w	r4, #0
 80032f8:	0194      	lsls	r4, r2, #6
 80032fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032fe:	018b      	lsls	r3, r1, #6
 8003300:	1a5b      	subs	r3, r3, r1
 8003302:	eb64 0402 	sbc.w	r4, r4, r2
 8003306:	f04f 0100 	mov.w	r1, #0
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	00e2      	lsls	r2, r4, #3
 8003310:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003314:	00d9      	lsls	r1, r3, #3
 8003316:	460b      	mov	r3, r1
 8003318:	4614      	mov	r4, r2
 800331a:	195b      	adds	r3, r3, r5
 800331c:	eb44 0406 	adc.w	r4, r4, r6
 8003320:	f04f 0100 	mov.w	r1, #0
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	02a2      	lsls	r2, r4, #10
 800332a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800332e:	0299      	lsls	r1, r3, #10
 8003330:	460b      	mov	r3, r1
 8003332:	4614      	mov	r4, r2
 8003334:	4618      	mov	r0, r3
 8003336:	4621      	mov	r1, r4
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f04f 0400 	mov.w	r4, #0
 800333e:	461a      	mov	r2, r3
 8003340:	4623      	mov	r3, r4
 8003342:	f7fc ffbd 	bl	80002c0 <__aeabi_uldivmod>
 8003346:	4603      	mov	r3, r0
 8003348:	460c      	mov	r4, r1
 800334a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800334c:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	3301      	adds	r3, #1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	60bb      	str	r3, [r7, #8]
      break;
 8003366:	e002      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800336a:	60bb      	str	r3, [r7, #8]
      break;
 800336c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800336e:	68bb      	ldr	r3, [r7, #8]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	00f42400 	.word	0x00f42400
 8003380:	007a1200 	.word	0x007a1200

08003384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <HAL_RCC_GetHCLKFreq+0x14>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000000 	.word	0x20000000

0800339c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033a0:	f7ff fff0 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80033a4:	4601      	mov	r1, r0
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	0a9b      	lsrs	r3, r3, #10
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	4a03      	ldr	r2, [pc, #12]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b2:	5cd3      	ldrb	r3, [r2, r3]
 80033b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800
 80033c0:	0801add8 	.word	0x0801add8

080033c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033c8:	f7ff ffdc 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80033cc:	4601      	mov	r1, r0
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0b5b      	lsrs	r3, r3, #13
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4a03      	ldr	r2, [pc, #12]	; (80033e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033da:	5cd3      	ldrb	r3, [r2, r3]
 80033dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40023800 	.word	0x40023800
 80033e8:	0801add8 	.word	0x0801add8

080033ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	220f      	movs	r2, #15
 80033fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033fc:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_RCC_GetClockConfig+0x5c>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0203 	and.w	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <HAL_RCC_GetClockConfig+0x5c>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <HAL_RCC_GetClockConfig+0x5c>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCC_GetClockConfig+0x5c>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	08db      	lsrs	r3, r3, #3
 8003426:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_RCC_GetClockConfig+0x60>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	601a      	str	r2, [r3, #0]
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800
 800344c:	40023c00 	.word	0x40023c00

08003450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e01d      	b.n	800349e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f815 	bl	80034a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f000 f968 	bl	8003764 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0201 	orr.w	r2, r2, #1
 80034d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b06      	cmp	r3, #6
 80034e2:	d007      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b02      	cmp	r3, #2
 8003516:	d122      	bne.n	800355e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b02      	cmp	r3, #2
 8003524:	d11b      	bne.n	800355e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f06f 0202 	mvn.w	r2, #2
 800352e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f8ee 	bl	8003726 <HAL_TIM_IC_CaptureCallback>
 800354a:	e005      	b.n	8003558 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f8e0 	bl	8003712 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8f1 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d122      	bne.n	80035b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b04      	cmp	r3, #4
 8003578:	d11b      	bne.n	80035b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f06f 0204 	mvn.w	r2, #4
 8003582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f8c4 	bl	8003726 <HAL_TIM_IC_CaptureCallback>
 800359e:	e005      	b.n	80035ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f8b6 	bl	8003712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f8c7 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d122      	bne.n	8003606 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d11b      	bne.n	8003606 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f06f 0208 	mvn.w	r2, #8
 80035d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2204      	movs	r2, #4
 80035dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f89a 	bl	8003726 <HAL_TIM_IC_CaptureCallback>
 80035f2:	e005      	b.n	8003600 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f88c 	bl	8003712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f89d 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b10      	cmp	r3, #16
 8003612:	d122      	bne.n	800365a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b10      	cmp	r3, #16
 8003620:	d11b      	bne.n	800365a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 0210 	mvn.w	r2, #16
 800362a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2208      	movs	r2, #8
 8003630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f870 	bl	8003726 <HAL_TIM_IC_CaptureCallback>
 8003646:	e005      	b.n	8003654 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f862 	bl	8003712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f873 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b01      	cmp	r3, #1
 8003666:	d10e      	bne.n	8003686 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d107      	bne.n	8003686 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f06f 0201 	mvn.w	r2, #1
 800367e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7fd f9ed 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	2b80      	cmp	r3, #128	; 0x80
 8003692:	d10e      	bne.n	80036b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b80      	cmp	r3, #128	; 0x80
 80036a0:	d107      	bne.n	80036b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f903 	bl	80038b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036bc:	2b40      	cmp	r3, #64	; 0x40
 80036be:	d10e      	bne.n	80036de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b40      	cmp	r3, #64	; 0x40
 80036cc:	d107      	bne.n	80036de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f838 	bl	800374e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f003 0320 	and.w	r3, r3, #32
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d10e      	bne.n	800370a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d107      	bne.n	800370a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f06f 0220 	mvn.w	r2, #32
 8003702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f8cd 	bl	80038a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a40      	ldr	r2, [pc, #256]	; (8003878 <TIM_Base_SetConfig+0x114>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d013      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003782:	d00f      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a3d      	ldr	r2, [pc, #244]	; (800387c <TIM_Base_SetConfig+0x118>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00b      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a3c      	ldr	r2, [pc, #240]	; (8003880 <TIM_Base_SetConfig+0x11c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d007      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a3b      	ldr	r2, [pc, #236]	; (8003884 <TIM_Base_SetConfig+0x120>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d003      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a3a      	ldr	r2, [pc, #232]	; (8003888 <TIM_Base_SetConfig+0x124>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d108      	bne.n	80037b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a2f      	ldr	r2, [pc, #188]	; (8003878 <TIM_Base_SetConfig+0x114>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d02b      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c4:	d027      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a2c      	ldr	r2, [pc, #176]	; (800387c <TIM_Base_SetConfig+0x118>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d023      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a2b      	ldr	r2, [pc, #172]	; (8003880 <TIM_Base_SetConfig+0x11c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01f      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a2a      	ldr	r2, [pc, #168]	; (8003884 <TIM_Base_SetConfig+0x120>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01b      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a29      	ldr	r2, [pc, #164]	; (8003888 <TIM_Base_SetConfig+0x124>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d017      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a28      	ldr	r2, [pc, #160]	; (800388c <TIM_Base_SetConfig+0x128>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a27      	ldr	r2, [pc, #156]	; (8003890 <TIM_Base_SetConfig+0x12c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00f      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a26      	ldr	r2, [pc, #152]	; (8003894 <TIM_Base_SetConfig+0x130>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00b      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a25      	ldr	r2, [pc, #148]	; (8003898 <TIM_Base_SetConfig+0x134>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a24      	ldr	r2, [pc, #144]	; (800389c <TIM_Base_SetConfig+0x138>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <TIM_Base_SetConfig+0x13c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d108      	bne.n	8003828 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <TIM_Base_SetConfig+0x114>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d003      	beq.n	800385c <TIM_Base_SetConfig+0xf8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a0c      	ldr	r2, [pc, #48]	; (8003888 <TIM_Base_SetConfig+0x124>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d103      	bne.n	8003864 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	615a      	str	r2, [r3, #20]
}
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40010000 	.word	0x40010000
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800
 8003884:	40000c00 	.word	0x40000c00
 8003888:	40010400 	.word	0x40010400
 800388c:	40014000 	.word	0x40014000
 8003890:	40014400 	.word	0x40014400
 8003894:	40014800 	.word	0x40014800
 8003898:	40001800 	.word	0x40001800
 800389c:	40001c00 	.word	0x40001c00
 80038a0:	40002000 	.word	0x40002000

080038a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e03f      	b.n	800395e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd f8fa 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2224      	movs	r2, #36	; 0x24
 80038fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800390e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f829 	bl	8003968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396c:	b085      	sub	sp, #20
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039aa:	f023 030c 	bic.w	r3, r3, #12
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	68f9      	ldr	r1, [r7, #12]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d6:	f040 818b 	bne.w	8003cf0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4ac1      	ldr	r2, [pc, #772]	; (8003ce4 <UART_SetConfig+0x37c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d005      	beq.n	80039f0 <UART_SetConfig+0x88>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4abf      	ldr	r2, [pc, #764]	; (8003ce8 <UART_SetConfig+0x380>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	f040 80bd 	bne.w	8003b6a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039f0:	f7ff fce8 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 80039f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	461d      	mov	r5, r3
 80039fa:	f04f 0600 	mov.w	r6, #0
 80039fe:	46a8      	mov	r8, r5
 8003a00:	46b1      	mov	r9, r6
 8003a02:	eb18 0308 	adds.w	r3, r8, r8
 8003a06:	eb49 0409 	adc.w	r4, r9, r9
 8003a0a:	4698      	mov	r8, r3
 8003a0c:	46a1      	mov	r9, r4
 8003a0e:	eb18 0805 	adds.w	r8, r8, r5
 8003a12:	eb49 0906 	adc.w	r9, r9, r6
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a2a:	4688      	mov	r8, r1
 8003a2c:	4691      	mov	r9, r2
 8003a2e:	eb18 0005 	adds.w	r0, r8, r5
 8003a32:	eb49 0106 	adc.w	r1, r9, r6
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	461d      	mov	r5, r3
 8003a3c:	f04f 0600 	mov.w	r6, #0
 8003a40:	196b      	adds	r3, r5, r5
 8003a42:	eb46 0406 	adc.w	r4, r6, r6
 8003a46:	461a      	mov	r2, r3
 8003a48:	4623      	mov	r3, r4
 8003a4a:	f7fc fc39 	bl	80002c0 <__aeabi_uldivmod>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	460c      	mov	r4, r1
 8003a52:	461a      	mov	r2, r3
 8003a54:	4ba5      	ldr	r3, [pc, #660]	; (8003cec <UART_SetConfig+0x384>)
 8003a56:	fba3 2302 	umull	r2, r3, r3, r2
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	461d      	mov	r5, r3
 8003a64:	f04f 0600 	mov.w	r6, #0
 8003a68:	46a9      	mov	r9, r5
 8003a6a:	46b2      	mov	sl, r6
 8003a6c:	eb19 0309 	adds.w	r3, r9, r9
 8003a70:	eb4a 040a 	adc.w	r4, sl, sl
 8003a74:	4699      	mov	r9, r3
 8003a76:	46a2      	mov	sl, r4
 8003a78:	eb19 0905 	adds.w	r9, r9, r5
 8003a7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a80:	f04f 0100 	mov.w	r1, #0
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a94:	4689      	mov	r9, r1
 8003a96:	4692      	mov	sl, r2
 8003a98:	eb19 0005 	adds.w	r0, r9, r5
 8003a9c:	eb4a 0106 	adc.w	r1, sl, r6
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	461d      	mov	r5, r3
 8003aa6:	f04f 0600 	mov.w	r6, #0
 8003aaa:	196b      	adds	r3, r5, r5
 8003aac:	eb46 0406 	adc.w	r4, r6, r6
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4623      	mov	r3, r4
 8003ab4:	f7fc fc04 	bl	80002c0 <__aeabi_uldivmod>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	460c      	mov	r4, r1
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b8b      	ldr	r3, [pc, #556]	; (8003cec <UART_SetConfig+0x384>)
 8003ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	2164      	movs	r1, #100	; 0x64
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	3332      	adds	r3, #50	; 0x32
 8003ad2:	4a86      	ldr	r2, [pc, #536]	; (8003cec <UART_SetConfig+0x384>)
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ae0:	4498      	add	r8, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	461d      	mov	r5, r3
 8003ae6:	f04f 0600 	mov.w	r6, #0
 8003aea:	46a9      	mov	r9, r5
 8003aec:	46b2      	mov	sl, r6
 8003aee:	eb19 0309 	adds.w	r3, r9, r9
 8003af2:	eb4a 040a 	adc.w	r4, sl, sl
 8003af6:	4699      	mov	r9, r3
 8003af8:	46a2      	mov	sl, r4
 8003afa:	eb19 0905 	adds.w	r9, r9, r5
 8003afe:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b16:	4689      	mov	r9, r1
 8003b18:	4692      	mov	sl, r2
 8003b1a:	eb19 0005 	adds.w	r0, r9, r5
 8003b1e:	eb4a 0106 	adc.w	r1, sl, r6
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	461d      	mov	r5, r3
 8003b28:	f04f 0600 	mov.w	r6, #0
 8003b2c:	196b      	adds	r3, r5, r5
 8003b2e:	eb46 0406 	adc.w	r4, r6, r6
 8003b32:	461a      	mov	r2, r3
 8003b34:	4623      	mov	r3, r4
 8003b36:	f7fc fbc3 	bl	80002c0 <__aeabi_uldivmod>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b6a      	ldr	r3, [pc, #424]	; (8003cec <UART_SetConfig+0x384>)
 8003b42:	fba3 1302 	umull	r1, r3, r3, r2
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	2164      	movs	r1, #100	; 0x64
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	3332      	adds	r3, #50	; 0x32
 8003b54:	4a65      	ldr	r2, [pc, #404]	; (8003cec <UART_SetConfig+0x384>)
 8003b56:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	f003 0207 	and.w	r2, r3, #7
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4442      	add	r2, r8
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	e26f      	b.n	800404a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b6a:	f7ff fc17 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 8003b6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	461d      	mov	r5, r3
 8003b74:	f04f 0600 	mov.w	r6, #0
 8003b78:	46a8      	mov	r8, r5
 8003b7a:	46b1      	mov	r9, r6
 8003b7c:	eb18 0308 	adds.w	r3, r8, r8
 8003b80:	eb49 0409 	adc.w	r4, r9, r9
 8003b84:	4698      	mov	r8, r3
 8003b86:	46a1      	mov	r9, r4
 8003b88:	eb18 0805 	adds.w	r8, r8, r5
 8003b8c:	eb49 0906 	adc.w	r9, r9, r6
 8003b90:	f04f 0100 	mov.w	r1, #0
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ba0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ba4:	4688      	mov	r8, r1
 8003ba6:	4691      	mov	r9, r2
 8003ba8:	eb18 0005 	adds.w	r0, r8, r5
 8003bac:	eb49 0106 	adc.w	r1, r9, r6
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	461d      	mov	r5, r3
 8003bb6:	f04f 0600 	mov.w	r6, #0
 8003bba:	196b      	adds	r3, r5, r5
 8003bbc:	eb46 0406 	adc.w	r4, r6, r6
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	f7fc fb7c 	bl	80002c0 <__aeabi_uldivmod>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	460c      	mov	r4, r1
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b47      	ldr	r3, [pc, #284]	; (8003cec <UART_SetConfig+0x384>)
 8003bd0:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	461d      	mov	r5, r3
 8003bde:	f04f 0600 	mov.w	r6, #0
 8003be2:	46a9      	mov	r9, r5
 8003be4:	46b2      	mov	sl, r6
 8003be6:	eb19 0309 	adds.w	r3, r9, r9
 8003bea:	eb4a 040a 	adc.w	r4, sl, sl
 8003bee:	4699      	mov	r9, r3
 8003bf0:	46a2      	mov	sl, r4
 8003bf2:	eb19 0905 	adds.w	r9, r9, r5
 8003bf6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bfa:	f04f 0100 	mov.w	r1, #0
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c0e:	4689      	mov	r9, r1
 8003c10:	4692      	mov	sl, r2
 8003c12:	eb19 0005 	adds.w	r0, r9, r5
 8003c16:	eb4a 0106 	adc.w	r1, sl, r6
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	461d      	mov	r5, r3
 8003c20:	f04f 0600 	mov.w	r6, #0
 8003c24:	196b      	adds	r3, r5, r5
 8003c26:	eb46 0406 	adc.w	r4, r6, r6
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4623      	mov	r3, r4
 8003c2e:	f7fc fb47 	bl	80002c0 <__aeabi_uldivmod>
 8003c32:	4603      	mov	r3, r0
 8003c34:	460c      	mov	r4, r1
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b2c      	ldr	r3, [pc, #176]	; (8003cec <UART_SetConfig+0x384>)
 8003c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2164      	movs	r1, #100	; 0x64
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	3332      	adds	r3, #50	; 0x32
 8003c4c:	4a27      	ldr	r2, [pc, #156]	; (8003cec <UART_SetConfig+0x384>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c5a:	4498      	add	r8, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	461d      	mov	r5, r3
 8003c60:	f04f 0600 	mov.w	r6, #0
 8003c64:	46a9      	mov	r9, r5
 8003c66:	46b2      	mov	sl, r6
 8003c68:	eb19 0309 	adds.w	r3, r9, r9
 8003c6c:	eb4a 040a 	adc.w	r4, sl, sl
 8003c70:	4699      	mov	r9, r3
 8003c72:	46a2      	mov	sl, r4
 8003c74:	eb19 0905 	adds.w	r9, r9, r5
 8003c78:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c90:	4689      	mov	r9, r1
 8003c92:	4692      	mov	sl, r2
 8003c94:	eb19 0005 	adds.w	r0, r9, r5
 8003c98:	eb4a 0106 	adc.w	r1, sl, r6
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	461d      	mov	r5, r3
 8003ca2:	f04f 0600 	mov.w	r6, #0
 8003ca6:	196b      	adds	r3, r5, r5
 8003ca8:	eb46 0406 	adc.w	r4, r6, r6
 8003cac:	461a      	mov	r2, r3
 8003cae:	4623      	mov	r3, r4
 8003cb0:	f7fc fb06 	bl	80002c0 <__aeabi_uldivmod>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <UART_SetConfig+0x384>)
 8003cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	2164      	movs	r1, #100	; 0x64
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	3332      	adds	r3, #50	; 0x32
 8003cce:	4a07      	ldr	r2, [pc, #28]	; (8003cec <UART_SetConfig+0x384>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	f003 0207 	and.w	r2, r3, #7
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4442      	add	r2, r8
 8003ce0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003ce2:	e1b2      	b.n	800404a <UART_SetConfig+0x6e2>
 8003ce4:	40011000 	.word	0x40011000
 8003ce8:	40011400 	.word	0x40011400
 8003cec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4ad7      	ldr	r2, [pc, #860]	; (8004054 <UART_SetConfig+0x6ec>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d005      	beq.n	8003d06 <UART_SetConfig+0x39e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4ad6      	ldr	r2, [pc, #856]	; (8004058 <UART_SetConfig+0x6f0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	f040 80d1 	bne.w	8003ea8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d06:	f7ff fb5d 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 8003d0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	469a      	mov	sl, r3
 8003d10:	f04f 0b00 	mov.w	fp, #0
 8003d14:	46d0      	mov	r8, sl
 8003d16:	46d9      	mov	r9, fp
 8003d18:	eb18 0308 	adds.w	r3, r8, r8
 8003d1c:	eb49 0409 	adc.w	r4, r9, r9
 8003d20:	4698      	mov	r8, r3
 8003d22:	46a1      	mov	r9, r4
 8003d24:	eb18 080a 	adds.w	r8, r8, sl
 8003d28:	eb49 090b 	adc.w	r9, r9, fp
 8003d2c:	f04f 0100 	mov.w	r1, #0
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d40:	4688      	mov	r8, r1
 8003d42:	4691      	mov	r9, r2
 8003d44:	eb1a 0508 	adds.w	r5, sl, r8
 8003d48:	eb4b 0609 	adc.w	r6, fp, r9
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	4619      	mov	r1, r3
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	f04f 0400 	mov.w	r4, #0
 8003d5e:	0094      	lsls	r4, r2, #2
 8003d60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d64:	008b      	lsls	r3, r1, #2
 8003d66:	461a      	mov	r2, r3
 8003d68:	4623      	mov	r3, r4
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	4631      	mov	r1, r6
 8003d6e:	f7fc faa7 	bl	80002c0 <__aeabi_uldivmod>
 8003d72:	4603      	mov	r3, r0
 8003d74:	460c      	mov	r4, r1
 8003d76:	461a      	mov	r2, r3
 8003d78:	4bb8      	ldr	r3, [pc, #736]	; (800405c <UART_SetConfig+0x6f4>)
 8003d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	469b      	mov	fp, r3
 8003d88:	f04f 0c00 	mov.w	ip, #0
 8003d8c:	46d9      	mov	r9, fp
 8003d8e:	46e2      	mov	sl, ip
 8003d90:	eb19 0309 	adds.w	r3, r9, r9
 8003d94:	eb4a 040a 	adc.w	r4, sl, sl
 8003d98:	4699      	mov	r9, r3
 8003d9a:	46a2      	mov	sl, r4
 8003d9c:	eb19 090b 	adds.w	r9, r9, fp
 8003da0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003da4:	f04f 0100 	mov.w	r1, #0
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003db4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003db8:	4689      	mov	r9, r1
 8003dba:	4692      	mov	sl, r2
 8003dbc:	eb1b 0509 	adds.w	r5, fp, r9
 8003dc0:	eb4c 060a 	adc.w	r6, ip, sl
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	f04f 0400 	mov.w	r4, #0
 8003dd6:	0094      	lsls	r4, r2, #2
 8003dd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ddc:	008b      	lsls	r3, r1, #2
 8003dde:	461a      	mov	r2, r3
 8003de0:	4623      	mov	r3, r4
 8003de2:	4628      	mov	r0, r5
 8003de4:	4631      	mov	r1, r6
 8003de6:	f7fc fa6b 	bl	80002c0 <__aeabi_uldivmod>
 8003dea:	4603      	mov	r3, r0
 8003dec:	460c      	mov	r4, r1
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b9a      	ldr	r3, [pc, #616]	; (800405c <UART_SetConfig+0x6f4>)
 8003df2:	fba3 1302 	umull	r1, r3, r3, r2
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	2164      	movs	r1, #100	; 0x64
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	3332      	adds	r3, #50	; 0x32
 8003e04:	4a95      	ldr	r2, [pc, #596]	; (800405c <UART_SetConfig+0x6f4>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e10:	4498      	add	r8, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	469b      	mov	fp, r3
 8003e16:	f04f 0c00 	mov.w	ip, #0
 8003e1a:	46d9      	mov	r9, fp
 8003e1c:	46e2      	mov	sl, ip
 8003e1e:	eb19 0309 	adds.w	r3, r9, r9
 8003e22:	eb4a 040a 	adc.w	r4, sl, sl
 8003e26:	4699      	mov	r9, r3
 8003e28:	46a2      	mov	sl, r4
 8003e2a:	eb19 090b 	adds.w	r9, r9, fp
 8003e2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e32:	f04f 0100 	mov.w	r1, #0
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e46:	4689      	mov	r9, r1
 8003e48:	4692      	mov	sl, r2
 8003e4a:	eb1b 0509 	adds.w	r5, fp, r9
 8003e4e:	eb4c 060a 	adc.w	r6, ip, sl
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4619      	mov	r1, r3
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	f04f 0400 	mov.w	r4, #0
 8003e64:	0094      	lsls	r4, r2, #2
 8003e66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e6a:	008b      	lsls	r3, r1, #2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4623      	mov	r3, r4
 8003e70:	4628      	mov	r0, r5
 8003e72:	4631      	mov	r1, r6
 8003e74:	f7fc fa24 	bl	80002c0 <__aeabi_uldivmod>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b77      	ldr	r3, [pc, #476]	; (800405c <UART_SetConfig+0x6f4>)
 8003e80:	fba3 1302 	umull	r1, r3, r3, r2
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	2164      	movs	r1, #100	; 0x64
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	3332      	adds	r3, #50	; 0x32
 8003e92:	4a72      	ldr	r2, [pc, #456]	; (800405c <UART_SetConfig+0x6f4>)
 8003e94:	fba2 2303 	umull	r2, r3, r2, r3
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	f003 020f 	and.w	r2, r3, #15
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4442      	add	r2, r8
 8003ea4:	609a      	str	r2, [r3, #8]
 8003ea6:	e0d0      	b.n	800404a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ea8:	f7ff fa78 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 8003eac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	469a      	mov	sl, r3
 8003eb2:	f04f 0b00 	mov.w	fp, #0
 8003eb6:	46d0      	mov	r8, sl
 8003eb8:	46d9      	mov	r9, fp
 8003eba:	eb18 0308 	adds.w	r3, r8, r8
 8003ebe:	eb49 0409 	adc.w	r4, r9, r9
 8003ec2:	4698      	mov	r8, r3
 8003ec4:	46a1      	mov	r9, r4
 8003ec6:	eb18 080a 	adds.w	r8, r8, sl
 8003eca:	eb49 090b 	adc.w	r9, r9, fp
 8003ece:	f04f 0100 	mov.w	r1, #0
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003eda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ede:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ee2:	4688      	mov	r8, r1
 8003ee4:	4691      	mov	r9, r2
 8003ee6:	eb1a 0508 	adds.w	r5, sl, r8
 8003eea:	eb4b 0609 	adc.w	r6, fp, r9
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	f04f 0400 	mov.w	r4, #0
 8003f00:	0094      	lsls	r4, r2, #2
 8003f02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f06:	008b      	lsls	r3, r1, #2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4623      	mov	r3, r4
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	4631      	mov	r1, r6
 8003f10:	f7fc f9d6 	bl	80002c0 <__aeabi_uldivmod>
 8003f14:	4603      	mov	r3, r0
 8003f16:	460c      	mov	r4, r1
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4b50      	ldr	r3, [pc, #320]	; (800405c <UART_SetConfig+0x6f4>)
 8003f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	469b      	mov	fp, r3
 8003f2a:	f04f 0c00 	mov.w	ip, #0
 8003f2e:	46d9      	mov	r9, fp
 8003f30:	46e2      	mov	sl, ip
 8003f32:	eb19 0309 	adds.w	r3, r9, r9
 8003f36:	eb4a 040a 	adc.w	r4, sl, sl
 8003f3a:	4699      	mov	r9, r3
 8003f3c:	46a2      	mov	sl, r4
 8003f3e:	eb19 090b 	adds.w	r9, r9, fp
 8003f42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f46:	f04f 0100 	mov.w	r1, #0
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f5a:	4689      	mov	r9, r1
 8003f5c:	4692      	mov	sl, r2
 8003f5e:	eb1b 0509 	adds.w	r5, fp, r9
 8003f62:	eb4c 060a 	adc.w	r6, ip, sl
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	f04f 0400 	mov.w	r4, #0
 8003f78:	0094      	lsls	r4, r2, #2
 8003f7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f7e:	008b      	lsls	r3, r1, #2
 8003f80:	461a      	mov	r2, r3
 8003f82:	4623      	mov	r3, r4
 8003f84:	4628      	mov	r0, r5
 8003f86:	4631      	mov	r1, r6
 8003f88:	f7fc f99a 	bl	80002c0 <__aeabi_uldivmod>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	460c      	mov	r4, r1
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b32      	ldr	r3, [pc, #200]	; (800405c <UART_SetConfig+0x6f4>)
 8003f94:	fba3 1302 	umull	r1, r3, r3, r2
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	2164      	movs	r1, #100	; 0x64
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	3332      	adds	r3, #50	; 0x32
 8003fa6:	4a2d      	ldr	r2, [pc, #180]	; (800405c <UART_SetConfig+0x6f4>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fb2:	4498      	add	r8, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	469b      	mov	fp, r3
 8003fb8:	f04f 0c00 	mov.w	ip, #0
 8003fbc:	46d9      	mov	r9, fp
 8003fbe:	46e2      	mov	sl, ip
 8003fc0:	eb19 0309 	adds.w	r3, r9, r9
 8003fc4:	eb4a 040a 	adc.w	r4, sl, sl
 8003fc8:	4699      	mov	r9, r3
 8003fca:	46a2      	mov	sl, r4
 8003fcc:	eb19 090b 	adds.w	r9, r9, fp
 8003fd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fd4:	f04f 0100 	mov.w	r1, #0
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fe0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fe4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fe8:	4689      	mov	r9, r1
 8003fea:	4692      	mov	sl, r2
 8003fec:	eb1b 0509 	adds.w	r5, fp, r9
 8003ff0:	eb4c 060a 	adc.w	r6, ip, sl
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	f04f 0400 	mov.w	r4, #0
 8004006:	0094      	lsls	r4, r2, #2
 8004008:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800400c:	008b      	lsls	r3, r1, #2
 800400e:	461a      	mov	r2, r3
 8004010:	4623      	mov	r3, r4
 8004012:	4628      	mov	r0, r5
 8004014:	4631      	mov	r1, r6
 8004016:	f7fc f953 	bl	80002c0 <__aeabi_uldivmod>
 800401a:	4603      	mov	r3, r0
 800401c:	460c      	mov	r4, r1
 800401e:	461a      	mov	r2, r3
 8004020:	4b0e      	ldr	r3, [pc, #56]	; (800405c <UART_SetConfig+0x6f4>)
 8004022:	fba3 1302 	umull	r1, r3, r3, r2
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	2164      	movs	r1, #100	; 0x64
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	3332      	adds	r3, #50	; 0x32
 8004034:	4a09      	ldr	r2, [pc, #36]	; (800405c <UART_SetConfig+0x6f4>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	f003 020f 	and.w	r2, r3, #15
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4442      	add	r2, r8
 8004046:	609a      	str	r2, [r3, #8]
}
 8004048:	e7ff      	b.n	800404a <UART_SetConfig+0x6e2>
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004054:	40011000 	.word	0x40011000
 8004058:	40011400 	.word	0x40011400
 800405c:	51eb851f 	.word	0x51eb851f

08004060 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004060:	b084      	sub	sp, #16
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	f107 001c 	add.w	r0, r7, #28
 800406e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	2b01      	cmp	r3, #1
 8004076:	d122      	bne.n	80040be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800408c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d105      	bne.n	80040b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fa5c 	bl	8004570 <USB_CoreReset>
 80040b8:	4603      	mov	r3, r0
 80040ba:	73fb      	strb	r3, [r7, #15]
 80040bc:	e01a      	b.n	80040f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fa50 	bl	8004570 <USB_CoreReset>
 80040d0:	4603      	mov	r3, r0
 80040d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
 80040e6:	e005      	b.n	80040f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d10b      	bne.n	8004112 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f043 0206 	orr.w	r2, r3, #6
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f043 0220 	orr.w	r2, r3, #32
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004112:	7bfb      	ldrb	r3, [r7, #15]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800411e:	b004      	add	sp, #16
 8004120:	4770      	bx	lr

08004122 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f023 0201 	bic.w	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d106      	bne.n	8004170 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60da      	str	r2, [r3, #12]
 800416e:	e00b      	b.n	8004188 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	60da      	str	r2, [r3, #12]
 8004182:	e001      	b.n	8004188 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e003      	b.n	8004190 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004188:	2032      	movs	r0, #50	; 0x32
 800418a:	f7fd f939 	bl	8001400 <HAL_Delay>

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004198:	b084      	sub	sp, #16
 800419a:	b580      	push	{r7, lr}
 800419c:	b086      	sub	sp, #24
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	e009      	b.n	80041cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	3340      	adds	r3, #64	; 0x40
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	2200      	movs	r2, #0
 80041c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	3301      	adds	r3, #1
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b0e      	cmp	r3, #14
 80041d0:	d9f2      	bls.n	80041b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d112      	bne.n	80041fe <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38
 80041fc:	e00b      	b.n	8004216 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800421c:	461a      	mov	r2, r3
 800421e:	2300      	movs	r3, #0
 8004220:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004228:	4619      	mov	r1, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004230:	461a      	mov	r2, r3
 8004232:	680b      	ldr	r3, [r1, #0]
 8004234:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004238:	2b01      	cmp	r3, #1
 800423a:	d10c      	bne.n	8004256 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423e:	2b00      	cmp	r3, #0
 8004240:	d104      	bne.n	800424c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004242:	2100      	movs	r1, #0
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f961 	bl	800450c <USB_SetDevSpeed>
 800424a:	e008      	b.n	800425e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800424c:	2101      	movs	r1, #1
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f95c 	bl	800450c <USB_SetDevSpeed>
 8004254:	e003      	b.n	800425e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004256:	2103      	movs	r1, #3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f957 	bl	800450c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800425e:	2110      	movs	r1, #16
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f90b 	bl	800447c <USB_FlushTxFifo>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f929 	bl	80044c8 <USB_FlushRxFifo>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	461a      	mov	r2, r3
 8004288:	2300      	movs	r3, #0
 800428a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004292:	461a      	mov	r2, r3
 8004294:	2300      	movs	r3, #0
 8004296:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	461a      	mov	r2, r3
 80042a0:	2300      	movs	r3, #0
 80042a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042a4:	2300      	movs	r3, #0
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	e043      	b.n	8004332 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042c0:	d118      	bne.n	80042f4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	461a      	mov	r2, r3
 80042d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	e013      	b.n	8004306 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	461a      	mov	r2, r3
 80042ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e008      	b.n	8004306 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	461a      	mov	r2, r3
 8004302:	2300      	movs	r3, #0
 8004304:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004312:	461a      	mov	r2, r3
 8004314:	2300      	movs	r3, #0
 8004316:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004324:	461a      	mov	r2, r3
 8004326:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800432a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	3301      	adds	r3, #1
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	429a      	cmp	r2, r3
 8004338:	d3b7      	bcc.n	80042aa <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	e043      	b.n	80043c8 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004356:	d118      	bne.n	800438a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436a:	461a      	mov	r2, r3
 800436c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e013      	b.n	800439c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004380:	461a      	mov	r2, r3
 8004382:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	e008      	b.n	800439c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004396:	461a      	mov	r2, r3
 8004398:	2300      	movs	r3, #0
 800439a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a8:	461a      	mov	r2, r3
 80043aa:	2300      	movs	r3, #0
 80043ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ba:	461a      	mov	r2, r3
 80043bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3301      	adds	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d3b7      	bcc.n	8004340 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d111      	bne.n	800440e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b20      	ldr	r3, [pc, #128]	; (8004474 <USB_DevInit+0x2dc>)
 80043f4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	f043 0303 	orr.w	r3, r3, #3
 800440c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800441a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	2b00      	cmp	r3, #0
 8004420:	d105      	bne.n	800442e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f043 0210 	orr.w	r2, r3, #16
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	4b11      	ldr	r3, [pc, #68]	; (8004478 <USB_DevInit+0x2e0>)
 8004434:	4313      	orrs	r3, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800443a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	f043 0208 	orr.w	r2, r3, #8
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800444c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444e:	2b01      	cmp	r3, #1
 8004450:	d107      	bne.n	8004462 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800445a:	f043 0304 	orr.w	r3, r3, #4
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004462:	7dfb      	ldrb	r3, [r7, #23]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800446e:	b004      	add	sp, #16
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	00800100 	.word	0x00800100
 8004478:	803c3800 	.word	0x803c3800

0800447c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	019b      	lsls	r3, r3, #6
 800448e:	f043 0220 	orr.w	r2, r3, #32
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3301      	adds	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a09      	ldr	r2, [pc, #36]	; (80044c4 <USB_FlushTxFifo+0x48>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d901      	bls.n	80044a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e006      	b.n	80044b6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d0f0      	beq.n	8004496 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	00030d40 	.word	0x00030d40

080044c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2210      	movs	r2, #16
 80044d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3301      	adds	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a09      	ldr	r2, [pc, #36]	; (8004508 <USB_FlushRxFifo+0x40>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d901      	bls.n	80044ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e006      	b.n	80044fa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	2b10      	cmp	r3, #16
 80044f6:	d0f0      	beq.n	80044da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	00030d40 	.word	0x00030d40

0800450c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	68f9      	ldr	r1, [r7, #12]
 8004528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800452c:	4313      	orrs	r3, r2
 800452e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004558:	f043 0302 	orr.w	r3, r3, #2
 800455c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800455e:	2003      	movs	r0, #3
 8004560:	f7fc ff4e 	bl	8001400 <HAL_Delay>

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3301      	adds	r3, #1
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4a13      	ldr	r2, [pc, #76]	; (80045d4 <USB_CoreReset+0x64>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e01b      	b.n	80045c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	daf2      	bge.n	800457c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f043 0201 	orr.w	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3301      	adds	r3, #1
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <USB_CoreReset+0x64>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d901      	bls.n	80045b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e006      	b.n	80045c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d0f0      	beq.n	80045a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	00030d40 	.word	0x00030d40

080045d8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80045de:	2100      	movs	r1, #0
 80045e0:	2000      	movs	r0, #0
 80045e2:	f005 fcb5 	bl	8009f50 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80045e6:	4b17      	ldr	r3, [pc, #92]	; (8004644 <MX_LWIP_Init+0x6c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80045ec:	4b16      	ldr	r3, [pc, #88]	; (8004648 <MX_LWIP_Init+0x70>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80045f2:	4b16      	ldr	r3, [pc, #88]	; (800464c <MX_LWIP_Init+0x74>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80045f8:	4b15      	ldr	r3, [pc, #84]	; (8004650 <MX_LWIP_Init+0x78>)
 80045fa:	9302      	str	r3, [sp, #8]
 80045fc:	4b15      	ldr	r3, [pc, #84]	; (8004654 <MX_LWIP_Init+0x7c>)
 80045fe:	9301      	str	r3, [sp, #4]
 8004600:	2300      	movs	r3, #0
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	4b11      	ldr	r3, [pc, #68]	; (800464c <MX_LWIP_Init+0x74>)
 8004606:	4a10      	ldr	r2, [pc, #64]	; (8004648 <MX_LWIP_Init+0x70>)
 8004608:	490e      	ldr	r1, [pc, #56]	; (8004644 <MX_LWIP_Init+0x6c>)
 800460a:	4813      	ldr	r0, [pc, #76]	; (8004658 <MX_LWIP_Init+0x80>)
 800460c:	f007 f874 	bl	800b6f8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004610:	4811      	ldr	r0, [pc, #68]	; (8004658 <MX_LWIP_Init+0x80>)
 8004612:	f007 f959 	bl	800b8c8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <MX_LWIP_Init+0x80>)
 8004618:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800461c:	089b      	lsrs	r3, r3, #2
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004628:	480b      	ldr	r0, [pc, #44]	; (8004658 <MX_LWIP_Init+0x80>)
 800462a:	f007 f95d 	bl	800b8e8 <netif_set_up>
 800462e:	e002      	b.n	8004636 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004630:	4809      	ldr	r0, [pc, #36]	; (8004658 <MX_LWIP_Init+0x80>)
 8004632:	f007 f99d 	bl	800b970 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004636:	4808      	ldr	r0, [pc, #32]	; (8004658 <MX_LWIP_Init+0x80>)
 8004638:	f00e faa4 	bl	8012b84 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800463c:	bf00      	nop
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	2000925c 	.word	0x2000925c
 8004648:	20009260 	.word	0x20009260
 800464c:	20009264 	.word	0x20009264
 8004650:	08009e4d 	.word	0x08009e4d
 8004654:	08004c89 	.word	0x08004c89
 8004658:	20009228 	.word	0x20009228

0800465c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08e      	sub	sp, #56	; 0x38
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	605a      	str	r2, [r3, #4]
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a55      	ldr	r2, [pc, #340]	; (80047d0 <HAL_ETH_MspInit+0x174>)
 800467a:	4293      	cmp	r3, r2
 800467c:	f040 80a4 	bne.w	80047c8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004680:	2300      	movs	r3, #0
 8004682:	623b      	str	r3, [r7, #32]
 8004684:	4b53      	ldr	r3, [pc, #332]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	4a52      	ldr	r2, [pc, #328]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 800468a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800468e:	6313      	str	r3, [r2, #48]	; 0x30
 8004690:	4b50      	ldr	r3, [pc, #320]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	623b      	str	r3, [r7, #32]
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	2300      	movs	r3, #0
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	4b4c      	ldr	r3, [pc, #304]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	4a4b      	ldr	r2, [pc, #300]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 80046a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046aa:	6313      	str	r3, [r2, #48]	; 0x30
 80046ac:	4b49      	ldr	r3, [pc, #292]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	2300      	movs	r3, #0
 80046ba:	61bb      	str	r3, [r7, #24]
 80046bc:	4b45      	ldr	r3, [pc, #276]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	4a44      	ldr	r2, [pc, #272]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 80046c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046c6:	6313      	str	r3, [r2, #48]	; 0x30
 80046c8:	4b42      	ldr	r3, [pc, #264]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	4b3e      	ldr	r3, [pc, #248]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	4a3d      	ldr	r2, [pc, #244]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 80046de:	f043 0304 	orr.w	r3, r3, #4
 80046e2:	6313      	str	r3, [r2, #48]	; 0x30
 80046e4:	4b3b      	ldr	r3, [pc, #236]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f0:	2300      	movs	r3, #0
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	4b37      	ldr	r3, [pc, #220]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	4a36      	ldr	r2, [pc, #216]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004700:	4b34      	ldr	r3, [pc, #208]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	4b30      	ldr	r3, [pc, #192]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	4a2f      	ldr	r2, [pc, #188]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 8004716:	f043 0302 	orr.w	r3, r3, #2
 800471a:	6313      	str	r3, [r2, #48]	; 0x30
 800471c:	4b2d      	ldr	r3, [pc, #180]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004728:	2300      	movs	r3, #0
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	4b29      	ldr	r3, [pc, #164]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	4a28      	ldr	r2, [pc, #160]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 8004732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004736:	6313      	str	r3, [r2, #48]	; 0x30
 8004738:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <HAL_ETH_MspInit+0x178>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004744:	2332      	movs	r3, #50	; 0x32
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004748:	2302      	movs	r3, #2
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474c:	2300      	movs	r3, #0
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004750:	2303      	movs	r3, #3
 8004752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004754:	230b      	movs	r3, #11
 8004756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800475c:	4619      	mov	r1, r3
 800475e:	481e      	ldr	r0, [pc, #120]	; (80047d8 <HAL_ETH_MspInit+0x17c>)
 8004760:	f7fd feea 	bl	8002538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004764:	2386      	movs	r3, #134	; 0x86
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004768:	2302      	movs	r3, #2
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476c:	2300      	movs	r3, #0
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004770:	2303      	movs	r3, #3
 8004772:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004774:	230b      	movs	r3, #11
 8004776:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800477c:	4619      	mov	r1, r3
 800477e:	4817      	ldr	r0, [pc, #92]	; (80047dc <HAL_ETH_MspInit+0x180>)
 8004780:	f7fd feda 	bl	8002538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478a:	2302      	movs	r3, #2
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478e:	2300      	movs	r3, #0
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004792:	2303      	movs	r3, #3
 8004794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004796:	230b      	movs	r3, #11
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800479a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800479e:	4619      	mov	r1, r3
 80047a0:	480f      	ldr	r0, [pc, #60]	; (80047e0 <HAL_ETH_MspInit+0x184>)
 80047a2:	f7fd fec9 	bl	8002538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80047a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ac:	2302      	movs	r3, #2
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b4:	2303      	movs	r3, #3
 80047b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047b8:	230b      	movs	r3, #11
 80047ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80047bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c0:	4619      	mov	r1, r3
 80047c2:	4808      	ldr	r0, [pc, #32]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 80047c4:	f7fd feb8 	bl	8002538 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80047c8:	bf00      	nop
 80047ca:	3738      	adds	r7, #56	; 0x38
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40028000 	.word	0x40028000
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40020800 	.word	0x40020800
 80047dc:	40020000 	.word	0x40020000
 80047e0:	40020400 	.word	0x40020400
 80047e4:	40021800 	.word	0x40021800

080047e8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80047e8:	b5b0      	push	{r4, r5, r7, lr}
 80047ea:	b090      	sub	sp, #64	; 0x40
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80047f4:	4b5c      	ldr	r3, [pc, #368]	; (8004968 <low_level_init+0x180>)
 80047f6:	4a5d      	ldr	r2, [pc, #372]	; (800496c <low_level_init+0x184>)
 80047f8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80047fa:	4b5b      	ldr	r3, [pc, #364]	; (8004968 <low_level_init+0x180>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <low_level_init+0x180>)
 8004802:	2200      	movs	r2, #0
 8004804:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004806:	2300      	movs	r3, #0
 8004808:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8004812:	23e1      	movs	r3, #225	; 0xe1
 8004814:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xFE;
 8004818:	23fe      	movs	r3, #254	; 0xfe
 800481a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0xEC;
 800481e:	23ec      	movs	r3, #236	; 0xec
 8004820:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x71;
 8004824:	2371      	movs	r3, #113	; 0x71
 8004826:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800482a:	4a4f      	ldr	r2, [pc, #316]	; (8004968 <low_level_init+0x180>)
 800482c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004830:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004832:	4b4d      	ldr	r3, [pc, #308]	; (8004968 <low_level_init+0x180>)
 8004834:	2201      	movs	r2, #1
 8004836:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004838:	4b4b      	ldr	r3, [pc, #300]	; (8004968 <low_level_init+0x180>)
 800483a:	2200      	movs	r2, #0
 800483c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800483e:	4b4a      	ldr	r3, [pc, #296]	; (8004968 <low_level_init+0x180>)
 8004840:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004844:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004846:	4848      	ldr	r0, [pc, #288]	; (8004968 <low_level_init+0x180>)
 8004848:	f7fc fede 	bl	8001608 <HAL_ETH_Init>
 800484c:	4603      	mov	r3, r0
 800484e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004852:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004856:	2b00      	cmp	r3, #0
 8004858:	d108      	bne.n	800486c <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004860:	f043 0304 	orr.w	r3, r3, #4
 8004864:	b2da      	uxtb	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800486c:	2304      	movs	r3, #4
 800486e:	4a40      	ldr	r2, [pc, #256]	; (8004970 <low_level_init+0x188>)
 8004870:	4940      	ldr	r1, [pc, #256]	; (8004974 <low_level_init+0x18c>)
 8004872:	483d      	ldr	r0, [pc, #244]	; (8004968 <low_level_init+0x180>)
 8004874:	f7fd f866 	bl	8001944 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004878:	2304      	movs	r3, #4
 800487a:	4a3f      	ldr	r2, [pc, #252]	; (8004978 <low_level_init+0x190>)
 800487c:	493f      	ldr	r1, [pc, #252]	; (800497c <low_level_init+0x194>)
 800487e:	483a      	ldr	r0, [pc, #232]	; (8004968 <low_level_init+0x180>)
 8004880:	f7fd f8c9 	bl	8001a16 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2206      	movs	r2, #6
 8004888:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800488c:	4b36      	ldr	r3, [pc, #216]	; (8004968 <low_level_init+0x180>)
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	781a      	ldrb	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004898:	4b33      	ldr	r3, [pc, #204]	; (8004968 <low_level_init+0x180>)
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	785a      	ldrb	r2, [r3, #1]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80048a4:	4b30      	ldr	r3, [pc, #192]	; (8004968 <low_level_init+0x180>)
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	789a      	ldrb	r2, [r3, #2]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80048b0:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <low_level_init+0x180>)
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	78da      	ldrb	r2, [r3, #3]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80048bc:	4b2a      	ldr	r3, [pc, #168]	; (8004968 <low_level_init+0x180>)
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	791a      	ldrb	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80048c8:	4b27      	ldr	r3, [pc, #156]	; (8004968 <low_level_init+0x180>)
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	795a      	ldrb	r2, [r3, #5]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80048da:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80048e2:	f043 030a 	orr.w	r3, r3, #10
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80048ee:	2300      	movs	r3, #0
 80048f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f2:	2300      	movs	r3, #0
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80048f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048fa:	2101      	movs	r1, #1
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fb35 	bl	8004f6c <osSemaphoreCreate>
 8004902:	4602      	mov	r2, r0
 8004904:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <low_level_init+0x198>)
 8004906:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004908:	4b1e      	ldr	r3, [pc, #120]	; (8004984 <low_level_init+0x19c>)
 800490a:	f107 040c 	add.w	r4, r7, #12
 800490e:	461d      	mov	r5, r3
 8004910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004914:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004918:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800491c:	f107 030c 	add.w	r3, r7, #12
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fa26 	bl	8004d74 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004928:	480f      	ldr	r0, [pc, #60]	; (8004968 <low_level_init+0x180>)
 800492a:	f7fd fb21 	bl	8001f70 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800492e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004932:	461a      	mov	r2, r3
 8004934:	211d      	movs	r1, #29
 8004936:	480c      	ldr	r0, [pc, #48]	; (8004968 <low_level_init+0x180>)
 8004938:	f7fd fa4c 	bl	8001dd4 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800493c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493e:	f043 030b 	orr.w	r3, r3, #11
 8004942:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004946:	461a      	mov	r2, r3
 8004948:	211d      	movs	r1, #29
 800494a:	4807      	ldr	r0, [pc, #28]	; (8004968 <low_level_init+0x180>)
 800494c:	f7fd faaa 	bl	8001ea4 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004950:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004954:	461a      	mov	r2, r3
 8004956:	211d      	movs	r1, #29
 8004958:	4803      	ldr	r0, [pc, #12]	; (8004968 <low_level_init+0x180>)
 800495a:	f7fd fa3b 	bl	8001dd4 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800495e:	bf00      	nop
 8004960:	3740      	adds	r7, #64	; 0x40
 8004962:	46bd      	mov	sp, r7
 8004964:	bdb0      	pop	{r4, r5, r7, pc}
 8004966:	bf00      	nop
 8004968:	2000ab38 	.word	0x2000ab38
 800496c:	40028000 	.word	0x40028000
 8004970:	2000ab80 	.word	0x2000ab80
 8004974:	20009268 	.word	0x20009268
 8004978:	200092e8 	.word	0x200092e8
 800497c:	2000aab8 	.word	0x2000aab8
 8004980:	2000065c 	.word	0x2000065c
 8004984:	08017f6c 	.word	0x08017f6c

08004988 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004992:	4b4b      	ldr	r3, [pc, #300]	; (8004ac0 <low_level_output+0x138>)
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80049aa:	4b45      	ldr	r3, [pc, #276]	; (8004ac0 <low_level_output+0x138>)
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	e05a      	b.n	8004a70 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	da03      	bge.n	80049ca <low_level_output+0x42>
      {
        errval = ERR_USE;
 80049c2:	23f8      	movs	r3, #248	; 0xf8
 80049c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80049c8:	e05c      	b.n	8004a84 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	895b      	ldrh	r3, [r3, #10]
 80049ce:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80049d4:	e02f      	b.n	8004a36 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	18d0      	adds	r0, r2, r3
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	18d1      	adds	r1, r2, r3
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80049ea:	3304      	adds	r3, #4
 80049ec:	461a      	mov	r2, r3
 80049ee:	f012 f8b0 	bl	8016b52 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	da03      	bge.n	8004a08 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004a00:	23f8      	movs	r3, #248	; 0xf8
 8004a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004a06:	e03d      	b.n	8004a84 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004a18:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a24:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a30:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d8c8      	bhi.n	80049d6 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	18d0      	adds	r0, r2, r3
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4413      	add	r3, r2
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	4619      	mov	r1, r3
 8004a56:	f012 f87c 	bl	8016b52 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	623b      	str	r3, [r7, #32]
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1a1      	bne.n	80049ba <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004a76:	6979      	ldr	r1, [r7, #20]
 8004a78:	4811      	ldr	r0, [pc, #68]	; (8004ac0 <low_level_output+0x138>)
 8004a7a:	f7fd f839 	bl	8001af0 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004a84:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <low_level_output+0x138>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8c:	3314      	adds	r3, #20
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00d      	beq.n	8004ab4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <low_level_output+0x138>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa0:	3314      	adds	r3, #20
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004aa6:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <low_level_output+0x138>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aae:	3304      	adds	r3, #4
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004ab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3728      	adds	r7, #40	; 0x28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	2000ab38 	.word	0x2000ab38

08004ac4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08c      	sub	sp, #48	; 0x30
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004ae8:	484e      	ldr	r0, [pc, #312]	; (8004c24 <low_level_input+0x160>)
 8004aea:	f7fd f8eb 	bl	8001cc4 <HAL_ETH_GetReceivedFrame_IT>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <low_level_input+0x34>
  
    return NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e091      	b.n	8004c1c <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004af8:	4b4a      	ldr	r3, [pc, #296]	; (8004c24 <low_level_input+0x160>)
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004afe:	4b49      	ldr	r3, [pc, #292]	; (8004c24 <low_level_input+0x160>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8004b04:	89fb      	ldrh	r3, [r7, #14]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d006      	beq.n	8004b18 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	4619      	mov	r1, r3
 8004b10:	2004      	movs	r0, #4
 8004b12:	f006 ffaf 	bl	800ba74 <pbuf_alloc>
 8004b16:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d04b      	beq.n	8004bb6 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004b1e:	4b41      	ldr	r3, [pc, #260]	; (8004c24 <low_level_input+0x160>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b2c:	e040      	b.n	8004bb0 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	895b      	ldrh	r3, [r3, #10]
 8004b32:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004b38:	e021      	b.n	8004b7e <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	18d0      	adds	r0, r2, r3
 8004b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	18d1      	adds	r1, r2, r3
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004b4e:	3304      	adds	r3, #4
 8004b50:	461a      	mov	r2, r3
 8004b52:	f011 fffe 	bl	8016b52 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	4413      	add	r3, r2
 8004b68:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004b6c:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004b78:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	4413      	add	r3, r2
 8004b84:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d8d6      	bhi.n	8004b3a <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	18d0      	adds	r0, r2, r3
 8004b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	f011 ffd8 	bl	8016b52 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1bb      	bne.n	8004b2e <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004bb6:	4b1b      	ldr	r3, [pc, #108]	; (8004c24 <low_level_input+0x160>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	e00b      	b.n	8004bda <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <low_level_input+0x160>)
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d3ee      	bcc.n	8004bc2 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8004be4:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <low_level_input+0x160>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8004bea:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <low_level_input+0x160>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf2:	3314      	adds	r3, #20
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00d      	beq.n	8004c1a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <low_level_input+0x160>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c06:	3314      	adds	r3, #20
 8004c08:	2280      	movs	r2, #128	; 0x80
 8004c0a:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004c0c:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <low_level_input+0x160>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c14:	3308      	adds	r3, #8
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3730      	adds	r7, #48	; 0x30
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	2000ab38 	.word	0x2000ab38

08004c28 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004c34:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <ethernetif_input+0x58>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f04f 31ff 	mov.w	r1, #4294967295
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 f9c9 	bl	8004fd4 <osSemaphoreWait>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f5      	bne.n	8004c34 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8004c48:	480e      	ldr	r0, [pc, #56]	; (8004c84 <ethernetif_input+0x5c>)
 8004c4a:	f011 feef 	bl	8016a2c <sys_mutex_lock>
        p = low_level_input( netif );
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff ff38 	bl	8004ac4 <low_level_input>
 8004c54:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	68f9      	ldr	r1, [r7, #12]
 8004c62:	68b8      	ldr	r0, [r7, #8]
 8004c64:	4798      	blx	r3
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004c6c:	68b8      	ldr	r0, [r7, #8]
 8004c6e:	f007 fa73 	bl	800c158 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004c72:	4804      	ldr	r0, [pc, #16]	; (8004c84 <ethernetif_input+0x5c>)
 8004c74:	f011 fee9 	bl	8016a4a <sys_mutex_unlock>
      } while(p!=NULL);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1e4      	bne.n	8004c48 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004c7e:	e7d9      	b.n	8004c34 <ethernetif_input+0xc>
 8004c80:	2000065c 	.word	0x2000065c
 8004c84:	2000c394 	.word	0x2000c394

08004c88 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <ethernetif_init+0x1c>
 8004c96:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <ethernetif_init+0x48>)
 8004c98:	f240 222b 	movw	r2, #555	; 0x22b
 8004c9c:	490d      	ldr	r1, [pc, #52]	; (8004cd4 <ethernetif_init+0x4c>)
 8004c9e:	480e      	ldr	r0, [pc, #56]	; (8004cd8 <ethernetif_init+0x50>)
 8004ca0:	f011 ff6a 	bl	8016b78 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2273      	movs	r2, #115	; 0x73
 8004ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2274      	movs	r2, #116	; 0x74
 8004cb0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a09      	ldr	r2, [pc, #36]	; (8004cdc <ethernetif_init+0x54>)
 8004cb8:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a08      	ldr	r2, [pc, #32]	; (8004ce0 <ethernetif_init+0x58>)
 8004cbe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff fd91 	bl	80047e8 <low_level_init>

  return ERR_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	08017f88 	.word	0x08017f88
 8004cd4:	08017fa4 	.word	0x08017fa4
 8004cd8:	08017fb4 	.word	0x08017fb4
 8004cdc:	08014aed 	.word	0x08014aed
 8004ce0:	08004989 	.word	0x08004989

08004ce4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004ce8:	f7fc fb7e 	bl	80013e8 <HAL_GetTick>
 8004cec:	4603      	mov	r3, r0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d04:	2b84      	cmp	r3, #132	; 0x84
 8004d06:	d005      	beq.n	8004d14 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004d08:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	3303      	adds	r3, #3
 8004d12:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004d14:	68fb      	ldr	r3, [r7, #12]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d28:	f3ef 8305 	mrs	r3, IPSR
 8004d2c:	607b      	str	r3, [r7, #4]
  return(result);
 8004d2e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf14      	ite	ne
 8004d34:	2301      	movne	r3, #1
 8004d36:	2300      	moveq	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004d4a:	f001 fcf9 	bl	8006740 <vTaskStartScheduler>
  
  return osOK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004d58:	f7ff ffe3 	bl	8004d22 <inHandlerMode>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004d62:	f001 fe05 	bl	8006970 <xTaskGetTickCountFromISR>
 8004d66:	4603      	mov	r3, r0
 8004d68:	e002      	b.n	8004d70 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004d6a:	f001 fdf1 	bl	8006950 <xTaskGetTickCount>
 8004d6e:	4603      	mov	r3, r0
  }
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d76:	b089      	sub	sp, #36	; 0x24
 8004d78:	af04      	add	r7, sp, #16
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d020      	beq.n	8004dc8 <osThreadCreate+0x54>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01c      	beq.n	8004dc8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685c      	ldr	r4, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681d      	ldr	r5, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691e      	ldr	r6, [r3, #16]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff ffa6 	bl	8004cf2 <makeFreeRtosPriority>
 8004da6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004db0:	9202      	str	r2, [sp, #8]
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	9100      	str	r1, [sp, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	4632      	mov	r2, r6
 8004dba:	4629      	mov	r1, r5
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	f001 fb05 	bl	80063cc <xTaskCreateStatic>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e01c      	b.n	8004e02 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685c      	ldr	r4, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dd4:	b29e      	uxth	r6, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff ff88 	bl	8004cf2 <makeFreeRtosPriority>
 8004de2:	4602      	mov	r2, r0
 8004de4:	f107 030c 	add.w	r3, r7, #12
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	9200      	str	r2, [sp, #0]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	4632      	mov	r2, r6
 8004df0:	4629      	mov	r1, r5
 8004df2:	4620      	mov	r0, r4
 8004df4:	f001 fb43 	bl	800647e <xTaskCreate>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d001      	beq.n	8004e02 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e000      	b.n	8004e04 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e02:	68fb      	ldr	r3, [r7, #12]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e0c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <osDelay+0x16>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	e000      	b.n	8004e24 <osDelay+0x18>
 8004e22:	2301      	movs	r3, #1
 8004e24:	4618      	mov	r0, r3
 8004e26:	f001 fc57 	bl	80066d8 <vTaskDelay>
  
  return osOK;
 8004e2a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	f000 fc7c 	bl	8005748 <xQueueCreateMutexStatic>
 8004e50:	4603      	mov	r3, r0
 8004e52:	e003      	b.n	8004e5c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004e54:	2001      	movs	r0, #1
 8004e56:	f000 fc5f 	bl	8005718 <xQueueCreateMutex>
 8004e5a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <osMutexWait+0x18>
    return osErrorParameter;
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	e03a      	b.n	8004ef2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e86:	d103      	bne.n	8004e90 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004e88:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e009      	b.n	8004ea4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d006      	beq.n	8004ea4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <osMutexWait+0x40>
      ticks = 1;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004ea4:	f7ff ff3d 	bl	8004d22 <inHandlerMode>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d017      	beq.n	8004ede <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f001 f85e 	bl	8005f78 <xQueueReceiveFromISR>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d001      	beq.n	8004ec6 <osMutexWait+0x62>
      return osErrorOS;
 8004ec2:	23ff      	movs	r3, #255	; 0xff
 8004ec4:	e015      	b.n	8004ef2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d011      	beq.n	8004ef0 <osMutexWait+0x8c>
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <osMutexWait+0x98>)
 8004ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	e008      	b.n	8004ef0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004ede:	68f9      	ldr	r1, [r7, #12]
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 ff41 	bl	8005d68 <xQueueSemaphoreTake>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d001      	beq.n	8004ef0 <osMutexWait+0x8c>
    return osErrorOS;
 8004eec:	23ff      	movs	r3, #255	; 0xff
 8004eee:	e000      	b.n	8004ef2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	e000ed04 	.word	0xe000ed04

08004f00 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004f10:	f7ff ff07 	bl	8004d22 <inHandlerMode>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d016      	beq.n	8004f48 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004f1a:	f107 0308 	add.w	r3, r7, #8
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fdbb 	bl	8005a9c <xQueueGiveFromISR>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d001      	beq.n	8004f30 <osMutexRelease+0x30>
      return osErrorOS;
 8004f2c:	23ff      	movs	r3, #255	; 0xff
 8004f2e:	e017      	b.n	8004f60 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d013      	beq.n	8004f5e <osMutexRelease+0x5e>
 8004f36:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <osMutexRelease+0x68>)
 8004f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	e00a      	b.n	8004f5e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fc16 	bl	8005780 <xQueueGenericSend>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d001      	beq.n	8004f5e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004f5a:	23ff      	movs	r3, #255	; 0xff
 8004f5c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	e000ed04 	.word	0xe000ed04

08004f6c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d010      	beq.n	8004fa0 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d10b      	bne.n	8004f9c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	2303      	movs	r3, #3
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2100      	movs	r1, #0
 8004f92:	2001      	movs	r0, #1
 8004f94:	f000 fad8 	bl	8005548 <xQueueGenericCreateStatic>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	e016      	b.n	8004fca <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e014      	b.n	8004fca <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d110      	bne.n	8004fc8 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004fa6:	2203      	movs	r2, #3
 8004fa8:	2100      	movs	r1, #0
 8004faa:	2001      	movs	r0, #1
 8004fac:	f000 fb3e 	bl	800562c <xQueueGenericCreate>
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <osSemaphoreCreate+0x58>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 fbde 	bl	8005780 <xQueueGenericSend>
      return sema;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	e000      	b.n	8004fca <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004fc8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004fe8:	2380      	movs	r3, #128	; 0x80
 8004fea:	e03a      	b.n	8005062 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff6:	d103      	bne.n	8005000 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	e009      	b.n	8005014 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d006      	beq.n	8005014 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <osSemaphoreWait+0x40>
      ticks = 1;
 8005010:	2301      	movs	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005014:	f7ff fe85 	bl	8004d22 <inHandlerMode>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d017      	beq.n	800504e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800501e:	f107 0308 	add.w	r3, r7, #8
 8005022:	461a      	mov	r2, r3
 8005024:	2100      	movs	r1, #0
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 ffa6 	bl	8005f78 <xQueueReceiveFromISR>
 800502c:	4603      	mov	r3, r0
 800502e:	2b01      	cmp	r3, #1
 8005030:	d001      	beq.n	8005036 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005032:	23ff      	movs	r3, #255	; 0xff
 8005034:	e015      	b.n	8005062 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d011      	beq.n	8005060 <osSemaphoreWait+0x8c>
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <osSemaphoreWait+0x98>)
 800503e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	e008      	b.n	8005060 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800504e:	68f9      	ldr	r1, [r7, #12]
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fe89 	bl	8005d68 <xQueueSemaphoreTake>
 8005056:	4603      	mov	r3, r0
 8005058:	2b01      	cmp	r3, #1
 800505a:	d001      	beq.n	8005060 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800505c:	23ff      	movs	r3, #255	; 0xff
 800505e:	e000      	b.n	8005062 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	e000ed04 	.word	0xe000ed04

08005070 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800507c:	2300      	movs	r3, #0
 800507e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005080:	f7ff fe4f 	bl	8004d22 <inHandlerMode>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d016      	beq.n	80050b8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800508a:	f107 0308 	add.w	r3, r7, #8
 800508e:	4619      	mov	r1, r3
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fd03 	bl	8005a9c <xQueueGiveFromISR>
 8005096:	4603      	mov	r3, r0
 8005098:	2b01      	cmp	r3, #1
 800509a:	d001      	beq.n	80050a0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800509c:	23ff      	movs	r3, #255	; 0xff
 800509e:	e017      	b.n	80050d0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d013      	beq.n	80050ce <osSemaphoreRelease+0x5e>
 80050a6:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <osSemaphoreRelease+0x68>)
 80050a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	e00a      	b.n	80050ce <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80050b8:	2300      	movs	r3, #0
 80050ba:	2200      	movs	r2, #0
 80050bc:	2100      	movs	r1, #0
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fb5e 	bl	8005780 <xQueueGenericSend>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d001      	beq.n	80050ce <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80050ca:	23ff      	movs	r3, #255	; 0xff
 80050cc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80050ce:	68fb      	ldr	r3, [r7, #12]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	e000ed04 	.word	0xe000ed04

080050dc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80050e4:	f7ff fe1d 	bl	8004d22 <inHandlerMode>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80050ee:	2382      	movs	r3, #130	; 0x82
 80050f0:	e003      	b.n	80050fa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fff5 	bl	80060e2 <vQueueDelete>

  return osOK; 
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005102:	b590      	push	{r4, r7, lr}
 8005104:	b085      	sub	sp, #20
 8005106:	af02      	add	r7, sp, #8
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d012      	beq.n	800513a <osMessageCreate+0x38>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00e      	beq.n	800513a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6859      	ldr	r1, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68dc      	ldr	r4, [r3, #12]
 800512c:	2300      	movs	r3, #0
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	4623      	mov	r3, r4
 8005132:	f000 fa09 	bl	8005548 <xQueueGenericCreateStatic>
 8005136:	4603      	mov	r3, r0
 8005138:	e008      	b.n	800514c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	4619      	mov	r1, r3
 8005146:	f000 fa71 	bl	800562c <xQueueGenericCreate>
 800514a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	bd90      	pop	{r4, r7, pc}

08005154 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <osMessagePut+0x1e>
    ticks = 1;
 800516e:	2301      	movs	r3, #1
 8005170:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005172:	f7ff fdd6 	bl	8004d22 <inHandlerMode>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d018      	beq.n	80051ae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800517c:	f107 0210 	add.w	r2, r7, #16
 8005180:	f107 0108 	add.w	r1, r7, #8
 8005184:	2300      	movs	r3, #0
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 fbf4 	bl	8005974 <xQueueGenericSendFromISR>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d001      	beq.n	8005196 <osMessagePut+0x42>
      return osErrorOS;
 8005192:	23ff      	movs	r3, #255	; 0xff
 8005194:	e018      	b.n	80051c8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d014      	beq.n	80051c6 <osMessagePut+0x72>
 800519c:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <osMessagePut+0x7c>)
 800519e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	e00b      	b.n	80051c6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80051ae:	f107 0108 	add.w	r1, r7, #8
 80051b2:	2300      	movs	r3, #0
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 fae2 	bl	8005780 <xQueueGenericSend>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d001      	beq.n	80051c6 <osMessagePut+0x72>
      return osErrorOS;
 80051c2:	23ff      	movs	r3, #255	; 0xff
 80051c4:	e000      	b.n	80051c8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	e000ed04 	.word	0xe000ed04

080051d4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b08b      	sub	sp, #44	; 0x2c
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80051ee:	2380      	movs	r3, #128	; 0x80
 80051f0:	617b      	str	r3, [r7, #20]
    return event;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	461c      	mov	r4, r3
 80051f6:	f107 0314 	add.w	r3, r7, #20
 80051fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80051fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005202:	e054      	b.n	80052ae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005204:	2300      	movs	r3, #0
 8005206:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005208:	2300      	movs	r3, #0
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005212:	d103      	bne.n	800521c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005214:	f04f 33ff 	mov.w	r3, #4294967295
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
 800521a:	e009      	b.n	8005230 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d006      	beq.n	8005230 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <osMessageGet+0x5c>
      ticks = 1;
 800522c:	2301      	movs	r3, #1
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005230:	f7ff fd77 	bl	8004d22 <inHandlerMode>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d01c      	beq.n	8005274 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800523a:	f107 0220 	add.w	r2, r7, #32
 800523e:	f107 0314 	add.w	r3, r7, #20
 8005242:	3304      	adds	r3, #4
 8005244:	4619      	mov	r1, r3
 8005246:	68b8      	ldr	r0, [r7, #8]
 8005248:	f000 fe96 	bl	8005f78 <xQueueReceiveFromISR>
 800524c:	4603      	mov	r3, r0
 800524e:	2b01      	cmp	r3, #1
 8005250:	d102      	bne.n	8005258 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005252:	2310      	movs	r3, #16
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e001      	b.n	800525c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01d      	beq.n	800529e <osMessageGet+0xca>
 8005262:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <osMessageGet+0xe4>)
 8005264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	e014      	b.n	800529e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005274:	f107 0314 	add.w	r3, r7, #20
 8005278:	3304      	adds	r3, #4
 800527a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527c:	4619      	mov	r1, r3
 800527e:	68b8      	ldr	r0, [r7, #8]
 8005280:	f000 fc96 	bl	8005bb0 <xQueueReceive>
 8005284:	4603      	mov	r3, r0
 8005286:	2b01      	cmp	r3, #1
 8005288:	d102      	bne.n	8005290 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800528a:	2310      	movs	r3, #16
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e006      	b.n	800529e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <osMessageGet+0xc6>
 8005296:	2300      	movs	r3, #0
 8005298:	e000      	b.n	800529c <osMessageGet+0xc8>
 800529a:	2340      	movs	r3, #64	; 0x40
 800529c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	461c      	mov	r4, r3
 80052a2:	f107 0314 	add.w	r3, r7, #20
 80052a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80052aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	372c      	adds	r7, #44	; 0x2c
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd90      	pop	{r4, r7, pc}
 80052b6:	bf00      	nop
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80052c4:	f7ff fd2d 	bl	8004d22 <inHandlerMode>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d004      	beq.n	80052d8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 feec 	bl	80060ac <uxQueueMessagesWaitingFromISR>
 80052d4:	4603      	mov	r3, r0
 80052d6:	e003      	b.n	80052e0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 feca 	bl	8006072 <uxQueueMessagesWaiting>
 80052de:	4603      	mov	r3, r0
  }
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80052f0:	f7ff fd17 	bl	8004d22 <inHandlerMode>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <osMessageDelete+0x16>
    return osErrorISR;
 80052fa:	2382      	movs	r3, #130	; 0x82
 80052fc:	e003      	b.n	8005306 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 feef 	bl	80060e2 <vQueueDelete>

  return osOK; 
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f103 0208 	add.w	r2, r3, #8
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f04f 32ff 	mov.w	r2, #4294967295
 8005326:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f103 0208 	add.w	r2, r3, #8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f103 0208 	add.w	r2, r3, #8
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d103      	bne.n	80053d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	e00c      	b.n	80053ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3308      	adds	r3, #8
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	e002      	b.n	80053de <vListInsert+0x2e>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d2f6      	bcs.n	80053d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	601a      	str	r2, [r3, #0]
}
 8005416:	bf00      	nop
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6892      	ldr	r2, [r2, #8]
 8005438:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6852      	ldr	r2, [r2, #4]
 8005442:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	429a      	cmp	r2, r3
 800544c:	d103      	bne.n	8005456 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	1e5a      	subs	r2, r3, #1
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d109      	bne.n	80054a0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	e7fe      	b.n	800549e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80054a0:	f002 f8d4 	bl	800764c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	68f9      	ldr	r1, [r7, #12]
 80054ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054b0:	fb01 f303 	mul.w	r3, r1, r3
 80054b4:	441a      	add	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d0:	3b01      	subs	r3, #1
 80054d2:	68f9      	ldr	r1, [r7, #12]
 80054d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054d6:	fb01 f303 	mul.w	r3, r1, r3
 80054da:	441a      	add	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	22ff      	movs	r2, #255	; 0xff
 80054e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	22ff      	movs	r2, #255	; 0xff
 80054ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d114      	bne.n	8005520 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01a      	beq.n	8005534 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3310      	adds	r3, #16
 8005502:	4618      	mov	r0, r3
 8005504:	f001 fb80 	bl	8006c08 <xTaskRemoveFromEventList>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d012      	beq.n	8005534 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <xQueueGenericReset+0xcc>)
 8005510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	e009      	b.n	8005534 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3310      	adds	r3, #16
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff fef2 	bl	800530e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3324      	adds	r3, #36	; 0x24
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff feed 	bl	800530e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005534:	f002 f8b8 	bl	80076a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005538:	2301      	movs	r3, #1
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	e000ed04 	.word	0xe000ed04

08005548 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08e      	sub	sp, #56	; 0x38
 800554c:	af02      	add	r7, sp, #8
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d109      	bne.n	8005570 <xQueueGenericCreateStatic+0x28>
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28
 800556e:	e7fe      	b.n	800556e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <xQueueGenericCreateStatic+0x42>
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
 8005588:	e7fe      	b.n	8005588 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <xQueueGenericCreateStatic+0x4e>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <xQueueGenericCreateStatic+0x52>
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <xQueueGenericCreateStatic+0x54>
 800559a:	2300      	movs	r3, #0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <xQueueGenericCreateStatic+0x6c>
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	623b      	str	r3, [r7, #32]
 80055b2:	e7fe      	b.n	80055b2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d102      	bne.n	80055c0 <xQueueGenericCreateStatic+0x78>
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <xQueueGenericCreateStatic+0x7c>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <xQueueGenericCreateStatic+0x7e>
 80055c4:	2300      	movs	r3, #0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d109      	bne.n	80055de <xQueueGenericCreateStatic+0x96>
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	e7fe      	b.n	80055dc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055de:	2348      	movs	r3, #72	; 0x48
 80055e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b48      	cmp	r3, #72	; 0x48
 80055e6:	d009      	beq.n	80055fc <xQueueGenericCreateStatic+0xb4>
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	e7fe      	b.n	80055fa <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00d      	beq.n	8005622 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800560e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	4613      	mov	r3, r2
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f842 	bl	80056a6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005624:	4618      	mov	r0, r3
 8005626:	3730      	adds	r7, #48	; 0x30
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	; 0x28
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	4613      	mov	r3, r2
 8005638:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d109      	bne.n	8005654 <xQueueGenericCreate+0x28>
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	e7fe      	b.n	8005652 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
 800565e:	e004      	b.n	800566a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	fb02 f303 	mul.w	r3, r2, r3
 8005668:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	3348      	adds	r3, #72	; 0x48
 800566e:	4618      	mov	r0, r3
 8005670:	f002 f906 	bl	8007880 <pvPortMalloc>
 8005674:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00f      	beq.n	800569c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	3348      	adds	r3, #72	; 0x48
 8005680:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800568a:	79fa      	ldrb	r2, [r7, #7]
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f805 	bl	80056a6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800569c:	69bb      	ldr	r3, [r7, #24]
	}
 800569e:	4618      	mov	r0, r3
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d103      	bne.n	80056c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	e002      	b.n	80056c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056d4:	2101      	movs	r1, #1
 80056d6:	69b8      	ldr	r0, [r7, #24]
 80056d8:	f7ff fece 	bl	8005478 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00e      	beq.n	8005710 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005704:	2300      	movs	r3, #0
 8005706:	2200      	movs	r2, #0
 8005708:	2100      	movs	r1, #0
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f838 	bl	8005780 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005710:	bf00      	nop
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005722:	2301      	movs	r3, #1
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	461a      	mov	r2, r3
 800572e:	6939      	ldr	r1, [r7, #16]
 8005730:	6978      	ldr	r0, [r7, #20]
 8005732:	f7ff ff7b 	bl	800562c <xQueueGenericCreate>
 8005736:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f7ff ffd3 	bl	80056e4 <prvInitialiseMutex>

		return pxNewQueue;
 800573e:	68fb      	ldr	r3, [r7, #12]
	}
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af02      	add	r7, sp, #8
 800574e:	4603      	mov	r3, r0
 8005750:	6039      	str	r1, [r7, #0]
 8005752:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005754:	2301      	movs	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	2300      	movs	r3, #0
 800575a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2200      	movs	r2, #0
 8005764:	6939      	ldr	r1, [r7, #16]
 8005766:	6978      	ldr	r0, [r7, #20]
 8005768:	f7ff feee 	bl	8005548 <xQueueGenericCreateStatic>
 800576c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff ffb8 	bl	80056e4 <prvInitialiseMutex>

		return pxNewQueue;
 8005774:	68fb      	ldr	r3, [r7, #12]
	}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08e      	sub	sp, #56	; 0x38
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800578e:	2300      	movs	r3, #0
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	2b00      	cmp	r3, #0
 800579a:	d109      	bne.n	80057b0 <xQueueGenericSend+0x30>
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ae:	e7fe      	b.n	80057ae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d103      	bne.n	80057be <xQueueGenericSend+0x3e>
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <xQueueGenericSend+0x42>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <xQueueGenericSend+0x44>
 80057c2:	2300      	movs	r3, #0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d109      	bne.n	80057dc <xQueueGenericSend+0x5c>
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
 80057da:	e7fe      	b.n	80057da <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d103      	bne.n	80057ea <xQueueGenericSend+0x6a>
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d101      	bne.n	80057ee <xQueueGenericSend+0x6e>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <xQueueGenericSend+0x70>
 80057ee:	2300      	movs	r3, #0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d109      	bne.n	8005808 <xQueueGenericSend+0x88>
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	623b      	str	r3, [r7, #32]
 8005806:	e7fe      	b.n	8005806 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005808:	f001 fbba 	bl	8006f80 <xTaskGetSchedulerState>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d102      	bne.n	8005818 <xQueueGenericSend+0x98>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <xQueueGenericSend+0x9c>
 8005818:	2301      	movs	r3, #1
 800581a:	e000      	b.n	800581e <xQueueGenericSend+0x9e>
 800581c:	2300      	movs	r3, #0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <xQueueGenericSend+0xb6>
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	e7fe      	b.n	8005834 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005836:	f001 ff09 	bl	800764c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <xQueueGenericSend+0xcc>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d129      	bne.n	80058a0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005852:	f000 fc80 	bl	8006156 <prvCopyDataToQueue>
 8005856:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	d010      	beq.n	8005882 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	3324      	adds	r3, #36	; 0x24
 8005864:	4618      	mov	r0, r3
 8005866:	f001 f9cf 	bl	8006c08 <xTaskRemoveFromEventList>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d013      	beq.n	8005898 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005870:	4b3f      	ldr	r3, [pc, #252]	; (8005970 <xQueueGenericSend+0x1f0>)
 8005872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	e00a      	b.n	8005898 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d007      	beq.n	8005898 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005888:	4b39      	ldr	r3, [pc, #228]	; (8005970 <xQueueGenericSend+0x1f0>)
 800588a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005898:	f001 ff06 	bl	80076a8 <vPortExitCritical>
				return pdPASS;
 800589c:	2301      	movs	r3, #1
 800589e:	e063      	b.n	8005968 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058a6:	f001 feff 	bl	80076a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e05c      	b.n	8005968 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058b4:	f107 0314 	add.w	r3, r7, #20
 80058b8:	4618      	mov	r0, r3
 80058ba:	f001 fa07 	bl	8006ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058be:	2301      	movs	r3, #1
 80058c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058c2:	f001 fef1 	bl	80076a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058c6:	f000 ff99 	bl	80067fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058ca:	f001 febf 	bl	800764c <vPortEnterCritical>
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058d4:	b25b      	sxtb	r3, r3
 80058d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058da:	d103      	bne.n	80058e4 <xQueueGenericSend+0x164>
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ea:	b25b      	sxtb	r3, r3
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d103      	bne.n	80058fa <xQueueGenericSend+0x17a>
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058fa:	f001 fed5 	bl	80076a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058fe:	1d3a      	adds	r2, r7, #4
 8005900:	f107 0314 	add.w	r3, r7, #20
 8005904:	4611      	mov	r1, r2
 8005906:	4618      	mov	r0, r3
 8005908:	f001 f9f6 	bl	8006cf8 <xTaskCheckForTimeOut>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d124      	bne.n	800595c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005914:	f000 fd17 	bl	8006346 <prvIsQueueFull>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d018      	beq.n	8005950 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	3310      	adds	r3, #16
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	4611      	mov	r1, r2
 8005926:	4618      	mov	r0, r3
 8005928:	f001 f94a 	bl	8006bc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800592c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800592e:	f000 fca2 	bl	8006276 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005932:	f000 ff71 	bl	8006818 <xTaskResumeAll>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	f47f af7c 	bne.w	8005836 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800593e:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <xQueueGenericSend+0x1f0>)
 8005940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	e772      	b.n	8005836 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005952:	f000 fc90 	bl	8006276 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005956:	f000 ff5f 	bl	8006818 <xTaskResumeAll>
 800595a:	e76c      	b.n	8005836 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800595c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800595e:	f000 fc8a 	bl	8006276 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005962:	f000 ff59 	bl	8006818 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005966:	2300      	movs	r3, #0
		}
	}
}
 8005968:	4618      	mov	r0, r3
 800596a:	3738      	adds	r7, #56	; 0x38
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08e      	sub	sp, #56	; 0x38
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	2b00      	cmp	r3, #0
 800598a:	d109      	bne.n	80059a0 <xQueueGenericSendFromISR+0x2c>
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
 800599e:	e7fe      	b.n	800599e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d103      	bne.n	80059ae <xQueueGenericSendFromISR+0x3a>
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <xQueueGenericSendFromISR+0x3e>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <xQueueGenericSendFromISR+0x40>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d109      	bne.n	80059cc <xQueueGenericSendFromISR+0x58>
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	623b      	str	r3, [r7, #32]
 80059ca:	e7fe      	b.n	80059ca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d103      	bne.n	80059da <xQueueGenericSendFromISR+0x66>
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <xQueueGenericSendFromISR+0x6a>
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <xQueueGenericSendFromISR+0x6c>
 80059de:	2300      	movs	r3, #0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <xQueueGenericSendFromISR+0x84>
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	61fb      	str	r3, [r7, #28]
 80059f6:	e7fe      	b.n	80059f6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059f8:	f001 ff04 	bl	8007804 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059fc:	f3ef 8211 	mrs	r2, BASEPRI
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	61ba      	str	r2, [r7, #24]
 8005a12:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a14:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a16:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d302      	bcc.n	8005a2a <xQueueGenericSendFromISR+0xb6>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d12c      	bne.n	8005a84 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a3a:	f000 fb8c 	bl	8006156 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a3e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d112      	bne.n	8005a6e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d016      	beq.n	8005a7e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	3324      	adds	r3, #36	; 0x24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f001 f8d7 	bl	8006c08 <xTaskRemoveFromEventList>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00e      	beq.n	8005a7e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e007      	b.n	8005a7e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a72:	3301      	adds	r3, #1
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	b25a      	sxtb	r2, r3
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005a82:	e001      	b.n	8005a88 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	637b      	str	r3, [r7, #52]	; 0x34
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3738      	adds	r7, #56	; 0x38
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08e      	sub	sp, #56	; 0x38
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d109      	bne.n	8005ac4 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	623b      	str	r3, [r7, #32]
 8005ac2:	e7fe      	b.n	8005ac2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d009      	beq.n	8005ae0 <xQueueGiveFromISR+0x44>
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	e7fe      	b.n	8005ade <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <xQueueGiveFromISR+0x54>
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <xQueueGiveFromISR+0x58>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <xQueueGiveFromISR+0x5a>
 8005af4:	2300      	movs	r3, #0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <xQueueGiveFromISR+0x72>
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	e7fe      	b.n	8005b0c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b0e:	f001 fe79 	bl	8007804 <vPortValidateInterruptPriority>
	__asm volatile
 8005b12:	f3ef 8211 	mrs	r2, BASEPRI
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	617a      	str	r2, [r7, #20]
 8005b28:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005b2a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d22b      	bcs.n	8005b96 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b58:	d112      	bne.n	8005b80 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d016      	beq.n	8005b90 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	3324      	adds	r3, #36	; 0x24
 8005b66:	4618      	mov	r0, r3
 8005b68:	f001 f84e 	bl	8006c08 <xTaskRemoveFromEventList>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00e      	beq.n	8005b90 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00b      	beq.n	8005b90 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	e007      	b.n	8005b90 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b84:	3301      	adds	r3, #1
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	b25a      	sxtb	r2, r3
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b90:	2301      	movs	r3, #1
 8005b92:	637b      	str	r3, [r7, #52]	; 0x34
 8005b94:	e001      	b.n	8005b9a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	637b      	str	r3, [r7, #52]	; 0x34
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3738      	adds	r7, #56	; 0x38
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08c      	sub	sp, #48	; 0x30
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d109      	bne.n	8005bde <xQueueReceive+0x2e>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	623b      	str	r3, [r7, #32]
 8005bdc:	e7fe      	b.n	8005bdc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d103      	bne.n	8005bec <xQueueReceive+0x3c>
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <xQueueReceive+0x40>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <xQueueReceive+0x42>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <xQueueReceive+0x5a>
 8005bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	e7fe      	b.n	8005c08 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c0a:	f001 f9b9 	bl	8006f80 <xTaskGetSchedulerState>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d102      	bne.n	8005c1a <xQueueReceive+0x6a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <xQueueReceive+0x6e>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <xQueueReceive+0x70>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <xQueueReceive+0x88>
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	e7fe      	b.n	8005c36 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c38:	f001 fd08 	bl	800764c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01f      	beq.n	8005c88 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c4c:	f000 faed 	bl	800622a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	1e5a      	subs	r2, r3, #1
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00f      	beq.n	8005c80 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	3310      	adds	r3, #16
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 ffcf 	bl	8006c08 <xTaskRemoveFromEventList>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d007      	beq.n	8005c80 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c70:	4b3c      	ldr	r3, [pc, #240]	; (8005d64 <xQueueReceive+0x1b4>)
 8005c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c80:	f001 fd12 	bl	80076a8 <vPortExitCritical>
				return pdPASS;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e069      	b.n	8005d5c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d103      	bne.n	8005c96 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c8e:	f001 fd0b 	bl	80076a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e062      	b.n	8005d5c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d106      	bne.n	8005caa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c9c:	f107 0310 	add.w	r3, r7, #16
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f001 f813 	bl	8006ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005caa:	f001 fcfd 	bl	80076a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cae:	f000 fda5 	bl	80067fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cb2:	f001 fccb 	bl	800764c <vPortEnterCritical>
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cbc:	b25b      	sxtb	r3, r3
 8005cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc2:	d103      	bne.n	8005ccc <xQueueReceive+0x11c>
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cd2:	b25b      	sxtb	r3, r3
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd8:	d103      	bne.n	8005ce2 <xQueueReceive+0x132>
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ce2:	f001 fce1 	bl	80076a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ce6:	1d3a      	adds	r2, r7, #4
 8005ce8:	f107 0310 	add.w	r3, r7, #16
 8005cec:	4611      	mov	r1, r2
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 f802 	bl	8006cf8 <xTaskCheckForTimeOut>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d123      	bne.n	8005d42 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cfc:	f000 fb0d 	bl	800631a <prvIsQueueEmpty>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d017      	beq.n	8005d36 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	3324      	adds	r3, #36	; 0x24
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 ff56 	bl	8006bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d16:	f000 faae 	bl	8006276 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d1a:	f000 fd7d 	bl	8006818 <xTaskResumeAll>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d189      	bne.n	8005c38 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005d24:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <xQueueReceive+0x1b4>)
 8005d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	e780      	b.n	8005c38 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d38:	f000 fa9d 	bl	8006276 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d3c:	f000 fd6c 	bl	8006818 <xTaskResumeAll>
 8005d40:	e77a      	b.n	8005c38 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d44:	f000 fa97 	bl	8006276 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d48:	f000 fd66 	bl	8006818 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d4e:	f000 fae4 	bl	800631a <prvIsQueueEmpty>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f43f af6f 	beq.w	8005c38 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3730      	adds	r7, #48	; 0x30
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	e000ed04 	.word	0xe000ed04

08005d68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08e      	sub	sp, #56	; 0x38
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d109      	bne.n	8005d98 <xQueueSemaphoreTake+0x30>
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	623b      	str	r3, [r7, #32]
 8005d96:	e7fe      	b.n	8005d96 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d009      	beq.n	8005db4 <xQueueSemaphoreTake+0x4c>
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	e7fe      	b.n	8005db2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005db4:	f001 f8e4 	bl	8006f80 <xTaskGetSchedulerState>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d102      	bne.n	8005dc4 <xQueueSemaphoreTake+0x5c>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <xQueueSemaphoreTake+0x60>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <xQueueSemaphoreTake+0x62>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <xQueueSemaphoreTake+0x7a>
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	e7fe      	b.n	8005de0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005de2:	f001 fc33 	bl	800764c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d024      	beq.n	8005e3c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	1e5a      	subs	r2, r3, #1
 8005df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d104      	bne.n	8005e0c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005e02:	f001 fa83 	bl	800730c <pvTaskIncrementMutexHeldCount>
 8005e06:	4602      	mov	r2, r0
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00f      	beq.n	8005e34 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e16:	3310      	adds	r3, #16
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fef5 	bl	8006c08 <xTaskRemoveFromEventList>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e24:	4b53      	ldr	r3, [pc, #332]	; (8005f74 <xQueueSemaphoreTake+0x20c>)
 8005e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e34:	f001 fc38 	bl	80076a8 <vPortExitCritical>
				return pdPASS;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e096      	b.n	8005f6a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d110      	bne.n	8005e64 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d009      	beq.n	8005e5c <xQueueSemaphoreTake+0xf4>
 8005e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	e7fe      	b.n	8005e5a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005e5c:	f001 fc24 	bl	80076a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e60:	2300      	movs	r3, #0
 8005e62:	e082      	b.n	8005f6a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e6a:	f107 030c 	add.w	r3, r7, #12
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 ff2c 	bl	8006ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e78:	f001 fc16 	bl	80076a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e7c:	f000 fcbe 	bl	80067fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e80:	f001 fbe4 	bl	800764c <vPortEnterCritical>
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e8a:	b25b      	sxtb	r3, r3
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d103      	bne.n	8005e9a <xQueueSemaphoreTake+0x132>
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ea0:	b25b      	sxtb	r3, r3
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d103      	bne.n	8005eb0 <xQueueSemaphoreTake+0x148>
 8005ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eb0:	f001 fbfa 	bl	80076a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005eb4:	463a      	mov	r2, r7
 8005eb6:	f107 030c 	add.w	r3, r7, #12
 8005eba:	4611      	mov	r1, r2
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 ff1b 	bl	8006cf8 <xTaskCheckForTimeOut>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d132      	bne.n	8005f2e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005eca:	f000 fa26 	bl	800631a <prvIsQueueEmpty>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d026      	beq.n	8005f22 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d109      	bne.n	8005ef0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005edc:	f001 fbb6 	bl	800764c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f001 f869 	bl	8006fbc <xTaskPriorityInherit>
 8005eea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005eec:	f001 fbdc 	bl	80076a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	3324      	adds	r3, #36	; 0x24
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fe61 	bl	8006bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005efe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f00:	f000 f9b9 	bl	8006276 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f04:	f000 fc88 	bl	8006818 <xTaskResumeAll>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f47f af69 	bne.w	8005de2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005f10:	4b18      	ldr	r3, [pc, #96]	; (8005f74 <xQueueSemaphoreTake+0x20c>)
 8005f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	e75f      	b.n	8005de2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f24:	f000 f9a7 	bl	8006276 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f28:	f000 fc76 	bl	8006818 <xTaskResumeAll>
 8005f2c:	e759      	b.n	8005de2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f30:	f000 f9a1 	bl	8006276 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f34:	f000 fc70 	bl	8006818 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f3a:	f000 f9ee 	bl	800631a <prvIsQueueEmpty>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f43f af4e 	beq.w	8005de2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00d      	beq.n	8005f68 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005f4c:	f001 fb7e 	bl	800764c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005f50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f52:	f000 f8e8 	bl	8006126 <prvGetDisinheritPriorityAfterTimeout>
 8005f56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 f936 	bl	80071d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005f64:	f001 fba0 	bl	80076a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3738      	adds	r7, #56	; 0x38
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	e000ed04 	.word	0xe000ed04

08005f78 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08e      	sub	sp, #56	; 0x38
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d109      	bne.n	8005fa2 <xQueueReceiveFromISR+0x2a>
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	623b      	str	r3, [r7, #32]
 8005fa0:	e7fe      	b.n	8005fa0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d103      	bne.n	8005fb0 <xQueueReceiveFromISR+0x38>
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <xQueueReceiveFromISR+0x3c>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <xQueueReceiveFromISR+0x3e>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d109      	bne.n	8005fce <xQueueReceiveFromISR+0x56>
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	e7fe      	b.n	8005fcc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fce:	f001 fc19 	bl	8007804 <vPortValidateInterruptPriority>
	__asm volatile
 8005fd2:	f3ef 8211 	mrs	r2, BASEPRI
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	61ba      	str	r2, [r7, #24]
 8005fe8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005fea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d02f      	beq.n	800605a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006008:	f000 f90f 	bl	800622a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	1e5a      	subs	r2, r3, #1
 8006010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006012:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006014:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d112      	bne.n	8006044 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d016      	beq.n	8006054 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	3310      	adds	r3, #16
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fdec 	bl	8006c08 <xTaskRemoveFromEventList>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00e      	beq.n	8006054 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00b      	beq.n	8006054 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	e007      	b.n	8006054 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006048:	3301      	adds	r3, #1
 800604a:	b2db      	uxtb	r3, r3
 800604c:	b25a      	sxtb	r2, r3
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006054:	2301      	movs	r3, #1
 8006056:	637b      	str	r3, [r7, #52]	; 0x34
 8006058:	e001      	b.n	800605e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800605a:	2300      	movs	r3, #0
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800606a:	4618      	mov	r0, r3
 800606c:	3738      	adds	r7, #56	; 0x38
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d109      	bne.n	8006094 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	60bb      	str	r3, [r7, #8]
 8006092:	e7fe      	b.n	8006092 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8006094:	f001 fada 	bl	800764c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800609e:	f001 fb03 	bl	80076a8 <vPortExitCritical>

	return uxReturn;
 80060a2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d109      	bne.n	80060ce <uxQueueMessagesWaitingFromISR+0x22>
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	60bb      	str	r3, [r7, #8]
 80060cc:	e7fe      	b.n	80060cc <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 80060d4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <vQueueDelete+0x26>
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	e7fe      	b.n	8006106 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f935 	bl	8006378 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006114:	2b00      	cmp	r3, #0
 8006116:	d102      	bne.n	800611e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f001 fc73 	bl	8007a04 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800611e:	bf00      	nop
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006126:	b480      	push	{r7}
 8006128:	b085      	sub	sp, #20
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	2b00      	cmp	r3, #0
 8006134:	d006      	beq.n	8006144 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f1c3 0307 	rsb	r3, r3, #7
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	e001      	b.n	8006148 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006148:	68fb      	ldr	r3, [r7, #12]
	}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b086      	sub	sp, #24
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10d      	bne.n	8006190 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d14d      	bne.n	8006218 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	4618      	mov	r0, r3
 8006182:	f000 ffa1 	bl	80070c8 <xTaskPriorityDisinherit>
 8006186:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	605a      	str	r2, [r3, #4]
 800618e:	e043      	b.n	8006218 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d119      	bne.n	80061ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6898      	ldr	r0, [r3, #8]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	461a      	mov	r2, r3
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	f010 fcd6 	bl	8016b52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	441a      	add	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d32b      	bcc.n	8006218 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	609a      	str	r2, [r3, #8]
 80061c8:	e026      	b.n	8006218 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	68d8      	ldr	r0, [r3, #12]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	461a      	mov	r2, r3
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	f010 fcbc 	bl	8016b52 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	425b      	negs	r3, r3
 80061e4:	441a      	add	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d207      	bcs.n	8006206 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	425b      	negs	r3, r3
 8006200:	441a      	add	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b02      	cmp	r3, #2
 800620a:	d105      	bne.n	8006218 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	3b01      	subs	r3, #1
 8006216:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006220:	697b      	ldr	r3, [r7, #20]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d018      	beq.n	800626e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	441a      	add	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	429a      	cmp	r2, r3
 8006254:	d303      	bcc.n	800625e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68d9      	ldr	r1, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	461a      	mov	r2, r3
 8006268:	6838      	ldr	r0, [r7, #0]
 800626a:	f010 fc72 	bl	8016b52 <memcpy>
	}
}
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800627e:	f001 f9e5 	bl	800764c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006288:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800628a:	e011      	b.n	80062b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	2b00      	cmp	r3, #0
 8006292:	d012      	beq.n	80062ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3324      	adds	r3, #36	; 0x24
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fcb5 	bl	8006c08 <xTaskRemoveFromEventList>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062a4:	f000 fd88 	bl	8006db8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	dce9      	bgt.n	800628c <prvUnlockQueue+0x16>
 80062b8:	e000      	b.n	80062bc <prvUnlockQueue+0x46>
					break;
 80062ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	22ff      	movs	r2, #255	; 0xff
 80062c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80062c4:	f001 f9f0 	bl	80076a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062c8:	f001 f9c0 	bl	800764c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062d4:	e011      	b.n	80062fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d012      	beq.n	8006304 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3310      	adds	r3, #16
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fc90 	bl	8006c08 <xTaskRemoveFromEventList>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062ee:	f000 fd63 	bl	8006db8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062f2:	7bbb      	ldrb	r3, [r7, #14]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	dce9      	bgt.n	80062d6 <prvUnlockQueue+0x60>
 8006302:	e000      	b.n	8006306 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006304:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	22ff      	movs	r2, #255	; 0xff
 800630a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800630e:	f001 f9cb 	bl	80076a8 <vPortExitCritical>
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006322:	f001 f993 	bl	800764c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	2b00      	cmp	r3, #0
 800632c:	d102      	bne.n	8006334 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800632e:	2301      	movs	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	e001      	b.n	8006338 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006338:	f001 f9b6 	bl	80076a8 <vPortExitCritical>

	return xReturn;
 800633c:	68fb      	ldr	r3, [r7, #12]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800634e:	f001 f97d 	bl	800764c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635a:	429a      	cmp	r2, r3
 800635c:	d102      	bne.n	8006364 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800635e:	2301      	movs	r3, #1
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	e001      	b.n	8006368 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006368:	f001 f99e 	bl	80076a8 <vPortExitCritical>

	return xReturn;
 800636c:	68fb      	ldr	r3, [r7, #12]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	e016      	b.n	80063b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006386:	4a10      	ldr	r2, [pc, #64]	; (80063c8 <vQueueUnregisterQueue+0x50>)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	429a      	cmp	r2, r3
 8006394:	d10b      	bne.n	80063ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006396:	4a0c      	ldr	r2, [pc, #48]	; (80063c8 <vQueueUnregisterQueue+0x50>)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2100      	movs	r1, #0
 800639c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80063a0:	4a09      	ldr	r2, [pc, #36]	; (80063c8 <vQueueUnregisterQueue+0x50>)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	4413      	add	r3, r2
 80063a8:	2200      	movs	r2, #0
 80063aa:	605a      	str	r2, [r3, #4]
				break;
 80063ac:	e005      	b.n	80063ba <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3301      	adds	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b07      	cmp	r3, #7
 80063b8:	d9e5      	bls.n	8006386 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80063ba:	bf00      	nop
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	2000c350 	.word	0x2000c350

080063cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08e      	sub	sp, #56	; 0x38
 80063d0:	af04      	add	r7, sp, #16
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d109      	bne.n	80063f4 <xTaskCreateStatic+0x28>
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	623b      	str	r3, [r7, #32]
 80063f2:	e7fe      	b.n	80063f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d109      	bne.n	800640e <xTaskCreateStatic+0x42>
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	e7fe      	b.n	800640c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800640e:	2354      	movs	r3, #84	; 0x54
 8006410:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	2b54      	cmp	r3, #84	; 0x54
 8006416:	d009      	beq.n	800642c <xTaskCreateStatic+0x60>
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	e7fe      	b.n	800642a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	2b00      	cmp	r3, #0
 8006430:	d01e      	beq.n	8006470 <xTaskCreateStatic+0xa4>
 8006432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01b      	beq.n	8006470 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006440:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	2202      	movs	r2, #2
 8006446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800644a:	2300      	movs	r3, #0
 800644c:	9303      	str	r3, [sp, #12]
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	9302      	str	r3, [sp, #8]
 8006452:	f107 0314 	add.w	r3, r7, #20
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	68b9      	ldr	r1, [r7, #8]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 f850 	bl	8006508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800646a:	f000 f8cb 	bl	8006604 <prvAddNewTaskToReadyList>
 800646e:	e001      	b.n	8006474 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006474:	697b      	ldr	r3, [r7, #20]
	}
 8006476:	4618      	mov	r0, r3
 8006478:	3728      	adds	r7, #40	; 0x28
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800647e:	b580      	push	{r7, lr}
 8006480:	b08c      	sub	sp, #48	; 0x30
 8006482:	af04      	add	r7, sp, #16
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	603b      	str	r3, [r7, #0]
 800648a:	4613      	mov	r3, r2
 800648c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800648e:	88fb      	ldrh	r3, [r7, #6]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4618      	mov	r0, r3
 8006494:	f001 f9f4 	bl	8007880 <pvPortMalloc>
 8006498:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00e      	beq.n	80064be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80064a0:	2054      	movs	r0, #84	; 0x54
 80064a2:	f001 f9ed 	bl	8007880 <pvPortMalloc>
 80064a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	631a      	str	r2, [r3, #48]	; 0x30
 80064b4:	e005      	b.n	80064c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064b6:	6978      	ldr	r0, [r7, #20]
 80064b8:	f001 faa4 	bl	8007a04 <vPortFree>
 80064bc:	e001      	b.n	80064c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d017      	beq.n	80064f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064d0:	88fa      	ldrh	r2, [r7, #6]
 80064d2:	2300      	movs	r3, #0
 80064d4:	9303      	str	r3, [sp, #12]
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	9302      	str	r3, [sp, #8]
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	9301      	str	r3, [sp, #4]
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 f80e 	bl	8006508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064ec:	69f8      	ldr	r0, [r7, #28]
 80064ee:	f000 f889 	bl	8006604 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064f2:	2301      	movs	r3, #1
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	e002      	b.n	80064fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064f8:	f04f 33ff 	mov.w	r3, #4294967295
 80064fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064fe:	69bb      	ldr	r3, [r7, #24]
	}
 8006500:	4618      	mov	r0, r3
 8006502:	3720      	adds	r7, #32
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006520:	3b01      	subs	r3, #1
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	f023 0307 	bic.w	r3, r3, #7
 800652e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <prvInitialiseNewTask+0x46>
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e7fe      	b.n	800654c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800654e:	2300      	movs	r3, #0
 8006550:	61fb      	str	r3, [r7, #28]
 8006552:	e012      	b.n	800657a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	4413      	add	r3, r2
 800655a:	7819      	ldrb	r1, [r3, #0]
 800655c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4413      	add	r3, r2
 8006562:	3334      	adds	r3, #52	; 0x34
 8006564:	460a      	mov	r2, r1
 8006566:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d006      	beq.n	8006582 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	3301      	adds	r3, #1
 8006578:	61fb      	str	r3, [r7, #28]
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	2b0f      	cmp	r3, #15
 800657e:	d9e9      	bls.n	8006554 <prvInitialiseNewTask+0x4c>
 8006580:	e000      	b.n	8006584 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006582:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	2b06      	cmp	r3, #6
 8006590:	d901      	bls.n	8006596 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006592:	2306      	movs	r3, #6
 8006594:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800659a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065a0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	2200      	movs	r2, #0
 80065a6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	3304      	adds	r3, #4
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fe fece 	bl	800534e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	3318      	adds	r3, #24
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe fec9 	bl	800534e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	f1c3 0207 	rsb	r2, r3, #7
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	2200      	movs	r2, #0
 80065d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	68f9      	ldr	r1, [r7, #12]
 80065e4:	69b8      	ldr	r0, [r7, #24]
 80065e6:	f000 ff0b 	bl	8007400 <pxPortInitialiseStack>
 80065ea:	4602      	mov	r2, r0
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065fc:	bf00      	nop
 80065fe:	3720      	adds	r7, #32
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800660c:	f001 f81e 	bl	800764c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006610:	4b2a      	ldr	r3, [pc, #168]	; (80066bc <prvAddNewTaskToReadyList+0xb8>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3301      	adds	r3, #1
 8006616:	4a29      	ldr	r2, [pc, #164]	; (80066bc <prvAddNewTaskToReadyList+0xb8>)
 8006618:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800661a:	4b29      	ldr	r3, [pc, #164]	; (80066c0 <prvAddNewTaskToReadyList+0xbc>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006622:	4a27      	ldr	r2, [pc, #156]	; (80066c0 <prvAddNewTaskToReadyList+0xbc>)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006628:	4b24      	ldr	r3, [pc, #144]	; (80066bc <prvAddNewTaskToReadyList+0xb8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d110      	bne.n	8006652 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006630:	f000 fbe6 	bl	8006e00 <prvInitialiseTaskLists>
 8006634:	e00d      	b.n	8006652 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006636:	4b23      	ldr	r3, [pc, #140]	; (80066c4 <prvAddNewTaskToReadyList+0xc0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800663e:	4b20      	ldr	r3, [pc, #128]	; (80066c0 <prvAddNewTaskToReadyList+0xbc>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006648:	429a      	cmp	r2, r3
 800664a:	d802      	bhi.n	8006652 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800664c:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <prvAddNewTaskToReadyList+0xbc>)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006652:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <prvAddNewTaskToReadyList+0xc4>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3301      	adds	r3, #1
 8006658:	4a1b      	ldr	r2, [pc, #108]	; (80066c8 <prvAddNewTaskToReadyList+0xc4>)
 800665a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	2201      	movs	r2, #1
 8006662:	409a      	lsls	r2, r3
 8006664:	4b19      	ldr	r3, [pc, #100]	; (80066cc <prvAddNewTaskToReadyList+0xc8>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4313      	orrs	r3, r2
 800666a:	4a18      	ldr	r2, [pc, #96]	; (80066cc <prvAddNewTaskToReadyList+0xc8>)
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006672:	4613      	mov	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4a15      	ldr	r2, [pc, #84]	; (80066d0 <prvAddNewTaskToReadyList+0xcc>)
 800667c:	441a      	add	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3304      	adds	r3, #4
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f7fe fe6f 	bl	8005368 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800668a:	f001 f80d 	bl	80076a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800668e:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <prvAddNewTaskToReadyList+0xc0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00e      	beq.n	80066b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006696:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <prvAddNewTaskToReadyList+0xbc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d207      	bcs.n	80066b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066a4:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <prvAddNewTaskToReadyList+0xd0>)
 80066a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	20000760 	.word	0x20000760
 80066c0:	20000660 	.word	0x20000660
 80066c4:	2000076c 	.word	0x2000076c
 80066c8:	2000077c 	.word	0x2000077c
 80066cc:	20000768 	.word	0x20000768
 80066d0:	20000664 	.word	0x20000664
 80066d4:	e000ed04 	.word	0xe000ed04

080066d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066e0:	2300      	movs	r3, #0
 80066e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d016      	beq.n	8006718 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066ea:	4b13      	ldr	r3, [pc, #76]	; (8006738 <vTaskDelay+0x60>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <vTaskDelay+0x2e>
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	60bb      	str	r3, [r7, #8]
 8006704:	e7fe      	b.n	8006704 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006706:	f000 f879 	bl	80067fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800670a:	2100      	movs	r1, #0
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fe11 	bl	8007334 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006712:	f000 f881 	bl	8006818 <xTaskResumeAll>
 8006716:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d107      	bne.n	800672e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800671e:	4b07      	ldr	r3, [pc, #28]	; (800673c <vTaskDelay+0x64>)
 8006720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800672e:	bf00      	nop
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000788 	.word	0x20000788
 800673c:	e000ed04 	.word	0xe000ed04

08006740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08a      	sub	sp, #40	; 0x28
 8006744:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006746:	2300      	movs	r3, #0
 8006748:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800674e:	463a      	mov	r2, r7
 8006750:	1d39      	adds	r1, r7, #4
 8006752:	f107 0308 	add.w	r3, r7, #8
 8006756:	4618      	mov	r0, r3
 8006758:	f7f9 ff32 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	9202      	str	r2, [sp, #8]
 8006764:	9301      	str	r3, [sp, #4]
 8006766:	2300      	movs	r3, #0
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	2300      	movs	r3, #0
 800676c:	460a      	mov	r2, r1
 800676e:	491d      	ldr	r1, [pc, #116]	; (80067e4 <vTaskStartScheduler+0xa4>)
 8006770:	481d      	ldr	r0, [pc, #116]	; (80067e8 <vTaskStartScheduler+0xa8>)
 8006772:	f7ff fe2b 	bl	80063cc <xTaskCreateStatic>
 8006776:	4602      	mov	r2, r0
 8006778:	4b1c      	ldr	r3, [pc, #112]	; (80067ec <vTaskStartScheduler+0xac>)
 800677a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800677c:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <vTaskStartScheduler+0xac>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006784:	2301      	movs	r3, #1
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	e001      	b.n	800678e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d115      	bne.n	80067c0 <vTaskStartScheduler+0x80>
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067a6:	4b12      	ldr	r3, [pc, #72]	; (80067f0 <vTaskStartScheduler+0xb0>)
 80067a8:	f04f 32ff 	mov.w	r2, #4294967295
 80067ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067ae:	4b11      	ldr	r3, [pc, #68]	; (80067f4 <vTaskStartScheduler+0xb4>)
 80067b0:	2201      	movs	r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80067b4:	4b10      	ldr	r3, [pc, #64]	; (80067f8 <vTaskStartScheduler+0xb8>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067ba:	f000 fea9 	bl	8007510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067be:	e00d      	b.n	80067dc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	d109      	bne.n	80067dc <vTaskStartScheduler+0x9c>
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	e7fe      	b.n	80067da <vTaskStartScheduler+0x9a>
}
 80067dc:	bf00      	nop
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	08017fdc 	.word	0x08017fdc
 80067e8:	08006dd1 	.word	0x08006dd1
 80067ec:	20000784 	.word	0x20000784
 80067f0:	20000780 	.word	0x20000780
 80067f4:	2000076c 	.word	0x2000076c
 80067f8:	20000764 	.word	0x20000764

080067fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006800:	4b04      	ldr	r3, [pc, #16]	; (8006814 <vTaskSuspendAll+0x18>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3301      	adds	r3, #1
 8006806:	4a03      	ldr	r2, [pc, #12]	; (8006814 <vTaskSuspendAll+0x18>)
 8006808:	6013      	str	r3, [r2, #0]
}
 800680a:	bf00      	nop
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	20000788 	.word	0x20000788

08006818 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006822:	2300      	movs	r3, #0
 8006824:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006826:	4b41      	ldr	r3, [pc, #260]	; (800692c <xTaskResumeAll+0x114>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d109      	bne.n	8006842 <xTaskResumeAll+0x2a>
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	e7fe      	b.n	8006840 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006842:	f000 ff03 	bl	800764c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006846:	4b39      	ldr	r3, [pc, #228]	; (800692c <xTaskResumeAll+0x114>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3b01      	subs	r3, #1
 800684c:	4a37      	ldr	r2, [pc, #220]	; (800692c <xTaskResumeAll+0x114>)
 800684e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006850:	4b36      	ldr	r3, [pc, #216]	; (800692c <xTaskResumeAll+0x114>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d161      	bne.n	800691c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006858:	4b35      	ldr	r3, [pc, #212]	; (8006930 <xTaskResumeAll+0x118>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d05d      	beq.n	800691c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006860:	e02e      	b.n	80068c0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006862:	4b34      	ldr	r3, [pc, #208]	; (8006934 <xTaskResumeAll+0x11c>)
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3318      	adds	r3, #24
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe fdd7 	bl	8005422 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3304      	adds	r3, #4
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fdd2 	bl	8005422 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	2201      	movs	r2, #1
 8006884:	409a      	lsls	r2, r3
 8006886:	4b2c      	ldr	r3, [pc, #176]	; (8006938 <xTaskResumeAll+0x120>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4313      	orrs	r3, r2
 800688c:	4a2a      	ldr	r2, [pc, #168]	; (8006938 <xTaskResumeAll+0x120>)
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4a27      	ldr	r2, [pc, #156]	; (800693c <xTaskResumeAll+0x124>)
 800689e:	441a      	add	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f7fe fd5e 	bl	8005368 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b0:	4b23      	ldr	r3, [pc, #140]	; (8006940 <xTaskResumeAll+0x128>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d302      	bcc.n	80068c0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80068ba:	4b22      	ldr	r3, [pc, #136]	; (8006944 <xTaskResumeAll+0x12c>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068c0:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <xTaskResumeAll+0x11c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1cc      	bne.n	8006862 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068ce:	f000 fb31 	bl	8006f34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068d2:	4b1d      	ldr	r3, [pc, #116]	; (8006948 <xTaskResumeAll+0x130>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d010      	beq.n	8006900 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068de:	f000 f859 	bl	8006994 <xTaskIncrementTick>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80068e8:	4b16      	ldr	r3, [pc, #88]	; (8006944 <xTaskResumeAll+0x12c>)
 80068ea:	2201      	movs	r2, #1
 80068ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f1      	bne.n	80068de <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80068fa:	4b13      	ldr	r3, [pc, #76]	; (8006948 <xTaskResumeAll+0x130>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006900:	4b10      	ldr	r3, [pc, #64]	; (8006944 <xTaskResumeAll+0x12c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d009      	beq.n	800691c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006908:	2301      	movs	r3, #1
 800690a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800690c:	4b0f      	ldr	r3, [pc, #60]	; (800694c <xTaskResumeAll+0x134>)
 800690e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800691c:	f000 fec4 	bl	80076a8 <vPortExitCritical>

	return xAlreadyYielded;
 8006920:	68bb      	ldr	r3, [r7, #8]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000788 	.word	0x20000788
 8006930:	20000760 	.word	0x20000760
 8006934:	20000720 	.word	0x20000720
 8006938:	20000768 	.word	0x20000768
 800693c:	20000664 	.word	0x20000664
 8006940:	20000660 	.word	0x20000660
 8006944:	20000774 	.word	0x20000774
 8006948:	20000770 	.word	0x20000770
 800694c:	e000ed04 	.word	0xe000ed04

08006950 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <xTaskGetTickCount+0x1c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800695c:	687b      	ldr	r3, [r7, #4]
}
 800695e:	4618      	mov	r0, r3
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	20000764 	.word	0x20000764

08006970 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006976:	f000 ff45 	bl	8007804 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800697a:	2300      	movs	r3, #0
 800697c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800697e:	4b04      	ldr	r3, [pc, #16]	; (8006990 <xTaskGetTickCountFromISR+0x20>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006984:	683b      	ldr	r3, [r7, #0]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20000764 	.word	0x20000764

08006994 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800699a:	2300      	movs	r3, #0
 800699c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800699e:	4b50      	ldr	r3, [pc, #320]	; (8006ae0 <xTaskIncrementTick+0x14c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f040 808c 	bne.w	8006ac0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069a8:	4b4e      	ldr	r3, [pc, #312]	; (8006ae4 <xTaskIncrementTick+0x150>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3301      	adds	r3, #1
 80069ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069b0:	4a4c      	ldr	r2, [pc, #304]	; (8006ae4 <xTaskIncrementTick+0x150>)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d11f      	bne.n	80069fc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80069bc:	4b4a      	ldr	r3, [pc, #296]	; (8006ae8 <xTaskIncrementTick+0x154>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d009      	beq.n	80069da <xTaskIncrementTick+0x46>
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	e7fe      	b.n	80069d8 <xTaskIncrementTick+0x44>
 80069da:	4b43      	ldr	r3, [pc, #268]	; (8006ae8 <xTaskIncrementTick+0x154>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	4b42      	ldr	r3, [pc, #264]	; (8006aec <xTaskIncrementTick+0x158>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a40      	ldr	r2, [pc, #256]	; (8006ae8 <xTaskIncrementTick+0x154>)
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	4a40      	ldr	r2, [pc, #256]	; (8006aec <xTaskIncrementTick+0x158>)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	4b40      	ldr	r3, [pc, #256]	; (8006af0 <xTaskIncrementTick+0x15c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3301      	adds	r3, #1
 80069f4:	4a3e      	ldr	r2, [pc, #248]	; (8006af0 <xTaskIncrementTick+0x15c>)
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	f000 fa9c 	bl	8006f34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069fc:	4b3d      	ldr	r3, [pc, #244]	; (8006af4 <xTaskIncrementTick+0x160>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d34d      	bcc.n	8006aa2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a06:	4b38      	ldr	r3, [pc, #224]	; (8006ae8 <xTaskIncrementTick+0x154>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <xTaskIncrementTick+0x80>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <xTaskIncrementTick+0x82>
 8006a14:	2300      	movs	r3, #0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d004      	beq.n	8006a24 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a1a:	4b36      	ldr	r3, [pc, #216]	; (8006af4 <xTaskIncrementTick+0x160>)
 8006a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a20:	601a      	str	r2, [r3, #0]
					break;
 8006a22:	e03e      	b.n	8006aa2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a24:	4b30      	ldr	r3, [pc, #192]	; (8006ae8 <xTaskIncrementTick+0x154>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d203      	bcs.n	8006a44 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a3c:	4a2d      	ldr	r2, [pc, #180]	; (8006af4 <xTaskIncrementTick+0x160>)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6013      	str	r3, [r2, #0]
						break;
 8006a42:	e02e      	b.n	8006aa2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe fcea 	bl	8005422 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	3318      	adds	r3, #24
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe fce1 	bl	8005422 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a64:	2201      	movs	r2, #1
 8006a66:	409a      	lsls	r2, r3
 8006a68:	4b23      	ldr	r3, [pc, #140]	; (8006af8 <xTaskIncrementTick+0x164>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	4a22      	ldr	r2, [pc, #136]	; (8006af8 <xTaskIncrementTick+0x164>)
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4a1f      	ldr	r2, [pc, #124]	; (8006afc <xTaskIncrementTick+0x168>)
 8006a80:	441a      	add	r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	3304      	adds	r3, #4
 8006a86:	4619      	mov	r1, r3
 8006a88:	4610      	mov	r0, r2
 8006a8a:	f7fe fc6d 	bl	8005368 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a92:	4b1b      	ldr	r3, [pc, #108]	; (8006b00 <xTaskIncrementTick+0x16c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d3b4      	bcc.n	8006a06 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aa0:	e7b1      	b.n	8006a06 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006aa2:	4b17      	ldr	r3, [pc, #92]	; (8006b00 <xTaskIncrementTick+0x16c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa8:	4914      	ldr	r1, [pc, #80]	; (8006afc <xTaskIncrementTick+0x168>)
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	440b      	add	r3, r1
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d907      	bls.n	8006aca <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006aba:	2301      	movs	r3, #1
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	e004      	b.n	8006aca <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006ac0:	4b10      	ldr	r3, [pc, #64]	; (8006b04 <xTaskIncrementTick+0x170>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	4a0f      	ldr	r2, [pc, #60]	; (8006b04 <xTaskIncrementTick+0x170>)
 8006ac8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006aca:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <xTaskIncrementTick+0x174>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ad6:	697b      	ldr	r3, [r7, #20]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3718      	adds	r7, #24
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20000788 	.word	0x20000788
 8006ae4:	20000764 	.word	0x20000764
 8006ae8:	20000718 	.word	0x20000718
 8006aec:	2000071c 	.word	0x2000071c
 8006af0:	20000778 	.word	0x20000778
 8006af4:	20000780 	.word	0x20000780
 8006af8:	20000768 	.word	0x20000768
 8006afc:	20000664 	.word	0x20000664
 8006b00:	20000660 	.word	0x20000660
 8006b04:	20000770 	.word	0x20000770
 8006b08:	20000774 	.word	0x20000774

08006b0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b12:	4b26      	ldr	r3, [pc, #152]	; (8006bac <vTaskSwitchContext+0xa0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b1a:	4b25      	ldr	r3, [pc, #148]	; (8006bb0 <vTaskSwitchContext+0xa4>)
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b20:	e03e      	b.n	8006ba0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006b22:	4b23      	ldr	r3, [pc, #140]	; (8006bb0 <vTaskSwitchContext+0xa4>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006b28:	4b22      	ldr	r3, [pc, #136]	; (8006bb4 <vTaskSwitchContext+0xa8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	fab3 f383 	clz	r3, r3
 8006b34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b36:	7afb      	ldrb	r3, [r7, #11]
 8006b38:	f1c3 031f 	rsb	r3, r3, #31
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	491e      	ldr	r1, [pc, #120]	; (8006bb8 <vTaskSwitchContext+0xac>)
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d109      	bne.n	8006b66 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	607b      	str	r3, [r7, #4]
 8006b64:	e7fe      	b.n	8006b64 <vTaskSwitchContext+0x58>
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4a11      	ldr	r2, [pc, #68]	; (8006bb8 <vTaskSwitchContext+0xac>)
 8006b72:	4413      	add	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	605a      	str	r2, [r3, #4]
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	3308      	adds	r3, #8
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d104      	bne.n	8006b96 <vTaskSwitchContext+0x8a>
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	605a      	str	r2, [r3, #4]
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	4a07      	ldr	r2, [pc, #28]	; (8006bbc <vTaskSwitchContext+0xb0>)
 8006b9e:	6013      	str	r3, [r2, #0]
}
 8006ba0:	bf00      	nop
 8006ba2:	371c      	adds	r7, #28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	20000788 	.word	0x20000788
 8006bb0:	20000774 	.word	0x20000774
 8006bb4:	20000768 	.word	0x20000768
 8006bb8:	20000664 	.word	0x20000664
 8006bbc:	20000660 	.word	0x20000660

08006bc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d109      	bne.n	8006be4 <vTaskPlaceOnEventList+0x24>
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	e7fe      	b.n	8006be2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006be4:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <vTaskPlaceOnEventList+0x44>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3318      	adds	r3, #24
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7fe fbdf 	bl	80053b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	6838      	ldr	r0, [r7, #0]
 8006bf6:	f000 fb9d 	bl	8007334 <prvAddCurrentTaskToDelayedList>
}
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000660 	.word	0x20000660

08006c08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d109      	bne.n	8006c32 <xTaskRemoveFromEventList+0x2a>
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	e7fe      	b.n	8006c30 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	3318      	adds	r3, #24
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe fbf3 	bl	8005422 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c3c:	4b1d      	ldr	r3, [pc, #116]	; (8006cb4 <xTaskRemoveFromEventList+0xac>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d11c      	bne.n	8006c7e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	3304      	adds	r3, #4
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fe fbea 	bl	8005422 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c52:	2201      	movs	r2, #1
 8006c54:	409a      	lsls	r2, r3
 8006c56:	4b18      	ldr	r3, [pc, #96]	; (8006cb8 <xTaskRemoveFromEventList+0xb0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	4a16      	ldr	r2, [pc, #88]	; (8006cb8 <xTaskRemoveFromEventList+0xb0>)
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4a13      	ldr	r2, [pc, #76]	; (8006cbc <xTaskRemoveFromEventList+0xb4>)
 8006c6e:	441a      	add	r2, r3
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	3304      	adds	r3, #4
 8006c74:	4619      	mov	r1, r3
 8006c76:	4610      	mov	r0, r2
 8006c78:	f7fe fb76 	bl	8005368 <vListInsertEnd>
 8006c7c:	e005      	b.n	8006c8a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	3318      	adds	r3, #24
 8006c82:	4619      	mov	r1, r3
 8006c84:	480e      	ldr	r0, [pc, #56]	; (8006cc0 <xTaskRemoveFromEventList+0xb8>)
 8006c86:	f7fe fb6f 	bl	8005368 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8e:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <xTaskRemoveFromEventList+0xbc>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d905      	bls.n	8006ca4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c9c:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <xTaskRemoveFromEventList+0xc0>)
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	e001      	b.n	8006ca8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006ca8:	697b      	ldr	r3, [r7, #20]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000788 	.word	0x20000788
 8006cb8:	20000768 	.word	0x20000768
 8006cbc:	20000664 	.word	0x20000664
 8006cc0:	20000720 	.word	0x20000720
 8006cc4:	20000660 	.word	0x20000660
 8006cc8:	20000774 	.word	0x20000774

08006ccc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cd4:	4b06      	ldr	r3, [pc, #24]	; (8006cf0 <vTaskInternalSetTimeOutState+0x24>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006cdc:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <vTaskInternalSetTimeOutState+0x28>)
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	605a      	str	r2, [r3, #4]
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	20000778 	.word	0x20000778
 8006cf4:	20000764 	.word	0x20000764

08006cf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <xTaskCheckForTimeOut+0x24>
 8006d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	e7fe      	b.n	8006d1a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <xTaskCheckForTimeOut+0x3e>
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	e7fe      	b.n	8006d34 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006d36:	f000 fc89 	bl	800764c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d3a:	4b1d      	ldr	r3, [pc, #116]	; (8006db0 <xTaskCheckForTimeOut+0xb8>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d52:	d102      	bne.n	8006d5a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61fb      	str	r3, [r7, #28]
 8006d58:	e023      	b.n	8006da2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	4b15      	ldr	r3, [pc, #84]	; (8006db4 <xTaskCheckForTimeOut+0xbc>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d007      	beq.n	8006d76 <xTaskCheckForTimeOut+0x7e>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d302      	bcc.n	8006d76 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d70:	2301      	movs	r3, #1
 8006d72:	61fb      	str	r3, [r7, #28]
 8006d74:	e015      	b.n	8006da2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d20b      	bcs.n	8006d98 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	1ad2      	subs	r2, r2, r3
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff ff9d 	bl	8006ccc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d92:	2300      	movs	r3, #0
 8006d94:	61fb      	str	r3, [r7, #28]
 8006d96:	e004      	b.n	8006da2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006da2:	f000 fc81 	bl	80076a8 <vPortExitCritical>

	return xReturn;
 8006da6:	69fb      	ldr	r3, [r7, #28]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3720      	adds	r7, #32
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20000764 	.word	0x20000764
 8006db4:	20000778 	.word	0x20000778

08006db8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006dbc:	4b03      	ldr	r3, [pc, #12]	; (8006dcc <vTaskMissedYield+0x14>)
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]
}
 8006dc2:	bf00      	nop
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	20000774 	.word	0x20000774

08006dd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006dd8:	f000 f852 	bl	8006e80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ddc:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <prvIdleTask+0x28>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d9f9      	bls.n	8006dd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006de4:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <prvIdleTask+0x2c>)
 8006de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006df4:	e7f0      	b.n	8006dd8 <prvIdleTask+0x8>
 8006df6:	bf00      	nop
 8006df8:	20000664 	.word	0x20000664
 8006dfc:	e000ed04 	.word	0xe000ed04

08006e00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e06:	2300      	movs	r3, #0
 8006e08:	607b      	str	r3, [r7, #4]
 8006e0a:	e00c      	b.n	8006e26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4a12      	ldr	r2, [pc, #72]	; (8006e60 <prvInitialiseTaskLists+0x60>)
 8006e18:	4413      	add	r3, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fe fa77 	bl	800530e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3301      	adds	r3, #1
 8006e24:	607b      	str	r3, [r7, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b06      	cmp	r3, #6
 8006e2a:	d9ef      	bls.n	8006e0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e2c:	480d      	ldr	r0, [pc, #52]	; (8006e64 <prvInitialiseTaskLists+0x64>)
 8006e2e:	f7fe fa6e 	bl	800530e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e32:	480d      	ldr	r0, [pc, #52]	; (8006e68 <prvInitialiseTaskLists+0x68>)
 8006e34:	f7fe fa6b 	bl	800530e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e38:	480c      	ldr	r0, [pc, #48]	; (8006e6c <prvInitialiseTaskLists+0x6c>)
 8006e3a:	f7fe fa68 	bl	800530e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e3e:	480c      	ldr	r0, [pc, #48]	; (8006e70 <prvInitialiseTaskLists+0x70>)
 8006e40:	f7fe fa65 	bl	800530e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e44:	480b      	ldr	r0, [pc, #44]	; (8006e74 <prvInitialiseTaskLists+0x74>)
 8006e46:	f7fe fa62 	bl	800530e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e4a:	4b0b      	ldr	r3, [pc, #44]	; (8006e78 <prvInitialiseTaskLists+0x78>)
 8006e4c:	4a05      	ldr	r2, [pc, #20]	; (8006e64 <prvInitialiseTaskLists+0x64>)
 8006e4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e50:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <prvInitialiseTaskLists+0x7c>)
 8006e52:	4a05      	ldr	r2, [pc, #20]	; (8006e68 <prvInitialiseTaskLists+0x68>)
 8006e54:	601a      	str	r2, [r3, #0]
}
 8006e56:	bf00      	nop
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	20000664 	.word	0x20000664
 8006e64:	200006f0 	.word	0x200006f0
 8006e68:	20000704 	.word	0x20000704
 8006e6c:	20000720 	.word	0x20000720
 8006e70:	20000734 	.word	0x20000734
 8006e74:	2000074c 	.word	0x2000074c
 8006e78:	20000718 	.word	0x20000718
 8006e7c:	2000071c 	.word	0x2000071c

08006e80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e86:	e019      	b.n	8006ebc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e88:	f000 fbe0 	bl	800764c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006e8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <prvCheckTasksWaitingTermination+0x4c>)
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3304      	adds	r3, #4
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fe fac2 	bl	8005422 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	; (8006ed0 <prvCheckTasksWaitingTermination+0x50>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	4a0a      	ldr	r2, [pc, #40]	; (8006ed0 <prvCheckTasksWaitingTermination+0x50>)
 8006ea6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ea8:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <prvCheckTasksWaitingTermination+0x54>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	4a09      	ldr	r2, [pc, #36]	; (8006ed4 <prvCheckTasksWaitingTermination+0x54>)
 8006eb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006eb2:	f000 fbf9 	bl	80076a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f80e 	bl	8006ed8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <prvCheckTasksWaitingTermination+0x54>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e1      	bne.n	8006e88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ec4:	bf00      	nop
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000734 	.word	0x20000734
 8006ed0:	20000760 	.word	0x20000760
 8006ed4:	20000748 	.word	0x20000748

08006ed8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d108      	bne.n	8006efc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 fd88 	bl	8007a04 <vPortFree>
				vPortFree( pxTCB );
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fd85 	bl	8007a04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006efa:	e017      	b.n	8006f2c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d103      	bne.n	8006f0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fd7c 	bl	8007a04 <vPortFree>
	}
 8006f0c:	e00e      	b.n	8006f2c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d009      	beq.n	8006f2c <prvDeleteTCB+0x54>
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	e7fe      	b.n	8006f2a <prvDeleteTCB+0x52>
	}
 8006f2c:	bf00      	nop
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f3a:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <prvResetNextTaskUnblockTime+0x44>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <prvResetNextTaskUnblockTime+0x14>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e000      	b.n	8006f4a <prvResetNextTaskUnblockTime+0x16>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d004      	beq.n	8006f58 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f4e:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <prvResetNextTaskUnblockTime+0x48>)
 8006f50:	f04f 32ff 	mov.w	r2, #4294967295
 8006f54:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f56:	e008      	b.n	8006f6a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f58:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <prvResetNextTaskUnblockTime+0x44>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	4a05      	ldr	r2, [pc, #20]	; (8006f7c <prvResetNextTaskUnblockTime+0x48>)
 8006f68:	6013      	str	r3, [r2, #0]
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	20000718 	.word	0x20000718
 8006f7c:	20000780 	.word	0x20000780

08006f80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f86:	4b0b      	ldr	r3, [pc, #44]	; (8006fb4 <xTaskGetSchedulerState+0x34>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d102      	bne.n	8006f94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	607b      	str	r3, [r7, #4]
 8006f92:	e008      	b.n	8006fa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f94:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <xTaskGetSchedulerState+0x38>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	607b      	str	r3, [r7, #4]
 8006fa0:	e001      	b.n	8006fa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fa6:	687b      	ldr	r3, [r7, #4]
	}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	2000076c 	.word	0x2000076c
 8006fb8:	20000788 	.word	0x20000788

08006fbc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d06e      	beq.n	80070b0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd6:	4b39      	ldr	r3, [pc, #228]	; (80070bc <xTaskPriorityInherit+0x100>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d25e      	bcs.n	800709e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	db06      	blt.n	8006ff6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fe8:	4b34      	ldr	r3, [pc, #208]	; (80070bc <xTaskPriorityInherit+0x100>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fee:	f1c3 0207 	rsb	r2, r3, #7
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	6959      	ldr	r1, [r3, #20]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4a2e      	ldr	r2, [pc, #184]	; (80070c0 <xTaskPriorityInherit+0x104>)
 8007008:	4413      	add	r3, r2
 800700a:	4299      	cmp	r1, r3
 800700c:	d101      	bne.n	8007012 <xTaskPriorityInherit+0x56>
 800700e:	2301      	movs	r3, #1
 8007010:	e000      	b.n	8007014 <xTaskPriorityInherit+0x58>
 8007012:	2300      	movs	r3, #0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d03a      	beq.n	800708e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	3304      	adds	r3, #4
 800701c:	4618      	mov	r0, r3
 800701e:	f7fe fa00 	bl	8005422 <uxListRemove>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d115      	bne.n	8007054 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702c:	4924      	ldr	r1, [pc, #144]	; (80070c0 <xTaskPriorityInherit+0x104>)
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <xTaskPriorityInherit+0x98>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007042:	2201      	movs	r2, #1
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	43da      	mvns	r2, r3
 800704a:	4b1e      	ldr	r3, [pc, #120]	; (80070c4 <xTaskPriorityInherit+0x108>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4013      	ands	r3, r2
 8007050:	4a1c      	ldr	r2, [pc, #112]	; (80070c4 <xTaskPriorityInherit+0x108>)
 8007052:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007054:	4b19      	ldr	r3, [pc, #100]	; (80070bc <xTaskPriorityInherit+0x100>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	2201      	movs	r2, #1
 8007064:	409a      	lsls	r2, r3
 8007066:	4b17      	ldr	r3, [pc, #92]	; (80070c4 <xTaskPriorityInherit+0x108>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4313      	orrs	r3, r2
 800706c:	4a15      	ldr	r2, [pc, #84]	; (80070c4 <xTaskPriorityInherit+0x108>)
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4a10      	ldr	r2, [pc, #64]	; (80070c0 <xTaskPriorityInherit+0x104>)
 800707e:	441a      	add	r2, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f7fe f96e 	bl	8005368 <vListInsertEnd>
 800708c:	e004      	b.n	8007098 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800708e:	4b0b      	ldr	r3, [pc, #44]	; (80070bc <xTaskPriorityInherit+0x100>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007098:	2301      	movs	r3, #1
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	e008      	b.n	80070b0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070a2:	4b06      	ldr	r3, [pc, #24]	; (80070bc <xTaskPriorityInherit+0x100>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d201      	bcs.n	80070b0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070ac:	2301      	movs	r3, #1
 80070ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070b0:	68fb      	ldr	r3, [r7, #12]
	}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	20000660 	.word	0x20000660
 80070c0:	20000664 	.word	0x20000664
 80070c4:	20000768 	.word	0x20000768

080070c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d06c      	beq.n	80071b8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070de:	4b39      	ldr	r3, [pc, #228]	; (80071c4 <xTaskPriorityDisinherit+0xfc>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d009      	beq.n	80070fc <xTaskPriorityDisinherit+0x34>
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	e7fe      	b.n	80070fa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007100:	2b00      	cmp	r3, #0
 8007102:	d109      	bne.n	8007118 <xTaskPriorityDisinherit+0x50>
 8007104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	60bb      	str	r3, [r7, #8]
 8007116:	e7fe      	b.n	8007116 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711c:	1e5a      	subs	r2, r3, #1
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712a:	429a      	cmp	r2, r3
 800712c:	d044      	beq.n	80071b8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007132:	2b00      	cmp	r3, #0
 8007134:	d140      	bne.n	80071b8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	3304      	adds	r3, #4
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe f971 	bl	8005422 <uxListRemove>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d115      	bne.n	8007172 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714a:	491f      	ldr	r1, [pc, #124]	; (80071c8 <xTaskPriorityDisinherit+0x100>)
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	440b      	add	r3, r1
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10a      	bne.n	8007172 <xTaskPriorityDisinherit+0xaa>
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	2201      	movs	r2, #1
 8007162:	fa02 f303 	lsl.w	r3, r2, r3
 8007166:	43da      	mvns	r2, r3
 8007168:	4b18      	ldr	r3, [pc, #96]	; (80071cc <xTaskPriorityDisinherit+0x104>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4013      	ands	r3, r2
 800716e:	4a17      	ldr	r2, [pc, #92]	; (80071cc <xTaskPriorityDisinherit+0x104>)
 8007170:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	f1c3 0207 	rsb	r2, r3, #7
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	2201      	movs	r2, #1
 800718c:	409a      	lsls	r2, r3
 800718e:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <xTaskPriorityDisinherit+0x104>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4313      	orrs	r3, r2
 8007194:	4a0d      	ldr	r2, [pc, #52]	; (80071cc <xTaskPriorityDisinherit+0x104>)
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719c:	4613      	mov	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4a08      	ldr	r2, [pc, #32]	; (80071c8 <xTaskPriorityDisinherit+0x100>)
 80071a6:	441a      	add	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	3304      	adds	r3, #4
 80071ac:	4619      	mov	r1, r3
 80071ae:	4610      	mov	r0, r2
 80071b0:	f7fe f8da 	bl	8005368 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071b4:	2301      	movs	r3, #1
 80071b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071b8:	697b      	ldr	r3, [r7, #20]
	}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20000660 	.word	0x20000660
 80071c8:	20000664 	.word	0x20000664
 80071cc:	20000768 	.word	0x20000768

080071d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071de:	2301      	movs	r3, #1
 80071e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8086 	beq.w	80072f6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d109      	bne.n	8007206 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	e7fe      	b.n	8007204 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	429a      	cmp	r2, r3
 800720e:	d902      	bls.n	8007216 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	61fb      	str	r3, [r7, #28]
 8007214:	e002      	b.n	800721c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	69fa      	ldr	r2, [r7, #28]
 8007222:	429a      	cmp	r2, r3
 8007224:	d067      	beq.n	80072f6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	429a      	cmp	r2, r3
 800722e:	d162      	bne.n	80072f6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007230:	4b33      	ldr	r3, [pc, #204]	; (8007300 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	429a      	cmp	r2, r3
 8007238:	d109      	bne.n	800724e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	60bb      	str	r3, [r7, #8]
 800724c:	e7fe      	b.n	800724c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007252:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	69fa      	ldr	r2, [r7, #28]
 8007258:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	2b00      	cmp	r3, #0
 8007260:	db04      	blt.n	800726c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	f1c3 0207 	rsb	r2, r3, #7
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	6959      	ldr	r1, [r3, #20]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4a22      	ldr	r2, [pc, #136]	; (8007304 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800727c:	4413      	add	r3, r2
 800727e:	4299      	cmp	r1, r3
 8007280:	d101      	bne.n	8007286 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007286:	2300      	movs	r3, #0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d034      	beq.n	80072f6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	3304      	adds	r3, #4
 8007290:	4618      	mov	r0, r3
 8007292:	f7fe f8c6 	bl	8005422 <uxListRemove>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d115      	bne.n	80072c8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a0:	4918      	ldr	r1, [pc, #96]	; (8007304 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	440b      	add	r3, r1
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b6:	2201      	movs	r2, #1
 80072b8:	fa02 f303 	lsl.w	r3, r2, r3
 80072bc:	43da      	mvns	r2, r3
 80072be:	4b12      	ldr	r3, [pc, #72]	; (8007308 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4013      	ands	r3, r2
 80072c4:	4a10      	ldr	r2, [pc, #64]	; (8007308 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80072c6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	2201      	movs	r2, #1
 80072ce:	409a      	lsls	r2, r3
 80072d0:	4b0d      	ldr	r3, [pc, #52]	; (8007308 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	4a0c      	ldr	r2, [pc, #48]	; (8007308 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072de:	4613      	mov	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4a07      	ldr	r2, [pc, #28]	; (8007304 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80072e8:	441a      	add	r2, r3
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	3304      	adds	r3, #4
 80072ee:	4619      	mov	r1, r3
 80072f0:	4610      	mov	r0, r2
 80072f2:	f7fe f839 	bl	8005368 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072f6:	bf00      	nop
 80072f8:	3720      	adds	r7, #32
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	20000660 	.word	0x20000660
 8007304:	20000664 	.word	0x20000664
 8007308:	20000768 	.word	0x20000768

0800730c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007310:	4b07      	ldr	r3, [pc, #28]	; (8007330 <pvTaskIncrementMutexHeldCount+0x24>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d004      	beq.n	8007322 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007318:	4b05      	ldr	r3, [pc, #20]	; (8007330 <pvTaskIncrementMutexHeldCount+0x24>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800731e:	3201      	adds	r2, #1
 8007320:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007322:	4b03      	ldr	r3, [pc, #12]	; (8007330 <pvTaskIncrementMutexHeldCount+0x24>)
 8007324:	681b      	ldr	r3, [r3, #0]
	}
 8007326:	4618      	mov	r0, r3
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	20000660 	.word	0x20000660

08007334 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800733e:	4b29      	ldr	r3, [pc, #164]	; (80073e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007344:	4b28      	ldr	r3, [pc, #160]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3304      	adds	r3, #4
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe f869 	bl	8005422 <uxListRemove>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10b      	bne.n	800736e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007356:	4b24      	ldr	r3, [pc, #144]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	2201      	movs	r2, #1
 800735e:	fa02 f303 	lsl.w	r3, r2, r3
 8007362:	43da      	mvns	r2, r3
 8007364:	4b21      	ldr	r3, [pc, #132]	; (80073ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4013      	ands	r3, r2
 800736a:	4a20      	ldr	r2, [pc, #128]	; (80073ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800736c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007374:	d10a      	bne.n	800738c <prvAddCurrentTaskToDelayedList+0x58>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d007      	beq.n	800738c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800737c:	4b1a      	ldr	r3, [pc, #104]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3304      	adds	r3, #4
 8007382:	4619      	mov	r1, r3
 8007384:	481a      	ldr	r0, [pc, #104]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007386:	f7fd ffef 	bl	8005368 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800738a:	e026      	b.n	80073da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4413      	add	r3, r2
 8007392:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007394:	4b14      	ldr	r3, [pc, #80]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d209      	bcs.n	80073b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073a4:	4b13      	ldr	r3, [pc, #76]	; (80073f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	4b0f      	ldr	r3, [pc, #60]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4619      	mov	r1, r3
 80073b0:	4610      	mov	r0, r2
 80073b2:	f7fd fffd 	bl	80053b0 <vListInsert>
}
 80073b6:	e010      	b.n	80073da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073b8:	4b0f      	ldr	r3, [pc, #60]	; (80073f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f7fd fff3 	bl	80053b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073ca:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d202      	bcs.n	80073da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80073d4:	4a09      	ldr	r2, [pc, #36]	; (80073fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6013      	str	r3, [r2, #0]
}
 80073da:	bf00      	nop
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	20000764 	.word	0x20000764
 80073e8:	20000660 	.word	0x20000660
 80073ec:	20000768 	.word	0x20000768
 80073f0:	2000074c 	.word	0x2000074c
 80073f4:	2000071c 	.word	0x2000071c
 80073f8:	20000718 	.word	0x20000718
 80073fc:	20000780 	.word	0x20000780

08007400 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3b04      	subs	r3, #4
 8007410:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3b04      	subs	r3, #4
 800741e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f023 0201 	bic.w	r2, r3, #1
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3b04      	subs	r3, #4
 800742e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007430:	4a0c      	ldr	r2, [pc, #48]	; (8007464 <pxPortInitialiseStack+0x64>)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3b14      	subs	r3, #20
 800743a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3b04      	subs	r3, #4
 8007446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f06f 0202 	mvn.w	r2, #2
 800744e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3b20      	subs	r3, #32
 8007454:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007456:	68fb      	ldr	r3, [r7, #12]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	08007469 	.word	0x08007469

08007468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007472:	4b11      	ldr	r3, [pc, #68]	; (80074b8 <prvTaskExitError+0x50>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747a:	d009      	beq.n	8007490 <prvTaskExitError+0x28>
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	e7fe      	b.n	800748e <prvTaskExitError+0x26>
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074a2:	bf00      	nop
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0fc      	beq.n	80074a4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074aa:	bf00      	nop
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	2000000c 	.word	0x2000000c
 80074bc:	00000000 	.word	0x00000000

080074c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074c0:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <pxCurrentTCBConst2>)
 80074c2:	6819      	ldr	r1, [r3, #0]
 80074c4:	6808      	ldr	r0, [r1, #0]
 80074c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ca:	f380 8809 	msr	PSP, r0
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f04f 0000 	mov.w	r0, #0
 80074d6:	f380 8811 	msr	BASEPRI, r0
 80074da:	4770      	bx	lr
 80074dc:	f3af 8000 	nop.w

080074e0 <pxCurrentTCBConst2>:
 80074e0:	20000660 	.word	0x20000660
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop

080074e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074e8:	4808      	ldr	r0, [pc, #32]	; (800750c <prvPortStartFirstTask+0x24>)
 80074ea:	6800      	ldr	r0, [r0, #0]
 80074ec:	6800      	ldr	r0, [r0, #0]
 80074ee:	f380 8808 	msr	MSP, r0
 80074f2:	f04f 0000 	mov.w	r0, #0
 80074f6:	f380 8814 	msr	CONTROL, r0
 80074fa:	b662      	cpsie	i
 80074fc:	b661      	cpsie	f
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	df00      	svc	0
 8007508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800750a:	bf00      	nop
 800750c:	e000ed08 	.word	0xe000ed08

08007510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007516:	4b44      	ldr	r3, [pc, #272]	; (8007628 <xPortStartScheduler+0x118>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a44      	ldr	r2, [pc, #272]	; (800762c <xPortStartScheduler+0x11c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d109      	bne.n	8007534 <xPortStartScheduler+0x24>
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	613b      	str	r3, [r7, #16]
 8007532:	e7fe      	b.n	8007532 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007534:	4b3c      	ldr	r3, [pc, #240]	; (8007628 <xPortStartScheduler+0x118>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a3d      	ldr	r2, [pc, #244]	; (8007630 <xPortStartScheduler+0x120>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d109      	bne.n	8007552 <xPortStartScheduler+0x42>
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	e7fe      	b.n	8007550 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007552:	4b38      	ldr	r3, [pc, #224]	; (8007634 <xPortStartScheduler+0x124>)
 8007554:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	22ff      	movs	r2, #255	; 0xff
 8007562:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	b2db      	uxtb	r3, r3
 800756a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	b2db      	uxtb	r3, r3
 8007570:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007574:	b2da      	uxtb	r2, r3
 8007576:	4b30      	ldr	r3, [pc, #192]	; (8007638 <xPortStartScheduler+0x128>)
 8007578:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800757a:	4b30      	ldr	r3, [pc, #192]	; (800763c <xPortStartScheduler+0x12c>)
 800757c:	2207      	movs	r2, #7
 800757e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007580:	e009      	b.n	8007596 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007582:	4b2e      	ldr	r3, [pc, #184]	; (800763c <xPortStartScheduler+0x12c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3b01      	subs	r3, #1
 8007588:	4a2c      	ldr	r2, [pc, #176]	; (800763c <xPortStartScheduler+0x12c>)
 800758a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800758c:	78fb      	ldrb	r3, [r7, #3]
 800758e:	b2db      	uxtb	r3, r3
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	b2db      	uxtb	r3, r3
 8007594:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007596:	78fb      	ldrb	r3, [r7, #3]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759e:	2b80      	cmp	r3, #128	; 0x80
 80075a0:	d0ef      	beq.n	8007582 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075a2:	4b26      	ldr	r3, [pc, #152]	; (800763c <xPortStartScheduler+0x12c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f1c3 0307 	rsb	r3, r3, #7
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d009      	beq.n	80075c2 <xPortStartScheduler+0xb2>
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	60bb      	str	r3, [r7, #8]
 80075c0:	e7fe      	b.n	80075c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075c2:	4b1e      	ldr	r3, [pc, #120]	; (800763c <xPortStartScheduler+0x12c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	4a1c      	ldr	r2, [pc, #112]	; (800763c <xPortStartScheduler+0x12c>)
 80075ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075cc:	4b1b      	ldr	r3, [pc, #108]	; (800763c <xPortStartScheduler+0x12c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075d4:	4a19      	ldr	r2, [pc, #100]	; (800763c <xPortStartScheduler+0x12c>)
 80075d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075e0:	4b17      	ldr	r3, [pc, #92]	; (8007640 <xPortStartScheduler+0x130>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a16      	ldr	r2, [pc, #88]	; (8007640 <xPortStartScheduler+0x130>)
 80075e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075ec:	4b14      	ldr	r3, [pc, #80]	; (8007640 <xPortStartScheduler+0x130>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a13      	ldr	r2, [pc, #76]	; (8007640 <xPortStartScheduler+0x130>)
 80075f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075f8:	f000 f8d6 	bl	80077a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075fc:	4b11      	ldr	r3, [pc, #68]	; (8007644 <xPortStartScheduler+0x134>)
 80075fe:	2200      	movs	r2, #0
 8007600:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007602:	f000 f8f5 	bl	80077f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007606:	4b10      	ldr	r3, [pc, #64]	; (8007648 <xPortStartScheduler+0x138>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a0f      	ldr	r2, [pc, #60]	; (8007648 <xPortStartScheduler+0x138>)
 800760c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007610:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007612:	f7ff ff69 	bl	80074e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007616:	f7ff fa79 	bl	8006b0c <vTaskSwitchContext>
	prvTaskExitError();
 800761a:	f7ff ff25 	bl	8007468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	e000ed00 	.word	0xe000ed00
 800762c:	410fc271 	.word	0x410fc271
 8007630:	410fc270 	.word	0x410fc270
 8007634:	e000e400 	.word	0xe000e400
 8007638:	2000078c 	.word	0x2000078c
 800763c:	20000790 	.word	0x20000790
 8007640:	e000ed20 	.word	0xe000ed20
 8007644:	2000000c 	.word	0x2000000c
 8007648:	e000ef34 	.word	0xe000ef34

0800764c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007664:	4b0e      	ldr	r3, [pc, #56]	; (80076a0 <vPortEnterCritical+0x54>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	4a0d      	ldr	r2, [pc, #52]	; (80076a0 <vPortEnterCritical+0x54>)
 800766c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800766e:	4b0c      	ldr	r3, [pc, #48]	; (80076a0 <vPortEnterCritical+0x54>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d10e      	bne.n	8007694 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007676:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <vPortEnterCritical+0x58>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d009      	beq.n	8007694 <vPortEnterCritical+0x48>
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	603b      	str	r3, [r7, #0]
 8007692:	e7fe      	b.n	8007692 <vPortEnterCritical+0x46>
	}
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	2000000c 	.word	0x2000000c
 80076a4:	e000ed04 	.word	0xe000ed04

080076a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076ae:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <vPortExitCritical+0x4c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d109      	bne.n	80076ca <vPortExitCritical+0x22>
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	607b      	str	r3, [r7, #4]
 80076c8:	e7fe      	b.n	80076c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80076ca:	4b0a      	ldr	r3, [pc, #40]	; (80076f4 <vPortExitCritical+0x4c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3b01      	subs	r3, #1
 80076d0:	4a08      	ldr	r2, [pc, #32]	; (80076f4 <vPortExitCritical+0x4c>)
 80076d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076d4:	4b07      	ldr	r3, [pc, #28]	; (80076f4 <vPortExitCritical+0x4c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d104      	bne.n	80076e6 <vPortExitCritical+0x3e>
 80076dc:	2300      	movs	r3, #0
 80076de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	2000000c 	.word	0x2000000c
	...

08007700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007700:	f3ef 8009 	mrs	r0, PSP
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	4b15      	ldr	r3, [pc, #84]	; (8007760 <pxCurrentTCBConst>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f01e 0f10 	tst.w	lr, #16
 8007710:	bf08      	it	eq
 8007712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771a:	6010      	str	r0, [r2, #0]
 800771c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007724:	f380 8811 	msr	BASEPRI, r0
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f7ff f9ec 	bl	8006b0c <vTaskSwitchContext>
 8007734:	f04f 0000 	mov.w	r0, #0
 8007738:	f380 8811 	msr	BASEPRI, r0
 800773c:	bc09      	pop	{r0, r3}
 800773e:	6819      	ldr	r1, [r3, #0]
 8007740:	6808      	ldr	r0, [r1, #0]
 8007742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007746:	f01e 0f10 	tst.w	lr, #16
 800774a:	bf08      	it	eq
 800774c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007750:	f380 8809 	msr	PSP, r0
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst>:
 8007760:	20000660 	.word	0x20000660
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007780:	f7ff f908 	bl	8006994 <xTaskIncrementTick>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800778a:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <SysTick_Handler+0x3c>)
 800778c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	2300      	movs	r3, #0
 8007794:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800779c:	bf00      	nop
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	e000ed04 	.word	0xe000ed04

080077a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077ac:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <vPortSetupTimerInterrupt+0x34>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077b2:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <vPortSetupTimerInterrupt+0x38>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077b8:	4b0a      	ldr	r3, [pc, #40]	; (80077e4 <vPortSetupTimerInterrupt+0x3c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a0a      	ldr	r2, [pc, #40]	; (80077e8 <vPortSetupTimerInterrupt+0x40>)
 80077be:	fba2 2303 	umull	r2, r3, r2, r3
 80077c2:	099b      	lsrs	r3, r3, #6
 80077c4:	4a09      	ldr	r2, [pc, #36]	; (80077ec <vPortSetupTimerInterrupt+0x44>)
 80077c6:	3b01      	subs	r3, #1
 80077c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ca:	4b04      	ldr	r3, [pc, #16]	; (80077dc <vPortSetupTimerInterrupt+0x34>)
 80077cc:	2207      	movs	r2, #7
 80077ce:	601a      	str	r2, [r3, #0]
}
 80077d0:	bf00      	nop
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	e000e010 	.word	0xe000e010
 80077e0:	e000e018 	.word	0xe000e018
 80077e4:	20000000 	.word	0x20000000
 80077e8:	10624dd3 	.word	0x10624dd3
 80077ec:	e000e014 	.word	0xe000e014

080077f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007800 <vPortEnableVFP+0x10>
 80077f4:	6801      	ldr	r1, [r0, #0]
 80077f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077fa:	6001      	str	r1, [r0, #0]
 80077fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077fe:	bf00      	nop
 8007800:	e000ed88 	.word	0xe000ed88

08007804 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800780a:	f3ef 8305 	mrs	r3, IPSR
 800780e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b0f      	cmp	r3, #15
 8007814:	d913      	bls.n	800783e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007816:	4a16      	ldr	r2, [pc, #88]	; (8007870 <vPortValidateInterruptPriority+0x6c>)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4413      	add	r3, r2
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007820:	4b14      	ldr	r3, [pc, #80]	; (8007874 <vPortValidateInterruptPriority+0x70>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	7afa      	ldrb	r2, [r7, #11]
 8007826:	429a      	cmp	r2, r3
 8007828:	d209      	bcs.n	800783e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	607b      	str	r3, [r7, #4]
 800783c:	e7fe      	b.n	800783c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800783e:	4b0e      	ldr	r3, [pc, #56]	; (8007878 <vPortValidateInterruptPriority+0x74>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007846:	4b0d      	ldr	r3, [pc, #52]	; (800787c <vPortValidateInterruptPriority+0x78>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d909      	bls.n	8007862 <vPortValidateInterruptPriority+0x5e>
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	603b      	str	r3, [r7, #0]
 8007860:	e7fe      	b.n	8007860 <vPortValidateInterruptPriority+0x5c>
	}
 8007862:	bf00      	nop
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	e000e3f0 	.word	0xe000e3f0
 8007874:	2000078c 	.word	0x2000078c
 8007878:	e000ed0c 	.word	0xe000ed0c
 800787c:	20000790 	.word	0x20000790

08007880 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08a      	sub	sp, #40	; 0x28
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007888:	2300      	movs	r3, #0
 800788a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800788c:	f7fe ffb6 	bl	80067fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007890:	4b57      	ldr	r3, [pc, #348]	; (80079f0 <pvPortMalloc+0x170>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007898:	f000 f90c 	bl	8007ab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800789c:	4b55      	ldr	r3, [pc, #340]	; (80079f4 <pvPortMalloc+0x174>)
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4013      	ands	r3, r2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f040 808c 	bne.w	80079c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01c      	beq.n	80078ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80078b0:	2208      	movs	r2, #8
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4413      	add	r3, r2
 80078b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d013      	beq.n	80078ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f023 0307 	bic.w	r3, r3, #7
 80078c8:	3308      	adds	r3, #8
 80078ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f003 0307 	and.w	r3, r3, #7
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d009      	beq.n	80078ea <pvPortMalloc+0x6a>
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	e7fe      	b.n	80078e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d068      	beq.n	80079c2 <pvPortMalloc+0x142>
 80078f0:	4b41      	ldr	r3, [pc, #260]	; (80079f8 <pvPortMalloc+0x178>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d863      	bhi.n	80079c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078fa:	4b40      	ldr	r3, [pc, #256]	; (80079fc <pvPortMalloc+0x17c>)
 80078fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078fe:	4b3f      	ldr	r3, [pc, #252]	; (80079fc <pvPortMalloc+0x17c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007904:	e004      	b.n	8007910 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	429a      	cmp	r2, r3
 8007918:	d903      	bls.n	8007922 <pvPortMalloc+0xa2>
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1f1      	bne.n	8007906 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007922:	4b33      	ldr	r3, [pc, #204]	; (80079f0 <pvPortMalloc+0x170>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007928:	429a      	cmp	r2, r3
 800792a:	d04a      	beq.n	80079c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2208      	movs	r2, #8
 8007932:	4413      	add	r3, r2
 8007934:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	1ad2      	subs	r2, r2, r3
 8007946:	2308      	movs	r3, #8
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	429a      	cmp	r2, r3
 800794c:	d91e      	bls.n	800798c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800794e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4413      	add	r3, r2
 8007954:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	f003 0307 	and.w	r3, r3, #7
 800795c:	2b00      	cmp	r3, #0
 800795e:	d009      	beq.n	8007974 <pvPortMalloc+0xf4>
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	613b      	str	r3, [r7, #16]
 8007972:	e7fe      	b.n	8007972 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	1ad2      	subs	r2, r2, r3
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007986:	69b8      	ldr	r0, [r7, #24]
 8007988:	f000 f8f6 	bl	8007b78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800798c:	4b1a      	ldr	r3, [pc, #104]	; (80079f8 <pvPortMalloc+0x178>)
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	4a18      	ldr	r2, [pc, #96]	; (80079f8 <pvPortMalloc+0x178>)
 8007998:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800799a:	4b17      	ldr	r3, [pc, #92]	; (80079f8 <pvPortMalloc+0x178>)
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	4b18      	ldr	r3, [pc, #96]	; (8007a00 <pvPortMalloc+0x180>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d203      	bcs.n	80079ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079a6:	4b14      	ldr	r3, [pc, #80]	; (80079f8 <pvPortMalloc+0x178>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a15      	ldr	r2, [pc, #84]	; (8007a00 <pvPortMalloc+0x180>)
 80079ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	4b10      	ldr	r3, [pc, #64]	; (80079f4 <pvPortMalloc+0x174>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	431a      	orrs	r2, r3
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079c2:	f7fe ff29 	bl	8006818 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d009      	beq.n	80079e4 <pvPortMalloc+0x164>
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	e7fe      	b.n	80079e2 <pvPortMalloc+0x162>
	return pvReturn;
 80079e4:	69fb      	ldr	r3, [r7, #28]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3728      	adds	r7, #40	; 0x28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	2000879c 	.word	0x2000879c
 80079f4:	200087a8 	.word	0x200087a8
 80079f8:	200087a0 	.word	0x200087a0
 80079fc:	20008794 	.word	0x20008794
 8007a00:	200087a4 	.word	0x200087a4

08007a04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d046      	beq.n	8007aa4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a16:	2308      	movs	r3, #8
 8007a18:	425b      	negs	r3, r3
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	4b20      	ldr	r3, [pc, #128]	; (8007aac <vPortFree+0xa8>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d109      	bne.n	8007a46 <vPortFree+0x42>
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	e7fe      	b.n	8007a44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d009      	beq.n	8007a62 <vPortFree+0x5e>
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	60bb      	str	r3, [r7, #8]
 8007a60:	e7fe      	b.n	8007a60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	4b11      	ldr	r3, [pc, #68]	; (8007aac <vPortFree+0xa8>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d019      	beq.n	8007aa4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d115      	bne.n	8007aa4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <vPortFree+0xa8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	43db      	mvns	r3, r3
 8007a82:	401a      	ands	r2, r3
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a88:	f7fe feb8 	bl	80067fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <vPortFree+0xac>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4413      	add	r3, r2
 8007a96:	4a06      	ldr	r2, [pc, #24]	; (8007ab0 <vPortFree+0xac>)
 8007a98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a9a:	6938      	ldr	r0, [r7, #16]
 8007a9c:	f000 f86c 	bl	8007b78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007aa0:	f7fe feba 	bl	8006818 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007aa4:	bf00      	nop
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	200087a8 	.word	0x200087a8
 8007ab0:	200087a0 	.word	0x200087a0

08007ab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007abe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ac0:	4b27      	ldr	r3, [pc, #156]	; (8007b60 <prvHeapInit+0xac>)
 8007ac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00c      	beq.n	8007ae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3307      	adds	r3, #7
 8007ad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 0307 	bic.w	r3, r3, #7
 8007ada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	4a1f      	ldr	r2, [pc, #124]	; (8007b60 <prvHeapInit+0xac>)
 8007ae4:	4413      	add	r3, r2
 8007ae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007aec:	4a1d      	ldr	r2, [pc, #116]	; (8007b64 <prvHeapInit+0xb0>)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007af2:	4b1c      	ldr	r3, [pc, #112]	; (8007b64 <prvHeapInit+0xb0>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	4413      	add	r3, r2
 8007afe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b00:	2208      	movs	r2, #8
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	1a9b      	subs	r3, r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f023 0307 	bic.w	r3, r3, #7
 8007b0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4a15      	ldr	r2, [pc, #84]	; (8007b68 <prvHeapInit+0xb4>)
 8007b14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b16:	4b14      	ldr	r3, [pc, #80]	; (8007b68 <prvHeapInit+0xb4>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b1e:	4b12      	ldr	r3, [pc, #72]	; (8007b68 <prvHeapInit+0xb4>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	1ad2      	subs	r2, r2, r3
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b34:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <prvHeapInit+0xb4>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	4a0a      	ldr	r2, [pc, #40]	; (8007b6c <prvHeapInit+0xb8>)
 8007b42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	4a09      	ldr	r2, [pc, #36]	; (8007b70 <prvHeapInit+0xbc>)
 8007b4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b4c:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <prvHeapInit+0xc0>)
 8007b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b52:	601a      	str	r2, [r3, #0]
}
 8007b54:	bf00      	nop
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	20000794 	.word	0x20000794
 8007b64:	20008794 	.word	0x20008794
 8007b68:	2000879c 	.word	0x2000879c
 8007b6c:	200087a4 	.word	0x200087a4
 8007b70:	200087a0 	.word	0x200087a0
 8007b74:	200087a8 	.word	0x200087a8

08007b78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b80:	4b28      	ldr	r3, [pc, #160]	; (8007c24 <prvInsertBlockIntoFreeList+0xac>)
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	e002      	b.n	8007b8c <prvInsertBlockIntoFreeList+0x14>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d8f7      	bhi.n	8007b86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d108      	bne.n	8007bba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	441a      	add	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	441a      	add	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d118      	bne.n	8007c00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	4b15      	ldr	r3, [pc, #84]	; (8007c28 <prvInsertBlockIntoFreeList+0xb0>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d00d      	beq.n	8007bf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	441a      	add	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	e008      	b.n	8007c08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bf6:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <prvInsertBlockIntoFreeList+0xb0>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	e003      	b.n	8007c08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d002      	beq.n	8007c16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c16:	bf00      	nop
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	20008794 	.word	0x20008794
 8007c28:	2000879c 	.word	0x2000879c

08007c2c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	330c      	adds	r3, #12
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f002 f96f 	bl	8009f24 <tcpip_send_msg_wait_sem>
 8007c46:	4603      	mov	r3, r0
 8007c48:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d103      	bne.n	8007c5a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007c58:	e001      	b.n	8007c5e <netconn_apimsg+0x32>
  }
  return err;
 8007c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08a      	sub	sp, #40	; 0x28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	603a      	str	r2, [r7, #0]
 8007c72:	71fb      	strb	r3, [r7, #7]
 8007c74:	460b      	mov	r3, r1
 8007c76:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 ff83 	bl	8008b88 <netconn_alloc>
 8007c82:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d054      	beq.n	8007d34 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007c8a:	79bb      	ldrb	r3, [r7, #6]
 8007c8c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007c92:	f107 030c 	add.w	r3, r7, #12
 8007c96:	4619      	mov	r1, r3
 8007c98:	4829      	ldr	r0, [pc, #164]	; (8007d40 <netconn_new_with_proto_and_callback+0xd8>)
 8007c9a:	f7ff ffc7 	bl	8007c2c <netconn_apimsg>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8007ca4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d043      	beq.n	8007d34 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d005      	beq.n	8007cc0 <netconn_new_with_proto_and_callback+0x58>
 8007cb4:	4b23      	ldr	r3, [pc, #140]	; (8007d44 <netconn_new_with_proto_and_callback+0xdc>)
 8007cb6:	2289      	movs	r2, #137	; 0x89
 8007cb8:	4923      	ldr	r1, [pc, #140]	; (8007d48 <netconn_new_with_proto_and_callback+0xe0>)
 8007cba:	4824      	ldr	r0, [pc, #144]	; (8007d4c <netconn_new_with_proto_and_callback+0xe4>)
 8007cbc:	f00e ff5c 	bl	8016b78 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	3310      	adds	r3, #16
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f00e fdd7 	bl	8016878 <sys_mbox_valid>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d105      	bne.n	8007cdc <netconn_new_with_proto_and_callback+0x74>
 8007cd0:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <netconn_new_with_proto_and_callback+0xdc>)
 8007cd2:	228a      	movs	r2, #138	; 0x8a
 8007cd4:	491e      	ldr	r1, [pc, #120]	; (8007d50 <netconn_new_with_proto_and_callback+0xe8>)
 8007cd6:	481d      	ldr	r0, [pc, #116]	; (8007d4c <netconn_new_with_proto_and_callback+0xe4>)
 8007cd8:	f00e ff4e 	bl	8016b78 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	3314      	adds	r3, #20
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f00e fdc9 	bl	8016878 <sys_mbox_valid>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <netconn_new_with_proto_and_callback+0x90>
 8007cec:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <netconn_new_with_proto_and_callback+0xdc>)
 8007cee:	228c      	movs	r2, #140	; 0x8c
 8007cf0:	4918      	ldr	r1, [pc, #96]	; (8007d54 <netconn_new_with_proto_and_callback+0xec>)
 8007cf2:	4816      	ldr	r0, [pc, #88]	; (8007d4c <netconn_new_with_proto_and_callback+0xe4>)
 8007cf4:	f00e ff40 	bl	8016b78 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	330c      	adds	r3, #12
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f00e fe4c 	bl	801699a <sys_sem_valid>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d105      	bne.n	8007d14 <netconn_new_with_proto_and_callback+0xac>
 8007d08:	4b0e      	ldr	r3, [pc, #56]	; (8007d44 <netconn_new_with_proto_and_callback+0xdc>)
 8007d0a:	228f      	movs	r2, #143	; 0x8f
 8007d0c:	4912      	ldr	r1, [pc, #72]	; (8007d58 <netconn_new_with_proto_and_callback+0xf0>)
 8007d0e:	480f      	ldr	r0, [pc, #60]	; (8007d4c <netconn_new_with_proto_and_callback+0xe4>)
 8007d10:	f00e ff32 	bl	8016b78 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	330c      	adds	r3, #12
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f00e fe31 	bl	8016980 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	3310      	adds	r3, #16
 8007d22:	4618      	mov	r0, r3
 8007d24:	f00e fd0c 	bl	8016740 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007d28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d2a:	2007      	movs	r0, #7
 8007d2c:	f003 fcb2 	bl	800b694 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007d30:	2300      	movs	r3, #0
 8007d32:	e000      	b.n	8007d36 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3728      	adds	r7, #40	; 0x28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	08008b31 	.word	0x08008b31
 8007d44:	08017fe4 	.word	0x08017fe4
 8007d48:	08018018 	.word	0x08018018
 8007d4c:	0801803c 	.word	0x0801803c
 8007d50:	08018064 	.word	0x08018064
 8007d54:	0801807c 	.word	0x0801807c
 8007d58:	080180a0 	.word	0x080180a0

08007d5c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <netconn_delete+0x12>
    return ERR_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e016      	b.n	8007d9c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007d72:	2329      	movs	r3, #41	; 0x29
 8007d74:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007d76:	f107 0308 	add.w	r3, r7, #8
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4809      	ldr	r0, [pc, #36]	; (8007da4 <netconn_delete+0x48>)
 8007d7e:	f7ff ff55 	bl	8007c2c <netconn_apimsg>
 8007d82:	4603      	mov	r3, r0
 8007d84:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007d86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d002      	beq.n	8007d94 <netconn_delete+0x38>
    return err;
 8007d8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d92:	e003      	b.n	8007d9c <netconn_delete+0x40>
  }

  netconn_free(conn);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 ff67 	bl	8008c68 <netconn_free>

  return ERR_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3720      	adds	r7, #32
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	080090ed 	.word	0x080090ed

08007da8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	; 0x28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d108      	bne.n	8007dce <netconn_bind+0x26>
 8007dbc:	4b11      	ldr	r3, [pc, #68]	; (8007e04 <netconn_bind+0x5c>)
 8007dbe:	22ff      	movs	r2, #255	; 0xff
 8007dc0:	4911      	ldr	r1, [pc, #68]	; (8007e08 <netconn_bind+0x60>)
 8007dc2:	4812      	ldr	r0, [pc, #72]	; (8007e0c <netconn_bind+0x64>)
 8007dc4:	f00e fed8 	bl	8016b78 <iprintf>
 8007dc8:	f06f 030f 	mvn.w	r3, #15
 8007dcc:	e015      	b.n	8007dfa <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 8007dd4:	4b0e      	ldr	r3, [pc, #56]	; (8007e10 <netconn_bind+0x68>)
 8007dd6:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007de0:	88fb      	ldrh	r3, [r7, #6]
 8007de2:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007de4:	f107 0310 	add.w	r3, r7, #16
 8007de8:	4619      	mov	r1, r3
 8007dea:	480a      	ldr	r0, [pc, #40]	; (8007e14 <netconn_bind+0x6c>)
 8007dec:	f7ff ff1e 	bl	8007c2c <netconn_apimsg>
 8007df0:	4603      	mov	r3, r0
 8007df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8007df6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3728      	adds	r7, #40	; 0x28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	08017fe4 	.word	0x08017fe4
 8007e08:	0801811c 	.word	0x0801811c
 8007e0c:	0801803c 	.word	0x0801803c
 8007e10:	080262d4 	.word	0x080262d4
 8007e14:	080092f1 	.word	0x080092f1

08007e18 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d109      	bne.n	8007e3e <netconn_listen_with_backlog+0x26>
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <netconn_listen_with_backlog+0x48>)
 8007e2c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8007e30:	490c      	ldr	r1, [pc, #48]	; (8007e64 <netconn_listen_with_backlog+0x4c>)
 8007e32:	480d      	ldr	r0, [pc, #52]	; (8007e68 <netconn_listen_with_backlog+0x50>)
 8007e34:	f00e fea0 	bl	8016b78 <iprintf>
 8007e38:	f06f 030f 	mvn.w	r3, #15
 8007e3c:	e00b      	b.n	8007e56 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007e42:	f107 0308 	add.w	r3, r7, #8
 8007e46:	4619      	mov	r1, r3
 8007e48:	4808      	ldr	r0, [pc, #32]	; (8007e6c <netconn_listen_with_backlog+0x54>)
 8007e4a:	f7ff feef 	bl	8007c2c <netconn_apimsg>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8007e52:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3720      	adds	r7, #32
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	08017fe4 	.word	0x08017fe4
 8007e64:	0801817c 	.word	0x0801817c
 8007e68:	0801803c 	.word	0x0801803c
 8007e6c:	080093b1 	.word	0x080093b1

08007e70 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d109      	bne.n	8007e94 <netconn_accept+0x24>
 8007e80:	4b34      	ldr	r3, [pc, #208]	; (8007f54 <netconn_accept+0xe4>)
 8007e82:	f240 128d 	movw	r2, #397	; 0x18d
 8007e86:	4934      	ldr	r1, [pc, #208]	; (8007f58 <netconn_accept+0xe8>)
 8007e88:	4834      	ldr	r0, [pc, #208]	; (8007f5c <netconn_accept+0xec>)
 8007e8a:	f00e fe75 	bl	8016b78 <iprintf>
 8007e8e:	f06f 030f 	mvn.w	r3, #15
 8007e92:	e05b      	b.n	8007f4c <netconn_accept+0xdc>
  *new_conn = NULL;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2200      	movs	r2, #0
 8007e98:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d109      	bne.n	8007eb4 <netconn_accept+0x44>
 8007ea0:	4b2c      	ldr	r3, [pc, #176]	; (8007f54 <netconn_accept+0xe4>)
 8007ea2:	f240 128f 	movw	r2, #399	; 0x18f
 8007ea6:	492e      	ldr	r1, [pc, #184]	; (8007f60 <netconn_accept+0xf0>)
 8007ea8:	482c      	ldr	r0, [pc, #176]	; (8007f5c <netconn_accept+0xec>)
 8007eaa:	f00e fe65 	bl	8016b78 <iprintf>
 8007eae:	f06f 030f 	mvn.w	r3, #15
 8007eb2:	e04b      	b.n	8007f4c <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007eba:	f113 0f0c 	cmn.w	r3, #12
 8007ebe:	da03      	bge.n	8007ec8 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007ec6:	e041      	b.n	8007f4c <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3314      	adds	r3, #20
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f00e fcd3 	bl	8016878 <sys_mbox_valid>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d102      	bne.n	8007ede <netconn_accept+0x6e>
    return ERR_CLSD;
 8007ed8:	f06f 030e 	mvn.w	r3, #14
 8007edc:	e036      	b.n	8007f4c <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	3314      	adds	r3, #20
 8007ee2:	f107 010c 	add.w	r1, r7, #12
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f00e fc6a 	bl	80167c2 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d005      	beq.n	8007f06 <netconn_accept+0x96>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efe:	2200      	movs	r2, #0
 8007f00:	2101      	movs	r1, #1
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4a16      	ldr	r2, [pc, #88]	; (8007f64 <netconn_accept+0xf4>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d102      	bne.n	8007f14 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 8007f0e:	f06f 030c 	mvn.w	r3, #12
 8007f12:	e01b      	b.n	8007f4c <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d114      	bne.n	8007f44 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00e      	beq.n	8007f3e <netconn_accept+0xce>
 8007f20:	f00e fdc6 	bl	8016ab0 <sys_arch_protect>
 8007f24:	6138      	str	r0, [r7, #16]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007f2c:	f113 0f0c 	cmn.w	r3, #12
 8007f30:	db02      	blt.n	8007f38 <netconn_accept+0xc8>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	22f1      	movs	r2, #241	; 0xf1
 8007f36:	721a      	strb	r2, [r3, #8]
 8007f38:	6938      	ldr	r0, [r7, #16]
 8007f3a:	f00e fdc7 	bl	8016acc <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 8007f3e:	f06f 030e 	mvn.w	r3, #14
 8007f42:	e003      	b.n	8007f4c <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007f4a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3718      	adds	r7, #24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	08017fe4 	.word	0x08017fe4
 8007f58:	0801819c 	.word	0x0801819c
 8007f5c:	0801803c 	.word	0x0801803c
 8007f60:	080181bc 	.word	0x080181bc
 8007f64:	2000c390 	.word	0x2000c390

08007f68 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08a      	sub	sp, #40	; 0x28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d109      	bne.n	8007f90 <netconn_recv_data+0x28>
 8007f7c:	4b5c      	ldr	r3, [pc, #368]	; (80080f0 <netconn_recv_data+0x188>)
 8007f7e:	f240 12e7 	movw	r2, #487	; 0x1e7
 8007f82:	495c      	ldr	r1, [pc, #368]	; (80080f4 <netconn_recv_data+0x18c>)
 8007f84:	485c      	ldr	r0, [pc, #368]	; (80080f8 <netconn_recv_data+0x190>)
 8007f86:	f00e fdf7 	bl	8016b78 <iprintf>
 8007f8a:	f06f 030f 	mvn.w	r3, #15
 8007f8e:	e0aa      	b.n	80080e6 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d109      	bne.n	8007fb0 <netconn_recv_data+0x48>
 8007f9c:	4b54      	ldr	r3, [pc, #336]	; (80080f0 <netconn_recv_data+0x188>)
 8007f9e:	f240 12e9 	movw	r2, #489	; 0x1e9
 8007fa2:	4956      	ldr	r1, [pc, #344]	; (80080fc <netconn_recv_data+0x194>)
 8007fa4:	4854      	ldr	r0, [pc, #336]	; (80080f8 <netconn_recv_data+0x190>)
 8007fa6:	f00e fde7 	bl	8016b78 <iprintf>
 8007faa:	f06f 030f 	mvn.w	r3, #15
 8007fae:	e09a      	b.n	80080e6 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fb8:	2b10      	cmp	r3, #16
 8007fba:	d115      	bne.n	8007fe8 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3310      	adds	r3, #16
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f00e fc59 	bl	8016878 <sys_mbox_valid>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10d      	bne.n	8007fe8 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3314      	adds	r3, #20
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f00e fc51 	bl	8016878 <sys_mbox_valid>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <netconn_recv_data+0x7a>
 8007fdc:	f06f 030a 	mvn.w	r3, #10
 8007fe0:	e081      	b.n	80080e6 <netconn_recv_data+0x17e>
 8007fe2:	f06f 030e 	mvn.w	r3, #14
 8007fe6:	e07e      	b.n	80080e6 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	3310      	adds	r3, #16
 8007fec:	4618      	mov	r0, r3
 8007fee:	f00e fc43 	bl	8016878 <sys_mbox_valid>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d109      	bne.n	800800c <netconn_recv_data+0xa4>
 8007ff8:	4b3d      	ldr	r3, [pc, #244]	; (80080f0 <netconn_recv_data+0x188>)
 8007ffa:	f240 12f5 	movw	r2, #501	; 0x1f5
 8007ffe:	4940      	ldr	r1, [pc, #256]	; (8008100 <netconn_recv_data+0x198>)
 8008000:	483d      	ldr	r0, [pc, #244]	; (80080f8 <netconn_recv_data+0x190>)
 8008002:	f00e fdb9 	bl	8016b78 <iprintf>
 8008006:	f06f 030a 	mvn.w	r3, #10
 800800a:	e06c      	b.n	80080e6 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008012:	f113 0f0c 	cmn.w	r3, #12
 8008016:	da03      	bge.n	8008020 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800801e:	e062      	b.n	80080e6 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3310      	adds	r3, #16
 8008024:	f107 0120 	add.w	r1, r7, #32
 8008028:	2200      	movs	r2, #0
 800802a:	4618      	mov	r0, r3
 800802c:	f00e fbc9 	bl	80167c2 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008038:	2b10      	cmp	r3, #16
 800803a:	d138      	bne.n	80080ae <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	891b      	ldrh	r3, [r3, #8]
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	e001      	b.n	8008052 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800804e:	2301      	movs	r3, #1
 8008050:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8008052:	f107 030c 	add.w	r3, r7, #12
 8008056:	4619      	mov	r1, r3
 8008058:	482a      	ldr	r0, [pc, #168]	; (8008104 <netconn_recv_data+0x19c>)
 800805a:	f7ff fde7 	bl	8007c2c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d120      	bne.n	80080a6 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008068:	2b00      	cmp	r3, #0
 800806a:	d005      	beq.n	8008078 <netconn_recv_data+0x110>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008070:	2200      	movs	r2, #0
 8008072:	2101      	movs	r1, #1
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10b      	bne.n	8008098 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <netconn_recv_data+0x12a>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008090:	e029      	b.n	80080e6 <netconn_recv_data+0x17e>
 8008092:	f06f 030d 	mvn.w	r3, #13
 8008096:	e026      	b.n	80080e6 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008098:	2101      	movs	r1, #1
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f926 	bl	80082ec <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80080a0:	f06f 030e 	mvn.w	r3, #14
 80080a4:	e01f      	b.n	80080e6 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	891b      	ldrh	r3, [r3, #8]
 80080aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80080ac:	e00d      	b.n	80080ca <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d106      	bne.n	80080c2 <netconn_recv_data+0x15a>
 80080b4:	4b0e      	ldr	r3, [pc, #56]	; (80080f0 <netconn_recv_data+0x188>)
 80080b6:	f240 223e 	movw	r2, #574	; 0x23e
 80080ba:	4913      	ldr	r1, [pc, #76]	; (8008108 <netconn_recv_data+0x1a0>)
 80080bc:	480e      	ldr	r0, [pc, #56]	; (80080f8 <netconn_recv_data+0x190>)
 80080be:	f00e fd5b 	bl	8016b78 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	891b      	ldrh	r3, [r3, #8]
 80080c8:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d005      	beq.n	80080de <netconn_recv_data+0x176>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080d8:	2101      	movs	r1, #1
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80080de:	6a3a      	ldr	r2, [r7, #32]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3728      	adds	r7, #40	; 0x28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	08017fe4 	.word	0x08017fe4
 80080f4:	080181dc 	.word	0x080181dc
 80080f8:	0801803c 	.word	0x0801803c
 80080fc:	080181fc 	.word	0x080181fc
 8008100:	08018218 	.word	0x08018218
 8008104:	08009535 	.word	0x08009535
 8008108:	08018238 	.word	0x08018238

0800810c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8008116:	2300      	movs	r3, #0
 8008118:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d109      	bne.n	8008134 <netconn_recv+0x28>
 8008120:	4b31      	ldr	r3, [pc, #196]	; (80081e8 <netconn_recv+0xdc>)
 8008122:	f44f 721d 	mov.w	r2, #628	; 0x274
 8008126:	4931      	ldr	r1, [pc, #196]	; (80081ec <netconn_recv+0xe0>)
 8008128:	4831      	ldr	r0, [pc, #196]	; (80081f0 <netconn_recv+0xe4>)
 800812a:	f00e fd25 	bl	8016b78 <iprintf>
 800812e:	f06f 030f 	mvn.w	r3, #15
 8008132:	e054      	b.n	80081de <netconn_recv+0xd2>
  *new_buf = NULL;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d109      	bne.n	8008154 <netconn_recv+0x48>
 8008140:	4b29      	ldr	r3, [pc, #164]	; (80081e8 <netconn_recv+0xdc>)
 8008142:	f240 2276 	movw	r2, #630	; 0x276
 8008146:	492b      	ldr	r1, [pc, #172]	; (80081f4 <netconn_recv+0xe8>)
 8008148:	4829      	ldr	r0, [pc, #164]	; (80081f0 <netconn_recv+0xe4>)
 800814a:	f00e fd15 	bl	8016b78 <iprintf>
 800814e:	f06f 030f 	mvn.w	r3, #15
 8008152:	e044      	b.n	80081de <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800815c:	2b10      	cmp	r3, #16
 800815e:	d139      	bne.n	80081d4 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008160:	2300      	movs	r3, #0
 8008162:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008164:	2006      	movs	r0, #6
 8008166:	f003 fa43 	bl	800b5f0 <memp_malloc>
 800816a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d102      	bne.n	8008178 <netconn_recv+0x6c>
      return ERR_MEM;
 8008172:	f04f 33ff 	mov.w	r3, #4294967295
 8008176:	e032      	b.n	80081de <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 8008178:	f107 030c 	add.w	r3, r7, #12
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7ff fef2 	bl	8007f68 <netconn_recv_data>
 8008184:	4603      	mov	r3, r0
 8008186:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008188:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d006      	beq.n	800819e <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 8008190:	6979      	ldr	r1, [r7, #20]
 8008192:	2006      	movs	r0, #6
 8008194:	f003 fa7e 	bl	800b694 <memp_free>
      return err;
 8008198:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800819c:	e01f      	b.n	80081de <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d106      	bne.n	80081b2 <netconn_recv+0xa6>
 80081a4:	4b10      	ldr	r3, [pc, #64]	; (80081e8 <netconn_recv+0xdc>)
 80081a6:	f240 228a 	movw	r2, #650	; 0x28a
 80081aa:	4913      	ldr	r1, [pc, #76]	; (80081f8 <netconn_recv+0xec>)
 80081ac:	4810      	ldr	r0, [pc, #64]	; (80081f0 <netconn_recv+0xe4>)
 80081ae:	f00e fce3 	bl	8016b78 <iprintf>

    buf->p = p;
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2200      	movs	r2, #0
 80081c2:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	2200      	movs	r2, #0
 80081c8:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	e004      	b.n	80081de <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7ff fec6 	bl	8007f68 <netconn_recv_data>
 80081dc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	08017fe4 	.word	0x08017fe4
 80081ec:	080181dc 	.word	0x080181dc
 80081f0:	0801803c 	.word	0x0801803c
 80081f4:	080181fc 	.word	0x080181fc
 80081f8:	08018244 	.word	0x08018244

080081fc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08a      	sub	sp, #40	; 0x28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d109      	bne.n	8008224 <netconn_write_partly+0x28>
 8008210:	4b31      	ldr	r3, [pc, #196]	; (80082d8 <netconn_write_partly+0xdc>)
 8008212:	f240 22e6 	movw	r2, #742	; 0x2e6
 8008216:	4931      	ldr	r1, [pc, #196]	; (80082dc <netconn_write_partly+0xe0>)
 8008218:	4831      	ldr	r0, [pc, #196]	; (80082e0 <netconn_write_partly+0xe4>)
 800821a:	f00e fcad 	bl	8016b78 <iprintf>
 800821e:	f06f 030f 	mvn.w	r3, #15
 8008222:	e054      	b.n	80082ce <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800822c:	2b10      	cmp	r3, #16
 800822e:	d009      	beq.n	8008244 <netconn_write_partly+0x48>
 8008230:	4b29      	ldr	r3, [pc, #164]	; (80082d8 <netconn_write_partly+0xdc>)
 8008232:	f240 22e7 	movw	r2, #743	; 0x2e7
 8008236:	492b      	ldr	r1, [pc, #172]	; (80082e4 <netconn_write_partly+0xe8>)
 8008238:	4829      	ldr	r0, [pc, #164]	; (80082e0 <netconn_write_partly+0xe4>)
 800823a:	f00e fc9d 	bl	8016b78 <iprintf>
 800823e:	f06f 0305 	mvn.w	r3, #5
 8008242:	e044      	b.n	80082ce <netconn_write_partly+0xd2>
  if (size == 0) {
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <netconn_write_partly+0x52>
    return ERR_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	e03f      	b.n	80082ce <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	7f1b      	ldrb	r3, [r3, #28]
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d104      	bne.n	8008264 <netconn_write_partly+0x68>
 800825a:	78fb      	ldrb	r3, [r7, #3]
 800825c:	f003 0304 	and.w	r3, r3, #4
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <netconn_write_partly+0x6c>
 8008264:	2301      	movs	r3, #1
 8008266:	e000      	b.n	800826a <netconn_write_partly+0x6e>
 8008268:	2300      	movs	r3, #0
 800826a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800826e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <netconn_write_partly+0x86>
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800827c:	f06f 0305 	mvn.w	r3, #5
 8008280:	e025      	b.n	80082ce <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800828a:	78fb      	ldrb	r3, [r7, #3]
 800828c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008294:	f107 0310 	add.w	r3, r7, #16
 8008298:	4619      	mov	r1, r3
 800829a:	4813      	ldr	r0, [pc, #76]	; (80082e8 <netconn_write_partly+0xec>)
 800829c:	f7ff fcc6 	bl	8007c2c <netconn_apimsg>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 80082a6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10d      	bne.n	80082ca <netconn_write_partly+0xce>
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00a      	beq.n	80082ca <netconn_write_partly+0xce>
    if (dontblock) {
 80082b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 80082bc:	69fa      	ldr	r2, [r7, #28]
 80082be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	e002      	b.n	80082ca <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80082ca:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3728      	adds	r7, #40	; 0x28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	08017fe4 	.word	0x08017fe4
 80082dc:	0801826c 	.word	0x0801826c
 80082e0:	0801803c 	.word	0x0801803c
 80082e4:	08018288 	.word	0x08018288
 80082e8:	08009915 	.word	0x08009915

080082ec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d109      	bne.n	8008312 <netconn_close_shutdown+0x26>
 80082fe:	4b0f      	ldr	r3, [pc, #60]	; (800833c <netconn_close_shutdown+0x50>)
 8008300:	f44f 724a 	mov.w	r2, #808	; 0x328
 8008304:	490e      	ldr	r1, [pc, #56]	; (8008340 <netconn_close_shutdown+0x54>)
 8008306:	480f      	ldr	r0, [pc, #60]	; (8008344 <netconn_close_shutdown+0x58>)
 8008308:	f00e fc36 	bl	8016b78 <iprintf>
 800830c:	f06f 030f 	mvn.w	r3, #15
 8008310:	e00f      	b.n	8008332 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008316:	78fb      	ldrb	r3, [r7, #3]
 8008318:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800831a:	2329      	movs	r3, #41	; 0x29
 800831c:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800831e:	f107 0308 	add.w	r3, r7, #8
 8008322:	4619      	mov	r1, r3
 8008324:	4808      	ldr	r0, [pc, #32]	; (8008348 <netconn_close_shutdown+0x5c>)
 8008326:	f7ff fc81 	bl	8007c2c <netconn_apimsg>
 800832a:	4603      	mov	r3, r0
 800832c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800832e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3720      	adds	r7, #32
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	08017fe4 	.word	0x08017fe4
 8008340:	080182ac 	.word	0x080182ac
 8008344:	0801803c 	.word	0x0801803c
 8008348:	08009a75 	.word	0x08009a75

0800834c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008354:	2103      	movs	r1, #3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff ffc8 	bl	80082ec <netconn_close_shutdown>
 800835c:	4603      	mov	r3, r0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
 8008374:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d105      	bne.n	8008388 <recv_udp+0x20>
 800837c:	4b34      	ldr	r3, [pc, #208]	; (8008450 <recv_udp+0xe8>)
 800837e:	22b1      	movs	r2, #177	; 0xb1
 8008380:	4934      	ldr	r1, [pc, #208]	; (8008454 <recv_udp+0xec>)
 8008382:	4835      	ldr	r0, [pc, #212]	; (8008458 <recv_udp+0xf0>)
 8008384:	f00e fbf8 	bl	8016b78 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d105      	bne.n	800839a <recv_udp+0x32>
 800838e:	4b30      	ldr	r3, [pc, #192]	; (8008450 <recv_udp+0xe8>)
 8008390:	22b2      	movs	r2, #178	; 0xb2
 8008392:	4932      	ldr	r1, [pc, #200]	; (800845c <recv_udp+0xf4>)
 8008394:	4830      	ldr	r0, [pc, #192]	; (8008458 <recv_udp+0xf0>)
 8008396:	f00e fbef 	bl	8016b78 <iprintf>
  conn = (struct netconn *)arg;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d103      	bne.n	80083ac <recv_udp+0x44>
    pbuf_free(p);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f003 fed7 	bl	800c158 <pbuf_free>
    return;
 80083aa:	e04d      	b.n	8008448 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d005      	beq.n	80083c2 <recv_udp+0x5a>
 80083b6:	4b26      	ldr	r3, [pc, #152]	; (8008450 <recv_udp+0xe8>)
 80083b8:	22ba      	movs	r2, #186	; 0xba
 80083ba:	4929      	ldr	r1, [pc, #164]	; (8008460 <recv_udp+0xf8>)
 80083bc:	4826      	ldr	r0, [pc, #152]	; (8008458 <recv_udp+0xf0>)
 80083be:	f00e fbdb 	bl	8016b78 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	3310      	adds	r3, #16
 80083c6:	4618      	mov	r0, r3
 80083c8:	f00e fa56 	bl	8016878 <sys_mbox_valid>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d103      	bne.n	80083da <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f003 fec0 	bl	800c158 <pbuf_free>
    return;
 80083d8:	e036      	b.n	8008448 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80083da:	2006      	movs	r0, #6
 80083dc:	f003 f908 	bl	800b5f0 <memp_malloc>
 80083e0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d103      	bne.n	80083f0 <recv_udp+0x88>
    pbuf_free(p);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f003 feb5 	bl	800c158 <pbuf_free>
    return;
 80083ee:	e02b      	b.n	8008448 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <recv_udp+0xa0>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	e000      	b.n	800840a <recv_udp+0xa2>
 8008408:	2300      	movs	r3, #0
 800840a:	69ba      	ldr	r2, [r7, #24]
 800840c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008412:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	891b      	ldrh	r3, [r3, #8]
 8008418:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	3310      	adds	r3, #16
 800841e:	69b9      	ldr	r1, [r7, #24]
 8008420:	4618      	mov	r0, r3
 8008422:	f00e f9b4 	bl	801678e <sys_mbox_trypost>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <recv_udp+0xcc>
    netbuf_delete(buf);
 800842c:	69b8      	ldr	r0, [r7, #24]
 800842e:	f001 fbc9 	bl	8009bc4 <netbuf_delete>
    return;
 8008432:	e009      	b.n	8008448 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008438:	2b00      	cmp	r3, #0
 800843a:	d005      	beq.n	8008448 <recv_udp+0xe0>
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008440:	8afa      	ldrh	r2, [r7, #22]
 8008442:	2100      	movs	r1, #0
 8008444:	69f8      	ldr	r0, [r7, #28]
 8008446:	4798      	blx	r3
  }
}
 8008448:	3720      	adds	r7, #32
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	080182c8 	.word	0x080182c8
 8008454:	080182fc 	.word	0x080182fc
 8008458:	08018320 	.word	0x08018320
 800845c:	08018348 	.word	0x08018348
 8008460:	08018368 	.word	0x08018368

08008464 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b088      	sub	sp, #32
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d105      	bne.n	8008484 <recv_tcp+0x20>
 8008478:	4b39      	ldr	r3, [pc, #228]	; (8008560 <recv_tcp+0xfc>)
 800847a:	22f9      	movs	r2, #249	; 0xf9
 800847c:	4939      	ldr	r1, [pc, #228]	; (8008564 <recv_tcp+0x100>)
 800847e:	483a      	ldr	r0, [pc, #232]	; (8008568 <recv_tcp+0x104>)
 8008480:	f00e fb7a 	bl	8016b78 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d105      	bne.n	8008496 <recv_tcp+0x32>
 800848a:	4b35      	ldr	r3, [pc, #212]	; (8008560 <recv_tcp+0xfc>)
 800848c:	22fa      	movs	r2, #250	; 0xfa
 800848e:	4937      	ldr	r1, [pc, #220]	; (800856c <recv_tcp+0x108>)
 8008490:	4835      	ldr	r0, [pc, #212]	; (8008568 <recv_tcp+0x104>)
 8008492:	f00e fb71 	bl	8016b78 <iprintf>
  conn = (struct netconn *)arg;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d102      	bne.n	80084a6 <recv_tcp+0x42>
    return ERR_VAL;
 80084a0:	f06f 0305 	mvn.w	r3, #5
 80084a4:	e057      	b.n	8008556 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d006      	beq.n	80084be <recv_tcp+0x5a>
 80084b0:	4b2b      	ldr	r3, [pc, #172]	; (8008560 <recv_tcp+0xfc>)
 80084b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084b6:	492e      	ldr	r1, [pc, #184]	; (8008570 <recv_tcp+0x10c>)
 80084b8:	482b      	ldr	r0, [pc, #172]	; (8008568 <recv_tcp+0x104>)
 80084ba:	f00e fb5d 	bl	8016b78 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	3310      	adds	r3, #16
 80084c2:	4618      	mov	r0, r3
 80084c4:	f00e f9d8 	bl	8016878 <sys_mbox_valid>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10d      	bne.n	80084ea <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d008      	beq.n	80084e6 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	891b      	ldrh	r3, [r3, #8]
 80084d8:	4619      	mov	r1, r3
 80084da:	68b8      	ldr	r0, [r7, #8]
 80084dc:	f004 fd38 	bl	800cf50 <tcp_recved>
      pbuf_free(p);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f003 fe39 	bl	800c158 <pbuf_free>
    }
    return ERR_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	e035      	b.n	8008556 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 80084ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d011      	beq.n	8008516 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00e      	beq.n	8008516 <recv_tcp+0xb2>
 80084f8:	f00e fada 	bl	8016ab0 <sys_arch_protect>
 80084fc:	6178      	str	r0, [r7, #20]
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008504:	f113 0f0c 	cmn.w	r3, #12
 8008508:	db02      	blt.n	8008510 <recv_tcp+0xac>
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	78fa      	ldrb	r2, [r7, #3]
 800850e:	721a      	strb	r2, [r3, #8]
 8008510:	6978      	ldr	r0, [r7, #20]
 8008512:	f00e fadb 	bl	8016acc <sys_arch_unprotect>
  }

  if (p != NULL) {
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d003      	beq.n	8008524 <recv_tcp+0xc0>
    len = p->tot_len;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	891b      	ldrh	r3, [r3, #8]
 8008520:	83fb      	strh	r3, [r7, #30]
 8008522:	e001      	b.n	8008528 <recv_tcp+0xc4>
  } else {
    len = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	3310      	adds	r3, #16
 800852c:	6879      	ldr	r1, [r7, #4]
 800852e:	4618      	mov	r0, r3
 8008530:	f00e f92d 	bl	801678e <sys_mbox_trypost>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800853a:	f04f 33ff 	mov.w	r3, #4294967295
 800853e:	e00a      	b.n	8008556 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008544:	2b00      	cmp	r3, #0
 8008546:	d005      	beq.n	8008554 <recv_tcp+0xf0>
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854c:	8bfa      	ldrh	r2, [r7, #30]
 800854e:	2100      	movs	r1, #0
 8008550:	69b8      	ldr	r0, [r7, #24]
 8008552:	4798      	blx	r3
  }

  return ERR_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3720      	adds	r7, #32
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	080182c8 	.word	0x080182c8
 8008564:	08018388 	.word	0x08018388
 8008568:	08018320 	.word	0x08018320
 800856c:	080183ac 	.word	0x080183ac
 8008570:	080183cc 	.word	0x080183cc

08008574 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d106      	bne.n	8008596 <poll_tcp+0x22>
 8008588:	4b29      	ldr	r3, [pc, #164]	; (8008630 <poll_tcp+0xbc>)
 800858a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800858e:	4929      	ldr	r1, [pc, #164]	; (8008634 <poll_tcp+0xc0>)
 8008590:	4829      	ldr	r0, [pc, #164]	; (8008638 <poll_tcp+0xc4>)
 8008592:	f00e faf1 	bl	8016b78 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	785b      	ldrb	r3, [r3, #1]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d104      	bne.n	80085a8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800859e:	2101      	movs	r1, #1
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f001 f813 	bl	80095cc <lwip_netconn_do_writemore>
 80085a6:	e016      	b.n	80085d6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	785b      	ldrb	r3, [r3, #1]
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	d112      	bne.n	80085d6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00a      	beq.n	80085ce <poll_tcp+0x5a>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085bc:	7a5b      	ldrb	r3, [r3, #9]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d005      	beq.n	80085ce <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	7a5a      	ldrb	r2, [r3, #9]
 80085c8:	3a01      	subs	r2, #1
 80085ca:	b2d2      	uxtb	r2, r2
 80085cc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80085ce:	2101      	movs	r1, #1
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 fc13 	bl	8008dfc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	7f1b      	ldrb	r3, [r3, #28]
 80085da:	f003 0310 	and.w	r3, r3, #16
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d021      	beq.n	8008626 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d01d      	beq.n	8008626 <poll_tcp+0xb2>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80085f2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80085f6:	d316      	bcc.n	8008626 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008600:	2b04      	cmp	r3, #4
 8008602:	d810      	bhi.n	8008626 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	7f1b      	ldrb	r3, [r3, #28]
 8008608:	f023 0310 	bic.w	r3, r3, #16
 800860c:	b2da      	uxtb	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008616:	2b00      	cmp	r3, #0
 8008618:	d005      	beq.n	8008626 <poll_tcp+0xb2>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	2200      	movs	r2, #0
 8008620:	2102      	movs	r1, #2
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	080182c8 	.word	0x080182c8
 8008634:	080183ec 	.word	0x080183ec
 8008638:	08018320 	.word	0x08018320

0800863c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	4613      	mov	r3, r2
 8008648:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d106      	bne.n	8008662 <sent_tcp+0x26>
 8008654:	4b20      	ldr	r3, [pc, #128]	; (80086d8 <sent_tcp+0x9c>)
 8008656:	f240 1261 	movw	r2, #353	; 0x161
 800865a:	4920      	ldr	r1, [pc, #128]	; (80086dc <sent_tcp+0xa0>)
 800865c:	4820      	ldr	r0, [pc, #128]	; (80086e0 <sent_tcp+0xa4>)
 800865e:	f00e fa8b 	bl	8016b78 <iprintf>

  if (conn) {
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d032      	beq.n	80086ce <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	785b      	ldrb	r3, [r3, #1]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d104      	bne.n	800867a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008670:	2101      	movs	r1, #1
 8008672:	6978      	ldr	r0, [r7, #20]
 8008674:	f000 ffaa 	bl	80095cc <lwip_netconn_do_writemore>
 8008678:	e007      	b.n	800868a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	785b      	ldrb	r3, [r3, #1]
 800867e:	2b04      	cmp	r3, #4
 8008680:	d103      	bne.n	800868a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008682:	2101      	movs	r1, #1
 8008684:	6978      	ldr	r0, [r7, #20]
 8008686:	f000 fbb9 	bl	8008dfc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d01d      	beq.n	80086ce <sent_tcp+0x92>
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800869a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800869e:	d316      	bcc.n	80086ce <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80086a8:	2b04      	cmp	r3, #4
 80086aa:	d810      	bhi.n	80086ce <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	7f1b      	ldrb	r3, [r3, #28]
 80086b0:	f023 0310 	bic.w	r3, r3, #16
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <sent_tcp+0x92>
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c6:	88fa      	ldrh	r2, [r7, #6]
 80086c8:	2102      	movs	r1, #2
 80086ca:	6978      	ldr	r0, [r7, #20]
 80086cc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	080182c8 	.word	0x080182c8
 80086dc:	080183ec 	.word	0x080183ec
 80086e0:	08018320 	.word	0x08018320

080086e4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b08a      	sub	sp, #40	; 0x28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d106      	bne.n	8008708 <err_tcp+0x24>
 80086fa:	4b6c      	ldr	r3, [pc, #432]	; (80088ac <err_tcp+0x1c8>)
 80086fc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8008700:	496b      	ldr	r1, [pc, #428]	; (80088b0 <err_tcp+0x1cc>)
 8008702:	486c      	ldr	r0, [pc, #432]	; (80088b4 <err_tcp+0x1d0>)
 8008704:	f00e fa38 	bl	8016b78 <iprintf>

  conn->pcb.tcp = NULL;
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	2200      	movs	r2, #0
 800870c:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	785b      	ldrb	r3, [r3, #1]
 8008712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	2200      	movs	r2, #0
 800871a:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800871c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008720:	2b04      	cmp	r3, #4
 8008722:	d114      	bne.n	800874e <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	2b00      	cmp	r3, #0
 800872c:	d018      	beq.n	8008760 <err_tcp+0x7c>
 800872e:	f00e f9bf 	bl	8016ab0 <sys_arch_protect>
 8008732:	61b8      	str	r0, [r7, #24]
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800873a:	f113 0f0c 	cmn.w	r3, #12
 800873e:	db02      	blt.n	8008746 <err_tcp+0x62>
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	2200      	movs	r2, #0
 8008744:	721a      	strb	r2, [r3, #8]
 8008746:	69b8      	ldr	r0, [r7, #24]
 8008748:	f00e f9c0 	bl	8016acc <sys_arch_unprotect>
 800874c:	e008      	b.n	8008760 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800874e:	f00e f9af 	bl	8016ab0 <sys_arch_protect>
 8008752:	61f8      	str	r0, [r7, #28]
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	78fa      	ldrb	r2, [r7, #3]
 8008758:	721a      	strb	r2, [r3, #8]
 800875a:	69f8      	ldr	r0, [r7, #28]
 800875c:	f00e f9b6 	bl	8016acc <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008764:	2b00      	cmp	r3, #0
 8008766:	d005      	beq.n	8008774 <err_tcp+0x90>
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876c:	2200      	movs	r2, #0
 800876e:	2104      	movs	r1, #4
 8008770:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008772:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <err_tcp+0xa4>
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008780:	2200      	movs	r2, #0
 8008782:	2100      	movs	r1, #0
 8008784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008786:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878c:	2b00      	cmp	r3, #0
 800878e:	d005      	beq.n	800879c <err_tcp+0xb8>
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008794:	2200      	movs	r2, #0
 8008796:	2102      	movs	r1, #2
 8008798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800879a:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	3310      	adds	r3, #16
 80087a0:	4618      	mov	r0, r3
 80087a2:	f00e f869 	bl	8016878 <sys_mbox_valid>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	3310      	adds	r3, #16
 80087b0:	2100      	movs	r1, #0
 80087b2:	4618      	mov	r0, r3
 80087b4:	f00d ffeb 	bl	801678e <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	3314      	adds	r3, #20
 80087bc:	4618      	mov	r0, r3
 80087be:	f00e f85b 	bl	8016878 <sys_mbox_valid>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d005      	beq.n	80087d4 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	3314      	adds	r3, #20
 80087cc:	2100      	movs	r1, #0
 80087ce:	4618      	mov	r0, r3
 80087d0:	f00d ffdd 	bl	801678e <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80087d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d007      	beq.n	80087ec <err_tcp+0x108>
 80087dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	d003      	beq.n	80087ec <err_tcp+0x108>
 80087e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d14d      	bne.n	8008888 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	7f1b      	ldrb	r3, [r3, #28]
 80087f0:	f003 0304 	and.w	r3, r3, #4
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	bf14      	ite	ne
 80087f8:	2301      	movne	r3, #1
 80087fa:	2300      	moveq	r3, #0
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	7f1b      	ldrb	r3, [r3, #28]
 8008804:	f023 0304 	bic.w	r3, r3, #4
 8008808:	b2da      	uxtb	r2, r3
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d145      	bne.n	80088a0 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	2b00      	cmp	r3, #0
 800881a:	d106      	bne.n	800882a <err_tcp+0x146>
 800881c:	4b23      	ldr	r3, [pc, #140]	; (80088ac <err_tcp+0x1c8>)
 800881e:	f240 12b3 	movw	r2, #435	; 0x1b3
 8008822:	4925      	ldr	r1, [pc, #148]	; (80088b8 <err_tcp+0x1d4>)
 8008824:	4823      	ldr	r0, [pc, #140]	; (80088b4 <err_tcp+0x1d0>)
 8008826:	f00e f9a7 	bl	8016b78 <iprintf>
      conn->current_msg->err = err;
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	330c      	adds	r3, #12
 800883a:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800883c:	6938      	ldr	r0, [r7, #16]
 800883e:	f00e f8ac 	bl	801699a <sys_sem_valid>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d106      	bne.n	8008856 <err_tcp+0x172>
 8008848:	4b18      	ldr	r3, [pc, #96]	; (80088ac <err_tcp+0x1c8>)
 800884a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800884e:	491b      	ldr	r1, [pc, #108]	; (80088bc <err_tcp+0x1d8>)
 8008850:	4818      	ldr	r0, [pc, #96]	; (80088b4 <err_tcp+0x1d0>)
 8008852:	f00e f991 	bl	8016b78 <iprintf>
      conn->current_msg = NULL;
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	2200      	movs	r2, #0
 800885a:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00e      	beq.n	8008880 <err_tcp+0x19c>
 8008862:	f00e f925 	bl	8016ab0 <sys_arch_protect>
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800886e:	f113 0f0c 	cmn.w	r3, #12
 8008872:	db02      	blt.n	800887a <err_tcp+0x196>
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	78fa      	ldrb	r2, [r7, #3]
 8008878:	721a      	strb	r2, [r3, #8]
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f00e f926 	bl	8016acc <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8008880:	6938      	ldr	r0, [r7, #16]
 8008882:	f00e f870 	bl	8016966 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008886:	e00b      	b.n	80088a0 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	2b00      	cmp	r3, #0
 800888e:	d008      	beq.n	80088a2 <err_tcp+0x1be>
 8008890:	4b06      	ldr	r3, [pc, #24]	; (80088ac <err_tcp+0x1c8>)
 8008892:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008896:	490a      	ldr	r1, [pc, #40]	; (80088c0 <err_tcp+0x1dc>)
 8008898:	4806      	ldr	r0, [pc, #24]	; (80088b4 <err_tcp+0x1d0>)
 800889a:	f00e f96d 	bl	8016b78 <iprintf>
  }
}
 800889e:	e000      	b.n	80088a2 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 80088a0:	bf00      	nop
}
 80088a2:	bf00      	nop
 80088a4:	3728      	adds	r7, #40	; 0x28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	080182c8 	.word	0x080182c8
 80088b0:	080183ec 	.word	0x080183ec
 80088b4:	08018320 	.word	0x08018320
 80088b8:	080183fc 	.word	0x080183fc
 80088bc:	08018418 	.word	0x08018418
 80088c0:	08018434 	.word	0x08018434

080088c4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80088d2:	6879      	ldr	r1, [r7, #4]
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f005 f92b 	bl	800db30 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80088da:	490a      	ldr	r1, [pc, #40]	; (8008904 <setup_tcp+0x40>)
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f005 f939 	bl	800db54 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80088e2:	4909      	ldr	r1, [pc, #36]	; (8008908 <setup_tcp+0x44>)
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f005 f957 	bl	800db98 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80088ea:	2202      	movs	r2, #2
 80088ec:	4907      	ldr	r1, [pc, #28]	; (800890c <setup_tcp+0x48>)
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f005 f9ac 	bl	800dc4c <tcp_poll>
  tcp_err(pcb, err_tcp);
 80088f4:	4906      	ldr	r1, [pc, #24]	; (8008910 <setup_tcp+0x4c>)
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f005 f96e 	bl	800dbd8 <tcp_err>
}
 80088fc:	bf00      	nop
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	08008465 	.word	0x08008465
 8008908:	0800863d 	.word	0x0800863d
 800890c:	08008575 	.word	0x08008575
 8008910:	080086e5 	.word	0x080086e5

08008914 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	4613      	mov	r3, r2
 8008920:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d102      	bne.n	8008932 <accept_function+0x1e>
    return ERR_VAL;
 800892c:	f06f 0305 	mvn.w	r3, #5
 8008930:	e08d      	b.n	8008a4e <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	3314      	adds	r3, #20
 8008936:	4618      	mov	r0, r3
 8008938:	f00d ff9e 	bl	8016878 <sys_mbox_valid>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d102      	bne.n	8008948 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008942:	f06f 0305 	mvn.w	r3, #5
 8008946:	e082      	b.n	8008a4e <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d115      	bne.n	800897a <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	3314      	adds	r3, #20
 8008952:	4941      	ldr	r1, [pc, #260]	; (8008a58 <accept_function+0x144>)
 8008954:	4618      	mov	r0, r3
 8008956:	f00d ff1a 	bl	801678e <sys_mbox_trypost>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d109      	bne.n	8008974 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	2b00      	cmp	r3, #0
 8008966:	d005      	beq.n	8008974 <accept_function+0x60>
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896c:	2200      	movs	r2, #0
 800896e:	2100      	movs	r1, #0
 8008970:	69f8      	ldr	r0, [r7, #28]
 8008972:	4798      	blx	r3
    }
    return ERR_VAL;
 8008974:	f06f 0305 	mvn.w	r3, #5
 8008978:	e069      	b.n	8008a4e <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	781a      	ldrb	r2, [r3, #0]
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008982:	4619      	mov	r1, r3
 8008984:	4610      	mov	r0, r2
 8008986:	f000 f8ff 	bl	8008b88 <netconn_alloc>
 800898a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d115      	bne.n	80089be <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	3314      	adds	r3, #20
 8008996:	4930      	ldr	r1, [pc, #192]	; (8008a58 <accept_function+0x144>)
 8008998:	4618      	mov	r0, r3
 800899a:	f00d fef8 	bl	801678e <sys_mbox_trypost>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d109      	bne.n	80089b8 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <accept_function+0xa4>
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b0:	2200      	movs	r2, #0
 80089b2:	2100      	movs	r1, #0
 80089b4:	69f8      	ldr	r0, [r7, #28]
 80089b6:	4798      	blx	r3
    }
    return ERR_MEM;
 80089b8:	f04f 33ff 	mov.w	r3, #4294967295
 80089bc:	e047      	b.n	8008a4e <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80089c4:	69b8      	ldr	r0, [r7, #24]
 80089c6:	f7ff ff7d 	bl	80088c4 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	79fa      	ldrb	r2, [r7, #7]
 80089ce:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	3314      	adds	r3, #20
 80089d4:	69b9      	ldr	r1, [r7, #24]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f00d fed9 	bl	801678e <sys_mbox_trypost>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d02a      	beq.n	8008a38 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80089e8:	2100      	movs	r1, #0
 80089ea:	6978      	ldr	r0, [r7, #20]
 80089ec:	f005 f8a0 	bl	800db30 <tcp_arg>
    tcp_recv(pcb, NULL);
 80089f0:	2100      	movs	r1, #0
 80089f2:	6978      	ldr	r0, [r7, #20]
 80089f4:	f005 f8ae 	bl	800db54 <tcp_recv>
    tcp_sent(pcb, NULL);
 80089f8:	2100      	movs	r1, #0
 80089fa:	6978      	ldr	r0, [r7, #20]
 80089fc:	f005 f8cc 	bl	800db98 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008a00:	2200      	movs	r2, #0
 8008a02:	2100      	movs	r1, #0
 8008a04:	6978      	ldr	r0, [r7, #20]
 8008a06:	f005 f921 	bl	800dc4c <tcp_poll>
    tcp_err(pcb, NULL);
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	6978      	ldr	r0, [r7, #20]
 8008a0e:	f005 f8e3 	bl	800dbd8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2200      	movs	r2, #0
 8008a16:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	3310      	adds	r3, #16
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f00d fe8f 	bl	8016740 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	3310      	adds	r3, #16
 8008a26:	4618      	mov	r0, r3
 8008a28:	f00d ff37 	bl	801689a <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008a2c:	69b8      	ldr	r0, [r7, #24]
 8008a2e:	f000 f91b 	bl	8008c68 <netconn_free>
    return ERR_MEM;
 8008a32:	f04f 33ff 	mov.w	r3, #4294967295
 8008a36:	e00a      	b.n	8008a4e <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <accept_function+0x138>
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a44:	2200      	movs	r2, #0
 8008a46:	2100      	movs	r1, #0
 8008a48:	69f8      	ldr	r0, [r7, #28]
 8008a4a:	4798      	blx	r3
  }

  return ERR_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3720      	adds	r7, #32
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	2000c390 	.word	0x2000c390

08008a5c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008a5c:	b590      	push	{r4, r7, lr}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d006      	beq.n	8008a80 <pcb_new+0x24>
 8008a72:	4b2b      	ldr	r3, [pc, #172]	; (8008b20 <pcb_new+0xc4>)
 8008a74:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8008a78:	492a      	ldr	r1, [pc, #168]	; (8008b24 <pcb_new+0xc8>)
 8008a7a:	482b      	ldr	r0, [pc, #172]	; (8008b28 <pcb_new+0xcc>)
 8008a7c:	f00e f87c 	bl	8016b78 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a8a:	2b10      	cmp	r3, #16
 8008a8c:	d022      	beq.n	8008ad4 <pcb_new+0x78>
 8008a8e:	2b20      	cmp	r3, #32
 8008a90:	d133      	bne.n	8008afa <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681c      	ldr	r4, [r3, #0]
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f009 fd12 	bl	80124c2 <udp_new_ip_type>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d02a      	beq.n	8008b02 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b22      	cmp	r3, #34	; 0x22
 8008ab4:	d104      	bne.n	8008ac0 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6858      	ldr	r0, [r3, #4]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	4917      	ldr	r1, [pc, #92]	; (8008b2c <pcb_new+0xd0>)
 8008ace:	f009 fc9d 	bl	801240c <udp_recv>
    }
    break;
 8008ad2:	e016      	b.n	8008b02 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681c      	ldr	r4, [r3, #0]
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f005 f81a 	bl	800db14 <tcp_new_ip_type>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00b      	beq.n	8008b06 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7ff fee6 	bl	80088c4 <setup_tcp>
    }
    break;
 8008af8:	e005      	b.n	8008b06 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	22fa      	movs	r2, #250	; 0xfa
 8008afe:	711a      	strb	r2, [r3, #4]
    return;
 8008b00:	e00a      	b.n	8008b18 <pcb_new+0xbc>
    break;
 8008b02:	bf00      	nop
 8008b04:	e000      	b.n	8008b08 <pcb_new+0xac>
    break;
 8008b06:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d102      	bne.n	8008b18 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	22ff      	movs	r2, #255	; 0xff
 8008b16:	711a      	strb	r2, [r3, #4]
  }
}
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd90      	pop	{r4, r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	080182c8 	.word	0x080182c8
 8008b24:	08018450 	.word	0x08018450
 8008b28:	08018320 	.word	0x08018320
 8008b2c:	08008369 	.word	0x08008369

08008b30 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d102      	bne.n	8008b52 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f7ff ff85 	bl	8008a5c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d012      	beq.n	8008b80 <lwip_netconn_do_newconn+0x50>
 8008b5a:	f00d ffa9 	bl	8016ab0 <sys_arch_protect>
 8008b5e:	60b8      	str	r0, [r7, #8]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008b68:	f113 0f0c 	cmn.w	r3, #12
 8008b6c:	db05      	blt.n	8008b7a <lwip_netconn_do_newconn+0x4a>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008b78:	721a      	strb	r2, [r3, #8]
 8008b7a:	68b8      	ldr	r0, [r7, #8]
 8008b7c:	f00d ffa6 	bl	8016acc <sys_arch_unprotect>
}
 8008b80:	bf00      	nop
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	6039      	str	r1, [r7, #0]
 8008b92:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008b94:	2007      	movs	r0, #7
 8008b96:	f002 fd2b 	bl	800b5f0 <memp_malloc>
 8008b9a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <netconn_alloc+0x1e>
    return NULL;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	e055      	b.n	8008c52 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	79fa      	ldrb	r2, [r7, #7]
 8008bb0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8008bb8:	79fb      	ldrb	r3, [r7, #7]
 8008bba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bbe:	2b10      	cmp	r3, #16
 8008bc0:	d004      	beq.n	8008bcc <netconn_alloc+0x44>
 8008bc2:	2b20      	cmp	r3, #32
 8008bc4:	d105      	bne.n	8008bd2 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008bc6:	2306      	movs	r3, #6
 8008bc8:	60fb      	str	r3, [r7, #12]
    break;
 8008bca:	e00a      	b.n	8008be2 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008bcc:	2306      	movs	r3, #6
 8008bce:	60fb      	str	r3, [r7, #12]
    break;
 8008bd0:	e007      	b.n	8008be2 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008bd2:	4b22      	ldr	r3, [pc, #136]	; (8008c5c <netconn_alloc+0xd4>)
 8008bd4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8008bd8:	4921      	ldr	r1, [pc, #132]	; (8008c60 <netconn_alloc+0xd8>)
 8008bda:	4822      	ldr	r0, [pc, #136]	; (8008c64 <netconn_alloc+0xdc>)
 8008bdc:	f00d ffcc 	bl	8016b78 <iprintf>
    goto free_and_return;
 8008be0:	e032      	b.n	8008c48 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	3310      	adds	r3, #16
 8008be6:	68f9      	ldr	r1, [r7, #12]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f00d fd87 	bl	80166fc <sys_mbox_new>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d128      	bne.n	8008c46 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	330c      	adds	r3, #12
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f00d fe5a 	bl	80168b4 <sys_sem_new>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d005      	beq.n	8008c12 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	3310      	adds	r3, #16
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f00d fd98 	bl	8016740 <sys_mbox_free>
    goto free_and_return;
 8008c10:	e01a      	b.n	8008c48 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	3314      	adds	r3, #20
 8008c16:	4618      	mov	r0, r3
 8008c18:	f00d fe3f 	bl	801689a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	f04f 32ff 	mov.w	r2, #4294967295
 8008c28:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	683a      	ldr	r2, [r7, #0]
 8008c2e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	2200      	movs	r2, #0
 8008c34:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	771a      	strb	r2, [r3, #28]
  return conn;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	e005      	b.n	8008c52 <netconn_alloc+0xca>
    goto free_and_return;
 8008c46:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008c48:	68b9      	ldr	r1, [r7, #8]
 8008c4a:	2007      	movs	r0, #7
 8008c4c:	f002 fd22 	bl	800b694 <memp_free>
  return NULL;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	080182c8 	.word	0x080182c8
 8008c60:	08018470 	.word	0x08018470
 8008c64:	08018320 	.word	0x08018320

08008c68 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d006      	beq.n	8008c86 <netconn_free+0x1e>
 8008c78:	4b1b      	ldr	r3, [pc, #108]	; (8008ce8 <netconn_free+0x80>)
 8008c7a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8008c7e:	491b      	ldr	r1, [pc, #108]	; (8008cec <netconn_free+0x84>)
 8008c80:	481b      	ldr	r0, [pc, #108]	; (8008cf0 <netconn_free+0x88>)
 8008c82:	f00d ff79 	bl	8016b78 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	3310      	adds	r3, #16
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f00d fdf4 	bl	8016878 <sys_mbox_valid>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d006      	beq.n	8008ca4 <netconn_free+0x3c>
 8008c96:	4b14      	ldr	r3, [pc, #80]	; (8008ce8 <netconn_free+0x80>)
 8008c98:	f240 22e2 	movw	r2, #738	; 0x2e2
 8008c9c:	4915      	ldr	r1, [pc, #84]	; (8008cf4 <netconn_free+0x8c>)
 8008c9e:	4814      	ldr	r0, [pc, #80]	; (8008cf0 <netconn_free+0x88>)
 8008ca0:	f00d ff6a 	bl	8016b78 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3314      	adds	r3, #20
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f00d fde5 	bl	8016878 <sys_mbox_valid>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d006      	beq.n	8008cc2 <netconn_free+0x5a>
 8008cb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <netconn_free+0x80>)
 8008cb6:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008cba:	490f      	ldr	r1, [pc, #60]	; (8008cf8 <netconn_free+0x90>)
 8008cbc:	480c      	ldr	r0, [pc, #48]	; (8008cf0 <netconn_free+0x88>)
 8008cbe:	f00d ff5b 	bl	8016b78 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	330c      	adds	r3, #12
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f00d fe5a 	bl	8016980 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	330c      	adds	r3, #12
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f00d fe73 	bl	80169bc <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	2007      	movs	r0, #7
 8008cda:	f002 fcdb 	bl	800b694 <memp_free>
}
 8008cde:	bf00      	nop
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	080182c8 	.word	0x080182c8
 8008cec:	08018498 	.word	0x08018498
 8008cf0:	08018320 	.word	0x08018320
 8008cf4:	080184c8 	.word	0x080184c8
 8008cf8:	08018504 	.word	0x08018504

08008cfc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3310      	adds	r3, #16
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f00d fdb5 	bl	8016878 <sys_mbox_valid>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d035      	beq.n	8008d80 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d14:	e01e      	b.n	8008d54 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d1e:	2b10      	cmp	r3, #16
 8008d20:	d114      	bne.n	8008d4c <netconn_drain+0x50>
        if (mem != NULL) {
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d015      	beq.n	8008d54 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d007      	beq.n	8008d44 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	891b      	ldrh	r3, [r3, #8]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	f004 f906 	bl	800cf50 <tcp_recved>
          }
          pbuf_free(p);
 8008d44:	6978      	ldr	r0, [r7, #20]
 8008d46:	f003 fa07 	bl	800c158 <pbuf_free>
 8008d4a:	e003      	b.n	8008d54 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 ff38 	bl	8009bc4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3310      	adds	r3, #16
 8008d58:	f107 020c 	add.w	r2, r7, #12
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f00d fd6e 	bl	8016840 <sys_arch_mbox_tryfetch>
 8008d64:	4603      	mov	r3, r0
 8008d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6a:	d1d4      	bne.n	8008d16 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3310      	adds	r3, #16
 8008d70:	4618      	mov	r0, r3
 8008d72:	f00d fce5 	bl	8016740 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	3310      	adds	r3, #16
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f00d fd8d 	bl	801689a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	3314      	adds	r3, #20
 8008d84:	4618      	mov	r0, r3
 8008d86:	f00d fd77 	bl	8016878 <sys_mbox_valid>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d02e      	beq.n	8008dee <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d90:	e017      	b.n	8008dc2 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <netconn_drain+0xfc>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d013      	beq.n	8008dc2 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 8008d9e:	6938      	ldr	r0, [r7, #16]
 8008da0:	f7ff ffac 	bl	8008cfc <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d007      	beq.n	8008dbc <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f003 ff27 	bl	800cc04 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	2200      	movs	r2, #0
 8008dba:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8008dbc:	6938      	ldr	r0, [r7, #16]
 8008dbe:	f7ff ff53 	bl	8008c68 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	3314      	adds	r3, #20
 8008dc6:	f107 020c 	add.w	r2, r7, #12
 8008dca:	4611      	mov	r1, r2
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f00d fd37 	bl	8016840 <sys_arch_mbox_tryfetch>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd8:	d1db      	bne.n	8008d92 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	3314      	adds	r3, #20
 8008dde:	4618      	mov	r0, r3
 8008de0:	f00d fcae 	bl	8016740 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	3314      	adds	r3, #20
 8008de8:	4618      	mov	r0, r3
 8008dea:	f00d fd56 	bl	801689a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008dee:	bf00      	nop
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	2000c390 	.word	0x2000c390

08008dfc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b088      	sub	sp, #32
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d106      	bne.n	8008e20 <lwip_netconn_do_close_internal+0x24>
 8008e12:	4baa      	ldr	r3, [pc, #680]	; (80090bc <lwip_netconn_do_close_internal+0x2c0>)
 8008e14:	f240 3243 	movw	r2, #835	; 0x343
 8008e18:	49a9      	ldr	r1, [pc, #676]	; (80090c0 <lwip_netconn_do_close_internal+0x2c4>)
 8008e1a:	48aa      	ldr	r0, [pc, #680]	; (80090c4 <lwip_netconn_do_close_internal+0x2c8>)
 8008e1c:	f00d feac 	bl	8016b78 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e28:	2b10      	cmp	r3, #16
 8008e2a:	d006      	beq.n	8008e3a <lwip_netconn_do_close_internal+0x3e>
 8008e2c:	4ba3      	ldr	r3, [pc, #652]	; (80090bc <lwip_netconn_do_close_internal+0x2c0>)
 8008e2e:	f44f 7251 	mov.w	r2, #836	; 0x344
 8008e32:	49a5      	ldr	r1, [pc, #660]	; (80090c8 <lwip_netconn_do_close_internal+0x2cc>)
 8008e34:	48a3      	ldr	r0, [pc, #652]	; (80090c4 <lwip_netconn_do_close_internal+0x2c8>)
 8008e36:	f00d fe9f 	bl	8016b78 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	785b      	ldrb	r3, [r3, #1]
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d006      	beq.n	8008e50 <lwip_netconn_do_close_internal+0x54>
 8008e42:	4b9e      	ldr	r3, [pc, #632]	; (80090bc <lwip_netconn_do_close_internal+0x2c0>)
 8008e44:	f240 3245 	movw	r2, #837	; 0x345
 8008e48:	49a0      	ldr	r1, [pc, #640]	; (80090cc <lwip_netconn_do_close_internal+0x2d0>)
 8008e4a:	489e      	ldr	r0, [pc, #632]	; (80090c4 <lwip_netconn_do_close_internal+0x2c8>)
 8008e4c:	f00d fe94 	bl	8016b78 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d106      	bne.n	8008e66 <lwip_netconn_do_close_internal+0x6a>
 8008e58:	4b98      	ldr	r3, [pc, #608]	; (80090bc <lwip_netconn_do_close_internal+0x2c0>)
 8008e5a:	f240 3246 	movw	r2, #838	; 0x346
 8008e5e:	499c      	ldr	r1, [pc, #624]	; (80090d0 <lwip_netconn_do_close_internal+0x2d4>)
 8008e60:	4898      	ldr	r0, [pc, #608]	; (80090c4 <lwip_netconn_do_close_internal+0x2c8>)
 8008e62:	f00d fe89 	bl	8016b78 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d106      	bne.n	8008e7c <lwip_netconn_do_close_internal+0x80>
 8008e6e:	4b93      	ldr	r3, [pc, #588]	; (80090bc <lwip_netconn_do_close_internal+0x2c0>)
 8008e70:	f240 3247 	movw	r2, #839	; 0x347
 8008e74:	4997      	ldr	r1, [pc, #604]	; (80090d4 <lwip_netconn_do_close_internal+0x2d8>)
 8008e76:	4893      	ldr	r0, [pc, #588]	; (80090c4 <lwip_netconn_do_close_internal+0x2c8>)
 8008e78:	f00d fe7e 	bl	8016b78 <iprintf>

  tpcb = conn->pcb.tcp;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e86:	7a1b      	ldrb	r3, [r3, #8]
 8008e88:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
 8008e9c:	2b03      	cmp	r3, #3
 8008e9e:	d102      	bne.n	8008ea6 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	77bb      	strb	r3, [r7, #30]
 8008ea4:	e01f      	b.n	8008ee6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008ea6:	7dbb      	ldrb	r3, [r7, #22]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00e      	beq.n	8008eca <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008eb0:	2b05      	cmp	r3, #5
 8008eb2:	d007      	beq.n	8008ec4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008eb8:	2b06      	cmp	r3, #6
 8008eba:	d003      	beq.n	8008ec4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008ec0:	2b08      	cmp	r3, #8
 8008ec2:	d102      	bne.n	8008eca <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	77bb      	strb	r3, [r7, #30]
 8008ec8:	e00d      	b.n	8008ee6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008eca:	7d7b      	ldrb	r3, [r7, #21]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d008      	beq.n	8008ee2 <lwip_netconn_do_close_internal+0xe6>
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	7e9b      	ldrb	r3, [r3, #26]
 8008ed4:	f003 0310 	and.w	r3, r3, #16
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8008edc:	2301      	movs	r3, #1
 8008ede:	77bb      	strb	r3, [r7, #30]
 8008ee0:	e001      	b.n	8008ee6 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 8008ee6:	7fbb      	ldrb	r3, [r7, #30]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008eec:	2100      	movs	r1, #0
 8008eee:	69b8      	ldr	r0, [r7, #24]
 8008ef0:	f004 fe1e 	bl	800db30 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	7d1b      	ldrb	r3, [r3, #20]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d104      	bne.n	8008f06 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008efc:	2100      	movs	r1, #0
 8008efe:	69b8      	ldr	r0, [r7, #24]
 8008f00:	f004 fe8c 	bl	800dc1c <tcp_accept>
 8008f04:	e01d      	b.n	8008f42 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008f06:	7dbb      	ldrb	r3, [r7, #22]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d007      	beq.n	8008f1c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	69b8      	ldr	r0, [r7, #24]
 8008f10:	f004 fe20 	bl	800db54 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008f14:	2100      	movs	r1, #0
 8008f16:	69b8      	ldr	r0, [r7, #24]
 8008f18:	f004 fe80 	bl	800dc1c <tcp_accept>
    }
    if (shut_tx) {
 8008f1c:	7d7b      	ldrb	r3, [r7, #21]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d003      	beq.n	8008f2a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008f22:	2100      	movs	r1, #0
 8008f24:	69b8      	ldr	r0, [r7, #24]
 8008f26:	f004 fe37 	bl	800db98 <tcp_sent>
    }
    if (close) {
 8008f2a:	7fbb      	ldrb	r3, [r7, #30]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d008      	beq.n	8008f42 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008f30:	2200      	movs	r2, #0
 8008f32:	2100      	movs	r1, #0
 8008f34:	69b8      	ldr	r0, [r7, #24]
 8008f36:	f004 fe89 	bl	800dc4c <tcp_poll>
      tcp_err(tpcb, NULL);
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	69b8      	ldr	r0, [r7, #24]
 8008f3e:	f004 fe4b 	bl	800dbd8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 8008f42:	7fbb      	ldrb	r3, [r7, #30]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d005      	beq.n	8008f54 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008f48:	69b8      	ldr	r0, [r7, #24]
 8008f4a:	f003 fd49 	bl	800c9e0 <tcp_close>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	77fb      	strb	r3, [r7, #31]
 8008f52:	e007      	b.n	8008f64 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008f54:	7dbb      	ldrb	r3, [r7, #22]
 8008f56:	7d7a      	ldrb	r2, [r7, #21]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	69b8      	ldr	r0, [r7, #24]
 8008f5c:	f003 fd58 	bl	800ca10 <tcp_shutdown>
 8008f60:	4603      	mov	r3, r0
 8008f62:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 8008f64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d102      	bne.n	8008f72 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	777b      	strb	r3, [r7, #29]
 8008f70:	e016      	b.n	8008fa0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008f72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f7a:	d10f      	bne.n	8008f9c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f80:	7a5b      	ldrb	r3, [r3, #9]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10c      	bne.n	8008fa0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8008f86:	2301      	movs	r3, #1
 8008f88:	777b      	strb	r3, [r7, #29]
        if (close) {
 8008f8a:	7fbb      	ldrb	r3, [r7, #30]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d007      	beq.n	8008fa0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008f90:	69b8      	ldr	r0, [r7, #24]
 8008f92:	f003 fe37 	bl	800cc04 <tcp_abort>
          err = ERR_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	77fb      	strb	r3, [r7, #31]
 8008f9a:	e001      	b.n	8008fa0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 8008fa0:	7f7b      	ldrb	r3, [r7, #29]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d056      	beq.n	8009054 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	330c      	adds	r3, #12
 8008fae:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb4:	7ffa      	ldrb	r2, [r7, #31]
 8008fb6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008fc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d129      	bne.n	8009020 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8008fcc:	7fbb      	ldrb	r3, [r7, #30]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00c      	beq.n	8008fec <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d005      	beq.n	8008fec <lwip_netconn_do_close_internal+0x1f0>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2104      	movs	r1, #4
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	4798      	blx	r3
      }
      if (shut_rx) {
 8008fec:	7dbb      	ldrb	r3, [r7, #22]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d009      	beq.n	8009006 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d005      	beq.n	8009006 <lwip_netconn_do_close_internal+0x20a>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffe:	2200      	movs	r2, #0
 8009000:	2100      	movs	r1, #0
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	4798      	blx	r3
      }
      if (shut_tx) {
 8009006:	7d7b      	ldrb	r3, [r7, #21]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d009      	beq.n	8009020 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009010:	2b00      	cmp	r3, #0
 8009012:	d005      	beq.n	8009020 <lwip_netconn_do_close_internal+0x224>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009018:	2200      	movs	r2, #0
 800901a:	2102      	movs	r1, #2
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00e      	beq.n	8009044 <lwip_netconn_do_close_internal+0x248>
 8009026:	f00d fd43 	bl	8016ab0 <sys_arch_protect>
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009032:	f113 0f0c 	cmn.w	r3, #12
 8009036:	db02      	blt.n	800903e <lwip_netconn_do_close_internal+0x242>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	7ffa      	ldrb	r2, [r7, #31]
 800903c:	721a      	strb	r2, [r3, #8]
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f00d fd44 	bl	8016acc <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800904a:	6938      	ldr	r0, [r7, #16]
 800904c:	f00d fc8b 	bl	8016966 <sys_sem_signal>
    }
    return ERR_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	e02e      	b.n	80090b2 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 8009054:	7f7b      	ldrb	r3, [r7, #29]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d11e      	bne.n	8009098 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	7d1b      	ldrb	r3, [r3, #20]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d106      	bne.n	8009070 <lwip_netconn_do_close_internal+0x274>
 8009062:	4b16      	ldr	r3, [pc, #88]	; (80090bc <lwip_netconn_do_close_internal+0x2c0>)
 8009064:	f240 32e3 	movw	r2, #995	; 0x3e3
 8009068:	491b      	ldr	r1, [pc, #108]	; (80090d8 <lwip_netconn_do_close_internal+0x2dc>)
 800906a:	4816      	ldr	r0, [pc, #88]	; (80090c4 <lwip_netconn_do_close_internal+0x2c8>)
 800906c:	f00d fd84 	bl	8016b78 <iprintf>
    if (shut_tx) {
 8009070:	7d7b      	ldrb	r3, [r7, #21]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d003      	beq.n	800907e <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 8009076:	4919      	ldr	r1, [pc, #100]	; (80090dc <lwip_netconn_do_close_internal+0x2e0>)
 8009078:	69b8      	ldr	r0, [r7, #24]
 800907a:	f004 fd8d 	bl	800db98 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800907e:	2201      	movs	r2, #1
 8009080:	4917      	ldr	r1, [pc, #92]	; (80090e0 <lwip_netconn_do_close_internal+0x2e4>)
 8009082:	69b8      	ldr	r0, [r7, #24]
 8009084:	f004 fde2 	bl	800dc4c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009088:	4916      	ldr	r1, [pc, #88]	; (80090e4 <lwip_netconn_do_close_internal+0x2e8>)
 800908a:	69b8      	ldr	r0, [r7, #24]
 800908c:	f004 fda4 	bl	800dbd8 <tcp_err>
    tcp_arg(tpcb, conn);
 8009090:	6879      	ldr	r1, [r7, #4]
 8009092:	69b8      	ldr	r0, [r7, #24]
 8009094:	f004 fd4c 	bl	800db30 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009098:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d106      	bne.n	80090ae <lwip_netconn_do_close_internal+0x2b2>
 80090a0:	4b06      	ldr	r3, [pc, #24]	; (80090bc <lwip_netconn_do_close_internal+0x2c0>)
 80090a2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80090a6:	4910      	ldr	r1, [pc, #64]	; (80090e8 <lwip_netconn_do_close_internal+0x2ec>)
 80090a8:	4806      	ldr	r0, [pc, #24]	; (80090c4 <lwip_netconn_do_close_internal+0x2c8>)
 80090aa:	f00d fd65 	bl	8016b78 <iprintf>
  return err;
 80090ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3720      	adds	r7, #32
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	080182c8 	.word	0x080182c8
 80090c0:	08018540 	.word	0x08018540
 80090c4:	08018320 	.word	0x08018320
 80090c8:	08018550 	.word	0x08018550
 80090cc:	08018570 	.word	0x08018570
 80090d0:	08018594 	.word	0x08018594
 80090d4:	080183fc 	.word	0x080183fc
 80090d8:	080185a8 	.word	0x080185a8
 80090dc:	0800863d 	.word	0x0800863d
 80090e0:	08008575 	.word	0x08008575
 80090e4:	080086e5 	.word	0x080086e5
 80090e8:	080185cc 	.word	0x080185cc

080090ec <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	785b      	ldrb	r3, [r3, #1]
 80090fe:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009100:	7cfb      	ldrb	r3, [r7, #19]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00d      	beq.n	8009122 <lwip_netconn_do_delconn+0x36>
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009110:	2b10      	cmp	r3, #16
 8009112:	d006      	beq.n	8009122 <lwip_netconn_do_delconn+0x36>
 8009114:	4b6f      	ldr	r3, [pc, #444]	; (80092d4 <lwip_netconn_do_delconn+0x1e8>)
 8009116:	f240 4201 	movw	r2, #1025	; 0x401
 800911a:	496f      	ldr	r1, [pc, #444]	; (80092d8 <lwip_netconn_do_delconn+0x1ec>)
 800911c:	486f      	ldr	r0, [pc, #444]	; (80092dc <lwip_netconn_do_delconn+0x1f0>)
 800911e:	f00d fd2b 	bl	8016b78 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009122:	7cfb      	ldrb	r3, [r7, #19]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <lwip_netconn_do_delconn+0x48>
 8009128:	7cfb      	ldrb	r3, [r7, #19]
 800912a:	2b02      	cmp	r3, #2
 800912c:	d002      	beq.n	8009134 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800912e:	7cfb      	ldrb	r3, [r7, #19]
 8009130:	2b03      	cmp	r3, #3
 8009132:	d109      	bne.n	8009148 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009134:	7cfb      	ldrb	r3, [r7, #19]
 8009136:	2b03      	cmp	r3, #3
 8009138:	d10a      	bne.n	8009150 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	7f1b      	ldrb	r3, [r3, #28]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b00      	cmp	r3, #0
 8009146:	d103      	bne.n	8009150 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	22fb      	movs	r2, #251	; 0xfb
 800914c:	711a      	strb	r2, [r3, #4]
 800914e:	e09c      	b.n	800928a <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009150:	7cfb      	ldrb	r3, [r7, #19]
 8009152:	2b03      	cmp	r3, #3
 8009154:	d10d      	bne.n	8009172 <lwip_netconn_do_delconn+0x86>
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	7f1b      	ldrb	r3, [r3, #28]
 800915c:	f003 0304 	and.w	r3, r3, #4
 8009160:	2b00      	cmp	r3, #0
 8009162:	d106      	bne.n	8009172 <lwip_netconn_do_delconn+0x86>
 8009164:	4b5b      	ldr	r3, [pc, #364]	; (80092d4 <lwip_netconn_do_delconn+0x1e8>)
 8009166:	f240 421f 	movw	r2, #1055	; 0x41f
 800916a:	495d      	ldr	r1, [pc, #372]	; (80092e0 <lwip_netconn_do_delconn+0x1f4>)
 800916c:	485b      	ldr	r0, [pc, #364]	; (80092dc <lwip_netconn_do_delconn+0x1f0>)
 800916e:	f00d fd03 	bl	8016b78 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	2200      	movs	r2, #0
 8009176:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4618      	mov	r0, r3
 800917e:	f7ff fdbd 	bl	8008cfc <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d064      	beq.n	8009256 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009196:	2b10      	cmp	r3, #16
 8009198:	d00e      	beq.n	80091b8 <lwip_netconn_do_delconn+0xcc>
 800919a:	2b20      	cmp	r3, #32
 800919c:	d000      	beq.n	80091a0 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 800919e:	e056      	b.n	800924e <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f009 f93d 	bl	8012430 <udp_remove>
        break;
 80091b6:	e04a      	b.n	800924e <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d104      	bne.n	80091cc <lwip_netconn_do_delconn+0xe0>
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	6a1b      	ldr	r3, [r3, #32]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d006      	beq.n	80091da <lwip_netconn_do_delconn+0xee>
 80091cc:	4b41      	ldr	r3, [pc, #260]	; (80092d4 <lwip_netconn_do_delconn+0x1e8>)
 80091ce:	f240 4235 	movw	r2, #1077	; 0x435
 80091d2:	4944      	ldr	r1, [pc, #272]	; (80092e4 <lwip_netconn_do_delconn+0x1f8>)
 80091d4:	4841      	ldr	r0, [pc, #260]	; (80092dc <lwip_netconn_do_delconn+0x1f0>)
 80091d6:	f00d fccf 	bl	8016b78 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2204      	movs	r2, #4
 80091e0:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2203      	movs	r2, #3
 80091e6:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2100      	movs	r1, #0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7ff fe00 	bl	8008dfc <lwip_netconn_do_close_internal>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d064      	beq.n	80092cc <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	785b      	ldrb	r3, [r3, #1]
 8009208:	2b04      	cmp	r3, #4
 800920a:	d006      	beq.n	800921a <lwip_netconn_do_delconn+0x12e>
 800920c:	4b31      	ldr	r3, [pc, #196]	; (80092d4 <lwip_netconn_do_delconn+0x1e8>)
 800920e:	f240 423b 	movw	r2, #1083	; 0x43b
 8009212:	4935      	ldr	r1, [pc, #212]	; (80092e8 <lwip_netconn_do_delconn+0x1fc>)
 8009214:	4831      	ldr	r0, [pc, #196]	; (80092dc <lwip_netconn_do_delconn+0x1f0>)
 8009216:	f00d fcaf 	bl	8016b78 <iprintf>
          UNLOCK_TCPIP_CORE();
 800921a:	4834      	ldr	r0, [pc, #208]	; (80092ec <lwip_netconn_do_delconn+0x200>)
 800921c:	f00d fc15 	bl	8016a4a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	330c      	adds	r3, #12
 8009226:	2100      	movs	r1, #0
 8009228:	4618      	mov	r0, r3
 800922a:	f00d fb6b 	bl	8016904 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800922e:	482f      	ldr	r0, [pc, #188]	; (80092ec <lwip_netconn_do_delconn+0x200>)
 8009230:	f00d fbfc 	bl	8016a2c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	785b      	ldrb	r3, [r3, #1]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d046      	beq.n	80092cc <lwip_netconn_do_delconn+0x1e0>
 800923e:	4b25      	ldr	r3, [pc, #148]	; (80092d4 <lwip_netconn_do_delconn+0x1e8>)
 8009240:	f240 423f 	movw	r2, #1087	; 0x43f
 8009244:	4928      	ldr	r1, [pc, #160]	; (80092e8 <lwip_netconn_do_delconn+0x1fc>)
 8009246:	4825      	ldr	r0, [pc, #148]	; (80092dc <lwip_netconn_do_delconn+0x1f0>)
 8009248:	f00d fc96 	bl	8016b78 <iprintf>
        return;
 800924c:	e03e      	b.n	80092cc <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2200      	movs	r2, #0
 8009254:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925c:	2b00      	cmp	r3, #0
 800925e:	d007      	beq.n	8009270 <lwip_netconn_do_delconn+0x184>
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	6810      	ldr	r0, [r2, #0]
 800926a:	2200      	movs	r2, #0
 800926c:	2100      	movs	r1, #0
 800926e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009276:	2b00      	cmp	r3, #0
 8009278:	d007      	beq.n	800928a <lwip_netconn_do_delconn+0x19e>
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009280:	697a      	ldr	r2, [r7, #20]
 8009282:	6810      	ldr	r0, [r2, #0]
 8009284:	2200      	movs	r2, #0
 8009286:	2102      	movs	r1, #2
 8009288:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	330c      	adds	r3, #12
 8009290:	4618      	mov	r0, r3
 8009292:	f00d fb82 	bl	801699a <sys_sem_valid>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d018      	beq.n	80092ce <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d014      	beq.n	80092ce <lwip_netconn_do_delconn+0x1e2>
 80092a4:	f00d fc04 	bl	8016ab0 <sys_arch_protect>
 80092a8:	60f8      	str	r0, [r7, #12]
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80092b2:	f113 0f0c 	cmn.w	r3, #12
 80092b6:	db05      	blt.n	80092c4 <lwip_netconn_do_delconn+0x1d8>
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80092c2:	721a      	strb	r2, [r3, #8]
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f00d fc01 	bl	8016acc <sys_arch_unprotect>
 80092ca:	e000      	b.n	80092ce <lwip_netconn_do_delconn+0x1e2>
        return;
 80092cc:	bf00      	nop
  }
}
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	080182c8 	.word	0x080182c8
 80092d8:	080185dc 	.word	0x080185dc
 80092dc:	08018320 	.word	0x08018320
 80092e0:	080185f0 	.word	0x080185f0
 80092e4:	08018610 	.word	0x08018610
 80092e8:	0801862c 	.word	0x0801862c
 80092ec:	2000c394 	.word	0x2000c394

080092f0 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009304:	f113 0f0c 	cmn.w	r3, #12
 8009308:	da06      	bge.n	8009318 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	711a      	strb	r2, [r3, #4]
 8009316:	e030      	b.n	800937a <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	22fa      	movs	r2, #250	; 0xfa
 800931c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d027      	beq.n	8009378 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009332:	2b10      	cmp	r3, #16
 8009334:	d011      	beq.n	800935a <lwip_netconn_do_bind+0x6a>
 8009336:	2b20      	cmp	r3, #32
 8009338:	d000      	beq.n	800933c <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 800933a:	e01e      	b.n	800937a <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6858      	ldr	r0, [r3, #4]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6899      	ldr	r1, [r3, #8]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	899b      	ldrh	r3, [r3, #12]
 800934a:	461a      	mov	r2, r3
 800934c:	f008 ff98 	bl	8012280 <udp_bind>
 8009350:	4603      	mov	r3, r0
 8009352:	461a      	mov	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	711a      	strb	r2, [r3, #4]
        break;
 8009358:	e00f      	b.n	800937a <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	6858      	ldr	r0, [r3, #4]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6899      	ldr	r1, [r3, #8]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	899b      	ldrh	r3, [r3, #12]
 8009368:	461a      	mov	r2, r3
 800936a:	f003 fc57 	bl	800cc1c <tcp_bind>
 800936e:	4603      	mov	r3, r0
 8009370:	461a      	mov	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	711a      	strb	r2, [r3, #4]
        break;
 8009376:	e000      	b.n	800937a <lwip_netconn_do_bind+0x8a>
      }
    }
 8009378:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d012      	beq.n	80093a8 <lwip_netconn_do_bind+0xb8>
 8009382:	f00d fb95 	bl	8016ab0 <sys_arch_protect>
 8009386:	60b8      	str	r0, [r7, #8]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009390:	f113 0f0c 	cmn.w	r3, #12
 8009394:	db05      	blt.n	80093a2 <lwip_netconn_do_bind+0xb2>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80093a0:	721a      	strb	r2, [r3, #8]
 80093a2:	68b8      	ldr	r0, [r7, #8]
 80093a4:	f00d fb92 	bl	8016acc <sys_arch_unprotect>
}
 80093a8:	bf00      	nop
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80093c4:	f113 0f0c 	cmn.w	r3, #12
 80093c8:	da06      	bge.n	80093d8 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	711a      	strb	r2, [r3, #4]
 80093d6:	e090      	b.n	80094fa <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	22f5      	movs	r2, #245	; 0xf5
 80093dc:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 8088 	beq.w	80094fa <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093f4:	2b10      	cmp	r3, #16
 80093f6:	d17d      	bne.n	80094f4 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	785b      	ldrb	r3, [r3, #1]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d16f      	bne.n	80094e2 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	7d1b      	ldrb	r3, [r3, #20]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	22fa      	movs	r2, #250	; 0xfa
 8009412:	711a      	strb	r2, [r3, #4]
 8009414:	e071      	b.n	80094fa <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009416:	23ff      	movs	r3, #255	; 0xff
 8009418:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f107 020f 	add.w	r2, r7, #15
 8009424:	7ef9      	ldrb	r1, [r7, #27]
 8009426:	4618      	mov	r0, r3
 8009428:	f003 fcac 	bl	800cd84 <tcp_listen_with_backlog_and_err>
 800942c:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d104      	bne.n	800943e <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 8009434:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	711a      	strb	r2, [r3, #4]
 800943c:	e05d      	b.n	80094fa <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3310      	adds	r3, #16
 8009444:	4618      	mov	r0, r3
 8009446:	f00d fa17 	bl	8016878 <sys_mbox_valid>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00b      	beq.n	8009468 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3310      	adds	r3, #16
 8009456:	4618      	mov	r0, r3
 8009458:	f00d f972 	bl	8016740 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3310      	adds	r3, #16
 8009462:	4618      	mov	r0, r3
 8009464:	f00d fa19 	bl	801689a <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	2200      	movs	r2, #0
 800946c:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3314      	adds	r3, #20
 8009474:	4618      	mov	r0, r3
 8009476:	f00d f9ff 	bl	8016878 <sys_mbox_valid>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10a      	bne.n	8009496 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3314      	adds	r3, #20
 8009486:	2106      	movs	r1, #6
 8009488:	4618      	mov	r0, r3
 800948a:	f00d f937 	bl	80166fc <sys_mbox_new>
 800948e:	4603      	mov	r3, r0
 8009490:	461a      	mov	r2, r3
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d118      	bne.n	80094d2 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2202      	movs	r2, #2
 80094a6:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4619      	mov	r1, r3
 80094bc:	4610      	mov	r0, r2
 80094be:	f004 fb37 	bl	800db30 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	4919      	ldr	r1, [pc, #100]	; (8009530 <lwip_netconn_do_listen+0x180>)
 80094ca:	4618      	mov	r0, r3
 80094cc:	f004 fba6 	bl	800dc1c <tcp_accept>
 80094d0:	e013      	b.n	80094fa <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 80094d2:	6978      	ldr	r0, [r7, #20]
 80094d4:	f003 fa84 	bl	800c9e0 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2200      	movs	r2, #0
 80094de:	605a      	str	r2, [r3, #4]
 80094e0:	e00b      	b.n	80094fa <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	785b      	ldrb	r3, [r3, #1]
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d106      	bne.n	80094fa <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	2200      	movs	r2, #0
 80094f0:	711a      	strb	r2, [r3, #4]
 80094f2:	e002      	b.n	80094fa <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	22f0      	movs	r2, #240	; 0xf0
 80094f8:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d012      	beq.n	8009528 <lwip_netconn_do_listen+0x178>
 8009502:	f00d fad5 	bl	8016ab0 <sys_arch_protect>
 8009506:	6138      	str	r0, [r7, #16]
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009510:	f113 0f0c 	cmn.w	r3, #12
 8009514:	db05      	blt.n	8009522 <lwip_netconn_do_listen+0x172>
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	69fa      	ldr	r2, [r7, #28]
 800951c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009520:	721a      	strb	r2, [r3, #8]
 8009522:	6938      	ldr	r0, [r7, #16]
 8009524:	f00d fad2 	bl	8016acc <sys_arch_unprotect>
}
 8009528:	bf00      	nop
 800952a:	3720      	adds	r7, #32
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	08008915 	.word	0x08008915

08009534 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	2200      	movs	r2, #0
 8009544:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d022      	beq.n	8009596 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800955a:	2b10      	cmp	r3, #16
 800955c:	d11b      	bne.n	8009596 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800956a:	d202      	bcs.n	8009572 <lwip_netconn_do_recv+0x3e>
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	b29b      	uxth	r3, r3
 8009570:	e001      	b.n	8009576 <lwip_netconn_do_recv+0x42>
 8009572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009576:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	89fa      	ldrh	r2, [r7, #14]
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f003 fce4 	bl	800cf50 <tcp_recved>
        remaining -= recved;
 8009588:	89fb      	ldrh	r3, [r7, #14]
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1e6      	bne.n	8009564 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d012      	beq.n	80095c4 <lwip_netconn_do_recv+0x90>
 800959e:	f00d fa87 	bl	8016ab0 <sys_arch_protect>
 80095a2:	60b8      	str	r0, [r7, #8]
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80095ac:	f113 0f0c 	cmn.w	r3, #12
 80095b0:	db05      	blt.n	80095be <lwip_netconn_do_recv+0x8a>
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80095bc:	721a      	strb	r2, [r3, #8]
 80095be:	68b8      	ldr	r0, [r7, #8]
 80095c0:	f00d fa84 	bl	8016acc <sys_arch_unprotect>
}
 80095c4:	bf00      	nop
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08a      	sub	sp, #40	; 0x28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	460b      	mov	r3, r1
 80095d6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80095d8:	2300      	movs	r3, #0
 80095da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d106      	bne.n	80095f2 <lwip_netconn_do_writemore+0x26>
 80095e4:	4ba3      	ldr	r3, [pc, #652]	; (8009874 <lwip_netconn_do_writemore+0x2a8>)
 80095e6:	f240 52e3 	movw	r2, #1507	; 0x5e3
 80095ea:	49a3      	ldr	r1, [pc, #652]	; (8009878 <lwip_netconn_do_writemore+0x2ac>)
 80095ec:	48a3      	ldr	r0, [pc, #652]	; (800987c <lwip_netconn_do_writemore+0x2b0>)
 80095ee:	f00d fac3 	bl	8016b78 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	785b      	ldrb	r3, [r3, #1]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d006      	beq.n	8009608 <lwip_netconn_do_writemore+0x3c>
 80095fa:	4b9e      	ldr	r3, [pc, #632]	; (8009874 <lwip_netconn_do_writemore+0x2a8>)
 80095fc:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8009600:	499f      	ldr	r1, [pc, #636]	; (8009880 <lwip_netconn_do_writemore+0x2b4>)
 8009602:	489e      	ldr	r0, [pc, #632]	; (800987c <lwip_netconn_do_writemore+0x2b0>)
 8009604:	f00d fab8 	bl	8016b78 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960c:	2b00      	cmp	r3, #0
 800960e:	d106      	bne.n	800961e <lwip_netconn_do_writemore+0x52>
 8009610:	4b98      	ldr	r3, [pc, #608]	; (8009874 <lwip_netconn_do_writemore+0x2a8>)
 8009612:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8009616:	499b      	ldr	r1, [pc, #620]	; (8009884 <lwip_netconn_do_writemore+0x2b8>)
 8009618:	4898      	ldr	r0, [pc, #608]	; (800987c <lwip_netconn_do_writemore+0x2b0>)
 800961a:	f00d faad 	bl	8016b78 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d106      	bne.n	8009634 <lwip_netconn_do_writemore+0x68>
 8009626:	4b93      	ldr	r3, [pc, #588]	; (8009874 <lwip_netconn_do_writemore+0x2a8>)
 8009628:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800962c:	4996      	ldr	r1, [pc, #600]	; (8009888 <lwip_netconn_do_writemore+0x2bc>)
 800962e:	4893      	ldr	r0, [pc, #588]	; (800987c <lwip_netconn_do_writemore+0x2b0>)
 8009630:	f00d faa2 	bl	8016b78 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a1a      	ldr	r2, [r3, #32]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	429a      	cmp	r2, r3
 8009640:	d306      	bcc.n	8009650 <lwip_netconn_do_writemore+0x84>
 8009642:	4b8c      	ldr	r3, [pc, #560]	; (8009874 <lwip_netconn_do_writemore+0x2a8>)
 8009644:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8009648:	4990      	ldr	r1, [pc, #576]	; (800988c <lwip_netconn_do_writemore+0x2c0>)
 800964a:	488c      	ldr	r0, [pc, #560]	; (800987c <lwip_netconn_do_writemore+0x2b0>)
 800964c:	f00d fa94 	bl	8016b78 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009654:	7c1b      	ldrb	r3, [r3, #16]
 8009656:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	7f1b      	ldrb	r3, [r3, #28]
 800965e:	f003 0302 	and.w	r3, r3, #2
 8009662:	2b00      	cmp	r3, #0
 8009664:	d105      	bne.n	8009672 <lwip_netconn_do_writemore+0xa6>
 8009666:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800966a:	f003 0304 	and.w	r3, r3, #4
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <lwip_netconn_do_writemore+0xaa>
 8009672:	2301      	movs	r3, #1
 8009674:	e000      	b.n	8009678 <lwip_netconn_do_writemore+0xac>
 8009676:	2300      	movs	r3, #0
 8009678:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009680:	689a      	ldr	r2, [r3, #8]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	4413      	add	r3, r2
 8009688:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a1b      	ldr	r3, [r3, #32]
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800969e:	d309      	bcc.n	80096b4 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 80096a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80096a4:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 80096a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80096aa:	f043 0302 	orr.w	r3, r3, #2
 80096ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80096b2:	e001      	b.n	80096b8 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096c0:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 80096c2:	8afa      	ldrh	r2, [r7, #22]
 80096c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d212      	bcs.n	80096f0 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 80096ca:	8afb      	ldrh	r3, [r7, #22]
 80096cc:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 80096ce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d006      	beq.n	80096e4 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 80096d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d109      	bne.n	80096f0 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 80096dc:	23f9      	movs	r3, #249	; 0xf9
 80096de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 80096e2:	e02a      	b.n	800973a <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 80096e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80096e8:	f043 0302 	orr.w	r3, r3, #2
 80096ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a1a      	ldr	r2, [r3, #32]
 80096f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096f6:	441a      	add	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d906      	bls.n	8009710 <lwip_netconn_do_writemore+0x144>
 8009702:	4b5c      	ldr	r3, [pc, #368]	; (8009874 <lwip_netconn_do_writemore+0x2a8>)
 8009704:	f240 6213 	movw	r2, #1555	; 0x613
 8009708:	4961      	ldr	r1, [pc, #388]	; (8009890 <lwip_netconn_do_writemore+0x2c4>)
 800970a:	485c      	ldr	r0, [pc, #368]	; (800987c <lwip_netconn_do_writemore+0x2b0>)
 800970c:	f00d fa34 	bl	8016b78 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6858      	ldr	r0, [r3, #4]
 8009714:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009718:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800971a:	69f9      	ldr	r1, [r7, #28]
 800971c:	f007 f84a 	bl	80107b4 <tcp_write>
 8009720:	4603      	mov	r3, r0
 8009722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009726:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800972a:	2b00      	cmp	r3, #0
 800972c:	d004      	beq.n	8009738 <lwip_netconn_do_writemore+0x16c>
 800972e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009736:	d133      	bne.n	80097a0 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 8009738:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800973a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800973e:	2b00      	cmp	r3, #0
 8009740:	d017      	beq.n	8009772 <lwip_netconn_do_writemore+0x1a6>
 8009742:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	429a      	cmp	r2, r3
 800974c:	d211      	bcs.n	8009772 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009752:	2b00      	cmp	r3, #0
 8009754:	d005      	beq.n	8009762 <lwip_netconn_do_writemore+0x196>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800975c:	2103      	movs	r1, #3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	7f1b      	ldrb	r3, [r3, #28]
 8009766:	f043 0310 	orr.w	r3, r3, #16
 800976a:	b2da      	uxtb	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	771a      	strb	r2, [r3, #28]
 8009770:	e016      	b.n	80097a0 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800977a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800977e:	d305      	bcc.n	800978c <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009788:	2b04      	cmp	r3, #4
 800978a:	d909      	bls.n	80097a0 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009790:	2b00      	cmp	r3, #0
 8009792:	d005      	beq.n	80097a0 <lwip_netconn_do_writemore+0x1d4>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009798:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800979a:	2103      	movs	r1, #3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80097a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d134      	bne.n	8009812 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a1a      	ldr	r2, [r3, #32]
 80097ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097ae:	441a      	add	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a1a      	ldr	r2, [r3, #32]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d003      	beq.n	80097ca <lwip_netconn_do_writemore+0x1fe>
 80097c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d007      	beq.n	80097da <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	6a12      	ldr	r2, [r2, #32]
 80097d2:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 80097d4:	2301      	movs	r3, #1
 80097d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	4618      	mov	r0, r3
 80097e0:	f007 fc9a 	bl	8011118 <tcp_output>
 80097e4:	4603      	mov	r3, r0
 80097e6:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80097e8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80097ec:	f113 0f0c 	cmn.w	r3, #12
 80097f0:	db04      	blt.n	80097fc <lwip_netconn_do_writemore+0x230>
 80097f2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80097f6:	f113 0f04 	cmn.w	r3, #4
 80097fa:	d152      	bne.n	80098a2 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80097fc:	7d3b      	ldrb	r3, [r7, #20]
 80097fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009802:	2301      	movs	r3, #1
 8009804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	2200      	movs	r2, #0
 800980e:	60da      	str	r2, [r3, #12]
 8009810:	e047      	b.n	80098a2 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 8009812:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981a:	d13b      	bne.n	8009894 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	4618      	mov	r0, r3
 8009822:	f007 fc79 	bl	8011118 <tcp_output>
 8009826:	4603      	mov	r3, r0
 8009828:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800982a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800982e:	f113 0f0c 	cmn.w	r3, #12
 8009832:	db04      	blt.n	800983e <lwip_netconn_do_writemore+0x272>
 8009834:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8009838:	f113 0f04 	cmn.w	r3, #4
 800983c:	d10a      	bne.n	8009854 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800983e:	7d7b      	ldrb	r3, [r7, #21]
 8009840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009844:	2301      	movs	r3, #1
 8009846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	2200      	movs	r2, #0
 8009850:	60da      	str	r2, [r3, #12]
 8009852:	e026      	b.n	80098a2 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 8009854:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009858:	2b00      	cmp	r3, #0
 800985a:	d022      	beq.n	80098a2 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800985c:	23f9      	movs	r3, #249	; 0xf9
 800985e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009862:	2301      	movs	r3, #1
 8009864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	2200      	movs	r2, #0
 800986e:	60da      	str	r2, [r3, #12]
 8009870:	e017      	b.n	80098a2 <lwip_netconn_do_writemore+0x2d6>
 8009872:	bf00      	nop
 8009874:	080182c8 	.word	0x080182c8
 8009878:	080183ec 	.word	0x080183ec
 800987c:	08018320 	.word	0x08018320
 8009880:	080186cc 	.word	0x080186cc
 8009884:	080183fc 	.word	0x080183fc
 8009888:	080186ec 	.word	0x080186ec
 800988c:	08018704 	.word	0x08018704
 8009890:	08018738 	.word	0x08018738
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009894:	2301      	movs	r3, #1
 8009896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989e:	2200      	movs	r2, #0
 80098a0:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 80098a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d02c      	beq.n	8009904 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	330c      	adds	r3, #12
 80098b2:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80098bc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00f      	beq.n	80098f6 <lwip_netconn_do_writemore+0x32a>
 80098d6:	f00d f8eb 	bl	8016ab0 <sys_arch_protect>
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80098e2:	f113 0f0c 	cmn.w	r3, #12
 80098e6:	db03      	blt.n	80098f0 <lwip_netconn_do_writemore+0x324>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80098ee:	721a      	strb	r2, [r3, #8]
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f00d f8eb 	bl	8016acc <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80098f6:	78fb      	ldrb	r3, [r7, #3]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d006      	beq.n	800990a <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80098fc:	6938      	ldr	r0, [r7, #16]
 80098fe:	f00d f832 	bl	8016966 <sys_sem_signal>
 8009902:	e002      	b.n	800990a <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009904:	f04f 33ff 	mov.w	r3, #4294967295
 8009908:	e000      	b.n	800990c <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3728      	adds	r7, #40	; 0x28
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009928:	f113 0f0c 	cmn.w	r3, #12
 800992c:	da06      	bge.n	800993c <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	711a      	strb	r2, [r3, #4]
 800993a:	e072      	b.n	8009a22 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009946:	2b10      	cmp	r3, #16
 8009948:	d168      	bne.n	8009a1c <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	785b      	ldrb	r3, [r3, #1]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d003      	beq.n	800995c <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	22fb      	movs	r2, #251	; 0xfb
 8009958:	711a      	strb	r2, [r3, #4]
 800995a:	e062      	b.n	8009a22 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d056      	beq.n	8009a14 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2201      	movs	r2, #1
 800996c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009974:	2b00      	cmp	r3, #0
 8009976:	d104      	bne.n	8009982 <lwip_netconn_do_write+0x6e>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d006      	beq.n	8009990 <lwip_netconn_do_write+0x7c>
 8009982:	4b36      	ldr	r3, [pc, #216]	; (8009a5c <lwip_netconn_do_write+0x148>)
 8009984:	f240 6283 	movw	r2, #1667	; 0x683
 8009988:	4935      	ldr	r1, [pc, #212]	; (8009a60 <lwip_netconn_do_write+0x14c>)
 800998a:	4836      	ldr	r0, [pc, #216]	; (8009a64 <lwip_netconn_do_write+0x150>)
 800998c:	f00d f8f4 	bl	8016b78 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d106      	bne.n	80099a6 <lwip_netconn_do_write+0x92>
 8009998:	4b30      	ldr	r3, [pc, #192]	; (8009a5c <lwip_netconn_do_write+0x148>)
 800999a:	f240 6284 	movw	r2, #1668	; 0x684
 800999e:	4932      	ldr	r1, [pc, #200]	; (8009a68 <lwip_netconn_do_write+0x154>)
 80099a0:	4830      	ldr	r0, [pc, #192]	; (8009a64 <lwip_netconn_do_write+0x150>)
 80099a2:	f00d f8e9 	bl	8016b78 <iprintf>
        msg->conn->current_msg = msg;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2200      	movs	r2, #0
 80099b4:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2100      	movs	r1, #0
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff fe05 	bl	80095cc <lwip_netconn_do_writemore>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d044      	beq.n	8009a52 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	785b      	ldrb	r3, [r3, #1]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d006      	beq.n	80099e0 <lwip_netconn_do_write+0xcc>
 80099d2:	4b22      	ldr	r3, [pc, #136]	; (8009a5c <lwip_netconn_do_write+0x148>)
 80099d4:	f240 6289 	movw	r2, #1673	; 0x689
 80099d8:	4924      	ldr	r1, [pc, #144]	; (8009a6c <lwip_netconn_do_write+0x158>)
 80099da:	4822      	ldr	r0, [pc, #136]	; (8009a64 <lwip_netconn_do_write+0x150>)
 80099dc:	f00d f8cc 	bl	8016b78 <iprintf>
          UNLOCK_TCPIP_CORE();
 80099e0:	4823      	ldr	r0, [pc, #140]	; (8009a70 <lwip_netconn_do_write+0x15c>)
 80099e2:	f00d f832 	bl	8016a4a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	330c      	adds	r3, #12
 80099ec:	2100      	movs	r1, #0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f00c ff88 	bl	8016904 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80099f4:	481e      	ldr	r0, [pc, #120]	; (8009a70 <lwip_netconn_do_write+0x15c>)
 80099f6:	f00d f819 	bl	8016a2c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	785b      	ldrb	r3, [r3, #1]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d126      	bne.n	8009a52 <lwip_netconn_do_write+0x13e>
 8009a04:	4b15      	ldr	r3, [pc, #84]	; (8009a5c <lwip_netconn_do_write+0x148>)
 8009a06:	f240 628d 	movw	r2, #1677	; 0x68d
 8009a0a:	4918      	ldr	r1, [pc, #96]	; (8009a6c <lwip_netconn_do_write+0x158>)
 8009a0c:	4815      	ldr	r0, [pc, #84]	; (8009a64 <lwip_netconn_do_write+0x150>)
 8009a0e:	f00d f8b3 	bl	8016b78 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009a12:	e01e      	b.n	8009a52 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	22f5      	movs	r2, #245	; 0xf5
 8009a18:	711a      	strb	r2, [r3, #4]
 8009a1a:	e002      	b.n	8009a22 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	22fa      	movs	r2, #250	; 0xfa
 8009a20:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d014      	beq.n	8009a54 <lwip_netconn_do_write+0x140>
 8009a2a:	f00d f841 	bl	8016ab0 <sys_arch_protect>
 8009a2e:	60b8      	str	r0, [r7, #8]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009a38:	f113 0f0c 	cmn.w	r3, #12
 8009a3c:	db05      	blt.n	8009a4a <lwip_netconn_do_write+0x136>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009a48:	721a      	strb	r2, [r3, #8]
 8009a4a:	68b8      	ldr	r0, [r7, #8]
 8009a4c:	f00d f83e 	bl	8016acc <sys_arch_unprotect>
 8009a50:	e000      	b.n	8009a54 <lwip_netconn_do_write+0x140>
        return;
 8009a52:	bf00      	nop
}
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	080182c8 	.word	0x080182c8
 8009a60:	08018610 	.word	0x08018610
 8009a64:	08018320 	.word	0x08018320
 8009a68:	08018764 	.word	0x08018764
 8009a6c:	0801862c 	.word	0x0801862c
 8009a70:	2000c394 	.word	0x2000c394

08009a74 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	785b      	ldrb	r3, [r3, #1]
 8009a86:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d06e      	beq.n	8009b70 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009a9c:	2b10      	cmp	r3, #16
 8009a9e:	d167      	bne.n	8009b70 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d002      	beq.n	8009aae <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009aa8:	7cfb      	ldrb	r3, [r7, #19]
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d060      	beq.n	8009b70 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009aae:	7cfb      	ldrb	r3, [r7, #19]
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d103      	bne.n	8009abc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	22f5      	movs	r2, #245	; 0xf5
 8009ab8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009aba:	e05c      	b.n	8009b76 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 8009abc:	7cfb      	ldrb	r3, [r7, #19]
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d103      	bne.n	8009aca <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	22fb      	movs	r2, #251	; 0xfb
 8009ac6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009ac8:	e055      	b.n	8009b76 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	7a1b      	ldrb	r3, [r3, #8]
 8009ace:	f003 0301 	and.w	r3, r3, #1
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d004      	beq.n	8009ae0 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7ff f90e 	bl	8008cfc <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d104      	bne.n	8009af4 <lwip_netconn_do_close+0x80>
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6a1b      	ldr	r3, [r3, #32]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d006      	beq.n	8009b02 <lwip_netconn_do_close+0x8e>
 8009af4:	4b2e      	ldr	r3, [pc, #184]	; (8009bb0 <lwip_netconn_do_close+0x13c>)
 8009af6:	f240 721c 	movw	r2, #1820	; 0x71c
 8009afa:	492e      	ldr	r1, [pc, #184]	; (8009bb4 <lwip_netconn_do_close+0x140>)
 8009afc:	482e      	ldr	r0, [pc, #184]	; (8009bb8 <lwip_netconn_do_close+0x144>)
 8009afe:	f00d f83b 	bl	8016b78 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2204      	movs	r2, #4
 8009b08:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	697a      	ldr	r2, [r7, #20]
 8009b10:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2100      	movs	r1, #0
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7ff f96f 	bl	8008dfc <lwip_netconn_do_close_internal>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d040      	beq.n	8009ba6 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	785b      	ldrb	r3, [r3, #1]
 8009b2a:	2b04      	cmp	r3, #4
 8009b2c:	d006      	beq.n	8009b3c <lwip_netconn_do_close+0xc8>
 8009b2e:	4b20      	ldr	r3, [pc, #128]	; (8009bb0 <lwip_netconn_do_close+0x13c>)
 8009b30:	f240 7221 	movw	r2, #1825	; 0x721
 8009b34:	4921      	ldr	r1, [pc, #132]	; (8009bbc <lwip_netconn_do_close+0x148>)
 8009b36:	4820      	ldr	r0, [pc, #128]	; (8009bb8 <lwip_netconn_do_close+0x144>)
 8009b38:	f00d f81e 	bl	8016b78 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009b3c:	4820      	ldr	r0, [pc, #128]	; (8009bc0 <lwip_netconn_do_close+0x14c>)
 8009b3e:	f00c ff84 	bl	8016a4a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	330c      	adds	r3, #12
 8009b48:	2100      	movs	r1, #0
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f00c feda 	bl	8016904 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009b50:	481b      	ldr	r0, [pc, #108]	; (8009bc0 <lwip_netconn_do_close+0x14c>)
 8009b52:	f00c ff6b 	bl	8016a2c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	785b      	ldrb	r3, [r3, #1]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d022      	beq.n	8009ba6 <lwip_netconn_do_close+0x132>
 8009b60:	4b13      	ldr	r3, [pc, #76]	; (8009bb0 <lwip_netconn_do_close+0x13c>)
 8009b62:	f240 7225 	movw	r2, #1829	; 0x725
 8009b66:	4915      	ldr	r1, [pc, #84]	; (8009bbc <lwip_netconn_do_close+0x148>)
 8009b68:	4813      	ldr	r0, [pc, #76]	; (8009bb8 <lwip_netconn_do_close+0x144>)
 8009b6a:	f00d f805 	bl	8016b78 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009b6e:	e01a      	b.n	8009ba6 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	22f5      	movs	r2, #245	; 0xf5
 8009b74:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d014      	beq.n	8009ba8 <lwip_netconn_do_close+0x134>
 8009b7e:	f00c ff97 	bl	8016ab0 <sys_arch_protect>
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009b8c:	f113 0f0c 	cmn.w	r3, #12
 8009b90:	db05      	blt.n	8009b9e <lwip_netconn_do_close+0x12a>
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009b9c:	721a      	strb	r2, [r3, #8]
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f00c ff94 	bl	8016acc <sys_arch_unprotect>
 8009ba4:	e000      	b.n	8009ba8 <lwip_netconn_do_close+0x134>
      return;
 8009ba6:	bf00      	nop
}
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	080182c8 	.word	0x080182c8
 8009bb4:	08018610 	.word	0x08018610
 8009bb8:	08018320 	.word	0x08018320
 8009bbc:	0801862c 	.word	0x0801862c
 8009bc0:	2000c394 	.word	0x2000c394

08009bc4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d013      	beq.n	8009bfa <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00b      	beq.n	8009bf2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f002 faba 	bl	800c158 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	605a      	str	r2, [r3, #4]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685a      	ldr	r2, [r3, #4]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	2006      	movs	r0, #6
 8009bf6:	f001 fd4d 	bl	800b694 <memp_free>
  }
}
 8009bfa:	bf00      	nop
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d108      	bne.n	8009c28 <netbuf_data+0x24>
 8009c16:	4b1b      	ldr	r3, [pc, #108]	; (8009c84 <netbuf_data+0x80>)
 8009c18:	22c2      	movs	r2, #194	; 0xc2
 8009c1a:	491b      	ldr	r1, [pc, #108]	; (8009c88 <netbuf_data+0x84>)
 8009c1c:	481b      	ldr	r0, [pc, #108]	; (8009c8c <netbuf_data+0x88>)
 8009c1e:	f00c ffab 	bl	8016b78 <iprintf>
 8009c22:	f06f 030f 	mvn.w	r3, #15
 8009c26:	e029      	b.n	8009c7c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d108      	bne.n	8009c40 <netbuf_data+0x3c>
 8009c2e:	4b15      	ldr	r3, [pc, #84]	; (8009c84 <netbuf_data+0x80>)
 8009c30:	22c3      	movs	r2, #195	; 0xc3
 8009c32:	4917      	ldr	r1, [pc, #92]	; (8009c90 <netbuf_data+0x8c>)
 8009c34:	4815      	ldr	r0, [pc, #84]	; (8009c8c <netbuf_data+0x88>)
 8009c36:	f00c ff9f 	bl	8016b78 <iprintf>
 8009c3a:	f06f 030f 	mvn.w	r3, #15
 8009c3e:	e01d      	b.n	8009c7c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d108      	bne.n	8009c58 <netbuf_data+0x54>
 8009c46:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <netbuf_data+0x80>)
 8009c48:	22c4      	movs	r2, #196	; 0xc4
 8009c4a:	4912      	ldr	r1, [pc, #72]	; (8009c94 <netbuf_data+0x90>)
 8009c4c:	480f      	ldr	r0, [pc, #60]	; (8009c8c <netbuf_data+0x88>)
 8009c4e:	f00c ff93 	bl	8016b78 <iprintf>
 8009c52:	f06f 030f 	mvn.w	r3, #15
 8009c56:	e011      	b.n	8009c7c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d102      	bne.n	8009c66 <netbuf_data+0x62>
    return ERR_BUF;
 8009c60:	f06f 0301 	mvn.w	r3, #1
 8009c64:	e00a      	b.n	8009c7c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	895a      	ldrh	r2, [r3, #10]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	08018790 	.word	0x08018790
 8009c88:	08018898 	.word	0x08018898
 8009c8c:	080187e0 	.word	0x080187e0
 8009c90:	080188b4 	.word	0x080188b4
 8009c94:	080188d4 	.word	0x080188d4

08009c98 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d108      	bne.n	8009cb8 <netbuf_next+0x20>
 8009ca6:	4b11      	ldr	r3, [pc, #68]	; (8009cec <netbuf_next+0x54>)
 8009ca8:	22dc      	movs	r2, #220	; 0xdc
 8009caa:	4911      	ldr	r1, [pc, #68]	; (8009cf0 <netbuf_next+0x58>)
 8009cac:	4811      	ldr	r0, [pc, #68]	; (8009cf4 <netbuf_next+0x5c>)
 8009cae:	f00c ff63 	bl	8016b78 <iprintf>
 8009cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb6:	e014      	b.n	8009ce2 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d102      	bne.n	8009cc8 <netbuf_next+0x30>
    return -1;
 8009cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc6:	e00c      	b.n	8009ce2 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <netbuf_next+0x48>
    return 1;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e000      	b.n	8009ce2 <netbuf_next+0x4a>
  }
  return 0;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	08018790 	.word	0x08018790
 8009cf0:	080188f0 	.word	0x080188f0
 8009cf4:	080187e0 	.word	0x080187e0

08009cf8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8009d00:	4b29      	ldr	r3, [pc, #164]	; (8009da8 <tcpip_thread+0xb0>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d005      	beq.n	8009d14 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8009d08:	4b27      	ldr	r3, [pc, #156]	; (8009da8 <tcpip_thread+0xb0>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a27      	ldr	r2, [pc, #156]	; (8009dac <tcpip_thread+0xb4>)
 8009d0e:	6812      	ldr	r2, [r2, #0]
 8009d10:	4610      	mov	r0, r2
 8009d12:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8009d14:	4826      	ldr	r0, [pc, #152]	; (8009db0 <tcpip_thread+0xb8>)
 8009d16:	f00c fe89 	bl	8016a2c <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8009d1a:	4825      	ldr	r0, [pc, #148]	; (8009db0 <tcpip_thread+0xb8>)
 8009d1c:	f00c fe95 	bl	8016a4a <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8009d20:	f107 030c 	add.w	r3, r7, #12
 8009d24:	4619      	mov	r1, r3
 8009d26:	4823      	ldr	r0, [pc, #140]	; (8009db4 <tcpip_thread+0xbc>)
 8009d28:	f008 f84a 	bl	8011dc0 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009d2c:	4820      	ldr	r0, [pc, #128]	; (8009db0 <tcpip_thread+0xb8>)
 8009d2e:	f00c fe7d 	bl	8016a2c <sys_mutex_lock>
    if (msg == NULL) {
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d106      	bne.n	8009d46 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009d38:	4b1f      	ldr	r3, [pc, #124]	; (8009db8 <tcpip_thread+0xc0>)
 8009d3a:	2269      	movs	r2, #105	; 0x69
 8009d3c:	491f      	ldr	r1, [pc, #124]	; (8009dbc <tcpip_thread+0xc4>)
 8009d3e:	4820      	ldr	r0, [pc, #128]	; (8009dc0 <tcpip_thread+0xc8>)
 8009d40:	f00c ff1a 	bl	8016b78 <iprintf>
      continue;
 8009d44:	e02f      	b.n	8009da6 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d011      	beq.n	8009d72 <tcpip_thread+0x7a>
 8009d4e:	2b04      	cmp	r3, #4
 8009d50:	d01b      	beq.n	8009d8a <tcpip_thread+0x92>
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	d120      	bne.n	8009d98 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	6850      	ldr	r0, [r2, #4]
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	6892      	ldr	r2, [r2, #8]
 8009d62:	4611      	mov	r1, r2
 8009d64:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	2009      	movs	r0, #9
 8009d6c:	f001 fc92 	bl	800b694 <memp_free>
      break;
 8009d70:	e019      	b.n	8009da6 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	6892      	ldr	r2, [r2, #8]
 8009d7a:	4610      	mov	r0, r2
 8009d7c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	4619      	mov	r1, r3
 8009d82:	2008      	movs	r0, #8
 8009d84:	f001 fc86 	bl	800b694 <memp_free>
      break;
 8009d88:	e00d      	b.n	8009da6 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	6892      	ldr	r2, [r2, #8]
 8009d92:	4610      	mov	r0, r2
 8009d94:	4798      	blx	r3
      break;
 8009d96:	e006      	b.n	8009da6 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009d98:	4b07      	ldr	r3, [pc, #28]	; (8009db8 <tcpip_thread+0xc0>)
 8009d9a:	229b      	movs	r2, #155	; 0x9b
 8009d9c:	4907      	ldr	r1, [pc, #28]	; (8009dbc <tcpip_thread+0xc4>)
 8009d9e:	4808      	ldr	r0, [pc, #32]	; (8009dc0 <tcpip_thread+0xc8>)
 8009da0:	f00c feea 	bl	8016b78 <iprintf>
      break;
 8009da4:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8009da6:	e7b8      	b.n	8009d1a <tcpip_thread+0x22>
 8009da8:	200087ac 	.word	0x200087ac
 8009dac:	200087b0 	.word	0x200087b0
 8009db0:	2000c394 	.word	0x2000c394
 8009db4:	200087b4 	.word	0x200087b4
 8009db8:	08018928 	.word	0x08018928
 8009dbc:	08018958 	.word	0x08018958
 8009dc0:	08018978 	.word	0x08018978

08009dc4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8009dd0:	481a      	ldr	r0, [pc, #104]	; (8009e3c <tcpip_inpkt+0x78>)
 8009dd2:	f00c fd51 	bl	8016878 <sys_mbox_valid>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d105      	bne.n	8009de8 <tcpip_inpkt+0x24>
 8009ddc:	4b18      	ldr	r3, [pc, #96]	; (8009e40 <tcpip_inpkt+0x7c>)
 8009dde:	22b5      	movs	r2, #181	; 0xb5
 8009de0:	4918      	ldr	r1, [pc, #96]	; (8009e44 <tcpip_inpkt+0x80>)
 8009de2:	4819      	ldr	r0, [pc, #100]	; (8009e48 <tcpip_inpkt+0x84>)
 8009de4:	f00c fec8 	bl	8016b78 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009de8:	2009      	movs	r0, #9
 8009dea:	f001 fc01 	bl	800b5f0 <memp_malloc>
 8009dee:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d102      	bne.n	8009dfc <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009df6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dfa:	e01a      	b.n	8009e32 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	2202      	movs	r2, #2
 8009e00:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8009e14:	6979      	ldr	r1, [r7, #20]
 8009e16:	4809      	ldr	r0, [pc, #36]	; (8009e3c <tcpip_inpkt+0x78>)
 8009e18:	f00c fcb9 	bl	801678e <sys_mbox_trypost>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d006      	beq.n	8009e30 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009e22:	6979      	ldr	r1, [r7, #20]
 8009e24:	2009      	movs	r0, #9
 8009e26:	f001 fc35 	bl	800b694 <memp_free>
    return ERR_MEM;
 8009e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e2e:	e000      	b.n	8009e32 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009e30:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3718      	adds	r7, #24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	200087b4 	.word	0x200087b4
 8009e40:	08018928 	.word	0x08018928
 8009e44:	080189a0 	.word	0x080189a0
 8009e48:	08018978 	.word	0x08018978

08009e4c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009e5c:	f003 0318 	and.w	r3, r3, #24
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d006      	beq.n	8009e72 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009e64:	4a08      	ldr	r2, [pc, #32]	; (8009e88 <tcpip_input+0x3c>)
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7ff ffab 	bl	8009dc4 <tcpip_inpkt>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	e005      	b.n	8009e7e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8009e72:	4a06      	ldr	r2, [pc, #24]	; (8009e8c <tcpip_input+0x40>)
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7ff ffa4 	bl	8009dc4 <tcpip_inpkt>
 8009e7c:	4603      	mov	r3, r0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	08016545 	.word	0x08016545
 8009e8c:	080154cd 	.word	0x080154cd

08009e90 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b086      	sub	sp, #24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8009e9e:	481d      	ldr	r0, [pc, #116]	; (8009f14 <tcpip_callback_with_block+0x84>)
 8009ea0:	f00c fcea 	bl	8016878 <sys_mbox_valid>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d105      	bne.n	8009eb6 <tcpip_callback_with_block+0x26>
 8009eaa:	4b1b      	ldr	r3, [pc, #108]	; (8009f18 <tcpip_callback_with_block+0x88>)
 8009eac:	22ee      	movs	r2, #238	; 0xee
 8009eae:	491b      	ldr	r1, [pc, #108]	; (8009f1c <tcpip_callback_with_block+0x8c>)
 8009eb0:	481b      	ldr	r0, [pc, #108]	; (8009f20 <tcpip_callback_with_block+0x90>)
 8009eb2:	f00c fe61 	bl	8016b78 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009eb6:	2008      	movs	r0, #8
 8009eb8:	f001 fb9a 	bl	800b5f0 <memp_malloc>
 8009ebc:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d102      	bne.n	8009eca <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8009ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec8:	e01f      	b.n	8009f0a <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	2203      	movs	r2, #3
 8009ece:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	609a      	str	r2, [r3, #8]
  if (block) {
 8009edc:	79fb      	ldrb	r3, [r7, #7]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d004      	beq.n	8009eec <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8009ee2:	6979      	ldr	r1, [r7, #20]
 8009ee4:	480b      	ldr	r0, [pc, #44]	; (8009f14 <tcpip_callback_with_block+0x84>)
 8009ee6:	f00c fc3d 	bl	8016764 <sys_mbox_post>
 8009eea:	e00d      	b.n	8009f08 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8009eec:	6979      	ldr	r1, [r7, #20]
 8009eee:	4809      	ldr	r0, [pc, #36]	; (8009f14 <tcpip_callback_with_block+0x84>)
 8009ef0:	f00c fc4d 	bl	801678e <sys_mbox_trypost>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d006      	beq.n	8009f08 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009efa:	6979      	ldr	r1, [r7, #20]
 8009efc:	2008      	movs	r0, #8
 8009efe:	f001 fbc9 	bl	800b694 <memp_free>
      return ERR_MEM;
 8009f02:	f04f 33ff 	mov.w	r3, #4294967295
 8009f06:	e000      	b.n	8009f0a <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	200087b4 	.word	0x200087b4
 8009f18:	08018928 	.word	0x08018928
 8009f1c:	080189a0 	.word	0x080189a0
 8009f20:	08018978 	.word	0x08018978

08009f24 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009f30:	4806      	ldr	r0, [pc, #24]	; (8009f4c <tcpip_send_msg_wait_sem+0x28>)
 8009f32:	f00c fd7b 	bl	8016a2c <sys_mutex_lock>
  fn(apimsg);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	68b8      	ldr	r0, [r7, #8]
 8009f3a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009f3c:	4803      	ldr	r0, [pc, #12]	; (8009f4c <tcpip_send_msg_wait_sem+0x28>)
 8009f3e:	f00c fd84 	bl	8016a4a <sys_mutex_unlock>
  return ERR_OK;
 8009f42:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3710      	adds	r7, #16
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	2000c394 	.word	0x2000c394

08009f50 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af02      	add	r7, sp, #8
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009f5a:	f000 ff82 	bl	800ae62 <lwip_init>

  tcpip_init_done = initfunc;
 8009f5e:	4a17      	ldr	r2, [pc, #92]	; (8009fbc <tcpip_init+0x6c>)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009f64:	4a16      	ldr	r2, [pc, #88]	; (8009fc0 <tcpip_init+0x70>)
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009f6a:	2106      	movs	r1, #6
 8009f6c:	4815      	ldr	r0, [pc, #84]	; (8009fc4 <tcpip_init+0x74>)
 8009f6e:	f00c fbc5 	bl	80166fc <sys_mbox_new>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d006      	beq.n	8009f86 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009f78:	4b13      	ldr	r3, [pc, #76]	; (8009fc8 <tcpip_init+0x78>)
 8009f7a:	f240 12d5 	movw	r2, #469	; 0x1d5
 8009f7e:	4913      	ldr	r1, [pc, #76]	; (8009fcc <tcpip_init+0x7c>)
 8009f80:	4813      	ldr	r0, [pc, #76]	; (8009fd0 <tcpip_init+0x80>)
 8009f82:	f00c fdf9 	bl	8016b78 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009f86:	4813      	ldr	r0, [pc, #76]	; (8009fd4 <tcpip_init+0x84>)
 8009f88:	f00c fd34 	bl	80169f4 <sys_mutex_new>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d006      	beq.n	8009fa0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009f92:	4b0d      	ldr	r3, [pc, #52]	; (8009fc8 <tcpip_init+0x78>)
 8009f94:	f240 12d9 	movw	r2, #473	; 0x1d9
 8009f98:	490f      	ldr	r1, [pc, #60]	; (8009fd8 <tcpip_init+0x88>)
 8009f9a:	480d      	ldr	r0, [pc, #52]	; (8009fd0 <tcpip_init+0x80>)
 8009f9c:	f00c fdec 	bl	8016b78 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fa8:	2200      	movs	r2, #0
 8009faa:	490c      	ldr	r1, [pc, #48]	; (8009fdc <tcpip_init+0x8c>)
 8009fac:	480c      	ldr	r0, [pc, #48]	; (8009fe0 <tcpip_init+0x90>)
 8009fae:	f00c fd59 	bl	8016a64 <sys_thread_new>
}
 8009fb2:	bf00      	nop
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	200087ac 	.word	0x200087ac
 8009fc0:	200087b0 	.word	0x200087b0
 8009fc4:	200087b4 	.word	0x200087b4
 8009fc8:	08018928 	.word	0x08018928
 8009fcc:	080189b0 	.word	0x080189b0
 8009fd0:	08018978 	.word	0x08018978
 8009fd4:	2000c394 	.word	0x2000c394
 8009fd8:	080189d4 	.word	0x080189d4
 8009fdc:	08009cf9 	.word	0x08009cf9
 8009fe0:	080189f8 	.word	0x080189f8

08009fe4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <fs_open+0x16>
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d102      	bne.n	800a000 <fs_open+0x1c>
     return ERR_ARG;
 8009ffa:	f06f 030f 	mvn.w	r3, #15
 8009ffe:	e028      	b.n	800a052 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a000:	4b16      	ldr	r3, [pc, #88]	; (800a05c <fs_open+0x78>)
 800a002:	60fb      	str	r3, [r7, #12]
 800a004:	e020      	b.n	800a048 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	4619      	mov	r1, r3
 800a00c:	6838      	ldr	r0, [r7, #0]
 800a00e:	f7f6 f8ef 	bl	80001f0 <strcmp>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d114      	bne.n	800a042 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	689a      	ldr	r2, [r3, #8]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	68da      	ldr	r2, [r3, #12]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	68da      	ldr	r2, [r3, #12]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	7c1a      	ldrb	r2, [r3, #16]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	e007      	b.n	800a052 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	60fb      	str	r3, [r7, #12]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1db      	bne.n	800a006 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a04e:	f06f 0305 	mvn.w	r3, #5
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	08026178 	.word	0x08026178

0800a060 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	1ad3      	subs	r3, r2, r3
}
 800a086:	4618      	mov	r0, r3
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a09a:	22ac      	movs	r2, #172	; 0xac
 800a09c:	2100      	movs	r1, #0
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f00c fd62 	bl	8016b68 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a0b2:	20ac      	movs	r0, #172	; 0xac
 800a0b4:	f001 f92c 	bl	800b310 <mem_malloc>
 800a0b8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <http_state_alloc+0x1a>
    http_state_init(ret);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f7ff ffe6 	bl	800a092 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a0c6:	687b      	ldr	r3, [r7, #4]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d007      	beq.n	800a0f0 <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	695b      	ldr	r3, [r3, #20]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7ff ffbb 	bl	800a060 <fs_close>
    hs->handle = NULL;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d007      	beq.n	800a108 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a1b      	ldr	r3, [r3, #32]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f002 f82b 	bl	800c158 <pbuf_free>
    hs->req = NULL;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a108:	bf00      	nop
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d005      	beq.n	800a12a <http_state_free+0x1a>
    http_state_eof(hs);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f7ff ffd6 	bl	800a0d0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 ff9b 	bl	800b060 <mem_free>
  }
}
 800a12a:	bf00      	nop
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
	...

0800a134 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d106      	bne.n	800a156 <http_write+0x22>
 800a148:	4b2c      	ldr	r3, [pc, #176]	; (800a1fc <http_write+0xc8>)
 800a14a:	f44f 7204 	mov.w	r2, #528	; 0x210
 800a14e:	492c      	ldr	r1, [pc, #176]	; (800a200 <http_write+0xcc>)
 800a150:	482c      	ldr	r0, [pc, #176]	; (800a204 <http_write+0xd0>)
 800a152:	f00c fd11 	bl	8016b78 <iprintf>
  len = *length;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a15c:	8afb      	ldrh	r3, [r7, #22]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d101      	bne.n	800a166 <http_write+0x32>
    return ERR_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	e045      	b.n	800a1f2 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a16c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a16e:	8aba      	ldrh	r2, [r7, #20]
 800a170:	8afb      	ldrh	r3, [r7, #22]
 800a172:	429a      	cmp	r2, r3
 800a174:	d201      	bcs.n	800a17a <http_write+0x46>
    len = max_len;
 800a176:	8abb      	ldrh	r3, [r7, #20]
 800a178:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a17e:	005b      	lsls	r3, r3, #1
 800a180:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 800a182:	8afa      	ldrh	r2, [r7, #22]
 800a184:	8abb      	ldrh	r3, [r7, #20]
 800a186:	429a      	cmp	r2, r3
 800a188:	d901      	bls.n	800a18e <http_write+0x5a>
    len = max_len;
 800a18a:	8abb      	ldrh	r3, [r7, #20]
 800a18c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 800a18e:	78fb      	ldrb	r3, [r7, #3]
 800a190:	8afa      	ldrh	r2, [r7, #22]
 800a192:	68b9      	ldr	r1, [r7, #8]
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f006 fb0d 	bl	80107b4 <tcp_write>
 800a19a:	4603      	mov	r3, r0
 800a19c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a19e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a6:	d10f      	bne.n	800a1c8 <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d004      	beq.n	800a1bc <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 800a1b8:	2b08      	cmp	r3, #8
 800a1ba:	d902      	bls.n	800a1c2 <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	82fb      	strh	r3, [r7, #22]
 800a1c0:	e002      	b.n	800a1c8 <http_write+0x94>
      } else {
        len /= 2;
 800a1c2:	8afb      	ldrh	r3, [r7, #22]
 800a1c4:	085b      	lsrs	r3, r3, #1
 800a1c6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a1c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d0:	d102      	bne.n	800a1d8 <http_write+0xa4>
 800a1d2:	8afb      	ldrh	r3, [r7, #22]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d8da      	bhi.n	800a18e <http_write+0x5a>

  if (err == ERR_OK) {
 800a1d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d103      	bne.n	800a1e8 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	8afa      	ldrh	r2, [r7, #22]
 800a1e4:	801a      	strh	r2, [r3, #0]
 800a1e6:	e002      	b.n	800a1ee <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 800a1ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3718      	adds	r7, #24
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	08018a48 	.word	0x08018a48
 800a200:	08018a80 	.word	0x08018a80
 800a204:	08018a90 	.word	0x08018a90

0800a208 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 800a216:	2100      	movs	r1, #0
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f003 fc89 	bl	800db30 <tcp_arg>
  tcp_recv(pcb, NULL);
 800a21e:	2100      	movs	r1, #0
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f003 fc97 	bl	800db54 <tcp_recv>
  tcp_err(pcb, NULL);
 800a226:	2100      	movs	r1, #0
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f003 fcd5 	bl	800dbd8 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 800a22e:	2200      	movs	r2, #0
 800a230:	2100      	movs	r1, #0
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f003 fd0a 	bl	800dc4c <tcp_poll>
  tcp_sent(pcb, NULL);
 800a238:	2100      	movs	r1, #0
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f003 fcac 	bl	800db98 <tcp_sent>
  if (hs != NULL) {
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d002      	beq.n	800a24c <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800a246:	68b8      	ldr	r0, [r7, #8]
 800a248:	f7ff ff62 	bl	800a110 <http_state_free>
  }

  if (abort_conn) {
 800a24c:	79fb      	ldrb	r3, [r7, #7]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d004      	beq.n	800a25c <http_close_or_abort_conn+0x54>
    tcp_abort(pcb);
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f002 fcd6 	bl	800cc04 <tcp_abort>
    return ERR_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	e00f      	b.n	800a27c <http_close_or_abort_conn+0x74>
  }
  err = tcp_close(pcb);
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f002 fbbf 	bl	800c9e0 <tcp_close>
 800a262:	4603      	mov	r3, r0
 800a264:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a266:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d004      	beq.n	800a278 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a26e:	2204      	movs	r2, #4
 800a270:	4904      	ldr	r1, [pc, #16]	; (800a284 <http_close_or_abort_conn+0x7c>)
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f003 fcea 	bl	800dc4c <tcp_poll>
  }
  return err;
 800a278:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	0800aaa7 	.word	0x0800aaa7

0800a288 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 800a292:	2200      	movs	r2, #0
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7ff ffb6 	bl	800a208 <http_close_or_abort_conn>
 800a29c:	4603      	mov	r3, r0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f7ff ffe8 	bl	800a288 <http_close_conn>
  }
}
 800a2b8:	bf00      	nop
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if(!params || (params[0] == '\0')) {
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <extract_uri_parameters+0x18>
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <extract_uri_parameters+0x1c>
      return(0);
 800a2d8:	2300      	movs	r3, #0
 800a2da:	e04e      	b.n	800a37a <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	613b      	str	r3, [r7, #16]
 800a2e4:	e042      	b.n	800a36c <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	330a      	adds	r3, #10
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800a2f8:	2126      	movs	r1, #38	; 0x26
 800a2fa:	6978      	ldr	r0, [r7, #20]
 800a2fc:	f00c fcc6 	bl	8016c8c <strchr>
 800a300:	6178      	str	r0, [r7, #20]
    if(pair) {
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d006      	beq.n	800a316 <extract_uri_parameters+0x56>
      *pair = '\0';
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	2200      	movs	r2, #0
 800a30c:	701a      	strb	r2, [r3, #0]
      pair++;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	3301      	adds	r3, #1
 800a312:	617b      	str	r3, [r7, #20]
 800a314:	e00c      	b.n	800a330 <extract_uri_parameters+0x70>
    } else {
       /* We didn't find a new parameter so find the end of the URI and
        * replace the space with a '\0' */
        pair = strchr(equals, ' ');
 800a316:	2120      	movs	r1, #32
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f00c fcb7 	bl	8016c8c <strchr>
 800a31e:	6178      	str	r0, [r7, #20]
        if(pair) {
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d002      	beq.n	800a32c <extract_uri_parameters+0x6c>
            *pair = '\0';
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2200      	movs	r2, #0
 800a32a:	701a      	strb	r2, [r3, #0]
        }

        /* Revert to NULL so that we exit the loop as expected. */
        pair = NULL;
 800a32c:	2300      	movs	r3, #0
 800a32e:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800a330:	213d      	movs	r1, #61	; 0x3d
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f00c fcaa 	bl	8016c8c <strchr>
 800a338:	60f8      	str	r0, [r7, #12]
    if(equals) {
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00b      	beq.n	800a358 <extract_uri_parameters+0x98>
      *equals = '\0';
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	6879      	ldr	r1, [r7, #4]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	331a      	adds	r3, #26
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	440b      	add	r3, r1
 800a354:	605a      	str	r2, [r3, #4]
 800a356:	e006      	b.n	800a366 <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	331a      	adds	r3, #26
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	2200      	movs	r2, #0
 800a364:	605a      	str	r2, [r3, #4]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	3301      	adds	r3, #1
 800a36a:	613b      	str	r3, [r7, #16]
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	2b0f      	cmp	r3, #15
 800a370:	dc02      	bgt.n	800a378 <extract_uri_parameters+0xb8>
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d1b6      	bne.n	800a2e6 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800a378:	693b      	ldr	r3, [r7, #16]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
	...

0800a384 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d105      	bne.n	800a3a2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a396:	6839      	ldr	r1, [r7, #0]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7ff ff84 	bl	800a2a6 <http_eof>
    return 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	e016      	b.n	800a3d0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7ff fe64 	bl	800a074 <fs_bytes_left>
 800a3ac:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	dc05      	bgt.n	800a3c0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7ff ff75 	bl	800a2a6 <http_eof>
    return 0;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	e007      	b.n	800a3d0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a3c0:	4b05      	ldr	r3, [pc, #20]	; (800a3d8 <http_check_eof+0x54>)
 800a3c2:	f240 4283 	movw	r2, #1155	; 0x483
 800a3c6:	4905      	ldr	r1, [pc, #20]	; (800a3dc <http_check_eof+0x58>)
 800a3c8:	4805      	ldr	r0, [pc, #20]	; (800a3e0 <http_check_eof+0x5c>)
 800a3ca:	f00c fbd5 	bl	8016b78 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a3ce:	2301      	movs	r3, #1
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	08018a48 	.word	0x08018a48
 800a3dc:	08018ab8 	.word	0x08018ab8
 800a3e0:	08018a90 	.word	0x08018a90

0800a3e4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a3e4:	b590      	push	{r4, r7, lr}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d803      	bhi.n	800a406 <http_send_data_nonssi+0x22>
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a402:	b29b      	uxth	r3, r3
 800a404:	e001      	b.n	800a40a <http_send_data_nonssi+0x26>
 800a406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a40a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	6998      	ldr	r0, [r3, #24]
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d012      	beq.n	800a43e <http_send_data_nonssi+0x5a>
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	695b      	ldr	r3, [r3, #20]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00e      	beq.n	800a43e <http_send_data_nonssi+0x5a>
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	699a      	ldr	r2, [r3, #24]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	6819      	ldr	r1, [r3, #0]
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	695b      	ldr	r3, [r3, #20]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	461c      	mov	r4, r3
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	1ae3      	subs	r3, r4, r3
 800a438:	440b      	add	r3, r1
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d001      	beq.n	800a442 <http_send_data_nonssi+0x5e>
 800a43e:	2301      	movs	r3, #1
 800a440:	e000      	b.n	800a444 <http_send_data_nonssi+0x60>
 800a442:	2300      	movs	r3, #0
 800a444:	b2db      	uxtb	r3, r3
 800a446:	f107 020c 	add.w	r2, r7, #12
 800a44a:	4601      	mov	r1, r0
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f7ff fe71 	bl	800a134 <http_write>
 800a452:	4603      	mov	r3, r0
 800a454:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a456:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10d      	bne.n	800a47a <http_send_data_nonssi+0x96>
    data_to_send = 1;
 800a45e:	2301      	movs	r3, #1
 800a460:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	89ba      	ldrh	r2, [r7, #12]
 800a468:	441a      	add	r2, r3
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a472:	89ba      	ldrh	r2, [r7, #12]
 800a474:	1a9a      	subs	r2, r3, r2
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	bd90      	pop	{r4, r7, pc}

0800a484 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <http_send+0x18>
    return 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	e025      	b.n	800a4e8 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d108      	bne.n	800a4b6 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800a4a4:	6839      	ldr	r1, [r7, #0]
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7ff ff6c 	bl	800a384 <http_check_eof>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d101      	bne.n	800a4b6 <http_send+0x32>
      return 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	e018      	b.n	800a4e8 <http_send+0x64>
  if(hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f7ff ff93 	bl	800a3e4 <http_send_data_nonssi>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10d      	bne.n	800a4e6 <http_send+0x62>
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	695b      	ldr	r3, [r3, #20]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7ff fdd0 	bl	800a074 <fs_bytes_left>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	dc05      	bgt.n	800a4e6 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a4da:	6839      	ldr	r1, [r7, #0]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f7ff fee2 	bl	800a2a6 <http_eof>
    return 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	e000      	b.n	800a4e8 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	4a1c      	ldr	r2, [pc, #112]	; (800a570 <http_get_404_file+0x80>)
 800a4fe:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4619      	mov	r1, r3
 800a508:	4610      	mov	r0, r2
 800a50a:	f7ff fd6b 	bl	8009fe4 <fs_open>
 800a50e:	4603      	mov	r3, r0
 800a510:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d024      	beq.n	800a564 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	4a15      	ldr	r2, [pc, #84]	; (800a574 <http_get_404_file+0x84>)
 800a51e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4619      	mov	r1, r3
 800a528:	4610      	mov	r0, r2
 800a52a:	f7ff fd5b 	bl	8009fe4 <fs_open>
 800a52e:	4603      	mov	r3, r0
 800a530:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d014      	beq.n	800a564 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	4a0e      	ldr	r2, [pc, #56]	; (800a578 <http_get_404_file+0x88>)
 800a53e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4619      	mov	r1, r3
 800a548:	4610      	mov	r0, r2
 800a54a:	f7ff fd4b 	bl	8009fe4 <fs_open>
 800a54e:	4603      	mov	r3, r0
 800a550:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800a552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d004      	beq.n	800a564 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2200      	movs	r2, #0
 800a55e:	601a      	str	r2, [r3, #0]
        return NULL;
 800a560:	2300      	movs	r3, #0
 800a562:	e000      	b.n	800a566 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800a564:	687b      	ldr	r3, [r7, #4]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	08018af0 	.word	0x08018af0
 800a574:	08018afc 	.word	0x08018afc
 800a578:	08018b08 	.word	0x08018b08

0800a57c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b08e      	sub	sp, #56	; 0x38
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d106      	bne.n	800a5a0 <http_parse_request+0x24>
 800a592:	4b65      	ldr	r3, [pc, #404]	; (800a728 <http_parse_request+0x1ac>)
 800a594:	f240 727e 	movw	r2, #1918	; 0x77e
 800a598:	4964      	ldr	r1, [pc, #400]	; (800a72c <http_parse_request+0x1b0>)
 800a59a:	4865      	ldr	r0, [pc, #404]	; (800a730 <http_parse_request+0x1b4>)
 800a59c:	f00c faec 	bl	8016b78 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d106      	bne.n	800a5b4 <http_parse_request+0x38>
 800a5a6:	4b60      	ldr	r3, [pc, #384]	; (800a728 <http_parse_request+0x1ac>)
 800a5a8:	f240 727f 	movw	r2, #1919	; 0x77f
 800a5ac:	4961      	ldr	r1, [pc, #388]	; (800a734 <http_parse_request+0x1b8>)
 800a5ae:	4860      	ldr	r0, [pc, #384]	; (800a730 <http_parse_request+0x1b4>)
 800a5b0:	f00c fae2 	bl	8016b78 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	695b      	ldr	r3, [r3, #20]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d103      	bne.n	800a5c4 <http_parse_request+0x48>
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800a5c4:	f06f 0307 	mvn.w	r3, #7
 800a5c8:	e0aa      	b.n	800a720 <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d103      	bne.n	800a5da <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d6:	621a      	str	r2, [r3, #32]
 800a5d8:	e005      	b.n	800a5e6 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f001 fe93 	bl	800c30c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800a5e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5e8:	f001 fe68 	bl	800c2bc <pbuf_ref>

  if (hs->req->next != NULL) {
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d012      	beq.n	800a61c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	891b      	ldrh	r3, [r3, #8]
 800a5fc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a600:	4293      	cmp	r3, r2
 800a602:	bf28      	it	cs
 800a604:	4613      	movcs	r3, r2
 800a606:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	6a18      	ldr	r0, [r3, #32]
 800a60c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a60e:	2300      	movs	r3, #0
 800a610:	4949      	ldr	r1, [pc, #292]	; (800a738 <http_parse_request+0x1bc>)
 800a612:	f001 ffad 	bl	800c570 <pbuf_copy_partial>
    data = httpd_req_buf;
 800a616:	4b48      	ldr	r3, [pc, #288]	; (800a738 <http_parse_request+0x1bc>)
 800a618:	637b      	str	r3, [r7, #52]	; 0x34
 800a61a:	e005      	b.n	800a628 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a624:	895b      	ldrh	r3, [r3, #10]
 800a626:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800a628:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a62a:	2b06      	cmp	r3, #6
 800a62c:	d963      	bls.n	800a6f6 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800a62e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a630:	461a      	mov	r2, r3
 800a632:	4942      	ldr	r1, [pc, #264]	; (800a73c <http_parse_request+0x1c0>)
 800a634:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a636:	f000 fbde 	bl	800adf6 <lwip_strnstr>
 800a63a:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d059      	beq.n	800a6f6 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800a642:	2300      	movs	r3, #0
 800a644:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800a646:	2204      	movs	r2, #4
 800a648:	493d      	ldr	r1, [pc, #244]	; (800a740 <http_parse_request+0x1c4>)
 800a64a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a64c:	f00c fb2b 	bl	8016ca6 <strncmp>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d117      	bne.n	800a686 <http_parse_request+0x10a>
        sp1 = data + 3;
 800a656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a658:	3303      	adds	r3, #3
 800a65a:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	3301      	adds	r3, #1
 800a660:	461a      	mov	r2, r3
 800a662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	b29b      	uxth	r3, r3
 800a668:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	3301      	adds	r3, #1
 800a672:	8b7a      	ldrh	r2, [r7, #26]
 800a674:	4933      	ldr	r1, [pc, #204]	; (800a744 <http_parse_request+0x1c8>)
 800a676:	4618      	mov	r0, r3
 800a678:	f000 fbbd 	bl	800adf6 <lwip_strnstr>
 800a67c:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800a67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a680:	2b00      	cmp	r3, #0
 800a682:	d111      	bne.n	800a6a8 <http_parse_request+0x12c>
 800a684:	e006      	b.n	800a694 <http_parse_request+0x118>
        data[4] = 0;
 800a686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a688:	3304      	adds	r3, #4
 800a68a:	2200      	movs	r2, #0
 800a68c:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800a68e:	f06f 030f 	mvn.w	r3, #15
 800a692:	e045      	b.n	800a720 <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	3301      	adds	r3, #1
 800a698:	8b7a      	ldrh	r2, [r7, #26]
 800a69a:	4928      	ldr	r1, [pc, #160]	; (800a73c <http_parse_request+0x1c0>)
 800a69c:	4618      	mov	r0, r3
 800a69e:	f000 fbaa 	bl	800adf6 <lwip_strnstr>
 800a6a2:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800a6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6aa:	69fa      	ldr	r2, [r7, #28]
 800a6ac:	3201      	adds	r2, #1
 800a6ae:	1a9b      	subs	r3, r3, r2
 800a6b0:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d01e      	beq.n	800a6f6 <http_parse_request+0x17a>
 800a6b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d91a      	bls.n	800a6f6 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800a6c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	4920      	ldr	r1, [pc, #128]	; (800a748 <http_parse_request+0x1cc>)
 800a6c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a6c8:	f000 fb95 	bl	800adf6 <lwip_strnstr>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d011      	beq.n	800a6f6 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800a6de:	8b3b      	ldrh	r3, [r7, #24]
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800a6e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ea:	6979      	ldr	r1, [r7, #20]
 800a6ec:	68b8      	ldr	r0, [r7, #8]
 800a6ee:	f000 f82d 	bl	800a74c <http_find_file>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	e014      	b.n	800a720 <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	6a1b      	ldr	r3, [r3, #32]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f001 fdc6 	bl	800c28c <pbuf_clen>
 800a700:	4603      	mov	r3, r0
 800a702:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	6a1b      	ldr	r3, [r3, #32]
 800a708:	891b      	ldrh	r3, [r3, #8]
 800a70a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a70e:	d205      	bcs.n	800a71c <http_parse_request+0x1a0>
 800a710:	8a7b      	ldrh	r3, [r7, #18]
 800a712:	2b05      	cmp	r3, #5
 800a714:	d802      	bhi.n	800a71c <http_parse_request+0x1a0>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800a716:	f06f 0304 	mvn.w	r3, #4
 800a71a:	e001      	b.n	800a720 <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800a71c:	f06f 030f 	mvn.w	r3, #15
  }
}
 800a720:	4618      	mov	r0, r3
 800a722:	3738      	adds	r7, #56	; 0x38
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	08018a48 	.word	0x08018a48
 800a72c:	08018b14 	.word	0x08018b14
 800a730:	08018a90 	.word	0x08018a90
 800a734:	08018b20 	.word	0x08018b20
 800a738:	200087b8 	.word	0x200087b8
 800a73c:	08018b2c 	.word	0x08018b2c
 800a740:	08018b30 	.word	0x08018b30
 800a744:	08018b38 	.word	0x08018b38
 800a748:	08018b3c 	.word	0x08018b3c

0800a74c <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800a74c:	b590      	push	{r4, r7, lr}
 800a74e:	b093      	sub	sp, #76	; 0x4c
 800a750:	af02      	add	r7, sp, #8
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800a758:	2300      	movs	r3, #0
 800a75a:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800a75c:	2300      	movs	r3, #0
 800a75e:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	4618      	mov	r0, r3
 800a76a:	f7f5 fd4b 	bl	8000204 <strlen>
 800a76e:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800a770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a772:	2b00      	cmp	r3, #0
 800a774:	d065      	beq.n	800a842 <http_find_file+0xf6>
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	3b01      	subs	r3, #1
 800a77c:	4413      	add	r3, r2
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b2f      	cmp	r3, #47	; 0x2f
 800a782:	d15e      	bne.n	800a842 <http_find_file+0xf6>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a784:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800a786:	4a6f      	ldr	r2, [pc, #444]	; (800a944 <http_find_file+0x1f8>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d102      	bne.n	800a792 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d157      	bne.n	800a842 <http_find_file+0xf6>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	3b01      	subs	r3, #1
 800a796:	2b3f      	cmp	r3, #63	; 0x3f
 800a798:	bf28      	it	cs
 800a79a:	233f      	movcs	r3, #63	; 0x3f
 800a79c:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00a      	beq.n	800a7ba <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	6a3a      	ldr	r2, [r7, #32]
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4866      	ldr	r0, [pc, #408]	; (800a944 <http_find_file+0x1f8>)
 800a7ac:	f00c f9d1 	bl	8016b52 <memcpy>
      http_uri_buf[copy_len] = 0;
 800a7b0:	4a64      	ldr	r2, [pc, #400]	; (800a944 <http_find_file+0x1f8>)
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7be:	e03d      	b.n	800a83c <http_find_file+0xf0>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d022      	beq.n	800a80c <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800a7c6:	6a3b      	ldr	r3, [r7, #32]
 800a7c8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800a7cc:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d018      	beq.n	800a806 <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 800a7d4:	4a5c      	ldr	r2, [pc, #368]	; (800a948 <http_find_file+0x1fc>)
 800a7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7f5 fd11 	bl	8000204 <strlen>
 800a7e2:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800a7e4:	69ba      	ldr	r2, [r7, #24]
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	bf28      	it	cs
 800a7ec:	4613      	movcs	r3, r2
 800a7ee:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 800a7f0:	6a3b      	ldr	r3, [r7, #32]
 800a7f2:	4a54      	ldr	r2, [pc, #336]	; (800a944 <http_find_file+0x1f8>)
 800a7f4:	1898      	adds	r0, r3, r2
 800a7f6:	4a54      	ldr	r2, [pc, #336]	; (800a948 <http_find_file+0x1fc>)
 800a7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	4619      	mov	r1, r3
 800a802:	f00c f9a6 	bl	8016b52 <memcpy>
        }
        file_name = http_uri_buf;
 800a806:	4b4f      	ldr	r3, [pc, #316]	; (800a944 <http_find_file+0x1f8>)
 800a808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a80a:	e004      	b.n	800a816 <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 800a80c:	4a4e      	ldr	r2, [pc, #312]	; (800a948 <http_find_file+0x1fc>)
 800a80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a810:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a814:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7ff fbe2 	bl	8009fe4 <fs_open>
 800a820:	4603      	mov	r3, r0
 800a822:	74fb      	strb	r3, [r7, #19]
      if(err == ERR_OK) {
 800a824:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d104      	bne.n	800a836 <http_find_file+0xea>
        uri = file_name;
 800a82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800a834:	e005      	b.n	800a842 <http_find_file+0xf6>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a838:	3301      	adds	r3, #1
 800a83a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a83e:	2b04      	cmp	r3, #4
 800a840:	d9be      	bls.n	800a7c0 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800a842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a844:	2b00      	cmp	r3, #0
 800a846:	d161      	bne.n	800a90c <http_find_file+0x1c0>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	213f      	movs	r1, #63	; 0x3f
 800a84c:	4618      	mov	r0, r3
 800a84e:	f00c fa1d 	bl	8016c8c <strchr>
 800a852:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800a854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a856:	2b00      	cmp	r3, #0
 800a858:	d005      	beq.n	800a866 <http_find_file+0x11a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800a85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85c:	2200      	movs	r2, #0
 800a85e:	701a      	strb	r2, [r3, #0]
      params++;
 800a860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a862:	3301      	adds	r3, #1
 800a864:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800a866:	4b39      	ldr	r3, [pc, #228]	; (800a94c <http_find_file+0x200>)
 800a868:	f04f 32ff 	mov.w	r2, #4294967295
 800a86c:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (g_iNumCGIs && g_pCGIs) {
 800a86e:	4b38      	ldr	r3, [pc, #224]	; (800a950 <http_find_file+0x204>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d034      	beq.n	800a8e0 <http_find_file+0x194>
 800a876:	4b37      	ldr	r3, [pc, #220]	; (800a954 <http_find_file+0x208>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d030      	beq.n	800a8e0 <http_find_file+0x194>
      for (i = 0; i < g_iNumCGIs; i++) {
 800a87e:	2300      	movs	r3, #0
 800a880:	633b      	str	r3, [r7, #48]	; 0x30
 800a882:	e028      	b.n	800a8d6 <http_find_file+0x18a>
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 800a884:	68b8      	ldr	r0, [r7, #8]
 800a886:	4b33      	ldr	r3, [pc, #204]	; (800a954 <http_find_file+0x208>)
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88c:	00db      	lsls	r3, r3, #3
 800a88e:	4413      	add	r3, r2
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4619      	mov	r1, r3
 800a894:	f7f5 fcac 	bl	80001f0 <strcmp>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d118      	bne.n	800a8d0 <http_find_file+0x184>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 800a89e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f7ff fd0d 	bl	800a2c0 <extract_uri_parameters>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	4b28      	ldr	r3, [pc, #160]	; (800a94c <http_find_file+0x200>)
 800a8aa:	601a      	str	r2, [r3, #0]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800a8ac:	4b29      	ldr	r3, [pc, #164]	; (800a954 <http_find_file+0x208>)
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	4413      	add	r3, r2
 800a8b6:	685c      	ldr	r4, [r3, #4]
 800a8b8:	4b24      	ldr	r3, [pc, #144]	; (800a94c <http_find_file+0x200>)
 800a8ba:	6819      	ldr	r1, [r3, #0]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f103 022c 	add.w	r2, r3, #44	; 0x2c
                                          hs->param_vals);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	336c      	adds	r3, #108	; 0x6c
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800a8c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8c8:	47a0      	blx	r4
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	60bb      	str	r3, [r7, #8]
           break;
 800a8ce:	e007      	b.n	800a8e0 <http_find_file+0x194>
      for (i = 0; i < g_iNumCGIs; i++) {
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	633b      	str	r3, [r7, #48]	; 0x30
 800a8d6:	4b1e      	ldr	r3, [pc, #120]	; (800a950 <http_find_file+0x204>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	dbd1      	blt.n	800a884 <http_find_file+0x138>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7ff fb7c 	bl	8009fe4 <fs_open>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800a8f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d102      	bne.n	800a8fe <http_find_file+0x1b2>
       file = &hs->file_handle;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8fc:	e006      	b.n	800a90c <http_find_file+0x1c0>
    } else {
      file = http_get_404_file(hs, &uri);
 800a8fe:	f107 0308 	add.w	r3, r7, #8
 800a902:	4619      	mov	r1, r3
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f7ff fdf3 	bl	800a4f0 <http_get_404_file>
 800a90a:	63b8      	str	r0, [r7, #56]	; 0x38
         *param = '?';
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800a90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d106      	bne.n	800a920 <http_find_file+0x1d4>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800a912:	f107 0308 	add.w	r3, r7, #8
 800a916:	4619      	mov	r1, r3
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f7ff fde9 	bl	800a4f0 <http_get_404_file>
 800a91e:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	4613      	mov	r3, r2
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f000 f810 	bl	800a958 <http_init_file>
 800a938:	4603      	mov	r3, r0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3744      	adds	r7, #68	; 0x44
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd90      	pop	{r4, r7, pc}
 800a942:	bf00      	nop
 800a944:	20008bb8 	.word	0x20008bb8
 800a948:	0802618c 	.word	0x0802618c
 800a94c:	2000c39c 	.word	0x2000c39c
 800a950:	2000c398 	.word	0x2000c398
 800a954:	2000c3a0 	.word	0x2000c3a0

0800a958 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
 800a964:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d052      	beq.n	800aa12 <http_init_file+0xba>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	da06      	bge.n	800a990 <http_init_file+0x38>
 800a982:	4b2d      	ldr	r3, [pc, #180]	; (800aa38 <http_init_file+0xe0>)
 800a984:	f640 02cf 	movw	r2, #2255	; 0x8cf
 800a988:	492c      	ldr	r1, [pc, #176]	; (800aa3c <http_init_file+0xe4>)
 800a98a:	482d      	ldr	r0, [pc, #180]	; (800aa40 <http_init_file+0xe8>)
 800a98c:	f00c f8f4 	bl	8016b78 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	461a      	mov	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	7c1b      	ldrb	r3, [r3, #16]
 800a9a8:	f003 0301 	and.w	r3, r3, #1
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d106      	bne.n	800a9be <http_init_file+0x66>
 800a9b0:	4b21      	ldr	r3, [pc, #132]	; (800aa38 <http_init_file+0xe0>)
 800a9b2:	f640 02df 	movw	r2, #2271	; 0x8df
 800a9b6:	4923      	ldr	r1, [pc, #140]	; (800aa44 <http_init_file+0xec>)
 800a9b8:	4821      	ldr	r0, [pc, #132]	; (800aa40 <http_init_file+0xe8>)
 800a9ba:	f00c f8dd 	bl	8016b78 <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d033      	beq.n	800aa2c <http_init_file+0xd4>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	7c1b      	ldrb	r3, [r3, #16]
 800a9ca:	f003 0301 	and.w	r3, r3, #1
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d02c      	beq.n	800aa2c <http_init_file+0xd4>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6998      	ldr	r0, [r3, #24]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9da:	461a      	mov	r2, r3
 800a9dc:	491a      	ldr	r1, [pc, #104]	; (800aa48 <http_init_file+0xf0>)
 800a9de:	f000 fa0a 	bl	800adf6 <lwip_strnstr>
 800a9e2:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d020      	beq.n	800aa2c <http_init_file+0xd4>
        size_t diff = file_start + 4 - hs->file;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	3304      	adds	r3, #4
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	699a      	ldr	r2, [r3, #24]
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	441a      	add	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	1ad2      	subs	r2, r2, r3
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	625a      	str	r2, [r3, #36]	; 0x24
 800aa10:	e00c      	b.n	800aa2c <http_init_file+0xd4>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3718      	adds	r7, #24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	08018a48 	.word	0x08018a48
 800aa3c:	08018b44 	.word	0x08018b44
 800aa40:	08018a90 	.word	0x08018a90
 800aa44:	08018b64 	.word	0x08018b64
 800aa48:	08018b3c 	.word	0x08018b3c

0800aa4c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d002      	beq.n	800aa68 <http_err+0x1c>
    http_state_free(hs);
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f7ff fb54 	bl	800a110 <http_state_free>
  }
}
 800aa68:	bf00      	nop
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d101      	bne.n	800aa8c <http_sent+0x1c>
    return ERR_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	e008      	b.n	800aa9e <http_sent+0x2e>
  }

  hs->retries = 0;
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800aa94:	6979      	ldr	r1, [r7, #20]
 800aa96:	68b8      	ldr	r0, [r7, #8]
 800aa98:	f7ff fcf4 	bl	800a484 <http_send>

  return ERR_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3718      	adds	r7, #24
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
 800aaae:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d107      	bne.n	800aaca <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800aaba:	2100      	movs	r1, #0
 800aabc:	6838      	ldr	r0, [r7, #0]
 800aabe:	f7ff fbe3 	bl	800a288 <http_close_conn>
 800aac2:	4603      	mov	r3, r0
 800aac4:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	e024      	b.n	800ab14 <http_poll+0x6e>
  } else {
    hs->retries++;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aad0:	3301      	adds	r3, #1
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aae0:	2b04      	cmp	r3, #4
 800aae2:	d105      	bne.n	800aaf0 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800aae4:	68f9      	ldr	r1, [r7, #12]
 800aae6:	6838      	ldr	r0, [r7, #0]
 800aae8:	f7ff fbce 	bl	800a288 <http_close_conn>
      return ERR_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	e011      	b.n	800ab14 <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00d      	beq.n	800ab12 <http_poll+0x6c>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	695b      	ldr	r3, [r3, #20]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d009      	beq.n	800ab12 <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 800aafe:	68f9      	ldr	r1, [r7, #12]
 800ab00:	6838      	ldr	r0, [r7, #0]
 800ab02:	f7ff fcbf 	bl	800a484 <http_send>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 800ab0c:	6838      	ldr	r0, [r7, #0]
 800ab0e:	f006 fb03 	bl	8011118 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b086      	sub	sp, #24
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
 800ab28:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800ab2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d105      	bne.n	800ab42 <http_recv+0x26>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d002      	beq.n	800ab42 <http_recv+0x26>
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d111      	bne.n	800ab66 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d008      	beq.n	800ab5a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	891b      	ldrh	r3, [r3, #8]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	68b8      	ldr	r0, [r7, #8]
 800ab50:	f002 f9fe 	bl	800cf50 <tcp_recved>
      pbuf_free(p);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f001 faff 	bl	800c158 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800ab5a:	6979      	ldr	r1, [r7, #20]
 800ab5c:	68b8      	ldr	r0, [r7, #8]
 800ab5e:	f7ff fb93 	bl	800a288 <http_close_conn>
    return ERR_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	e055      	b.n	800ac12 <http_recv+0xf6>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	891b      	ldrh	r3, [r3, #8]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	68b8      	ldr	r0, [r7, #8]
 800ab6e:	f002 f9ef 	bl	800cf50 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d147      	bne.n	800ac0a <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	6979      	ldr	r1, [r7, #20]
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7ff fcfc 	bl	800a57c <http_parse_request>
 800ab84:	4603      	mov	r3, r0
 800ab86:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800ab88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d015      	beq.n	800abbc <http_recv+0xa0>
 800ab90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab94:	f113 0f05 	cmn.w	r3, #5
 800ab98:	d010      	beq.n	800abbc <http_recv+0xa0>
 800ab9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab9e:	f113 0f10 	cmn.w	r3, #16
 800aba2:	d00b      	beq.n	800abbc <http_recv+0xa0>
 800aba4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aba8:	f113 0f08 	cmn.w	r3, #8
 800abac:	d006      	beq.n	800abbc <http_recv+0xa0>
 800abae:	4b1b      	ldr	r3, [pc, #108]	; (800ac1c <http_recv+0x100>)
 800abb0:	f640 12b5 	movw	r2, #2485	; 0x9b5
 800abb4:	491a      	ldr	r1, [pc, #104]	; (800ac20 <http_recv+0x104>)
 800abb6:	481b      	ldr	r0, [pc, #108]	; (800ac24 <http_recv+0x108>)
 800abb8:	f00b ffde 	bl	8016b78 <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800abbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abc0:	f113 0f05 	cmn.w	r3, #5
 800abc4:	d00b      	beq.n	800abde <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d007      	beq.n	800abde <http_recv+0xc2>
          pbuf_free(hs->req);
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f001 fac0 	bl	800c158 <pbuf_free>
          hs->req = NULL;
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2200      	movs	r2, #0
 800abdc:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f001 faba 	bl	800c158 <pbuf_free>
      if (parsed == ERR_OK) {
 800abe4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d104      	bne.n	800abf6 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 800abec:	6979      	ldr	r1, [r7, #20]
 800abee:	68b8      	ldr	r0, [r7, #8]
 800abf0:	f7ff fc48 	bl	800a484 <http_send>
 800abf4:	e00c      	b.n	800ac10 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800abf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abfa:	f113 0f10 	cmn.w	r3, #16
 800abfe:	d107      	bne.n	800ac10 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800ac00:	6979      	ldr	r1, [r7, #20]
 800ac02:	68b8      	ldr	r0, [r7, #8]
 800ac04:	f7ff fb40 	bl	800a288 <http_close_conn>
 800ac08:	e002      	b.n	800ac10 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f001 faa4 	bl	800c158 <pbuf_free>
    }
  }
  return ERR_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3718      	adds	r7, #24
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	08018a48 	.word	0x08018a48
 800ac20:	08018b90 	.word	0x08018b90
 800ac24:	08018a90 	.word	0x08018a90

0800ac28 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b086      	sub	sp, #24
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	4613      	mov	r3, r2
 800ac34:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800ac36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d102      	bne.n	800ac44 <http_accept+0x1c>
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d102      	bne.n	800ac4a <http_accept+0x22>
    return ERR_VAL;
 800ac44:	f06f 0305 	mvn.w	r3, #5
 800ac48:	e025      	b.n	800ac96 <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800ac4a:	2101      	movs	r1, #1
 800ac4c:	68b8      	ldr	r0, [r7, #8]
 800ac4e:	f002 fdd6 	bl	800d7fe <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800ac52:	f7ff fa2b 	bl	800a0ac <http_state_alloc>
 800ac56:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d102      	bne.n	800ac64 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800ac5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac62:	e018      	b.n	800ac96 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 800ac6a:	6979      	ldr	r1, [r7, #20]
 800ac6c:	68b8      	ldr	r0, [r7, #8]
 800ac6e:	f002 ff5f 	bl	800db30 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800ac72:	490b      	ldr	r1, [pc, #44]	; (800aca0 <http_accept+0x78>)
 800ac74:	68b8      	ldr	r0, [r7, #8]
 800ac76:	f002 ff6d 	bl	800db54 <tcp_recv>
  tcp_err(pcb, http_err);
 800ac7a:	490a      	ldr	r1, [pc, #40]	; (800aca4 <http_accept+0x7c>)
 800ac7c:	68b8      	ldr	r0, [r7, #8]
 800ac7e:	f002 ffab 	bl	800dbd8 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ac82:	2204      	movs	r2, #4
 800ac84:	4908      	ldr	r1, [pc, #32]	; (800aca8 <http_accept+0x80>)
 800ac86:	68b8      	ldr	r0, [r7, #8]
 800ac88:	f002 ffe0 	bl	800dc4c <tcp_poll>
  tcp_sent(pcb, http_sent);
 800ac8c:	4907      	ldr	r1, [pc, #28]	; (800acac <http_accept+0x84>)
 800ac8e:	68b8      	ldr	r0, [r7, #8]
 800ac90:	f002 ff82 	bl	800db98 <tcp_sent>

  return ERR_OK;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3718      	adds	r7, #24
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	0800ab1d 	.word	0x0800ab1d
 800aca4:	0800aa4d 	.word	0x0800aa4d
 800aca8:	0800aaa7 	.word	0x0800aaa7
 800acac:	0800aa71 	.word	0x0800aa71

0800acb0 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 800acb6:	202e      	movs	r0, #46	; 0x2e
 800acb8:	f002 ff2c 	bl	800db14 <tcp_new_ip_type>
 800acbc:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d106      	bne.n	800acd2 <httpd_init+0x22>
 800acc4:	4b19      	ldr	r3, [pc, #100]	; (800ad2c <httpd_init+0x7c>)
 800acc6:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 800acca:	4919      	ldr	r1, [pc, #100]	; (800ad30 <httpd_init+0x80>)
 800accc:	4819      	ldr	r0, [pc, #100]	; (800ad34 <httpd_init+0x84>)
 800acce:	f00b ff53 	bl	8016b78 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800acd2:	2101      	movs	r1, #1
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f002 fd92 	bl	800d7fe <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 800acda:	2250      	movs	r2, #80	; 0x50
 800acdc:	4916      	ldr	r1, [pc, #88]	; (800ad38 <httpd_init+0x88>)
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f001 ff9c 	bl	800cc1c <tcp_bind>
 800ace4:	4603      	mov	r3, r0
 800ace6:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800ace8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d006      	beq.n	800acfe <httpd_init+0x4e>
 800acf0:	4b0e      	ldr	r3, [pc, #56]	; (800ad2c <httpd_init+0x7c>)
 800acf2:	f640 2215 	movw	r2, #2581	; 0xa15
 800acf6:	4911      	ldr	r1, [pc, #68]	; (800ad3c <httpd_init+0x8c>)
 800acf8:	480e      	ldr	r0, [pc, #56]	; (800ad34 <httpd_init+0x84>)
 800acfa:	f00b ff3d 	bl	8016b78 <iprintf>
  pcb = tcp_listen(pcb);
 800acfe:	21ff      	movs	r1, #255	; 0xff
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f002 f82d 	bl	800cd60 <tcp_listen_with_backlog>
 800ad06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d106      	bne.n	800ad1c <httpd_init+0x6c>
 800ad0e:	4b07      	ldr	r3, [pc, #28]	; (800ad2c <httpd_init+0x7c>)
 800ad10:	f640 2217 	movw	r2, #2583	; 0xa17
 800ad14:	490a      	ldr	r1, [pc, #40]	; (800ad40 <httpd_init+0x90>)
 800ad16:	4807      	ldr	r0, [pc, #28]	; (800ad34 <httpd_init+0x84>)
 800ad18:	f00b ff2e 	bl	8016b78 <iprintf>
  tcp_accept(pcb, http_accept);
 800ad1c:	4909      	ldr	r1, [pc, #36]	; (800ad44 <httpd_init+0x94>)
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f002 ff7c 	bl	800dc1c <tcp_accept>
}
 800ad24:	bf00      	nop
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	08018a48 	.word	0x08018a48
 800ad30:	08018bbc 	.word	0x08018bbc
 800ad34:	08018a90 	.word	0x08018a90
 800ad38:	080262d4 	.word	0x080262d4
 800ad3c:	08018bd8 	.word	0x08018bd8
 800ad40:	08018bf4 	.word	0x08018bf4
 800ad44:	0800ac29 	.word	0x0800ac29

0800ad48 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d106      	bne.n	800ad66 <http_set_cgi_handlers+0x1e>
 800ad58:	4b0d      	ldr	r3, [pc, #52]	; (800ad90 <http_set_cgi_handlers+0x48>)
 800ad5a:	f640 2242 	movw	r2, #2626	; 0xa42
 800ad5e:	490d      	ldr	r1, [pc, #52]	; (800ad94 <http_set_cgi_handlers+0x4c>)
 800ad60:	480d      	ldr	r0, [pc, #52]	; (800ad98 <http_set_cgi_handlers+0x50>)
 800ad62:	f00b ff09 	bl	8016b78 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	dc06      	bgt.n	800ad7a <http_set_cgi_handlers+0x32>
 800ad6c:	4b08      	ldr	r3, [pc, #32]	; (800ad90 <http_set_cgi_handlers+0x48>)
 800ad6e:	f640 2243 	movw	r2, #2627	; 0xa43
 800ad72:	490a      	ldr	r1, [pc, #40]	; (800ad9c <http_set_cgi_handlers+0x54>)
 800ad74:	4808      	ldr	r0, [pc, #32]	; (800ad98 <http_set_cgi_handlers+0x50>)
 800ad76:	f00b feff 	bl	8016b78 <iprintf>

  g_pCGIs = cgis;
 800ad7a:	4a09      	ldr	r2, [pc, #36]	; (800ada0 <http_set_cgi_handlers+0x58>)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6013      	str	r3, [r2, #0]
  g_iNumCGIs = num_handlers;
 800ad80:	4a08      	ldr	r2, [pc, #32]	; (800ada4 <http_set_cgi_handlers+0x5c>)
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	6013      	str	r3, [r2, #0]
}
 800ad86:	bf00      	nop
 800ad88:	3708      	adds	r7, #8
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	08018a48 	.word	0x08018a48
 800ad94:	08018c14 	.word	0x08018c14
 800ad98:	08018a90 	.word	0x08018a90
 800ad9c:	08018c24 	.word	0x08018c24
 800ada0:	2000c3a0 	.word	0x2000c3a0
 800ada4:	2000c398 	.word	0x2000c398

0800ada8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	4603      	mov	r3, r0
 800adb0:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800adb2:	88fb      	ldrh	r3, [r7, #6]
 800adb4:	ba5b      	rev16	r3, r3
 800adb6:	b29b      	uxth	r3, r3
}
 800adb8:	4618      	mov	r0, r3
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	061a      	lsls	r2, r3, #24
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	021b      	lsls	r3, r3, #8
 800add4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800add8:	431a      	orrs	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	0a1b      	lsrs	r3, r3, #8
 800adde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ade2:	431a      	orrs	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	0e1b      	lsrs	r3, r3, #24
 800ade8:	4313      	orrs	r3, r2
}
 800adea:	4618      	mov	r0, r3
 800adec:	370c      	adds	r7, #12
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b086      	sub	sp, #24
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	60f8      	str	r0, [r7, #12]
 800adfe:	60b9      	str	r1, [r7, #8]
 800ae00:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 800ae02:	68b8      	ldr	r0, [r7, #8]
 800ae04:	f7f5 f9fe 	bl	8000204 <strlen>
 800ae08:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d101      	bne.n	800ae14 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	e022      	b.n	800ae5a <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	617b      	str	r3, [r7, #20]
 800ae18:	e012      	b.n	800ae40 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	781a      	ldrb	r2, [r3, #0]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d109      	bne.n	800ae3a <lwip_strnstr+0x44>
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	68b9      	ldr	r1, [r7, #8]
 800ae2a:	6978      	ldr	r0, [r7, #20]
 800ae2c:	f00b ff3b 	bl	8016ca6 <strncmp>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d101      	bne.n	800ae3a <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	e00f      	b.n	800ae5a <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	617b      	str	r3, [r7, #20]
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d007      	beq.n	800ae58 <lwip_strnstr+0x62>
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	441a      	add	r2, r3
 800ae4e:	68f9      	ldr	r1, [r7, #12]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	440b      	add	r3, r1
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d9e0      	bls.n	800ae1a <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3718      	adds	r7, #24
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b082      	sub	sp, #8
 800ae66:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ae6c:	f00b fdb4 	bl	80169d8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ae70:	f000 f8a6 	bl	800afc0 <mem_init>
  memp_init();
 800ae74:	f000 fb70 	bl	800b558 <memp_init>
  pbuf_init();
  netif_init();
 800ae78:	f000 fc36 	bl	800b6e8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ae7c:	f006 ffc6 	bl	8011e0c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ae80:	f001 fbf0 	bl	800c664 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800ae84:	f006 fe58 	bl	8011b38 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ae88:	bf00      	nop
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ae98:	4b40      	ldr	r3, [pc, #256]	; (800af9c <plug_holes+0x10c>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d206      	bcs.n	800aeb0 <plug_holes+0x20>
 800aea2:	4b3f      	ldr	r3, [pc, #252]	; (800afa0 <plug_holes+0x110>)
 800aea4:	f240 125d 	movw	r2, #349	; 0x15d
 800aea8:	493e      	ldr	r1, [pc, #248]	; (800afa4 <plug_holes+0x114>)
 800aeaa:	483f      	ldr	r0, [pc, #252]	; (800afa8 <plug_holes+0x118>)
 800aeac:	f00b fe64 	bl	8016b78 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800aeb0:	4b3e      	ldr	r3, [pc, #248]	; (800afac <plug_holes+0x11c>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d306      	bcc.n	800aec8 <plug_holes+0x38>
 800aeba:	4b39      	ldr	r3, [pc, #228]	; (800afa0 <plug_holes+0x110>)
 800aebc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800aec0:	493b      	ldr	r1, [pc, #236]	; (800afb0 <plug_holes+0x120>)
 800aec2:	4839      	ldr	r0, [pc, #228]	; (800afa8 <plug_holes+0x118>)
 800aec4:	f00b fe58 	bl	8016b78 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	791b      	ldrb	r3, [r3, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d006      	beq.n	800aede <plug_holes+0x4e>
 800aed0:	4b33      	ldr	r3, [pc, #204]	; (800afa0 <plug_holes+0x110>)
 800aed2:	f240 125f 	movw	r2, #351	; 0x15f
 800aed6:	4937      	ldr	r1, [pc, #220]	; (800afb4 <plug_holes+0x124>)
 800aed8:	4833      	ldr	r0, [pc, #204]	; (800afa8 <plug_holes+0x118>)
 800aeda:	f00b fe4d 	bl	8016b78 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	881b      	ldrh	r3, [r3, #0]
 800aee2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aee6:	d906      	bls.n	800aef6 <plug_holes+0x66>
 800aee8:	4b2d      	ldr	r3, [pc, #180]	; (800afa0 <plug_holes+0x110>)
 800aeea:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800aeee:	4932      	ldr	r1, [pc, #200]	; (800afb8 <plug_holes+0x128>)
 800aef0:	482d      	ldr	r0, [pc, #180]	; (800afa8 <plug_holes+0x118>)
 800aef2:	f00b fe41 	bl	8016b78 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800aef6:	4b29      	ldr	r3, [pc, #164]	; (800af9c <plug_holes+0x10c>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	8812      	ldrh	r2, [r2, #0]
 800aefe:	4413      	add	r3, r2
 800af00:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	429a      	cmp	r2, r3
 800af08:	d01f      	beq.n	800af4a <plug_holes+0xba>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	791b      	ldrb	r3, [r3, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d11b      	bne.n	800af4a <plug_holes+0xba>
 800af12:	4b26      	ldr	r3, [pc, #152]	; (800afac <plug_holes+0x11c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d016      	beq.n	800af4a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800af1c:	4b27      	ldr	r3, [pc, #156]	; (800afbc <plug_holes+0x12c>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	429a      	cmp	r2, r3
 800af24:	d102      	bne.n	800af2c <plug_holes+0x9c>
      lfree = mem;
 800af26:	4a25      	ldr	r2, [pc, #148]	; (800afbc <plug_holes+0x12c>)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	881a      	ldrh	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a19      	ldr	r2, [pc, #100]	; (800af9c <plug_holes+0x10c>)
 800af38:	6812      	ldr	r2, [r2, #0]
 800af3a:	1a99      	subs	r1, r3, r2
 800af3c:	4b17      	ldr	r3, [pc, #92]	; (800af9c <plug_holes+0x10c>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	8812      	ldrh	r2, [r2, #0]
 800af44:	4413      	add	r3, r2
 800af46:	b28a      	uxth	r2, r1
 800af48:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800af4a:	4b14      	ldr	r3, [pc, #80]	; (800af9c <plug_holes+0x10c>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	8852      	ldrh	r2, [r2, #2]
 800af52:	4413      	add	r3, r2
 800af54:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d01a      	beq.n	800af94 <plug_holes+0x104>
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	791b      	ldrb	r3, [r3, #4]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d116      	bne.n	800af94 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800af66:	4b15      	ldr	r3, [pc, #84]	; (800afbc <plug_holes+0x12c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d102      	bne.n	800af76 <plug_holes+0xe6>
      lfree = pmem;
 800af70:	4a12      	ldr	r2, [pc, #72]	; (800afbc <plug_holes+0x12c>)
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	881a      	ldrh	r2, [r3, #0]
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	4a06      	ldr	r2, [pc, #24]	; (800af9c <plug_holes+0x10c>)
 800af82:	6812      	ldr	r2, [r2, #0]
 800af84:	1a99      	subs	r1, r3, r2
 800af86:	4b05      	ldr	r3, [pc, #20]	; (800af9c <plug_holes+0x10c>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	8812      	ldrh	r2, [r2, #0]
 800af8e:	4413      	add	r3, r2
 800af90:	b28a      	uxth	r2, r1
 800af92:	805a      	strh	r2, [r3, #2]
  }
}
 800af94:	bf00      	nop
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	20008bf8 	.word	0x20008bf8
 800afa0:	08018c40 	.word	0x08018c40
 800afa4:	08018c70 	.word	0x08018c70
 800afa8:	08018c88 	.word	0x08018c88
 800afac:	20008bfc 	.word	0x20008bfc
 800afb0:	08018cb0 	.word	0x08018cb0
 800afb4:	08018ccc 	.word	0x08018ccc
 800afb8:	08018ce8 	.word	0x08018ce8
 800afbc:	20008c00 	.word	0x20008c00

0800afc0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800afc6:	4b1e      	ldr	r3, [pc, #120]	; (800b040 <mem_init+0x80>)
 800afc8:	3303      	adds	r3, #3
 800afca:	f023 0303 	bic.w	r3, r3, #3
 800afce:	461a      	mov	r2, r3
 800afd0:	4b1c      	ldr	r3, [pc, #112]	; (800b044 <mem_init+0x84>)
 800afd2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800afd4:	4b1b      	ldr	r3, [pc, #108]	; (800b044 <mem_init+0x84>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800afe0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800afee:	4b15      	ldr	r3, [pc, #84]	; (800b044 <mem_init+0x84>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800aff6:	4a14      	ldr	r2, [pc, #80]	; (800b048 <mem_init+0x88>)
 800aff8:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800affa:	4b13      	ldr	r3, [pc, #76]	; (800b048 <mem_init+0x88>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2201      	movs	r2, #1
 800b000:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b002:	4b11      	ldr	r3, [pc, #68]	; (800b048 <mem_init+0x88>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b00a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b00c:	4b0e      	ldr	r3, [pc, #56]	; (800b048 <mem_init+0x88>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b014:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b016:	4b0b      	ldr	r3, [pc, #44]	; (800b044 <mem_init+0x84>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a0c      	ldr	r2, [pc, #48]	; (800b04c <mem_init+0x8c>)
 800b01c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b01e:	480c      	ldr	r0, [pc, #48]	; (800b050 <mem_init+0x90>)
 800b020:	f00b fce8 	bl	80169f4 <sys_mutex_new>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d006      	beq.n	800b038 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b02a:	4b0a      	ldr	r3, [pc, #40]	; (800b054 <mem_init+0x94>)
 800b02c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b030:	4909      	ldr	r1, [pc, #36]	; (800b058 <mem_init+0x98>)
 800b032:	480a      	ldr	r0, [pc, #40]	; (800b05c <mem_init+0x9c>)
 800b034:	f00b fda0 	bl	8016b78 <iprintf>
  }
}
 800b038:	bf00      	nop
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	2000c3bc 	.word	0x2000c3bc
 800b044:	20008bf8 	.word	0x20008bf8
 800b048:	20008bfc 	.word	0x20008bfc
 800b04c:	20008c00 	.word	0x20008c00
 800b050:	20008c04 	.word	0x20008c04
 800b054:	08018c40 	.word	0x08018c40
 800b058:	08018d14 	.word	0x08018d14
 800b05c:	08018c88 	.word	0x08018c88

0800b060 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d050      	beq.n	800b110 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f003 0303 	and.w	r3, r3, #3
 800b074:	2b00      	cmp	r3, #0
 800b076:	d006      	beq.n	800b086 <mem_free+0x26>
 800b078:	4b27      	ldr	r3, [pc, #156]	; (800b118 <mem_free+0xb8>)
 800b07a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800b07e:	4927      	ldr	r1, [pc, #156]	; (800b11c <mem_free+0xbc>)
 800b080:	4827      	ldr	r0, [pc, #156]	; (800b120 <mem_free+0xc0>)
 800b082:	f00b fd79 	bl	8016b78 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b086:	4b27      	ldr	r3, [pc, #156]	; (800b124 <mem_free+0xc4>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d304      	bcc.n	800b09a <mem_free+0x3a>
 800b090:	4b25      	ldr	r3, [pc, #148]	; (800b128 <mem_free+0xc8>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	429a      	cmp	r2, r3
 800b098:	d306      	bcc.n	800b0a8 <mem_free+0x48>
 800b09a:	4b1f      	ldr	r3, [pc, #124]	; (800b118 <mem_free+0xb8>)
 800b09c:	f240 12af 	movw	r2, #431	; 0x1af
 800b0a0:	4922      	ldr	r1, [pc, #136]	; (800b12c <mem_free+0xcc>)
 800b0a2:	481f      	ldr	r0, [pc, #124]	; (800b120 <mem_free+0xc0>)
 800b0a4:	f00b fd68 	bl	8016b78 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b0a8:	4b1e      	ldr	r3, [pc, #120]	; (800b124 <mem_free+0xc4>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d304      	bcc.n	800b0bc <mem_free+0x5c>
 800b0b2:	4b1d      	ldr	r3, [pc, #116]	; (800b128 <mem_free+0xc8>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d306      	bcc.n	800b0ca <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b0bc:	f00b fcf8 	bl	8016ab0 <sys_arch_protect>
 800b0c0:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b0c2:	68b8      	ldr	r0, [r7, #8]
 800b0c4:	f00b fd02 	bl	8016acc <sys_arch_unprotect>
    return;
 800b0c8:	e023      	b.n	800b112 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b0ca:	4819      	ldr	r0, [pc, #100]	; (800b130 <mem_free+0xd0>)
 800b0cc:	f00b fcae 	bl	8016a2c <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	3b08      	subs	r3, #8
 800b0d4:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	791b      	ldrb	r3, [r3, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d106      	bne.n	800b0ec <mem_free+0x8c>
 800b0de:	4b0e      	ldr	r3, [pc, #56]	; (800b118 <mem_free+0xb8>)
 800b0e0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800b0e4:	4913      	ldr	r1, [pc, #76]	; (800b134 <mem_free+0xd4>)
 800b0e6:	480e      	ldr	r0, [pc, #56]	; (800b120 <mem_free+0xc0>)
 800b0e8:	f00b fd46 	bl	8016b78 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b0f2:	4b11      	ldr	r3, [pc, #68]	; (800b138 <mem_free+0xd8>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d202      	bcs.n	800b102 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b0fc:	4a0e      	ldr	r2, [pc, #56]	; (800b138 <mem_free+0xd8>)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f7ff fec4 	bl	800ae90 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b108:	4809      	ldr	r0, [pc, #36]	; (800b130 <mem_free+0xd0>)
 800b10a:	f00b fc9e 	bl	8016a4a <sys_mutex_unlock>
 800b10e:	e000      	b.n	800b112 <mem_free+0xb2>
    return;
 800b110:	bf00      	nop
}
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	08018c40 	.word	0x08018c40
 800b11c:	08018d30 	.word	0x08018d30
 800b120:	08018c88 	.word	0x08018c88
 800b124:	20008bf8 	.word	0x20008bf8
 800b128:	20008bfc 	.word	0x20008bfc
 800b12c:	08018d54 	.word	0x08018d54
 800b130:	20008c04 	.word	0x20008c04
 800b134:	08018d6c 	.word	0x08018d6c
 800b138:	20008c00 	.word	0x20008c00

0800b13c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b088      	sub	sp, #32
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	460b      	mov	r3, r1
 800b146:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800b148:	887b      	ldrh	r3, [r7, #2]
 800b14a:	3303      	adds	r3, #3
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	f023 0303 	bic.w	r3, r3, #3
 800b152:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800b154:	887b      	ldrh	r3, [r7, #2]
 800b156:	2b0b      	cmp	r3, #11
 800b158:	d801      	bhi.n	800b15e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b15a:	230c      	movs	r3, #12
 800b15c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800b15e:	887b      	ldrh	r3, [r7, #2]
 800b160:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b164:	d901      	bls.n	800b16a <mem_trim+0x2e>
    return NULL;
 800b166:	2300      	movs	r3, #0
 800b168:	e0bd      	b.n	800b2e6 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b16a:	4b61      	ldr	r3, [pc, #388]	; (800b2f0 <mem_trim+0x1b4>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	429a      	cmp	r2, r3
 800b172:	d304      	bcc.n	800b17e <mem_trim+0x42>
 800b174:	4b5f      	ldr	r3, [pc, #380]	; (800b2f4 <mem_trim+0x1b8>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d306      	bcc.n	800b18c <mem_trim+0x50>
 800b17e:	4b5e      	ldr	r3, [pc, #376]	; (800b2f8 <mem_trim+0x1bc>)
 800b180:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b184:	495d      	ldr	r1, [pc, #372]	; (800b2fc <mem_trim+0x1c0>)
 800b186:	485e      	ldr	r0, [pc, #376]	; (800b300 <mem_trim+0x1c4>)
 800b188:	f00b fcf6 	bl	8016b78 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b18c:	4b58      	ldr	r3, [pc, #352]	; (800b2f0 <mem_trim+0x1b4>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	429a      	cmp	r2, r3
 800b194:	d304      	bcc.n	800b1a0 <mem_trim+0x64>
 800b196:	4b57      	ldr	r3, [pc, #348]	; (800b2f4 <mem_trim+0x1b8>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d307      	bcc.n	800b1b0 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b1a0:	f00b fc86 	bl	8016ab0 <sys_arch_protect>
 800b1a4:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f00b fc90 	bl	8016acc <sys_arch_unprotect>
    return rmem;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	e09a      	b.n	800b2e6 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	3b08      	subs	r3, #8
 800b1b4:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	4a4d      	ldr	r2, [pc, #308]	; (800b2f0 <mem_trim+0x1b4>)
 800b1ba:	6812      	ldr	r2, [r2, #0]
 800b1bc:	1a9b      	subs	r3, r3, r2
 800b1be:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	881a      	ldrh	r2, [r3, #0]
 800b1c4:	8b7b      	ldrh	r3, [r7, #26]
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	3b08      	subs	r3, #8
 800b1cc:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b1ce:	887a      	ldrh	r2, [r7, #2]
 800b1d0:	8b3b      	ldrh	r3, [r7, #24]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d906      	bls.n	800b1e4 <mem_trim+0xa8>
 800b1d6:	4b48      	ldr	r3, [pc, #288]	; (800b2f8 <mem_trim+0x1bc>)
 800b1d8:	f240 2206 	movw	r2, #518	; 0x206
 800b1dc:	4949      	ldr	r1, [pc, #292]	; (800b304 <mem_trim+0x1c8>)
 800b1de:	4848      	ldr	r0, [pc, #288]	; (800b300 <mem_trim+0x1c4>)
 800b1e0:	f00b fcca 	bl	8016b78 <iprintf>
  if (newsize > size) {
 800b1e4:	887a      	ldrh	r2, [r7, #2]
 800b1e6:	8b3b      	ldrh	r3, [r7, #24]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d901      	bls.n	800b1f0 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	e07a      	b.n	800b2e6 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800b1f0:	887a      	ldrh	r2, [r7, #2]
 800b1f2:	8b3b      	ldrh	r3, [r7, #24]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d101      	bne.n	800b1fc <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	e074      	b.n	800b2e6 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b1fc:	4842      	ldr	r0, [pc, #264]	; (800b308 <mem_trim+0x1cc>)
 800b1fe:	f00b fc15 	bl	8016a2c <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800b202:	4b3b      	ldr	r3, [pc, #236]	; (800b2f0 <mem_trim+0x1b4>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	69fa      	ldr	r2, [r7, #28]
 800b208:	8812      	ldrh	r2, [r2, #0]
 800b20a:	4413      	add	r3, r2
 800b20c:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	791b      	ldrb	r3, [r3, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d131      	bne.n	800b27a <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	881b      	ldrh	r3, [r3, #0]
 800b21a:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800b21c:	8b7a      	ldrh	r2, [r7, #26]
 800b21e:	887b      	ldrh	r3, [r7, #2]
 800b220:	4413      	add	r3, r2
 800b222:	b29b      	uxth	r3, r3
 800b224:	3308      	adds	r3, #8
 800b226:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800b228:	4b38      	ldr	r3, [pc, #224]	; (800b30c <mem_trim+0x1d0>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	697a      	ldr	r2, [r7, #20]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d105      	bne.n	800b23e <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800b232:	4b2f      	ldr	r3, [pc, #188]	; (800b2f0 <mem_trim+0x1b4>)
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	8a7b      	ldrh	r3, [r7, #18]
 800b238:	4413      	add	r3, r2
 800b23a:	4a34      	ldr	r2, [pc, #208]	; (800b30c <mem_trim+0x1d0>)
 800b23c:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800b23e:	4b2c      	ldr	r3, [pc, #176]	; (800b2f0 <mem_trim+0x1b4>)
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	8a7b      	ldrh	r3, [r7, #18]
 800b244:	4413      	add	r3, r2
 800b246:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	2200      	movs	r2, #0
 800b24c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	8a3a      	ldrh	r2, [r7, #16]
 800b252:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	8b7a      	ldrh	r2, [r7, #26]
 800b258:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	8a7a      	ldrh	r2, [r7, #18]
 800b25e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	881b      	ldrh	r3, [r3, #0]
 800b264:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b268:	d039      	beq.n	800b2de <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b26a:	4b21      	ldr	r3, [pc, #132]	; (800b2f0 <mem_trim+0x1b4>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	8812      	ldrh	r2, [r2, #0]
 800b272:	4413      	add	r3, r2
 800b274:	8a7a      	ldrh	r2, [r7, #18]
 800b276:	805a      	strh	r2, [r3, #2]
 800b278:	e031      	b.n	800b2de <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b27a:	887b      	ldrh	r3, [r7, #2]
 800b27c:	f103 0214 	add.w	r2, r3, #20
 800b280:	8b3b      	ldrh	r3, [r7, #24]
 800b282:	429a      	cmp	r2, r3
 800b284:	d82b      	bhi.n	800b2de <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800b286:	8b7a      	ldrh	r2, [r7, #26]
 800b288:	887b      	ldrh	r3, [r7, #2]
 800b28a:	4413      	add	r3, r2
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	3308      	adds	r3, #8
 800b290:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800b292:	4b17      	ldr	r3, [pc, #92]	; (800b2f0 <mem_trim+0x1b4>)
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	8a7b      	ldrh	r3, [r7, #18]
 800b298:	4413      	add	r3, r2
 800b29a:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800b29c:	4b1b      	ldr	r3, [pc, #108]	; (800b30c <mem_trim+0x1d0>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	697a      	ldr	r2, [r7, #20]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d202      	bcs.n	800b2ac <mem_trim+0x170>
      lfree = mem2;
 800b2a6:	4a19      	ldr	r2, [pc, #100]	; (800b30c <mem_trim+0x1d0>)
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	881a      	ldrh	r2, [r3, #0]
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	8b7a      	ldrh	r2, [r7, #26]
 800b2be:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	8a7a      	ldrh	r2, [r7, #18]
 800b2c4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	881b      	ldrh	r3, [r3, #0]
 800b2ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b2ce:	d006      	beq.n	800b2de <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b2d0:	4b07      	ldr	r3, [pc, #28]	; (800b2f0 <mem_trim+0x1b4>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	697a      	ldr	r2, [r7, #20]
 800b2d6:	8812      	ldrh	r2, [r2, #0]
 800b2d8:	4413      	add	r3, r2
 800b2da:	8a7a      	ldrh	r2, [r7, #18]
 800b2dc:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b2de:	480a      	ldr	r0, [pc, #40]	; (800b308 <mem_trim+0x1cc>)
 800b2e0:	f00b fbb3 	bl	8016a4a <sys_mutex_unlock>
  return rmem;
 800b2e4:	687b      	ldr	r3, [r7, #4]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3720      	adds	r7, #32
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20008bf8 	.word	0x20008bf8
 800b2f4:	20008bfc 	.word	0x20008bfc
 800b2f8:	08018c40 	.word	0x08018c40
 800b2fc:	08018d80 	.word	0x08018d80
 800b300:	08018c88 	.word	0x08018c88
 800b304:	08018d98 	.word	0x08018d98
 800b308:	20008c04 	.word	0x20008c04
 800b30c:	20008c00 	.word	0x20008c00

0800b310 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b088      	sub	sp, #32
 800b314:	af00      	add	r7, sp, #0
 800b316:	4603      	mov	r3, r0
 800b318:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800b31a:	88fb      	ldrh	r3, [r7, #6]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <mem_malloc+0x14>
    return NULL;
 800b320:	2300      	movs	r3, #0
 800b322:	e0d1      	b.n	800b4c8 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800b324:	88fb      	ldrh	r3, [r7, #6]
 800b326:	3303      	adds	r3, #3
 800b328:	b29b      	uxth	r3, r3
 800b32a:	f023 0303 	bic.w	r3, r3, #3
 800b32e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800b330:	88fb      	ldrh	r3, [r7, #6]
 800b332:	2b0b      	cmp	r3, #11
 800b334:	d801      	bhi.n	800b33a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b336:	230c      	movs	r3, #12
 800b338:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800b33a:	88fb      	ldrh	r3, [r7, #6]
 800b33c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b340:	d901      	bls.n	800b346 <mem_malloc+0x36>
    return NULL;
 800b342:	2300      	movs	r3, #0
 800b344:	e0c0      	b.n	800b4c8 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b346:	4862      	ldr	r0, [pc, #392]	; (800b4d0 <mem_malloc+0x1c0>)
 800b348:	f00b fb70 	bl	8016a2c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800b34c:	4b61      	ldr	r3, [pc, #388]	; (800b4d4 <mem_malloc+0x1c4>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	461a      	mov	r2, r3
 800b352:	4b61      	ldr	r3, [pc, #388]	; (800b4d8 <mem_malloc+0x1c8>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	83fb      	strh	r3, [r7, #30]
 800b35a:	e0aa      	b.n	800b4b2 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800b35c:	4b5e      	ldr	r3, [pc, #376]	; (800b4d8 <mem_malloc+0x1c8>)
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	8bfb      	ldrh	r3, [r7, #30]
 800b362:	4413      	add	r3, r2
 800b364:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	791b      	ldrb	r3, [r3, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f040 809b 	bne.w	800b4a6 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	881b      	ldrh	r3, [r3, #0]
 800b374:	461a      	mov	r2, r3
 800b376:	8bfb      	ldrh	r3, [r7, #30]
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	f1a3 0208 	sub.w	r2, r3, #8
 800b37e:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800b380:	429a      	cmp	r2, r3
 800b382:	f0c0 8090 	bcc.w	800b4a6 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	881b      	ldrh	r3, [r3, #0]
 800b38a:	461a      	mov	r2, r3
 800b38c:	8bfb      	ldrh	r3, [r7, #30]
 800b38e:	1ad3      	subs	r3, r2, r3
 800b390:	f1a3 0208 	sub.w	r2, r3, #8
 800b394:	88fb      	ldrh	r3, [r7, #6]
 800b396:	3314      	adds	r3, #20
 800b398:	429a      	cmp	r2, r3
 800b39a:	d327      	bcc.n	800b3ec <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800b39c:	8bfa      	ldrh	r2, [r7, #30]
 800b39e:	88fb      	ldrh	r3, [r7, #6]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	3308      	adds	r3, #8
 800b3a6:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800b3a8:	4b4b      	ldr	r3, [pc, #300]	; (800b4d8 <mem_malloc+0x1c8>)
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	8a7b      	ldrh	r3, [r7, #18]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	881a      	ldrh	r2, [r3, #0]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	8bfa      	ldrh	r2, [r7, #30]
 800b3c4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	8a7a      	ldrh	r2, [r7, #18]
 800b3ca:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	881b      	ldrh	r3, [r3, #0]
 800b3d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3da:	d00a      	beq.n	800b3f2 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b3dc:	4b3e      	ldr	r3, [pc, #248]	; (800b4d8 <mem_malloc+0x1c8>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	8812      	ldrh	r2, [r2, #0]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	8a7a      	ldrh	r2, [r7, #18]
 800b3e8:	805a      	strh	r2, [r3, #2]
 800b3ea:	e002      	b.n	800b3f2 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b3f2:	4b38      	ldr	r3, [pc, #224]	; (800b4d4 <mem_malloc+0x1c4>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	697a      	ldr	r2, [r7, #20]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d127      	bne.n	800b44c <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800b3fc:	4b35      	ldr	r3, [pc, #212]	; (800b4d4 <mem_malloc+0x1c4>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b402:	e005      	b.n	800b410 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800b404:	4b34      	ldr	r3, [pc, #208]	; (800b4d8 <mem_malloc+0x1c8>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	69ba      	ldr	r2, [r7, #24]
 800b40a:	8812      	ldrh	r2, [r2, #0]
 800b40c:	4413      	add	r3, r2
 800b40e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	791b      	ldrb	r3, [r3, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d004      	beq.n	800b422 <mem_malloc+0x112>
 800b418:	4b30      	ldr	r3, [pc, #192]	; (800b4dc <mem_malloc+0x1cc>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	69ba      	ldr	r2, [r7, #24]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d1f0      	bne.n	800b404 <mem_malloc+0xf4>
          }
          lfree = cur;
 800b422:	4a2c      	ldr	r2, [pc, #176]	; (800b4d4 <mem_malloc+0x1c4>)
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b428:	4b2a      	ldr	r3, [pc, #168]	; (800b4d4 <mem_malloc+0x1c4>)
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	4b2b      	ldr	r3, [pc, #172]	; (800b4dc <mem_malloc+0x1cc>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	429a      	cmp	r2, r3
 800b432:	d00b      	beq.n	800b44c <mem_malloc+0x13c>
 800b434:	4b27      	ldr	r3, [pc, #156]	; (800b4d4 <mem_malloc+0x1c4>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	791b      	ldrb	r3, [r3, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d006      	beq.n	800b44c <mem_malloc+0x13c>
 800b43e:	4b28      	ldr	r3, [pc, #160]	; (800b4e0 <mem_malloc+0x1d0>)
 800b440:	f240 22cf 	movw	r2, #719	; 0x2cf
 800b444:	4927      	ldr	r1, [pc, #156]	; (800b4e4 <mem_malloc+0x1d4>)
 800b446:	4828      	ldr	r0, [pc, #160]	; (800b4e8 <mem_malloc+0x1d8>)
 800b448:	f00b fb96 	bl	8016b78 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b44c:	4820      	ldr	r0, [pc, #128]	; (800b4d0 <mem_malloc+0x1c0>)
 800b44e:	f00b fafc 	bl	8016a4a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b452:	88fa      	ldrh	r2, [r7, #6]
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	4413      	add	r3, r2
 800b458:	3308      	adds	r3, #8
 800b45a:	4a20      	ldr	r2, [pc, #128]	; (800b4dc <mem_malloc+0x1cc>)
 800b45c:	6812      	ldr	r2, [r2, #0]
 800b45e:	4293      	cmp	r3, r2
 800b460:	d906      	bls.n	800b470 <mem_malloc+0x160>
 800b462:	4b1f      	ldr	r3, [pc, #124]	; (800b4e0 <mem_malloc+0x1d0>)
 800b464:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b468:	4920      	ldr	r1, [pc, #128]	; (800b4ec <mem_malloc+0x1dc>)
 800b46a:	481f      	ldr	r0, [pc, #124]	; (800b4e8 <mem_malloc+0x1d8>)
 800b46c:	f00b fb84 	bl	8016b78 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	f003 0303 	and.w	r3, r3, #3
 800b476:	2b00      	cmp	r3, #0
 800b478:	d006      	beq.n	800b488 <mem_malloc+0x178>
 800b47a:	4b19      	ldr	r3, [pc, #100]	; (800b4e0 <mem_malloc+0x1d0>)
 800b47c:	f240 22d6 	movw	r2, #726	; 0x2d6
 800b480:	491b      	ldr	r1, [pc, #108]	; (800b4f0 <mem_malloc+0x1e0>)
 800b482:	4819      	ldr	r0, [pc, #100]	; (800b4e8 <mem_malloc+0x1d8>)
 800b484:	f00b fb78 	bl	8016b78 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	f003 0303 	and.w	r3, r3, #3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d006      	beq.n	800b4a0 <mem_malloc+0x190>
 800b492:	4b13      	ldr	r3, [pc, #76]	; (800b4e0 <mem_malloc+0x1d0>)
 800b494:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800b498:	4916      	ldr	r1, [pc, #88]	; (800b4f4 <mem_malloc+0x1e4>)
 800b49a:	4813      	ldr	r0, [pc, #76]	; (800b4e8 <mem_malloc+0x1d8>)
 800b49c:	f00b fb6c 	bl	8016b78 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	3308      	adds	r3, #8
 800b4a4:	e010      	b.n	800b4c8 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	; (800b4d8 <mem_malloc+0x1c8>)
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	8bfb      	ldrh	r3, [r7, #30]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800b4b2:	8bfa      	ldrh	r2, [r7, #30]
 800b4b4:	88fb      	ldrh	r3, [r7, #6]
 800b4b6:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	f4ff af4e 	bcc.w	800b35c <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b4c0:	4803      	ldr	r0, [pc, #12]	; (800b4d0 <mem_malloc+0x1c0>)
 800b4c2:	f00b fac2 	bl	8016a4a <sys_mutex_unlock>
  return NULL;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3720      	adds	r7, #32
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	20008c04 	.word	0x20008c04
 800b4d4:	20008c00 	.word	0x20008c00
 800b4d8:	20008bf8 	.word	0x20008bf8
 800b4dc:	20008bfc 	.word	0x20008bfc
 800b4e0:	08018c40 	.word	0x08018c40
 800b4e4:	08018db8 	.word	0x08018db8
 800b4e8:	08018c88 	.word	0x08018c88
 800b4ec:	08018dd4 	.word	0x08018dd4
 800b4f0:	08018e04 	.word	0x08018e04
 800b4f4:	08018e34 	.word	0x08018e34

0800b4f8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	2200      	movs	r2, #0
 800b506:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	3303      	adds	r3, #3
 800b50e:	f023 0303 	bic.w	r3, r3, #3
 800b512:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b514:	2300      	movs	r3, #0
 800b516:	60fb      	str	r3, [r7, #12]
 800b518:	e011      	b.n	800b53e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	68ba      	ldr	r2, [r7, #8]
 800b52a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	881b      	ldrh	r3, [r3, #0]
 800b530:	461a      	mov	r2, r3
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	4413      	add	r3, r2
 800b536:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	3301      	adds	r3, #1
 800b53c:	60fb      	str	r3, [r7, #12]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	885b      	ldrh	r3, [r3, #2]
 800b542:	461a      	mov	r2, r3
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	4293      	cmp	r3, r2
 800b548:	dbe7      	blt.n	800b51a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b54a:	bf00      	nop
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
	...

0800b558 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b55e:	2300      	movs	r3, #0
 800b560:	80fb      	strh	r3, [r7, #6]
 800b562:	e009      	b.n	800b578 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b564:	88fb      	ldrh	r3, [r7, #6]
 800b566:	4a08      	ldr	r2, [pc, #32]	; (800b588 <memp_init+0x30>)
 800b568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7ff ffc3 	bl	800b4f8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b572:	88fb      	ldrh	r3, [r7, #6]
 800b574:	3301      	adds	r3, #1
 800b576:	80fb      	strh	r3, [r7, #6]
 800b578:	88fb      	ldrh	r3, [r7, #6]
 800b57a:	2b0c      	cmp	r3, #12
 800b57c:	d9f2      	bls.n	800b564 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b57e:	bf00      	nop
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	08026250 	.word	0x08026250

0800b58c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b594:	f00b fa8c 	bl	8016ab0 <sys_arch_protect>
 800b598:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d015      	beq.n	800b5d4 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	68ba      	ldr	r2, [r7, #8]
 800b5ae:	6812      	ldr	r2, [r2, #0]
 800b5b0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	f003 0303 	and.w	r3, r3, #3
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d006      	beq.n	800b5ca <do_memp_malloc_pool+0x3e>
 800b5bc:	4b09      	ldr	r3, [pc, #36]	; (800b5e4 <do_memp_malloc_pool+0x58>)
 800b5be:	f240 1249 	movw	r2, #329	; 0x149
 800b5c2:	4909      	ldr	r1, [pc, #36]	; (800b5e8 <do_memp_malloc_pool+0x5c>)
 800b5c4:	4809      	ldr	r0, [pc, #36]	; (800b5ec <do_memp_malloc_pool+0x60>)
 800b5c6:	f00b fad7 	bl	8016b78 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f00b fa7e 	bl	8016acc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	e003      	b.n	800b5dc <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f00b fa79 	bl	8016acc <sys_arch_unprotect>
  return NULL;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	08018e58 	.word	0x08018e58
 800b5e8:	08018e88 	.word	0x08018e88
 800b5ec:	08018eac 	.word	0x08018eac

0800b5f0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b5fa:	79fb      	ldrb	r3, [r7, #7]
 800b5fc:	2b0c      	cmp	r3, #12
 800b5fe:	d908      	bls.n	800b612 <memp_malloc+0x22>
 800b600:	4b0a      	ldr	r3, [pc, #40]	; (800b62c <memp_malloc+0x3c>)
 800b602:	f240 1287 	movw	r2, #391	; 0x187
 800b606:	490a      	ldr	r1, [pc, #40]	; (800b630 <memp_malloc+0x40>)
 800b608:	480a      	ldr	r0, [pc, #40]	; (800b634 <memp_malloc+0x44>)
 800b60a:	f00b fab5 	bl	8016b78 <iprintf>
 800b60e:	2300      	movs	r3, #0
 800b610:	e008      	b.n	800b624 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b612:	79fb      	ldrb	r3, [r7, #7]
 800b614:	4a08      	ldr	r2, [pc, #32]	; (800b638 <memp_malloc+0x48>)
 800b616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7ff ffb6 	bl	800b58c <do_memp_malloc_pool>
 800b620:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b622:	68fb      	ldr	r3, [r7, #12]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3710      	adds	r7, #16
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	08018e58 	.word	0x08018e58
 800b630:	08018ee8 	.word	0x08018ee8
 800b634:	08018eac 	.word	0x08018eac
 800b638:	08026250 	.word	0x08026250

0800b63c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	f003 0303 	and.w	r3, r3, #3
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d006      	beq.n	800b65e <do_memp_free_pool+0x22>
 800b650:	4b0d      	ldr	r3, [pc, #52]	; (800b688 <do_memp_free_pool+0x4c>)
 800b652:	f240 129d 	movw	r2, #413	; 0x19d
 800b656:	490d      	ldr	r1, [pc, #52]	; (800b68c <do_memp_free_pool+0x50>)
 800b658:	480d      	ldr	r0, [pc, #52]	; (800b690 <do_memp_free_pool+0x54>)
 800b65a:	f00b fa8d 	bl	8016b78 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b662:	f00b fa25 	bl	8016ab0 <sys_arch_protect>
 800b666:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b67a:	68b8      	ldr	r0, [r7, #8]
 800b67c:	f00b fa26 	bl	8016acc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b680:	bf00      	nop
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	08018e58 	.word	0x08018e58
 800b68c:	08018f08 	.word	0x08018f08
 800b690:	08018eac 	.word	0x08018eac

0800b694 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	4603      	mov	r3, r0
 800b69c:	6039      	str	r1, [r7, #0]
 800b69e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b6a0:	79fb      	ldrb	r3, [r7, #7]
 800b6a2:	2b0c      	cmp	r3, #12
 800b6a4:	d907      	bls.n	800b6b6 <memp_free+0x22>
 800b6a6:	4b0c      	ldr	r3, [pc, #48]	; (800b6d8 <memp_free+0x44>)
 800b6a8:	f240 12db 	movw	r2, #475	; 0x1db
 800b6ac:	490b      	ldr	r1, [pc, #44]	; (800b6dc <memp_free+0x48>)
 800b6ae:	480c      	ldr	r0, [pc, #48]	; (800b6e0 <memp_free+0x4c>)
 800b6b0:	f00b fa62 	bl	8016b78 <iprintf>
 800b6b4:	e00c      	b.n	800b6d0 <memp_free+0x3c>

  if (mem == NULL) {
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d008      	beq.n	800b6ce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b6bc:	79fb      	ldrb	r3, [r7, #7]
 800b6be:	4a09      	ldr	r2, [pc, #36]	; (800b6e4 <memp_free+0x50>)
 800b6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6c4:	6839      	ldr	r1, [r7, #0]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7ff ffb8 	bl	800b63c <do_memp_free_pool>
 800b6cc:	e000      	b.n	800b6d0 <memp_free+0x3c>
    return;
 800b6ce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	08018e58 	.word	0x08018e58
 800b6dc:	08018f28 	.word	0x08018f28
 800b6e0:	08018eac 	.word	0x08018eac
 800b6e4:	08026250 	.word	0x08026250

0800b6e8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b6ec:	bf00      	nop
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr
	...

0800b6f8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d105      	bne.n	800b718 <netif_add+0x20>
 800b70c:	4b23      	ldr	r3, [pc, #140]	; (800b79c <netif_add+0xa4>)
 800b70e:	22fb      	movs	r2, #251	; 0xfb
 800b710:	4923      	ldr	r1, [pc, #140]	; (800b7a0 <netif_add+0xa8>)
 800b712:	4824      	ldr	r0, [pc, #144]	; (800b7a4 <netif_add+0xac>)
 800b714:	f00b fa30 	bl	8016b78 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2200      	movs	r2, #0
 800b71c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2200      	movs	r2, #0
 800b722:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2200      	movs	r2, #0
 800b728:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	3320      	adds	r3, #32
 800b736:	2204      	movs	r2, #4
 800b738:	2100      	movs	r1, #0
 800b73a:	4618      	mov	r0, r3
 800b73c:	f00b fa14 	bl	8016b68 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2203      	movs	r2, #3
 800b744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	69ba      	ldr	r2, [r7, #24]
 800b74c:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800b74e:	4b16      	ldr	r3, [pc, #88]	; (800b7a8 <netif_add+0xb0>)
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	1c5a      	adds	r2, r3, #1
 800b754:	b2d1      	uxtb	r1, r2
 800b756:	4a14      	ldr	r2, [pc, #80]	; (800b7a8 <netif_add+0xb0>)
 800b758:	7011      	strb	r1, [r2, #0]
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6a3a      	ldr	r2, [r7, #32]
 800b764:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	68b9      	ldr	r1, [r7, #8]
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 f81f 	bl	800b7b0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	4798      	blx	r3
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <netif_add+0x8a>
    return NULL;
 800b77e:	2300      	movs	r3, #0
 800b780:	e007      	b.n	800b792 <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b782:	4b0a      	ldr	r3, [pc, #40]	; (800b7ac <netif_add+0xb4>)
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b78a:	4a08      	ldr	r2, [pc, #32]	; (800b7ac <netif_add+0xb4>)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800b790:	68fb      	ldr	r3, [r7, #12]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	08018f44 	.word	0x08018f44
 800b7a0:	08018f78 	.word	0x08018f78
 800b7a4:	08018f90 	.word	0x08018f90
 800b7a8:	20008c3c 	.word	0x20008c3c
 800b7ac:	2000fac4 	.word	0x2000fac4

0800b7b0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d003      	beq.n	800b7cc <netif_set_addr+0x1c>
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10c      	bne.n	800b7e6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800b7cc:	68b9      	ldr	r1, [r7, #8]
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f000 f81a 	bl	800b808 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800b7d4:	6879      	ldr	r1, [r7, #4]
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f000 f862 	bl	800b8a0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800b7dc:	6839      	ldr	r1, [r7, #0]
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f000 f84a 	bl	800b878 <netif_set_gw>
 800b7e4:	e00b      	b.n	800b7fe <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800b7e6:	6879      	ldr	r1, [r7, #4]
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f000 f859 	bl	800b8a0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800b7ee:	6839      	ldr	r1, [r7, #0]
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f000 f841 	bl	800b878 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800b7f6:	68b9      	ldr	r1, [r7, #8]
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f000 f805 	bl	800b808 <netif_set_ipaddr>
  }
}
 800b7fe:	bf00      	nop
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
	...

0800b808 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d003      	beq.n	800b820 <netif_set_ipaddr+0x18>
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	60fb      	str	r3, [r7, #12]
 800b81e:	e002      	b.n	800b826 <netif_set_ipaddr+0x1e>
 800b820:	4b14      	ldr	r3, [pc, #80]	; (800b874 <netif_set_ipaddr+0x6c>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	3304      	adds	r3, #4
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d01c      	beq.n	800b86c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	3304      	adds	r3, #4
 800b836:	f107 020c 	add.w	r2, r7, #12
 800b83a:	4611      	mov	r1, r2
 800b83c:	4618      	mov	r0, r3
 800b83e:	f002 fb45 	bl	800decc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	3304      	adds	r3, #4
 800b846:	f107 020c 	add.w	r2, r7, #12
 800b84a:	4611      	mov	r1, r2
 800b84c:	4618      	mov	r0, r3
 800b84e:	f006 fe45 	bl	80124dc <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d002      	beq.n	800b85e <netif_set_ipaddr+0x56>
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	e000      	b.n	800b860 <netif_set_ipaddr+0x58>
 800b85e:	2300      	movs	r3, #0
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b864:	2101      	movs	r1, #1
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f861 	bl	800b92e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800b86c:	bf00      	nop
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	080262d4 	.word	0x080262d4

0800b878 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d002      	beq.n	800b88e <netif_set_gw+0x16>
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	e000      	b.n	800b890 <netif_set_gw+0x18>
 800b88e:	2300      	movs	r3, #0
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800b894:	bf00      	nop
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d002      	beq.n	800b8b6 <netif_set_netmask+0x16>
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	e000      	b.n	800b8b8 <netif_set_netmask+0x18>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b8d0:	4a04      	ldr	r2, [pc, #16]	; (800b8e4 <netif_set_default+0x1c>)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b8d6:	bf00      	nop
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr
 800b8e2:	bf00      	nop
 800b8e4:	2000fac8 	.word	0x2000fac8

0800b8e8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b8f6:	f003 0301 	and.w	r3, r3, #1
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d113      	bne.n	800b926 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b904:	f043 0301 	orr.w	r3, r3, #1
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b916:	f003 0304 	and.w	r3, r3, #4
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d003      	beq.n	800b926 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800b91e:	2103      	movs	r1, #3
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f804 	bl	800b92e <netif_issue_reports>
    }
  }
}
 800b926:	bf00      	nop
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b082      	sub	sp, #8
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
 800b936:	460b      	mov	r3, r1
 800b938:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b93a:	78fb      	ldrb	r3, [r7, #3]
 800b93c:	f003 0301 	and.w	r3, r3, #1
 800b940:	2b00      	cmp	r3, #0
 800b942:	d011      	beq.n	800b968 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	3304      	adds	r3, #4
 800b948:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00c      	beq.n	800b968 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b954:	f003 0308 	and.w	r3, r3, #8
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d005      	beq.n	800b968 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3304      	adds	r3, #4
 800b960:	4619      	mov	r1, r3
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f009 fba8 	bl	80150b8 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800b968:	bf00      	nop
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b97e:	f003 0301 	and.w	r3, r3, #1
 800b982:	2b00      	cmp	r3, #0
 800b984:	d012      	beq.n	800b9ac <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b98c:	f023 0301 	bic.w	r3, r3, #1
 800b990:	b2da      	uxtb	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b99e:	f003 0308 	and.w	r3, r3, #8
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d002      	beq.n	800b9ac <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f008 ff48 	bl	801483c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b9ac:	bf00      	nop
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b9ba:	f00b f879 	bl	8016ab0 <sys_arch_protect>
 800b9be:	6038      	str	r0, [r7, #0]
 800b9c0:	4b0f      	ldr	r3, [pc, #60]	; (800ba00 <pbuf_free_ooseq+0x4c>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	701a      	strb	r2, [r3, #0]
 800b9c6:	6838      	ldr	r0, [r7, #0]
 800b9c8:	f00b f880 	bl	8016acc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b9cc:	4b0d      	ldr	r3, [pc, #52]	; (800ba04 <pbuf_free_ooseq+0x50>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	607b      	str	r3, [r7, #4]
 800b9d2:	e00f      	b.n	800b9f4 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d008      	beq.n	800b9ee <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f001 fee0 	bl	800d7a6 <tcp_segs_free>
      pcb->ooseq = NULL;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800b9ec:	e005      	b.n	800b9fa <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	607b      	str	r3, [r7, #4]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1ec      	bne.n	800b9d4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	2000facc 	.word	0x2000facc
 800ba04:	2000fad4 	.word	0x2000fad4

0800ba08 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ba10:	f7ff ffd0 	bl	800b9b4 <pbuf_free_ooseq>
}
 800ba14:	bf00      	nop
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ba22:	f00b f845 	bl	8016ab0 <sys_arch_protect>
 800ba26:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ba28:	4b10      	ldr	r3, [pc, #64]	; (800ba6c <pbuf_pool_is_empty+0x50>)
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ba2e:	4b0f      	ldr	r3, [pc, #60]	; (800ba6c <pbuf_pool_is_empty+0x50>)
 800ba30:	2201      	movs	r2, #1
 800ba32:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f00b f849 	bl	8016acc <sys_arch_unprotect>

  if (!queued) {
 800ba3a:	78fb      	ldrb	r3, [r7, #3]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d110      	bne.n	800ba62 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ba40:	2200      	movs	r2, #0
 800ba42:	2100      	movs	r1, #0
 800ba44:	480a      	ldr	r0, [pc, #40]	; (800ba70 <pbuf_pool_is_empty+0x54>)
 800ba46:	f7fe fa23 	bl	8009e90 <tcpip_callback_with_block>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d008      	beq.n	800ba62 <pbuf_pool_is_empty+0x46>
 800ba50:	f00b f82e 	bl	8016ab0 <sys_arch_protect>
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	4b05      	ldr	r3, [pc, #20]	; (800ba6c <pbuf_pool_is_empty+0x50>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	701a      	strb	r2, [r3, #0]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f00b f835 	bl	8016acc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ba62:	bf00      	nop
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	2000facc 	.word	0x2000facc
 800ba70:	0800ba09 	.word	0x0800ba09

0800ba74 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b088      	sub	sp, #32
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	71fb      	strb	r3, [r7, #7]
 800ba7e:	460b      	mov	r3, r1
 800ba80:	80bb      	strh	r3, [r7, #4]
 800ba82:	4613      	mov	r3, r2
 800ba84:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800ba86:	79fb      	ldrb	r3, [r7, #7]
 800ba88:	2b04      	cmp	r3, #4
 800ba8a:	d81c      	bhi.n	800bac6 <pbuf_alloc+0x52>
 800ba8c:	a201      	add	r2, pc, #4	; (adr r2, 800ba94 <pbuf_alloc+0x20>)
 800ba8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba92:	bf00      	nop
 800ba94:	0800baa9 	.word	0x0800baa9
 800ba98:	0800baaf 	.word	0x0800baaf
 800ba9c:	0800bab5 	.word	0x0800bab5
 800baa0:	0800babb 	.word	0x0800babb
 800baa4:	0800bac1 	.word	0x0800bac1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800baa8:	2336      	movs	r3, #54	; 0x36
 800baaa:	82fb      	strh	r3, [r7, #22]
    break;
 800baac:	e014      	b.n	800bad8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800baae:	2322      	movs	r3, #34	; 0x22
 800bab0:	82fb      	strh	r3, [r7, #22]
    break;
 800bab2:	e011      	b.n	800bad8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800bab4:	230e      	movs	r3, #14
 800bab6:	82fb      	strh	r3, [r7, #22]
    break;
 800bab8:	e00e      	b.n	800bad8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800baba:	2300      	movs	r3, #0
 800babc:	82fb      	strh	r3, [r7, #22]
    break;
 800babe:	e00b      	b.n	800bad8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	82fb      	strh	r3, [r7, #22]
    break;
 800bac4:	e008      	b.n	800bad8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800bac6:	4ba5      	ldr	r3, [pc, #660]	; (800bd5c <pbuf_alloc+0x2e8>)
 800bac8:	f44f 728b 	mov.w	r2, #278	; 0x116
 800bacc:	49a4      	ldr	r1, [pc, #656]	; (800bd60 <pbuf_alloc+0x2ec>)
 800bace:	48a5      	ldr	r0, [pc, #660]	; (800bd64 <pbuf_alloc+0x2f0>)
 800bad0:	f00b f852 	bl	8016b78 <iprintf>
    return NULL;
 800bad4:	2300      	movs	r3, #0
 800bad6:	e15d      	b.n	800bd94 <pbuf_alloc+0x320>
  }

  switch (type) {
 800bad8:	79bb      	ldrb	r3, [r7, #6]
 800bada:	2b03      	cmp	r3, #3
 800badc:	f200 8134 	bhi.w	800bd48 <pbuf_alloc+0x2d4>
 800bae0:	a201      	add	r2, pc, #4	; (adr r2, 800bae8 <pbuf_alloc+0x74>)
 800bae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae6:	bf00      	nop
 800bae8:	0800bc89 	.word	0x0800bc89
 800baec:	0800bd15 	.word	0x0800bd15
 800baf0:	0800bd15 	.word	0x0800bd15
 800baf4:	0800baf9 	.word	0x0800baf9
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800baf8:	200c      	movs	r0, #12
 800bafa:	f7ff fd79 	bl	800b5f0 <memp_malloc>
 800bafe:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d103      	bne.n	800bb0e <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800bb06:	f7ff ff89 	bl	800ba1c <pbuf_pool_is_empty>
      return NULL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	e142      	b.n	800bd94 <pbuf_alloc+0x320>
    }
    p->type = type;
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	79ba      	ldrb	r2, [r7, #6]
 800bb12:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	2200      	movs	r2, #0
 800bb18:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800bb1a:	8afb      	ldrh	r3, [r7, #22]
 800bb1c:	3310      	adds	r3, #16
 800bb1e:	69fa      	ldr	r2, [r7, #28]
 800bb20:	4413      	add	r3, r2
 800bb22:	3303      	adds	r3, #3
 800bb24:	f023 0303 	bic.w	r3, r3, #3
 800bb28:	461a      	mov	r2, r3
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	f003 0303 	and.w	r3, r3, #3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d006      	beq.n	800bb48 <pbuf_alloc+0xd4>
 800bb3a:	4b88      	ldr	r3, [pc, #544]	; (800bd5c <pbuf_alloc+0x2e8>)
 800bb3c:	f240 1229 	movw	r2, #297	; 0x129
 800bb40:	4989      	ldr	r1, [pc, #548]	; (800bd68 <pbuf_alloc+0x2f4>)
 800bb42:	4888      	ldr	r0, [pc, #544]	; (800bd64 <pbuf_alloc+0x2f0>)
 800bb44:	f00b f818 	bl	8016b78 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	88ba      	ldrh	r2, [r7, #4]
 800bb4c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800bb4e:	8afb      	ldrh	r3, [r7, #22]
 800bb50:	3303      	adds	r3, #3
 800bb52:	f023 0303 	bic.w	r3, r3, #3
 800bb56:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800bb5a:	88bb      	ldrh	r3, [r7, #4]
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	bf28      	it	cs
 800bb60:	4613      	movcs	r3, r2
 800bb62:	b29a      	uxth	r2, r3
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	69fa      	ldr	r2, [r7, #28]
 800bb6e:	8952      	ldrh	r2, [r2, #10]
 800bb70:	441a      	add	r2, r3
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d906      	bls.n	800bb8a <pbuf_alloc+0x116>
 800bb7c:	4b77      	ldr	r3, [pc, #476]	; (800bd5c <pbuf_alloc+0x2e8>)
 800bb7e:	f44f 7298 	mov.w	r2, #304	; 0x130
 800bb82:	497a      	ldr	r1, [pc, #488]	; (800bd6c <pbuf_alloc+0x2f8>)
 800bb84:	4877      	ldr	r0, [pc, #476]	; (800bd64 <pbuf_alloc+0x2f0>)
 800bb86:	f00a fff7 	bl	8016b78 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bb8a:	8afb      	ldrh	r3, [r7, #22]
 800bb8c:	3303      	adds	r3, #3
 800bb8e:	f023 0303 	bic.w	r3, r3, #3
 800bb92:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bb96:	d106      	bne.n	800bba6 <pbuf_alloc+0x132>
 800bb98:	4b70      	ldr	r3, [pc, #448]	; (800bd5c <pbuf_alloc+0x2e8>)
 800bb9a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800bb9e:	4974      	ldr	r1, [pc, #464]	; (800bd70 <pbuf_alloc+0x2fc>)
 800bba0:	4870      	ldr	r0, [pc, #448]	; (800bd64 <pbuf_alloc+0x2f0>)
 800bba2:	f00a ffe9 	bl	8016b78 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800bbb0:	88bb      	ldrh	r3, [r7, #4]
 800bbb2:	69fa      	ldr	r2, [r7, #28]
 800bbb4:	8952      	ldrh	r2, [r2, #10]
 800bbb6:	1a9b      	subs	r3, r3, r2
 800bbb8:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800bbba:	e061      	b.n	800bc80 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bbbc:	200c      	movs	r0, #12
 800bbbe:	f7ff fd17 	bl	800b5f0 <memp_malloc>
 800bbc2:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d106      	bne.n	800bbd8 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800bbca:	f7ff ff27 	bl	800ba1c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800bbce:	69f8      	ldr	r0, [r7, #28]
 800bbd0:	f000 fac2 	bl	800c158 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	e0dd      	b.n	800bd94 <pbuf_alloc+0x320>
      }
      q->type = type;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	79ba      	ldrb	r2, [r7, #6]
 800bbdc:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	dd06      	ble.n	800bc08 <pbuf_alloc+0x194>
 800bbfa:	4b58      	ldr	r3, [pc, #352]	; (800bd5c <pbuf_alloc+0x2e8>)
 800bbfc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800bc00:	495c      	ldr	r1, [pc, #368]	; (800bd74 <pbuf_alloc+0x300>)
 800bc02:	4858      	ldr	r0, [pc, #352]	; (800bd64 <pbuf_alloc+0x2f0>)
 800bc04:	f00a ffb8 	bl	8016b78 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bc18:	bf28      	it	cs
 800bc1a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f103 0210 	add.w	r2, r3, #16
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	f003 0303 	and.w	r3, r3, #3
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d006      	beq.n	800bc48 <pbuf_alloc+0x1d4>
 800bc3a:	4b48      	ldr	r3, [pc, #288]	; (800bd5c <pbuf_alloc+0x2e8>)
 800bc3c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800bc40:	494d      	ldr	r1, [pc, #308]	; (800bd78 <pbuf_alloc+0x304>)
 800bc42:	4848      	ldr	r0, [pc, #288]	; (800bd64 <pbuf_alloc+0x2f0>)
 800bc44:	f00a ff98 	bl	8016b78 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	69fa      	ldr	r2, [r7, #28]
 800bc4e:	8952      	ldrh	r2, [r2, #10]
 800bc50:	441a      	add	r2, r3
 800bc52:	69fb      	ldr	r3, [r7, #28]
 800bc54:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d906      	bls.n	800bc6a <pbuf_alloc+0x1f6>
 800bc5c:	4b3f      	ldr	r3, [pc, #252]	; (800bd5c <pbuf_alloc+0x2e8>)
 800bc5e:	f240 1255 	movw	r2, #341	; 0x155
 800bc62:	4942      	ldr	r1, [pc, #264]	; (800bd6c <pbuf_alloc+0x2f8>)
 800bc64:	483f      	ldr	r0, [pc, #252]	; (800bd64 <pbuf_alloc+0x2f0>)
 800bc66:	f00a ff87 	bl	8016b78 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	895b      	ldrh	r3, [r3, #10]
 800bc74:	461a      	mov	r2, r3
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	1a9b      	subs	r3, r3, r2
 800bc7a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	dc9a      	bgt.n	800bbbc <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800bc86:	e07e      	b.n	800bd86 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800bc88:	8afb      	ldrh	r3, [r7, #22]
 800bc8a:	3313      	adds	r3, #19
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	f023 0303 	bic.w	r3, r3, #3
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	88bb      	ldrh	r3, [r7, #4]
 800bc96:	3303      	adds	r3, #3
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	f023 0303 	bic.w	r3, r3, #3
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	4413      	add	r3, r2
 800bca2:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800bca4:	897a      	ldrh	r2, [r7, #10]
 800bca6:	88bb      	ldrh	r3, [r7, #4]
 800bca8:	3303      	adds	r3, #3
 800bcaa:	f023 0303 	bic.w	r3, r3, #3
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d201      	bcs.n	800bcb6 <pbuf_alloc+0x242>
        return NULL;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	e06e      	b.n	800bd94 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800bcb6:	897b      	ldrh	r3, [r7, #10]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff fb29 	bl	800b310 <mem_malloc>
 800bcbe:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <pbuf_alloc+0x256>
      return NULL;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e064      	b.n	800bd94 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800bcca:	8afb      	ldrh	r3, [r7, #22]
 800bccc:	3310      	adds	r3, #16
 800bcce:	69fa      	ldr	r2, [r7, #28]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	3303      	adds	r3, #3
 800bcd4:	f023 0303 	bic.w	r3, r3, #3
 800bcd8:	461a      	mov	r2, r3
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	88ba      	ldrh	r2, [r7, #4]
 800bce2:	811a      	strh	r2, [r3, #8]
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	891a      	ldrh	r2, [r3, #8]
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	601a      	str	r2, [r3, #0]
    p->type = type;
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	79ba      	ldrb	r2, [r7, #6]
 800bcf6:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	f003 0303 	and.w	r3, r3, #3
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d03f      	beq.n	800bd84 <pbuf_alloc+0x310>
 800bd04:	4b15      	ldr	r3, [pc, #84]	; (800bd5c <pbuf_alloc+0x2e8>)
 800bd06:	f240 1277 	movw	r2, #375	; 0x177
 800bd0a:	491c      	ldr	r1, [pc, #112]	; (800bd7c <pbuf_alloc+0x308>)
 800bd0c:	4815      	ldr	r0, [pc, #84]	; (800bd64 <pbuf_alloc+0x2f0>)
 800bd0e:	f00a ff33 	bl	8016b78 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800bd12:	e037      	b.n	800bd84 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bd14:	200b      	movs	r0, #11
 800bd16:	f7ff fc6b 	bl	800b5f0 <memp_malloc>
 800bd1a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d101      	bne.n	800bd26 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800bd22:	2300      	movs	r3, #0
 800bd24:	e036      	b.n	800bd94 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	88ba      	ldrh	r2, [r7, #4]
 800bd30:	811a      	strh	r2, [r3, #8]
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	891a      	ldrh	r2, [r3, #8]
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	601a      	str	r2, [r3, #0]
    p->type = type;
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	79ba      	ldrb	r2, [r7, #6]
 800bd44:	731a      	strb	r2, [r3, #12]
    break;
 800bd46:	e01e      	b.n	800bd86 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bd48:	4b04      	ldr	r3, [pc, #16]	; (800bd5c <pbuf_alloc+0x2e8>)
 800bd4a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800bd4e:	490c      	ldr	r1, [pc, #48]	; (800bd80 <pbuf_alloc+0x30c>)
 800bd50:	4804      	ldr	r0, [pc, #16]	; (800bd64 <pbuf_alloc+0x2f0>)
 800bd52:	f00a ff11 	bl	8016b78 <iprintf>
    return NULL;
 800bd56:	2300      	movs	r3, #0
 800bd58:	e01c      	b.n	800bd94 <pbuf_alloc+0x320>
 800bd5a:	bf00      	nop
 800bd5c:	08018fb8 	.word	0x08018fb8
 800bd60:	08018fe8 	.word	0x08018fe8
 800bd64:	08019004 	.word	0x08019004
 800bd68:	0801902c 	.word	0x0801902c
 800bd6c:	0801905c 	.word	0x0801905c
 800bd70:	08019090 	.word	0x08019090
 800bd74:	080190c4 	.word	0x080190c4
 800bd78:	080190d8 	.word	0x080190d8
 800bd7c:	08019108 	.word	0x08019108
 800bd80:	08019134 	.word	0x08019134
    break;
 800bd84:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bd92:	69fb      	ldr	r3, [r7, #28]
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3720      	adds	r7, #32
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	603b      	str	r3, [r7, #0]
 800bda4:	4603      	mov	r3, r0
 800bda6:	71fb      	strb	r3, [r7, #7]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	80bb      	strh	r3, [r7, #4]
 800bdac:	4613      	mov	r3, r2
 800bdae:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800bdb0:	79fb      	ldrb	r3, [r7, #7]
 800bdb2:	2b04      	cmp	r3, #4
 800bdb4:	d81b      	bhi.n	800bdee <pbuf_alloced_custom+0x52>
 800bdb6:	a201      	add	r2, pc, #4	; (adr r2, 800bdbc <pbuf_alloced_custom+0x20>)
 800bdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbc:	0800bdd1 	.word	0x0800bdd1
 800bdc0:	0800bdd7 	.word	0x0800bdd7
 800bdc4:	0800bddd 	.word	0x0800bddd
 800bdc8:	0800bde3 	.word	0x0800bde3
 800bdcc:	0800bde9 	.word	0x0800bde9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800bdd0:	2336      	movs	r3, #54	; 0x36
 800bdd2:	81fb      	strh	r3, [r7, #14]
    break;
 800bdd4:	e014      	b.n	800be00 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800bdd6:	2322      	movs	r3, #34	; 0x22
 800bdd8:	81fb      	strh	r3, [r7, #14]
    break;
 800bdda:	e011      	b.n	800be00 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800bddc:	230e      	movs	r3, #14
 800bdde:	81fb      	strh	r3, [r7, #14]
    break;
 800bde0:	e00e      	b.n	800be00 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800bde2:	2300      	movs	r3, #0
 800bde4:	81fb      	strh	r3, [r7, #14]
    break;
 800bde6:	e00b      	b.n	800be00 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	81fb      	strh	r3, [r7, #14]
    break;
 800bdec:	e008      	b.n	800be00 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800bdee:	4b1d      	ldr	r3, [pc, #116]	; (800be64 <pbuf_alloced_custom+0xc8>)
 800bdf0:	f240 12c5 	movw	r2, #453	; 0x1c5
 800bdf4:	491c      	ldr	r1, [pc, #112]	; (800be68 <pbuf_alloced_custom+0xcc>)
 800bdf6:	481d      	ldr	r0, [pc, #116]	; (800be6c <pbuf_alloced_custom+0xd0>)
 800bdf8:	f00a febe 	bl	8016b78 <iprintf>
    return NULL;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	e02d      	b.n	800be5c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800be00:	89fb      	ldrh	r3, [r7, #14]
 800be02:	3303      	adds	r3, #3
 800be04:	f023 0203 	bic.w	r2, r3, #3
 800be08:	88bb      	ldrh	r3, [r7, #4]
 800be0a:	441a      	add	r2, r3
 800be0c:	8bbb      	ldrh	r3, [r7, #28]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d901      	bls.n	800be16 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800be12:	2300      	movs	r3, #0
 800be14:	e022      	b.n	800be5c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	2200      	movs	r2, #0
 800be1a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d008      	beq.n	800be34 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800be22:	89fb      	ldrh	r3, [r7, #14]
 800be24:	3303      	adds	r3, #3
 800be26:	f023 0303 	bic.w	r3, r3, #3
 800be2a:	69ba      	ldr	r2, [r7, #24]
 800be2c:	441a      	add	r2, r3
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	605a      	str	r2, [r3, #4]
 800be32:	e002      	b.n	800be3a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	2200      	movs	r2, #0
 800be38:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	2202      	movs	r2, #2
 800be3e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	88ba      	ldrh	r2, [r7, #4]
 800be44:	811a      	strh	r2, [r3, #8]
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	891a      	ldrh	r2, [r3, #8]
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	79ba      	ldrb	r2, [r7, #6]
 800be52:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	2201      	movs	r2, #1
 800be58:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800be5a:	683b      	ldr	r3, [r7, #0]
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	08018fb8 	.word	0x08018fb8
 800be68:	08019150 	.word	0x08019150
 800be6c:	08019004 	.word	0x08019004

0800be70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d106      	bne.n	800be90 <pbuf_realloc+0x20>
 800be82:	4b4b      	ldr	r3, [pc, #300]	; (800bfb0 <pbuf_realloc+0x140>)
 800be84:	f240 12f3 	movw	r2, #499	; 0x1f3
 800be88:	494a      	ldr	r1, [pc, #296]	; (800bfb4 <pbuf_realloc+0x144>)
 800be8a:	484b      	ldr	r0, [pc, #300]	; (800bfb8 <pbuf_realloc+0x148>)
 800be8c:	f00a fe74 	bl	8016b78 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	7b1b      	ldrb	r3, [r3, #12]
 800be94:	2b03      	cmp	r3, #3
 800be96:	d012      	beq.n	800bebe <pbuf_realloc+0x4e>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	7b1b      	ldrb	r3, [r3, #12]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d00e      	beq.n	800bebe <pbuf_realloc+0x4e>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	7b1b      	ldrb	r3, [r3, #12]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00a      	beq.n	800bebe <pbuf_realloc+0x4e>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	7b1b      	ldrb	r3, [r3, #12]
 800beac:	2b02      	cmp	r3, #2
 800beae:	d006      	beq.n	800bebe <pbuf_realloc+0x4e>
 800beb0:	4b3f      	ldr	r3, [pc, #252]	; (800bfb0 <pbuf_realloc+0x140>)
 800beb2:	f240 12f7 	movw	r2, #503	; 0x1f7
 800beb6:	4941      	ldr	r1, [pc, #260]	; (800bfbc <pbuf_realloc+0x14c>)
 800beb8:	483f      	ldr	r0, [pc, #252]	; (800bfb8 <pbuf_realloc+0x148>)
 800beba:	f00a fe5d 	bl	8016b78 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	891b      	ldrh	r3, [r3, #8]
 800bec2:	887a      	ldrh	r2, [r7, #2]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d26f      	bcs.n	800bfa8 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800bec8:	887b      	ldrh	r3, [r7, #2]
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	8912      	ldrh	r2, [r2, #8]
 800bece:	1a9b      	subs	r3, r3, r2
 800bed0:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bed2:	887b      	ldrh	r3, [r7, #2]
 800bed4:	827b      	strh	r3, [r7, #18]
  q = p;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800beda:	e025      	b.n	800bf28 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	895b      	ldrh	r3, [r3, #10]
 800bee0:	8a7a      	ldrh	r2, [r7, #18]
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800beec:	4293      	cmp	r3, r2
 800beee:	dd06      	ble.n	800befe <pbuf_realloc+0x8e>
 800bef0:	4b2f      	ldr	r3, [pc, #188]	; (800bfb0 <pbuf_realloc+0x140>)
 800bef2:	f240 220b 	movw	r2, #523	; 0x20b
 800bef6:	4932      	ldr	r1, [pc, #200]	; (800bfc0 <pbuf_realloc+0x150>)
 800bef8:	482f      	ldr	r0, [pc, #188]	; (800bfb8 <pbuf_realloc+0x148>)
 800befa:	f00a fe3d 	bl	8016b78 <iprintf>
    q->tot_len += (u16_t)grow;
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	891a      	ldrh	r2, [r3, #8]
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	4413      	add	r3, r2
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d106      	bne.n	800bf28 <pbuf_realloc+0xb8>
 800bf1a:	4b25      	ldr	r3, [pc, #148]	; (800bfb0 <pbuf_realloc+0x140>)
 800bf1c:	f240 220f 	movw	r2, #527	; 0x20f
 800bf20:	4928      	ldr	r1, [pc, #160]	; (800bfc4 <pbuf_realloc+0x154>)
 800bf22:	4825      	ldr	r0, [pc, #148]	; (800bfb8 <pbuf_realloc+0x148>)
 800bf24:	f00a fe28 	bl	8016b78 <iprintf>
  while (rem_len > q->len) {
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	895b      	ldrh	r3, [r3, #10]
 800bf2c:	8a7a      	ldrh	r2, [r7, #18]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d8d4      	bhi.n	800bedc <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	7b1b      	ldrb	r3, [r3, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d122      	bne.n	800bf80 <pbuf_realloc+0x110>
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	895b      	ldrh	r3, [r3, #10]
 800bf3e:	8a7a      	ldrh	r2, [r7, #18]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d01d      	beq.n	800bf80 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	7b5b      	ldrb	r3, [r3, #13]
 800bf48:	f003 0302 	and.w	r3, r3, #2
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d117      	bne.n	800bf80 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	461a      	mov	r2, r3
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	8a7b      	ldrh	r3, [r7, #18]
 800bf5e:	4413      	add	r3, r2
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	4619      	mov	r1, r3
 800bf64:	6978      	ldr	r0, [r7, #20]
 800bf66:	f7ff f8e9 	bl	800b13c <mem_trim>
 800bf6a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d106      	bne.n	800bf80 <pbuf_realloc+0x110>
 800bf72:	4b0f      	ldr	r3, [pc, #60]	; (800bfb0 <pbuf_realloc+0x140>)
 800bf74:	f240 221d 	movw	r2, #541	; 0x21d
 800bf78:	4913      	ldr	r1, [pc, #76]	; (800bfc8 <pbuf_realloc+0x158>)
 800bf7a:	480f      	ldr	r0, [pc, #60]	; (800bfb8 <pbuf_realloc+0x148>)
 800bf7c:	f00a fdfc 	bl	8016b78 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	8a7a      	ldrh	r2, [r7, #18]
 800bf84:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	895a      	ldrh	r2, [r3, #10]
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d004      	beq.n	800bfa0 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f000 f8dc 	bl	800c158 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]
 800bfa6:	e000      	b.n	800bfaa <pbuf_realloc+0x13a>
    return;
 800bfa8:	bf00      	nop

}
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	08018fb8 	.word	0x08018fb8
 800bfb4:	08019174 	.word	0x08019174
 800bfb8:	08019004 	.word	0x08019004
 800bfbc:	0801918c 	.word	0x0801918c
 800bfc0:	080191a8 	.word	0x080191a8
 800bfc4:	080191bc 	.word	0x080191bc
 800bfc8:	080191d4 	.word	0x080191d4

0800bfcc <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	807b      	strh	r3, [r7, #2]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d106      	bne.n	800bff0 <pbuf_header_impl+0x24>
 800bfe2:	4b46      	ldr	r3, [pc, #280]	; (800c0fc <pbuf_header_impl+0x130>)
 800bfe4:	f240 223f 	movw	r2, #575	; 0x23f
 800bfe8:	4945      	ldr	r1, [pc, #276]	; (800c100 <pbuf_header_impl+0x134>)
 800bfea:	4846      	ldr	r0, [pc, #280]	; (800c104 <pbuf_header_impl+0x138>)
 800bfec:	f00a fdc4 	bl	8016b78 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800bff0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d002      	beq.n	800bffe <pbuf_header_impl+0x32>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d101      	bne.n	800c002 <pbuf_header_impl+0x36>
    return 0;
 800bffe:	2300      	movs	r3, #0
 800c000:	e078      	b.n	800c0f4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800c002:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c006:	2b00      	cmp	r3, #0
 800c008:	da10      	bge.n	800c02c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800c00a:	887b      	ldrh	r3, [r7, #2]
 800c00c:	425b      	negs	r3, r3
 800c00e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	895b      	ldrh	r3, [r3, #10]
 800c014:	89fa      	ldrh	r2, [r7, #14]
 800c016:	429a      	cmp	r2, r3
 800c018:	d90a      	bls.n	800c030 <pbuf_header_impl+0x64>
 800c01a:	4b38      	ldr	r3, [pc, #224]	; (800c0fc <pbuf_header_impl+0x130>)
 800c01c:	f240 2247 	movw	r2, #583	; 0x247
 800c020:	4939      	ldr	r1, [pc, #228]	; (800c108 <pbuf_header_impl+0x13c>)
 800c022:	4838      	ldr	r0, [pc, #224]	; (800c104 <pbuf_header_impl+0x138>)
 800c024:	f00a fda8 	bl	8016b78 <iprintf>
 800c028:	2301      	movs	r3, #1
 800c02a:	e063      	b.n	800c0f4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800c02c:	887b      	ldrh	r3, [r7, #2]
 800c02e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	7b1b      	ldrb	r3, [r3, #12]
 800c034:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800c03c:	89bb      	ldrh	r3, [r7, #12]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d002      	beq.n	800c048 <pbuf_header_impl+0x7c>
 800c042:	89bb      	ldrh	r3, [r7, #12]
 800c044:	2b03      	cmp	r3, #3
 800c046:	d112      	bne.n	800c06e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c050:	425b      	negs	r3, r3
 800c052:	441a      	add	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685a      	ldr	r2, [r3, #4]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	3310      	adds	r3, #16
 800c060:	429a      	cmp	r2, r3
 800c062:	d238      	bcs.n	800c0d6 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e042      	b.n	800c0f4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800c06e:	89bb      	ldrh	r3, [r7, #12]
 800c070:	2b02      	cmp	r3, #2
 800c072:	d002      	beq.n	800c07a <pbuf_header_impl+0xae>
 800c074:	89bb      	ldrh	r3, [r7, #12]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d124      	bne.n	800c0c4 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c07a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	da0d      	bge.n	800c09e <pbuf_header_impl+0xd2>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	895b      	ldrh	r3, [r3, #10]
 800c086:	89fa      	ldrh	r2, [r7, #14]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d808      	bhi.n	800c09e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685a      	ldr	r2, [r3, #4]
 800c090:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c094:	425b      	negs	r3, r3
 800c096:	441a      	add	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	605a      	str	r2, [r3, #4]
 800c09c:	e011      	b.n	800c0c2 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800c09e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dd0b      	ble.n	800c0be <pbuf_header_impl+0xf2>
 800c0a6:	787b      	ldrb	r3, [r7, #1]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d008      	beq.n	800c0be <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685a      	ldr	r2, [r3, #4]
 800c0b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0b4:	425b      	negs	r3, r3
 800c0b6:	441a      	add	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	605a      	str	r2, [r3, #4]
 800c0bc:	e001      	b.n	800c0c2 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e018      	b.n	800c0f4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c0c2:	e008      	b.n	800c0d6 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800c0c4:	4b0d      	ldr	r3, [pc, #52]	; (800c0fc <pbuf_header_impl+0x130>)
 800c0c6:	f240 2277 	movw	r2, #631	; 0x277
 800c0ca:	4910      	ldr	r1, [pc, #64]	; (800c10c <pbuf_header_impl+0x140>)
 800c0cc:	480d      	ldr	r0, [pc, #52]	; (800c104 <pbuf_header_impl+0x138>)
 800c0ce:	f00a fd53 	bl	8016b78 <iprintf>
    return 1;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e00e      	b.n	800c0f4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	895a      	ldrh	r2, [r3, #10]
 800c0da:	887b      	ldrh	r3, [r7, #2]
 800c0dc:	4413      	add	r3, r2
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	891a      	ldrh	r2, [r3, #8]
 800c0e8:	887b      	ldrh	r3, [r7, #2]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	b29a      	uxth	r2, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	08018fb8 	.word	0x08018fb8
 800c100:	080191f0 	.word	0x080191f0
 800c104:	08019004 	.word	0x08019004
 800c108:	080191fc 	.word	0x080191fc
 800c10c:	0801921c 	.word	0x0801921c

0800c110 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	460b      	mov	r3, r1
 800c11a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800c11c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c120:	2200      	movs	r2, #0
 800c122:	4619      	mov	r1, r3
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f7ff ff51 	bl	800bfcc <pbuf_header_impl>
 800c12a:	4603      	mov	r3, r0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	460b      	mov	r3, r1
 800c13e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800c140:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c144:	2201      	movs	r2, #1
 800c146:	4619      	mov	r1, r3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7ff ff3f 	bl	800bfcc <pbuf_header_impl>
 800c14e:	4603      	mov	r3, r0
}
 800c150:	4618      	mov	r0, r3
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b088      	sub	sp, #32
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10b      	bne.n	800c17e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d106      	bne.n	800c17a <pbuf_free+0x22>
 800c16c:	4b41      	ldr	r3, [pc, #260]	; (800c274 <pbuf_free+0x11c>)
 800c16e:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c172:	4941      	ldr	r1, [pc, #260]	; (800c278 <pbuf_free+0x120>)
 800c174:	4841      	ldr	r0, [pc, #260]	; (800c27c <pbuf_free+0x124>)
 800c176:	f00a fcff 	bl	8016b78 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	e076      	b.n	800c26c <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	7b1b      	ldrb	r3, [r3, #12]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d012      	beq.n	800c1ac <pbuf_free+0x54>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	7b1b      	ldrb	r3, [r3, #12]
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d00e      	beq.n	800c1ac <pbuf_free+0x54>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	7b1b      	ldrb	r3, [r3, #12]
 800c192:	2b02      	cmp	r3, #2
 800c194:	d00a      	beq.n	800c1ac <pbuf_free+0x54>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	7b1b      	ldrb	r3, [r3, #12]
 800c19a:	2b03      	cmp	r3, #3
 800c19c:	d006      	beq.n	800c1ac <pbuf_free+0x54>
 800c19e:	4b35      	ldr	r3, [pc, #212]	; (800c274 <pbuf_free+0x11c>)
 800c1a0:	f240 22de 	movw	r2, #734	; 0x2de
 800c1a4:	4936      	ldr	r1, [pc, #216]	; (800c280 <pbuf_free+0x128>)
 800c1a6:	4835      	ldr	r0, [pc, #212]	; (800c27c <pbuf_free+0x124>)
 800c1a8:	f00a fce6 	bl	8016b78 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c1b0:	e058      	b.n	800c264 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c1b2:	f00a fc7d 	bl	8016ab0 <sys_arch_protect>
 800c1b6:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	89db      	ldrh	r3, [r3, #14]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d106      	bne.n	800c1ce <pbuf_free+0x76>
 800c1c0:	4b2c      	ldr	r3, [pc, #176]	; (800c274 <pbuf_free+0x11c>)
 800c1c2:	f240 22eb 	movw	r2, #747	; 0x2eb
 800c1c6:	492f      	ldr	r1, [pc, #188]	; (800c284 <pbuf_free+0x12c>)
 800c1c8:	482c      	ldr	r0, [pc, #176]	; (800c27c <pbuf_free+0x124>)
 800c1ca:	f00a fcd5 	bl	8016b78 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	89db      	ldrh	r3, [r3, #14]
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	81da      	strh	r2, [r3, #14]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	89db      	ldrh	r3, [r3, #14]
 800c1de:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800c1e0:	69b8      	ldr	r0, [r7, #24]
 800c1e2:	f00a fc73 	bl	8016acc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c1e6:	8afb      	ldrh	r3, [r7, #22]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d139      	bne.n	800c260 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	7b1b      	ldrb	r3, [r3, #12]
 800c1f6:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	7b5b      	ldrb	r3, [r3, #13]
 800c1fc:	f003 0302 	and.w	r3, r3, #2
 800c200:	2b00      	cmp	r3, #0
 800c202:	d011      	beq.n	800c228 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d106      	bne.n	800c21e <pbuf_free+0xc6>
 800c210:	4b18      	ldr	r3, [pc, #96]	; (800c274 <pbuf_free+0x11c>)
 800c212:	f240 22f9 	movw	r2, #761	; 0x2f9
 800c216:	491c      	ldr	r1, [pc, #112]	; (800c288 <pbuf_free+0x130>)
 800c218:	4818      	ldr	r0, [pc, #96]	; (800c27c <pbuf_free+0x124>)
 800c21a:	f00a fcad 	bl	8016b78 <iprintf>
        pc->custom_free_function(p);
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	4798      	blx	r3
 800c226:	e015      	b.n	800c254 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800c228:	89fb      	ldrh	r3, [r7, #14]
 800c22a:	2b03      	cmp	r3, #3
 800c22c:	d104      	bne.n	800c238 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800c22e:	6879      	ldr	r1, [r7, #4]
 800c230:	200c      	movs	r0, #12
 800c232:	f7ff fa2f 	bl	800b694 <memp_free>
 800c236:	e00d      	b.n	800c254 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800c238:	89fb      	ldrh	r3, [r7, #14]
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d002      	beq.n	800c244 <pbuf_free+0xec>
 800c23e:	89fb      	ldrh	r3, [r7, #14]
 800c240:	2b02      	cmp	r3, #2
 800c242:	d104      	bne.n	800c24e <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800c244:	6879      	ldr	r1, [r7, #4]
 800c246:	200b      	movs	r0, #11
 800c248:	f7ff fa24 	bl	800b694 <memp_free>
 800c24c:	e002      	b.n	800c254 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7fe ff06 	bl	800b060 <mem_free>
        }
      }
      count++;
 800c254:	7ffb      	ldrb	r3, [r7, #31]
 800c256:	3301      	adds	r3, #1
 800c258:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	607b      	str	r3, [r7, #4]
 800c25e:	e001      	b.n	800c264 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800c260:	2300      	movs	r3, #0
 800c262:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1a3      	bne.n	800c1b2 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c26a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3720      	adds	r7, #32
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	08018fb8 	.word	0x08018fb8
 800c278:	080191f0 	.word	0x080191f0
 800c27c:	08019004 	.word	0x08019004
 800c280:	0801922c 	.word	0x0801922c
 800c284:	08019244 	.word	0x08019244
 800c288:	0801925c 	.word	0x0801925c

0800c28c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c298:	e005      	b.n	800c2a6 <pbuf_clen+0x1a>
    ++len;
 800c29a:	89fb      	ldrh	r3, [r7, #14]
 800c29c:	3301      	adds	r3, #1
 800c29e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d1f6      	bne.n	800c29a <pbuf_clen+0xe>
  }
  return len;
 800c2ac:	89fb      	ldrh	r3, [r7, #14]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3714      	adds	r7, #20
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr
	...

0800c2bc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d016      	beq.n	800c2f8 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800c2ca:	f00a fbf1 	bl	8016ab0 <sys_arch_protect>
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	89db      	ldrh	r3, [r3, #14]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	81da      	strh	r2, [r3, #14]
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f00a fbf5 	bl	8016acc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	89db      	ldrh	r3, [r3, #14]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d106      	bne.n	800c2f8 <pbuf_ref+0x3c>
 800c2ea:	4b05      	ldr	r3, [pc, #20]	; (800c300 <pbuf_ref+0x44>)
 800c2ec:	f240 3239 	movw	r2, #825	; 0x339
 800c2f0:	4904      	ldr	r1, [pc, #16]	; (800c304 <pbuf_ref+0x48>)
 800c2f2:	4805      	ldr	r0, [pc, #20]	; (800c308 <pbuf_ref+0x4c>)
 800c2f4:	f00a fc40 	bl	8016b78 <iprintf>
  }
}
 800c2f8:	bf00      	nop
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	08018fb8 	.word	0x08018fb8
 800c304:	08019280 	.word	0x08019280
 800c308:	08019004 	.word	0x08019004

0800c30c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <pbuf_cat+0x16>
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d107      	bne.n	800c332 <pbuf_cat+0x26>
 800c322:	4b20      	ldr	r3, [pc, #128]	; (800c3a4 <pbuf_cat+0x98>)
 800c324:	f240 324d 	movw	r2, #845	; 0x34d
 800c328:	491f      	ldr	r1, [pc, #124]	; (800c3a8 <pbuf_cat+0x9c>)
 800c32a:	4820      	ldr	r0, [pc, #128]	; (800c3ac <pbuf_cat+0xa0>)
 800c32c:	f00a fc24 	bl	8016b78 <iprintf>
 800c330:	e034      	b.n	800c39c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	60fb      	str	r3, [r7, #12]
 800c336:	e00a      	b.n	800c34e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	891a      	ldrh	r2, [r3, #8]
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	891b      	ldrh	r3, [r3, #8]
 800c340:	4413      	add	r3, r2
 800c342:	b29a      	uxth	r2, r3
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	60fb      	str	r3, [r7, #12]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1f0      	bne.n	800c338 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	891a      	ldrh	r2, [r3, #8]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	895b      	ldrh	r3, [r3, #10]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d006      	beq.n	800c370 <pbuf_cat+0x64>
 800c362:	4b10      	ldr	r3, [pc, #64]	; (800c3a4 <pbuf_cat+0x98>)
 800c364:	f240 3255 	movw	r2, #853	; 0x355
 800c368:	4911      	ldr	r1, [pc, #68]	; (800c3b0 <pbuf_cat+0xa4>)
 800c36a:	4810      	ldr	r0, [pc, #64]	; (800c3ac <pbuf_cat+0xa0>)
 800c36c:	f00a fc04 	bl	8016b78 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d006      	beq.n	800c386 <pbuf_cat+0x7a>
 800c378:	4b0a      	ldr	r3, [pc, #40]	; (800c3a4 <pbuf_cat+0x98>)
 800c37a:	f240 3256 	movw	r2, #854	; 0x356
 800c37e:	490d      	ldr	r1, [pc, #52]	; (800c3b4 <pbuf_cat+0xa8>)
 800c380:	480a      	ldr	r0, [pc, #40]	; (800c3ac <pbuf_cat+0xa0>)
 800c382:	f00a fbf9 	bl	8016b78 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	891a      	ldrh	r2, [r3, #8]
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	891b      	ldrh	r3, [r3, #8]
 800c38e:	4413      	add	r3, r2
 800c390:	b29a      	uxth	r2, r3
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	08018fb8 	.word	0x08018fb8
 800c3a8:	08019294 	.word	0x08019294
 800c3ac:	08019004 	.word	0x08019004
 800c3b0:	080192cc 	.word	0x080192cc
 800c3b4:	080192fc 	.word	0x080192fc

0800c3b8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7ff ffa1 	bl	800c30c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c3ca:	6838      	ldr	r0, [r7, #0]
 800c3cc:	f7ff ff76 	bl	800c2bc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c3d0:	bf00      	nop
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	81fb      	strh	r3, [r7, #14]
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d008      	beq.n	800c402 <pbuf_copy+0x2a>
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d005      	beq.n	800c402 <pbuf_copy+0x2a>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	891a      	ldrh	r2, [r3, #8]
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	891b      	ldrh	r3, [r3, #8]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d209      	bcs.n	800c416 <pbuf_copy+0x3e>
 800c402:	4b54      	ldr	r3, [pc, #336]	; (800c554 <pbuf_copy+0x17c>)
 800c404:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c408:	4953      	ldr	r1, [pc, #332]	; (800c558 <pbuf_copy+0x180>)
 800c40a:	4854      	ldr	r0, [pc, #336]	; (800c55c <pbuf_copy+0x184>)
 800c40c:	f00a fbb4 	bl	8016b78 <iprintf>
 800c410:	f06f 030f 	mvn.w	r3, #15
 800c414:	e099      	b.n	800c54a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	895b      	ldrh	r3, [r3, #10]
 800c41a:	461a      	mov	r2, r3
 800c41c:	89fb      	ldrh	r3, [r7, #14]
 800c41e:	1ad2      	subs	r2, r2, r3
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	895b      	ldrh	r3, [r3, #10]
 800c424:	4619      	mov	r1, r3
 800c426:	89bb      	ldrh	r3, [r7, #12]
 800c428:	1acb      	subs	r3, r1, r3
 800c42a:	429a      	cmp	r2, r3
 800c42c:	db05      	blt.n	800c43a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	895a      	ldrh	r2, [r3, #10]
 800c432:	89bb      	ldrh	r3, [r7, #12]
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	817b      	strh	r3, [r7, #10]
 800c438:	e004      	b.n	800c444 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	895a      	ldrh	r2, [r3, #10]
 800c43e:	89fb      	ldrh	r3, [r7, #14]
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	89fb      	ldrh	r3, [r7, #14]
 800c44a:	18d0      	adds	r0, r2, r3
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	685a      	ldr	r2, [r3, #4]
 800c450:	89bb      	ldrh	r3, [r7, #12]
 800c452:	4413      	add	r3, r2
 800c454:	897a      	ldrh	r2, [r7, #10]
 800c456:	4619      	mov	r1, r3
 800c458:	f00a fb7b 	bl	8016b52 <memcpy>
    offset_to += len;
 800c45c:	89fa      	ldrh	r2, [r7, #14]
 800c45e:	897b      	ldrh	r3, [r7, #10]
 800c460:	4413      	add	r3, r2
 800c462:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800c464:	89ba      	ldrh	r2, [r7, #12]
 800c466:	897b      	ldrh	r3, [r7, #10]
 800c468:	4413      	add	r3, r2
 800c46a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	895b      	ldrh	r3, [r3, #10]
 800c470:	89fa      	ldrh	r2, [r7, #14]
 800c472:	429a      	cmp	r2, r3
 800c474:	d906      	bls.n	800c484 <pbuf_copy+0xac>
 800c476:	4b37      	ldr	r3, [pc, #220]	; (800c554 <pbuf_copy+0x17c>)
 800c478:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c47c:	4938      	ldr	r1, [pc, #224]	; (800c560 <pbuf_copy+0x188>)
 800c47e:	4837      	ldr	r0, [pc, #220]	; (800c55c <pbuf_copy+0x184>)
 800c480:	f00a fb7a 	bl	8016b78 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	895b      	ldrh	r3, [r3, #10]
 800c488:	89ba      	ldrh	r2, [r7, #12]
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d906      	bls.n	800c49c <pbuf_copy+0xc4>
 800c48e:	4b31      	ldr	r3, [pc, #196]	; (800c554 <pbuf_copy+0x17c>)
 800c490:	f240 32ce 	movw	r2, #974	; 0x3ce
 800c494:	4933      	ldr	r1, [pc, #204]	; (800c564 <pbuf_copy+0x18c>)
 800c496:	4831      	ldr	r0, [pc, #196]	; (800c55c <pbuf_copy+0x184>)
 800c498:	f00a fb6e 	bl	8016b78 <iprintf>
    if (offset_from >= p_from->len) {
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	895b      	ldrh	r3, [r3, #10]
 800c4a0:	89ba      	ldrh	r2, [r7, #12]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d304      	bcc.n	800c4b0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	895b      	ldrh	r3, [r3, #10]
 800c4b4:	89fa      	ldrh	r2, [r7, #14]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d114      	bne.n	800c4e4 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d10c      	bne.n	800c4e4 <pbuf_copy+0x10c>
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d009      	beq.n	800c4e4 <pbuf_copy+0x10c>
 800c4d0:	4b20      	ldr	r3, [pc, #128]	; (800c554 <pbuf_copy+0x17c>)
 800c4d2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c4d6:	4924      	ldr	r1, [pc, #144]	; (800c568 <pbuf_copy+0x190>)
 800c4d8:	4820      	ldr	r0, [pc, #128]	; (800c55c <pbuf_copy+0x184>)
 800c4da:	f00a fb4d 	bl	8016b78 <iprintf>
 800c4de:	f06f 030f 	mvn.w	r3, #15
 800c4e2:	e032      	b.n	800c54a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d013      	beq.n	800c512 <pbuf_copy+0x13a>
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	895a      	ldrh	r2, [r3, #10]
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	891b      	ldrh	r3, [r3, #8]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d10d      	bne.n	800c512 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d009      	beq.n	800c512 <pbuf_copy+0x13a>
 800c4fe:	4b15      	ldr	r3, [pc, #84]	; (800c554 <pbuf_copy+0x17c>)
 800c500:	f240 32de 	movw	r2, #990	; 0x3de
 800c504:	4919      	ldr	r1, [pc, #100]	; (800c56c <pbuf_copy+0x194>)
 800c506:	4815      	ldr	r0, [pc, #84]	; (800c55c <pbuf_copy+0x184>)
 800c508:	f00a fb36 	bl	8016b78 <iprintf>
 800c50c:	f06f 0305 	mvn.w	r3, #5
 800c510:	e01b      	b.n	800c54a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d013      	beq.n	800c540 <pbuf_copy+0x168>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	895a      	ldrh	r2, [r3, #10]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	891b      	ldrh	r3, [r3, #8]
 800c520:	429a      	cmp	r2, r3
 800c522:	d10d      	bne.n	800c540 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d009      	beq.n	800c540 <pbuf_copy+0x168>
 800c52c:	4b09      	ldr	r3, [pc, #36]	; (800c554 <pbuf_copy+0x17c>)
 800c52e:	f240 32e3 	movw	r2, #995	; 0x3e3
 800c532:	490e      	ldr	r1, [pc, #56]	; (800c56c <pbuf_copy+0x194>)
 800c534:	4809      	ldr	r0, [pc, #36]	; (800c55c <pbuf_copy+0x184>)
 800c536:	f00a fb1f 	bl	8016b78 <iprintf>
 800c53a:	f06f 0305 	mvn.w	r3, #5
 800c53e:	e004      	b.n	800c54a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	f47f af67 	bne.w	800c416 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	08018fb8 	.word	0x08018fb8
 800c558:	08019348 	.word	0x08019348
 800c55c:	08019004 	.word	0x08019004
 800c560:	08019378 	.word	0x08019378
 800c564:	08019390 	.word	0x08019390
 800c568:	080193ac 	.word	0x080193ac
 800c56c:	080193bc 	.word	0x080193bc

0800c570 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b088      	sub	sp, #32
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	4611      	mov	r1, r2
 800c57c:	461a      	mov	r2, r3
 800c57e:	460b      	mov	r3, r1
 800c580:	80fb      	strh	r3, [r7, #6]
 800c582:	4613      	mov	r3, r2
 800c584:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c586:	2300      	movs	r3, #0
 800c588:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d108      	bne.n	800c5a2 <pbuf_copy_partial+0x32>
 800c590:	4b30      	ldr	r3, [pc, #192]	; (800c654 <pbuf_copy_partial+0xe4>)
 800c592:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800c596:	4930      	ldr	r1, [pc, #192]	; (800c658 <pbuf_copy_partial+0xe8>)
 800c598:	4830      	ldr	r0, [pc, #192]	; (800c65c <pbuf_copy_partial+0xec>)
 800c59a:	f00a faed 	bl	8016b78 <iprintf>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	e054      	b.n	800c64c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d108      	bne.n	800c5ba <pbuf_copy_partial+0x4a>
 800c5a8:	4b2a      	ldr	r3, [pc, #168]	; (800c654 <pbuf_copy_partial+0xe4>)
 800c5aa:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c5ae:	492c      	ldr	r1, [pc, #176]	; (800c660 <pbuf_copy_partial+0xf0>)
 800c5b0:	482a      	ldr	r0, [pc, #168]	; (800c65c <pbuf_copy_partial+0xec>)
 800c5b2:	f00a fae1 	bl	8016b78 <iprintf>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	e048      	b.n	800c64c <pbuf_copy_partial+0xdc>

  left = 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d002      	beq.n	800c5ca <pbuf_copy_partial+0x5a>
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d101      	bne.n	800c5ce <pbuf_copy_partial+0x5e>
    return 0;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	e03e      	b.n	800c64c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	61fb      	str	r3, [r7, #28]
 800c5d2:	e034      	b.n	800c63e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800c5d4:	88bb      	ldrh	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00a      	beq.n	800c5f0 <pbuf_copy_partial+0x80>
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	895b      	ldrh	r3, [r3, #10]
 800c5de:	88ba      	ldrh	r2, [r7, #4]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d305      	bcc.n	800c5f0 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	895b      	ldrh	r3, [r3, #10]
 800c5e8:	88ba      	ldrh	r2, [r7, #4]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	80bb      	strh	r3, [r7, #4]
 800c5ee:	e023      	b.n	800c638 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	895a      	ldrh	r2, [r3, #10]
 800c5f4:	88bb      	ldrh	r3, [r7, #4]
 800c5f6:	1ad3      	subs	r3, r2, r3
 800c5f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c5fa:	8b3a      	ldrh	r2, [r7, #24]
 800c5fc:	88fb      	ldrh	r3, [r7, #6]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d901      	bls.n	800c606 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800c602:	88fb      	ldrh	r3, [r7, #6]
 800c604:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800c606:	8b7b      	ldrh	r3, [r7, #26]
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	18d0      	adds	r0, r2, r3
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	685a      	ldr	r2, [r3, #4]
 800c610:	88bb      	ldrh	r3, [r7, #4]
 800c612:	4413      	add	r3, r2
 800c614:	8b3a      	ldrh	r2, [r7, #24]
 800c616:	4619      	mov	r1, r3
 800c618:	f00a fa9b 	bl	8016b52 <memcpy>
      copied_total += buf_copy_len;
 800c61c:	8afa      	ldrh	r2, [r7, #22]
 800c61e:	8b3b      	ldrh	r3, [r7, #24]
 800c620:	4413      	add	r3, r2
 800c622:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800c624:	8b7a      	ldrh	r2, [r7, #26]
 800c626:	8b3b      	ldrh	r3, [r7, #24]
 800c628:	4413      	add	r3, r2
 800c62a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800c62c:	88fa      	ldrh	r2, [r7, #6]
 800c62e:	8b3b      	ldrh	r3, [r7, #24]
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c634:	2300      	movs	r3, #0
 800c636:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	61fb      	str	r3, [r7, #28]
 800c63e:	88fb      	ldrh	r3, [r7, #6]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d002      	beq.n	800c64a <pbuf_copy_partial+0xda>
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1c4      	bne.n	800c5d4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800c64a:	8afb      	ldrh	r3, [r7, #22]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3720      	adds	r7, #32
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	08018fb8 	.word	0x08018fb8
 800c658:	080193e8 	.word	0x080193e8
 800c65c:	08019004 	.word	0x08019004
 800c660:	08019408 	.word	0x08019408

0800c664 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c664:	b480      	push	{r7}
 800c666:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800c668:	bf00      	nop
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
	...

0800c674 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c678:	f000 ffc8 	bl	800d60c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c67c:	4b07      	ldr	r3, [pc, #28]	; (800c69c <tcp_tmr+0x28>)
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	3301      	adds	r3, #1
 800c682:	b2da      	uxtb	r2, r3
 800c684:	4b05      	ldr	r3, [pc, #20]	; (800c69c <tcp_tmr+0x28>)
 800c686:	701a      	strb	r2, [r3, #0]
 800c688:	4b04      	ldr	r3, [pc, #16]	; (800c69c <tcp_tmr+0x28>)
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	f003 0301 	and.w	r3, r3, #1
 800c690:	2b00      	cmp	r3, #0
 800c692:	d001      	beq.n	800c698 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c694:	f000 fcfa 	bl	800d08c <tcp_slowtmr>
  }
}
 800c698:	bf00      	nop
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	20008c3d 	.word	0x20008c3d

0800c6a0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	60fb      	str	r3, [r7, #12]
 800c6ae:	e00a      	b.n	800c6c6 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6b4:	683a      	ldr	r2, [r7, #0]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d102      	bne.n	800c6c0 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	60fb      	str	r3, [r7, #12]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1f1      	bne.n	800c6b0 <tcp_remove_listener+0x10>
      }
   }
}
 800c6cc:	bf00      	nop
 800c6ce:	3714      	adds	r7, #20
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d105      	bne.n	800c6f2 <tcp_listen_closed+0x1a>
 800c6e6:	4b13      	ldr	r3, [pc, #76]	; (800c734 <tcp_listen_closed+0x5c>)
 800c6e8:	22c0      	movs	r2, #192	; 0xc0
 800c6ea:	4913      	ldr	r1, [pc, #76]	; (800c738 <tcp_listen_closed+0x60>)
 800c6ec:	4813      	ldr	r0, [pc, #76]	; (800c73c <tcp_listen_closed+0x64>)
 800c6ee:	f00a fa43 	bl	8016b78 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	7d1b      	ldrb	r3, [r3, #20]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d005      	beq.n	800c706 <tcp_listen_closed+0x2e>
 800c6fa:	4b0e      	ldr	r3, [pc, #56]	; (800c734 <tcp_listen_closed+0x5c>)
 800c6fc:	22c1      	movs	r2, #193	; 0xc1
 800c6fe:	4910      	ldr	r1, [pc, #64]	; (800c740 <tcp_listen_closed+0x68>)
 800c700:	480e      	ldr	r0, [pc, #56]	; (800c73c <tcp_listen_closed+0x64>)
 800c702:	f00a fa39 	bl	8016b78 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c706:	2301      	movs	r3, #1
 800c708:	60fb      	str	r3, [r7, #12]
 800c70a:	e00b      	b.n	800c724 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800c70c:	4a0d      	ldr	r2, [pc, #52]	; (800c744 <tcp_listen_closed+0x6c>)
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	6879      	ldr	r1, [r7, #4]
 800c718:	4618      	mov	r0, r3
 800c71a:	f7ff ffc1 	bl	800c6a0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	3301      	adds	r3, #1
 800c722:	60fb      	str	r3, [r7, #12]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2b03      	cmp	r3, #3
 800c728:	d9f0      	bls.n	800c70c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c72a:	bf00      	nop
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	0801953c 	.word	0x0801953c
 800c738:	0801956c 	.word	0x0801956c
 800c73c:	08019578 	.word	0x08019578
 800c740:	080195a0 	.word	0x080195a0
 800c744:	0802629c 	.word	0x0802629c

0800c748 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c748:	b5b0      	push	{r4, r5, r7, lr}
 800c74a:	b086      	sub	sp, #24
 800c74c:	af02      	add	r7, sp, #8
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	460b      	mov	r3, r1
 800c752:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c754:	78fb      	ldrb	r3, [r7, #3]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d075      	beq.n	800c846 <tcp_close_shutdown+0xfe>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	7d1b      	ldrb	r3, [r3, #20]
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d003      	beq.n	800c76a <tcp_close_shutdown+0x22>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	7d1b      	ldrb	r3, [r3, #20]
 800c766:	2b07      	cmp	r3, #7
 800c768:	d16d      	bne.n	800c846 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d104      	bne.n	800c77c <tcp_close_shutdown+0x34>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c776:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c77a:	d064      	beq.n	800c846 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	7e9b      	ldrb	r3, [r3, #26]
 800c780:	f003 0310 	and.w	r3, r3, #16
 800c784:	2b00      	cmp	r3, #0
 800c786:	d106      	bne.n	800c796 <tcp_close_shutdown+0x4e>
 800c788:	4b59      	ldr	r3, [pc, #356]	; (800c8f0 <tcp_close_shutdown+0x1a8>)
 800c78a:	f240 120f 	movw	r2, #271	; 0x10f
 800c78e:	4959      	ldr	r1, [pc, #356]	; (800c8f4 <tcp_close_shutdown+0x1ac>)
 800c790:	4859      	ldr	r0, [pc, #356]	; (800c8f8 <tcp_close_shutdown+0x1b0>)
 800c792:	f00a f9f1 	bl	8016b78 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c79e:	687c      	ldr	r4, [r7, #4]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	1d1d      	adds	r5, r3, #4
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	8adb      	ldrh	r3, [r3, #22]
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	8b12      	ldrh	r2, [r2, #24]
 800c7ac:	9201      	str	r2, [sp, #4]
 800c7ae:	9300      	str	r3, [sp, #0]
 800c7b0:	462b      	mov	r3, r5
 800c7b2:	4622      	mov	r2, r4
 800c7b4:	f004 ff3a 	bl	801162c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f001 fa6b 	bl	800dc94 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c7be:	4b4f      	ldr	r3, [pc, #316]	; (800c8fc <tcp_close_shutdown+0x1b4>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d105      	bne.n	800c7d4 <tcp_close_shutdown+0x8c>
 800c7c8:	4b4c      	ldr	r3, [pc, #304]	; (800c8fc <tcp_close_shutdown+0x1b4>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	4a4b      	ldr	r2, [pc, #300]	; (800c8fc <tcp_close_shutdown+0x1b4>)
 800c7d0:	6013      	str	r3, [r2, #0]
 800c7d2:	e013      	b.n	800c7fc <tcp_close_shutdown+0xb4>
 800c7d4:	4b49      	ldr	r3, [pc, #292]	; (800c8fc <tcp_close_shutdown+0x1b4>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	60fb      	str	r3, [r7, #12]
 800c7da:	e00c      	b.n	800c7f6 <tcp_close_shutdown+0xae>
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d104      	bne.n	800c7f0 <tcp_close_shutdown+0xa8>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	68da      	ldr	r2, [r3, #12]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	60da      	str	r2, [r3, #12]
 800c7ee:	e005      	b.n	800c7fc <tcp_close_shutdown+0xb4>
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	60fb      	str	r3, [r7, #12]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1ef      	bne.n	800c7dc <tcp_close_shutdown+0x94>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	60da      	str	r2, [r3, #12]
 800c802:	4b3f      	ldr	r3, [pc, #252]	; (800c900 <tcp_close_shutdown+0x1b8>)
 800c804:	2201      	movs	r2, #1
 800c806:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	7d1b      	ldrb	r3, [r3, #20]
 800c80c:	2b04      	cmp	r3, #4
 800c80e:	d10c      	bne.n	800c82a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	220a      	movs	r2, #10
 800c814:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c816:	4b3b      	ldr	r3, [pc, #236]	; (800c904 <tcp_close_shutdown+0x1bc>)
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	60da      	str	r2, [r3, #12]
 800c81e:	4a39      	ldr	r2, [pc, #228]	; (800c904 <tcp_close_shutdown+0x1bc>)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6013      	str	r3, [r2, #0]
 800c824:	f005 f952 	bl	8011acc <tcp_timer_needed>
 800c828:	e00b      	b.n	800c842 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800c82a:	4b37      	ldr	r3, [pc, #220]	; (800c908 <tcp_close_shutdown+0x1c0>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	429a      	cmp	r2, r3
 800c832:	d102      	bne.n	800c83a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800c834:	f003 fd92 	bl	801035c <tcp_trigger_input_pcb_close>
 800c838:	e003      	b.n	800c842 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800c83a:	6879      	ldr	r1, [r7, #4]
 800c83c:	2001      	movs	r0, #1
 800c83e:	f7fe ff29 	bl	800b694 <memp_free>
        }
      }
      return ERR_OK;
 800c842:	2300      	movs	r3, #0
 800c844:	e050      	b.n	800c8e8 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	7d1b      	ldrb	r3, [r3, #20]
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d02e      	beq.n	800c8ac <tcp_close_shutdown+0x164>
 800c84e:	2b02      	cmp	r3, #2
 800c850:	d038      	beq.n	800c8c4 <tcp_close_shutdown+0x17c>
 800c852:	2b00      	cmp	r3, #0
 800c854:	d142      	bne.n	800c8dc <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	8adb      	ldrh	r3, [r3, #22]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d021      	beq.n	800c8a2 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800c85e:	4b2b      	ldr	r3, [pc, #172]	; (800c90c <tcp_close_shutdown+0x1c4>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	429a      	cmp	r2, r3
 800c866:	d105      	bne.n	800c874 <tcp_close_shutdown+0x12c>
 800c868:	4b28      	ldr	r3, [pc, #160]	; (800c90c <tcp_close_shutdown+0x1c4>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	4a27      	ldr	r2, [pc, #156]	; (800c90c <tcp_close_shutdown+0x1c4>)
 800c870:	6013      	str	r3, [r2, #0]
 800c872:	e013      	b.n	800c89c <tcp_close_shutdown+0x154>
 800c874:	4b25      	ldr	r3, [pc, #148]	; (800c90c <tcp_close_shutdown+0x1c4>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	60bb      	str	r3, [r7, #8]
 800c87a:	e00c      	b.n	800c896 <tcp_close_shutdown+0x14e>
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	429a      	cmp	r2, r3
 800c884:	d104      	bne.n	800c890 <tcp_close_shutdown+0x148>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	68da      	ldr	r2, [r3, #12]
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	60da      	str	r2, [r3, #12]
 800c88e:	e005      	b.n	800c89c <tcp_close_shutdown+0x154>
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	60bb      	str	r3, [r7, #8]
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1ef      	bne.n	800c87c <tcp_close_shutdown+0x134>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800c8a2:	6879      	ldr	r1, [r7, #4]
 800c8a4:	2001      	movs	r0, #1
 800c8a6:	f7fe fef5 	bl	800b694 <memp_free>
    break;
 800c8aa:	e01c      	b.n	800c8e6 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f7ff ff13 	bl	800c6d8 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c8b2:	6879      	ldr	r1, [r7, #4]
 800c8b4:	4816      	ldr	r0, [pc, #88]	; (800c910 <tcp_close_shutdown+0x1c8>)
 800c8b6:	f001 fa2f 	bl	800dd18 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c8ba:	6879      	ldr	r1, [r7, #4]
 800c8bc:	2002      	movs	r0, #2
 800c8be:	f7fe fee9 	bl	800b694 <memp_free>
    break;
 800c8c2:	e010      	b.n	800c8e6 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800c8c4:	6879      	ldr	r1, [r7, #4]
 800c8c6:	480d      	ldr	r0, [pc, #52]	; (800c8fc <tcp_close_shutdown+0x1b4>)
 800c8c8:	f001 fa26 	bl	800dd18 <tcp_pcb_remove>
 800c8cc:	4b0c      	ldr	r3, [pc, #48]	; (800c900 <tcp_close_shutdown+0x1b8>)
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800c8d2:	6879      	ldr	r1, [r7, #4]
 800c8d4:	2001      	movs	r0, #1
 800c8d6:	f7fe fedd 	bl	800b694 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800c8da:	e004      	b.n	800c8e6 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f819 	bl	800c914 <tcp_close_shutdown_fin>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	e000      	b.n	800c8e8 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3710      	adds	r7, #16
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bdb0      	pop	{r4, r5, r7, pc}
 800c8f0:	0801953c 	.word	0x0801953c
 800c8f4:	080195b8 	.word	0x080195b8
 800c8f8:	08019578 	.word	0x08019578
 800c8fc:	2000fad4 	.word	0x2000fad4
 800c900:	2000fad0 	.word	0x2000fad0
 800c904:	2000fae4 	.word	0x2000fae4
 800c908:	2000fae8 	.word	0x2000fae8
 800c90c:	2000fae0 	.word	0x2000fae0
 800c910:	2000fadc 	.word	0x2000fadc

0800c914 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d106      	bne.n	800c930 <tcp_close_shutdown_fin+0x1c>
 800c922:	4b2c      	ldr	r3, [pc, #176]	; (800c9d4 <tcp_close_shutdown_fin+0xc0>)
 800c924:	f240 124d 	movw	r2, #333	; 0x14d
 800c928:	492b      	ldr	r1, [pc, #172]	; (800c9d8 <tcp_close_shutdown_fin+0xc4>)
 800c92a:	482c      	ldr	r0, [pc, #176]	; (800c9dc <tcp_close_shutdown_fin+0xc8>)
 800c92c:	f00a f924 	bl	8016b78 <iprintf>

  switch (pcb->state) {
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	7d1b      	ldrb	r3, [r3, #20]
 800c934:	2b04      	cmp	r3, #4
 800c936:	d010      	beq.n	800c95a <tcp_close_shutdown_fin+0x46>
 800c938:	2b07      	cmp	r3, #7
 800c93a:	d01b      	beq.n	800c974 <tcp_close_shutdown_fin+0x60>
 800c93c:	2b03      	cmp	r3, #3
 800c93e:	d126      	bne.n	800c98e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f003 fd97 	bl	8010474 <tcp_send_fin>
 800c946:	4603      	mov	r3, r0
 800c948:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d11f      	bne.n	800c992 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2205      	movs	r2, #5
 800c956:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c958:	e01b      	b.n	800c992 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f003 fd8a 	bl	8010474 <tcp_send_fin>
 800c960:	4603      	mov	r3, r0
 800c962:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d114      	bne.n	800c996 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2205      	movs	r2, #5
 800c970:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c972:	e010      	b.n	800c996 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f003 fd7d 	bl	8010474 <tcp_send_fin>
 800c97a:	4603      	mov	r3, r0
 800c97c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c97e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d109      	bne.n	800c99a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2209      	movs	r2, #9
 800c98a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c98c:	e005      	b.n	800c99a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800c98e:	2300      	movs	r3, #0
 800c990:	e01c      	b.n	800c9cc <tcp_close_shutdown_fin+0xb8>
    break;
 800c992:	bf00      	nop
 800c994:	e002      	b.n	800c99c <tcp_close_shutdown_fin+0x88>
    break;
 800c996:	bf00      	nop
 800c998:	e000      	b.n	800c99c <tcp_close_shutdown_fin+0x88>
    break;
 800c99a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c99c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d103      	bne.n	800c9ac <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f004 fbb7 	bl	8011118 <tcp_output>
 800c9aa:	e00d      	b.n	800c9c8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800c9ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b4:	d108      	bne.n	800c9c8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	7e9b      	ldrb	r3, [r3, #26]
 800c9ba:	f043 0308 	orr.w	r3, r3, #8
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	e001      	b.n	800c9cc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800c9c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3710      	adds	r7, #16
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	0801953c 	.word	0x0801953c
 800c9d8:	0801956c 	.word	0x0801956c
 800c9dc:	08019578 	.word	0x08019578

0800c9e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	7d1b      	ldrb	r3, [r3, #20]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d006      	beq.n	800c9fe <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	7e9b      	ldrb	r3, [r3, #26]
 800c9f4:	f043 0310 	orr.w	r3, r3, #16
 800c9f8:	b2da      	uxtb	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c9fe:	2101      	movs	r1, #1
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f7ff fea1 	bl	800c748 <tcp_close_shutdown>
 800ca06:	4603      	mov	r3, r0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	7d1b      	ldrb	r3, [r3, #20]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d102      	bne.n	800ca2a <tcp_shutdown+0x1a>
    return ERR_CONN;
 800ca24:	f06f 030a 	mvn.w	r3, #10
 800ca28:	e035      	b.n	800ca96 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d01b      	beq.n	800ca68 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	7e9b      	ldrb	r3, [r3, #26]
 800ca34:	f043 0310 	orr.w	r3, r3, #16
 800ca38:	b2da      	uxtb	r2, r3
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d005      	beq.n	800ca50 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ca44:	2101      	movs	r1, #1
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f7ff fe7e 	bl	800c748 <tcp_close_shutdown>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	e022      	b.n	800ca96 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d007      	beq.n	800ca68 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7ff fb7b 	bl	800c158 <pbuf_free>
      pcb->refused_data = NULL;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2200      	movs	r2, #0
 800ca66:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d012      	beq.n	800ca94 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	7d1b      	ldrb	r3, [r3, #20]
 800ca72:	2b03      	cmp	r3, #3
 800ca74:	db0b      	blt.n	800ca8e <tcp_shutdown+0x7e>
 800ca76:	2b04      	cmp	r3, #4
 800ca78:	dd01      	ble.n	800ca7e <tcp_shutdown+0x6e>
 800ca7a:	2b07      	cmp	r3, #7
 800ca7c:	d107      	bne.n	800ca8e <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	4619      	mov	r1, r3
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f7ff fe5f 	bl	800c748 <tcp_close_shutdown>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	e003      	b.n	800ca96 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800ca8e:	f06f 030a 	mvn.w	r3, #10
 800ca92:	e000      	b.n	800ca96 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
	...

0800caa0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b08c      	sub	sp, #48	; 0x30
 800caa4:	af02      	add	r7, sp, #8
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	7d1b      	ldrb	r3, [r3, #20]
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d106      	bne.n	800cac0 <tcp_abandon+0x20>
 800cab2:	4b4d      	ldr	r3, [pc, #308]	; (800cbe8 <tcp_abandon+0x148>)
 800cab4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cab8:	494c      	ldr	r1, [pc, #304]	; (800cbec <tcp_abandon+0x14c>)
 800caba:	484d      	ldr	r0, [pc, #308]	; (800cbf0 <tcp_abandon+0x150>)
 800cabc:	f00a f85c 	bl	8016b78 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	7d1b      	ldrb	r3, [r3, #20]
 800cac4:	2b0a      	cmp	r3, #10
 800cac6:	d108      	bne.n	800cada <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cac8:	6879      	ldr	r1, [r7, #4]
 800caca:	484a      	ldr	r0, [pc, #296]	; (800cbf4 <tcp_abandon+0x154>)
 800cacc:	f001 f924 	bl	800dd18 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800cad0:	6879      	ldr	r1, [r7, #4]
 800cad2:	2001      	movs	r0, #1
 800cad4:	f7fe fdde 	bl	800b694 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800cad8:	e081      	b.n	800cbde <tcp_abandon+0x13e>
    int send_rst = 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cade:	2300      	movs	r3, #0
 800cae0:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cae6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caec:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caf4:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	691b      	ldr	r3, [r3, #16]
 800cafa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	7d1b      	ldrb	r3, [r3, #20]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d126      	bne.n	800cb52 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	8adb      	ldrh	r3, [r3, #22]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d02e      	beq.n	800cb6a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cb0c:	4b3a      	ldr	r3, [pc, #232]	; (800cbf8 <tcp_abandon+0x158>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d105      	bne.n	800cb22 <tcp_abandon+0x82>
 800cb16:	4b38      	ldr	r3, [pc, #224]	; (800cbf8 <tcp_abandon+0x158>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	4a36      	ldr	r2, [pc, #216]	; (800cbf8 <tcp_abandon+0x158>)
 800cb1e:	6013      	str	r3, [r2, #0]
 800cb20:	e013      	b.n	800cb4a <tcp_abandon+0xaa>
 800cb22:	4b35      	ldr	r3, [pc, #212]	; (800cbf8 <tcp_abandon+0x158>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	61fb      	str	r3, [r7, #28]
 800cb28:	e00c      	b.n	800cb44 <tcp_abandon+0xa4>
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d104      	bne.n	800cb3e <tcp_abandon+0x9e>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	68da      	ldr	r2, [r3, #12]
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	60da      	str	r2, [r3, #12]
 800cb3c:	e005      	b.n	800cb4a <tcp_abandon+0xaa>
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	61fb      	str	r3, [r7, #28]
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1ef      	bne.n	800cb2a <tcp_abandon+0x8a>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	60da      	str	r2, [r3, #12]
 800cb50:	e00b      	b.n	800cb6a <tcp_abandon+0xca>
      send_rst = reset;
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	8adb      	ldrh	r3, [r3, #22]
 800cb5a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cb5c:	6879      	ldr	r1, [r7, #4]
 800cb5e:	4827      	ldr	r0, [pc, #156]	; (800cbfc <tcp_abandon+0x15c>)
 800cb60:	f001 f8da 	bl	800dd18 <tcp_pcb_remove>
 800cb64:	4b26      	ldr	r3, [pc, #152]	; (800cc00 <tcp_abandon+0x160>)
 800cb66:	2201      	movs	r2, #1
 800cb68:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d004      	beq.n	800cb7c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb76:	4618      	mov	r0, r3
 800cb78:	f000 fe15 	bl	800d7a6 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d004      	beq.n	800cb8e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f000 fe0c 	bl	800d7a6 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d004      	beq.n	800cba0 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f000 fe03 	bl	800d7a6 <tcp_segs_free>
    if (send_rst) {
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00c      	beq.n	800cbc0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	1d19      	adds	r1, r3, #4
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	8b1b      	ldrh	r3, [r3, #24]
 800cbb0:	9301      	str	r3, [sp, #4]
 800cbb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	6979      	ldr	r1, [r7, #20]
 800cbba:	69b8      	ldr	r0, [r7, #24]
 800cbbc:	f004 fd36 	bl	801162c <tcp_rst>
    last_state = pcb->state;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	7d1b      	ldrb	r3, [r3, #20]
 800cbc4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800cbc6:	6879      	ldr	r1, [r7, #4]
 800cbc8:	2001      	movs	r0, #1
 800cbca:	f7fe fd63 	bl	800b694 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d004      	beq.n	800cbde <tcp_abandon+0x13e>
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	f06f 010c 	mvn.w	r1, #12
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	4798      	blx	r3
}
 800cbde:	bf00      	nop
 800cbe0:	3728      	adds	r7, #40	; 0x28
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	0801953c 	.word	0x0801953c
 800cbec:	080195d4 	.word	0x080195d4
 800cbf0:	08019578 	.word	0x08019578
 800cbf4:	2000fae4 	.word	0x2000fae4
 800cbf8:	2000fae0 	.word	0x2000fae0
 800cbfc:	2000fad4 	.word	0x2000fad4
 800cc00:	2000fad0 	.word	0x2000fad0

0800cc04 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cc0c:	2101      	movs	r1, #1
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7ff ff46 	bl	800caa0 <tcp_abandon>
}
 800cc14:	bf00      	nop
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b088      	sub	sp, #32
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	4613      	mov	r3, r2
 800cc28:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800cc2a:	2304      	movs	r3, #4
 800cc2c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d101      	bne.n	800cc38 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800cc34:	4b3c      	ldr	r3, [pc, #240]	; (800cd28 <tcp_bind+0x10c>)
 800cc36:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d002      	beq.n	800cc44 <tcp_bind+0x28>
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d102      	bne.n	800cc4a <tcp_bind+0x2e>
    return ERR_VAL;
 800cc44:	f06f 0305 	mvn.w	r3, #5
 800cc48:	e06a      	b.n	800cd20 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	7d1b      	ldrb	r3, [r3, #20]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d009      	beq.n	800cc66 <tcp_bind+0x4a>
 800cc52:	4b36      	ldr	r3, [pc, #216]	; (800cd2c <tcp_bind+0x110>)
 800cc54:	f44f 7211 	mov.w	r2, #580	; 0x244
 800cc58:	4935      	ldr	r1, [pc, #212]	; (800cd30 <tcp_bind+0x114>)
 800cc5a:	4836      	ldr	r0, [pc, #216]	; (800cd34 <tcp_bind+0x118>)
 800cc5c:	f009 ff8c 	bl	8016b78 <iprintf>
 800cc60:	f06f 0305 	mvn.w	r3, #5
 800cc64:	e05c      	b.n	800cd20 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800cc66:	88fb      	ldrh	r3, [r7, #6]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d109      	bne.n	800cc80 <tcp_bind+0x64>
    port = tcp_new_port();
 800cc6c:	f000 f9ca 	bl	800d004 <tcp_new_port>
 800cc70:	4603      	mov	r3, r0
 800cc72:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cc74:	88fb      	ldrh	r3, [r7, #6]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d135      	bne.n	800cce6 <tcp_bind+0xca>
      return ERR_BUF;
 800cc7a:	f06f 0301 	mvn.w	r3, #1
 800cc7e:	e04f      	b.n	800cd20 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800cc80:	2300      	movs	r3, #0
 800cc82:	61fb      	str	r3, [r7, #28]
 800cc84:	e02b      	b.n	800ccde <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cc86:	4a2c      	ldr	r2, [pc, #176]	; (800cd38 <tcp_bind+0x11c>)
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	61bb      	str	r3, [r7, #24]
 800cc92:	e01e      	b.n	800ccd2 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	8adb      	ldrh	r3, [r3, #22]
 800cc98:	88fa      	ldrh	r2, [r7, #6]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d116      	bne.n	800cccc <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800cc9e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d010      	beq.n	800ccc6 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00c      	beq.n	800ccc6 <tcp_bind+0xaa>
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d009      	beq.n	800ccc6 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d005      	beq.n	800ccc6 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d102      	bne.n	800cccc <tcp_bind+0xb0>
              return ERR_USE;
 800ccc6:	f06f 0307 	mvn.w	r3, #7
 800ccca:	e029      	b.n	800cd20 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	61bb      	str	r3, [r7, #24]
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1dd      	bne.n	800cc94 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	61fb      	str	r3, [r7, #28]
 800ccde:	69fa      	ldr	r2, [r7, #28]
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	dbcf      	blt.n	800cc86 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00c      	beq.n	800cd06 <tcp_bind+0xea>
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d008      	beq.n	800cd06 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d002      	beq.n	800cd00 <tcp_bind+0xe4>
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	e000      	b.n	800cd02 <tcp_bind+0xe6>
 800cd00:	2300      	movs	r3, #0
 800cd02:	68fa      	ldr	r2, [r7, #12]
 800cd04:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	88fa      	ldrh	r2, [r7, #6]
 800cd0a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cd0c:	4b0b      	ldr	r3, [pc, #44]	; (800cd3c <tcp_bind+0x120>)
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	60da      	str	r2, [r3, #12]
 800cd14:	4a09      	ldr	r2, [pc, #36]	; (800cd3c <tcp_bind+0x120>)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	6013      	str	r3, [r2, #0]
 800cd1a:	f004 fed7 	bl	8011acc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800cd1e:	2300      	movs	r3, #0
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3720      	adds	r7, #32
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	080262d4 	.word	0x080262d4
 800cd2c:	0801953c 	.word	0x0801953c
 800cd30:	08019608 	.word	0x08019608
 800cd34:	08019578 	.word	0x08019578
 800cd38:	0802629c 	.word	0x0802629c
 800cd3c:	2000fae0 	.word	0x2000fae0

0800cd40 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800cd4e:	68b8      	ldr	r0, [r7, #8]
 800cd50:	f7ff ff58 	bl	800cc04 <tcp_abort>

  return ERR_ABRT;
 800cd54:	f06f 030c 	mvn.w	r3, #12
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3710      	adds	r7, #16
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	460b      	mov	r3, r1
 800cd6a:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800cd6c:	78fb      	ldrb	r3, [r7, #3]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	4619      	mov	r1, r3
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f806 	bl	800cd84 <tcp_listen_with_backlog_and_err>
 800cd78:	4603      	mov	r3, r0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
	...

0800cd84 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b088      	sub	sp, #32
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	607a      	str	r2, [r7, #4]
 800cd90:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800cd92:	2300      	movs	r3, #0
 800cd94:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	7d1b      	ldrb	r3, [r3, #20]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d009      	beq.n	800cdb2 <tcp_listen_with_backlog_and_err+0x2e>
 800cd9e:	4b3f      	ldr	r3, [pc, #252]	; (800ce9c <tcp_listen_with_backlog_and_err+0x118>)
 800cda0:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800cda4:	493e      	ldr	r1, [pc, #248]	; (800cea0 <tcp_listen_with_backlog_and_err+0x11c>)
 800cda6:	483f      	ldr	r0, [pc, #252]	; (800cea4 <tcp_listen_with_backlog_and_err+0x120>)
 800cda8:	f009 fee6 	bl	8016b78 <iprintf>
 800cdac:	23f1      	movs	r3, #241	; 0xf1
 800cdae:	76fb      	strb	r3, [r7, #27]
 800cdb0:	e069      	b.n	800ce86 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	7d1b      	ldrb	r3, [r3, #20]
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d104      	bne.n	800cdc4 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800cdbe:	23f7      	movs	r3, #247	; 0xf7
 800cdc0:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cdc2:	e060      	b.n	800ce86 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800cdc4:	2002      	movs	r0, #2
 800cdc6:	f7fe fc13 	bl	800b5f0 <memp_malloc>
 800cdca:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800cdcc:	69fb      	ldr	r3, [r7, #28]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d102      	bne.n	800cdd8 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800cdd2:	23ff      	movs	r3, #255	; 0xff
 800cdd4:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cdd6:	e056      	b.n	800ce86 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	691a      	ldr	r2, [r3, #16]
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	8ada      	ldrh	r2, [r3, #22]
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	2201      	movs	r2, #1
 800cdec:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	7d5a      	ldrb	r2, [r3, #21]
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	7a1a      	ldrb	r2, [r3, #8]
 800cdfa:	69fb      	ldr	r3, [r7, #28]
 800cdfc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	7a9a      	ldrb	r2, [r3, #10]
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	7a5a      	ldrb	r2, [r3, #9]
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	69fb      	ldr	r3, [r7, #28]
 800ce14:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	8adb      	ldrh	r3, [r3, #22]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d021      	beq.n	800ce62 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ce1e:	4b22      	ldr	r3, [pc, #136]	; (800cea8 <tcp_listen_with_backlog_and_err+0x124>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d105      	bne.n	800ce34 <tcp_listen_with_backlog_and_err+0xb0>
 800ce28:	4b1f      	ldr	r3, [pc, #124]	; (800cea8 <tcp_listen_with_backlog_and_err+0x124>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	4a1e      	ldr	r2, [pc, #120]	; (800cea8 <tcp_listen_with_backlog_and_err+0x124>)
 800ce30:	6013      	str	r3, [r2, #0]
 800ce32:	e013      	b.n	800ce5c <tcp_listen_with_backlog_and_err+0xd8>
 800ce34:	4b1c      	ldr	r3, [pc, #112]	; (800cea8 <tcp_listen_with_backlog_and_err+0x124>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	617b      	str	r3, [r7, #20]
 800ce3a:	e00c      	b.n	800ce56 <tcp_listen_with_backlog_and_err+0xd2>
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d104      	bne.n	800ce50 <tcp_listen_with_backlog_and_err+0xcc>
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	68da      	ldr	r2, [r3, #12]
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	60da      	str	r2, [r3, #12]
 800ce4e:	e005      	b.n	800ce5c <tcp_listen_with_backlog_and_err+0xd8>
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	617b      	str	r3, [r7, #20]
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1ef      	bne.n	800ce3c <tcp_listen_with_backlog_and_err+0xb8>
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800ce62:	68f9      	ldr	r1, [r7, #12]
 800ce64:	2001      	movs	r0, #1
 800ce66:	f7fe fc15 	bl	800b694 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	4a0f      	ldr	r2, [pc, #60]	; (800ceac <tcp_listen_with_backlog_and_err+0x128>)
 800ce6e:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ce70:	4b0f      	ldr	r3, [pc, #60]	; (800ceb0 <tcp_listen_with_backlog_and_err+0x12c>)
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	60da      	str	r2, [r3, #12]
 800ce78:	4a0d      	ldr	r2, [pc, #52]	; (800ceb0 <tcp_listen_with_backlog_and_err+0x12c>)
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	6013      	str	r3, [r2, #0]
 800ce7e:	f004 fe25 	bl	8011acc <tcp_timer_needed>
  res = ERR_OK;
 800ce82:	2300      	movs	r3, #0
 800ce84:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d002      	beq.n	800ce92 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	7efa      	ldrb	r2, [r7, #27]
 800ce90:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ce92:	69fb      	ldr	r3, [r7, #28]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3720      	adds	r7, #32
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	0801953c 	.word	0x0801953c
 800cea0:	08019630 	.word	0x08019630
 800cea4:	08019578 	.word	0x08019578
 800cea8:	2000fae0 	.word	0x2000fae0
 800ceac:	0800cd41 	.word	0x0800cd41
 800ceb0:	2000fadc 	.word	0x2000fadc

0800ceb4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cec4:	4413      	add	r3, r2
 800cec6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ced0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ced4:	bf28      	it	cs
 800ced6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ceda:	b292      	uxth	r2, r2
 800cedc:	4413      	add	r3, r2
 800cede:	68fa      	ldr	r2, [r7, #12]
 800cee0:	1ad3      	subs	r3, r2, r3
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	db08      	blt.n	800cef8 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	1ad3      	subs	r3, r2, r3
 800cef6:	e020      	b.n	800cf3a <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf00:	1ad3      	subs	r3, r2, r3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	dd03      	ble.n	800cf0e <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cf0c:	e014      	b.n	800cf38 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf16:	1ad3      	subs	r3, r2, r3
 800cf18:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf20:	d306      	bcc.n	800cf30 <tcp_update_rcv_ann_wnd+0x7c>
 800cf22:	4b08      	ldr	r3, [pc, #32]	; (800cf44 <tcp_update_rcv_ann_wnd+0x90>)
 800cf24:	f44f 7242 	mov.w	r2, #776	; 0x308
 800cf28:	4907      	ldr	r1, [pc, #28]	; (800cf48 <tcp_update_rcv_ann_wnd+0x94>)
 800cf2a:	4808      	ldr	r0, [pc, #32]	; (800cf4c <tcp_update_rcv_ann_wnd+0x98>)
 800cf2c:	f009 fe24 	bl	8016b78 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	b29a      	uxth	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cf38:	2300      	movs	r3, #0
  }
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3710      	adds	r7, #16
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	0801953c 	.word	0x0801953c
 800cf48:	08019654 	.word	0x08019654
 800cf4c:	08019578 	.word	0x08019578

0800cf50 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	7d1b      	ldrb	r3, [r3, #20]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d106      	bne.n	800cf72 <tcp_recved+0x22>
 800cf64:	4b23      	ldr	r3, [pc, #140]	; (800cff4 <tcp_recved+0xa4>)
 800cf66:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cf6a:	4923      	ldr	r1, [pc, #140]	; (800cff8 <tcp_recved+0xa8>)
 800cf6c:	4823      	ldr	r0, [pc, #140]	; (800cffc <tcp_recved+0xac>)
 800cf6e:	f009 fe03 	bl	8016b78 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf76:	887b      	ldrh	r3, [r7, #2]
 800cf78:	4413      	add	r3, r2
 800cf7a:	b29a      	uxth	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf84:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cf88:	d904      	bls.n	800cf94 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cf90:	851a      	strh	r2, [r3, #40]	; 0x28
 800cf92:	e017      	b.n	800cfc4 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d113      	bne.n	800cfc4 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	7d1b      	ldrb	r3, [r3, #20]
 800cfa0:	2b07      	cmp	r3, #7
 800cfa2:	d003      	beq.n	800cfac <tcp_recved+0x5c>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	7d1b      	ldrb	r3, [r3, #20]
 800cfa8:	2b09      	cmp	r3, #9
 800cfaa:	d104      	bne.n	800cfb6 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cfb2:	851a      	strh	r2, [r3, #40]	; 0x28
 800cfb4:	e006      	b.n	800cfc4 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800cfb6:	4b0f      	ldr	r3, [pc, #60]	; (800cff4 <tcp_recved+0xa4>)
 800cfb8:	f240 322d 	movw	r2, #813	; 0x32d
 800cfbc:	4910      	ldr	r1, [pc, #64]	; (800d000 <tcp_recved+0xb0>)
 800cfbe:	480f      	ldr	r0, [pc, #60]	; (800cffc <tcp_recved+0xac>)
 800cfc0:	f009 fdda 	bl	8016b78 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7ff ff75 	bl	800ceb4 <tcp_update_rcv_ann_wnd>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cfd4:	db09      	blt.n	800cfea <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	7e9b      	ldrb	r3, [r3, #26]
 800cfda:	f043 0302 	orr.w	r3, r3, #2
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f004 f897 	bl	8011118 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cfea:	bf00      	nop
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	0801953c 	.word	0x0801953c
 800cff8:	08019670 	.word	0x08019670
 800cffc:	08019578 	.word	0x08019578
 800d000:	08019698 	.word	0x08019698

0800d004 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d00a:	2300      	movs	r3, #0
 800d00c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800d00e:	4b1d      	ldr	r3, [pc, #116]	; (800d084 <tcp_new_port+0x80>)
 800d010:	881b      	ldrh	r3, [r3, #0]
 800d012:	1c5a      	adds	r2, r3, #1
 800d014:	b291      	uxth	r1, r2
 800d016:	4a1b      	ldr	r2, [pc, #108]	; (800d084 <tcp_new_port+0x80>)
 800d018:	8011      	strh	r1, [r2, #0]
 800d01a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d01e:	4293      	cmp	r3, r2
 800d020:	d103      	bne.n	800d02a <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d022:	4b18      	ldr	r3, [pc, #96]	; (800d084 <tcp_new_port+0x80>)
 800d024:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d028:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d02a:	2300      	movs	r3, #0
 800d02c:	71fb      	strb	r3, [r7, #7]
 800d02e:	e01e      	b.n	800d06e <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d030:	79fb      	ldrb	r3, [r7, #7]
 800d032:	4a15      	ldr	r2, [pc, #84]	; (800d088 <tcp_new_port+0x84>)
 800d034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	603b      	str	r3, [r7, #0]
 800d03c:	e011      	b.n	800d062 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	8ada      	ldrh	r2, [r3, #22]
 800d042:	4b10      	ldr	r3, [pc, #64]	; (800d084 <tcp_new_port+0x80>)
 800d044:	881b      	ldrh	r3, [r3, #0]
 800d046:	429a      	cmp	r2, r3
 800d048:	d108      	bne.n	800d05c <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d04a:	88bb      	ldrh	r3, [r7, #4]
 800d04c:	3301      	adds	r3, #1
 800d04e:	80bb      	strh	r3, [r7, #4]
 800d050:	88bb      	ldrh	r3, [r7, #4]
 800d052:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d056:	d3da      	bcc.n	800d00e <tcp_new_port+0xa>
          return 0;
 800d058:	2300      	movs	r3, #0
 800d05a:	e00d      	b.n	800d078 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	603b      	str	r3, [r7, #0]
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d1ea      	bne.n	800d03e <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d068:	79fb      	ldrb	r3, [r7, #7]
 800d06a:	3301      	adds	r3, #1
 800d06c:	71fb      	strb	r3, [r7, #7]
 800d06e:	79fb      	ldrb	r3, [r7, #7]
 800d070:	2b03      	cmp	r3, #3
 800d072:	d9dd      	bls.n	800d030 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d074:	4b03      	ldr	r3, [pc, #12]	; (800d084 <tcp_new_port+0x80>)
 800d076:	881b      	ldrh	r3, [r3, #0]
}
 800d078:	4618      	mov	r0, r3
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr
 800d084:	20000010 	.word	0x20000010
 800d088:	0802629c 	.word	0x0802629c

0800d08c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d08c:	b5b0      	push	{r4, r5, r7, lr}
 800d08e:	b08c      	sub	sp, #48	; 0x30
 800d090:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d092:	2300      	movs	r3, #0
 800d094:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800d096:	4b97      	ldr	r3, [pc, #604]	; (800d2f4 <tcp_slowtmr+0x268>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	3301      	adds	r3, #1
 800d09c:	4a95      	ldr	r2, [pc, #596]	; (800d2f4 <tcp_slowtmr+0x268>)
 800d09e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d0a0:	4b95      	ldr	r3, [pc, #596]	; (800d2f8 <tcp_slowtmr+0x26c>)
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	b2da      	uxtb	r2, r3
 800d0a8:	4b93      	ldr	r3, [pc, #588]	; (800d2f8 <tcp_slowtmr+0x26c>)
 800d0aa:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800d0b0:	4b92      	ldr	r3, [pc, #584]	; (800d2fc <tcp_slowtmr+0x270>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d0b6:	e227      	b.n	800d508 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ba:	7d1b      	ldrb	r3, [r3, #20]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d106      	bne.n	800d0ce <tcp_slowtmr+0x42>
 800d0c0:	4b8f      	ldr	r3, [pc, #572]	; (800d300 <tcp_slowtmr+0x274>)
 800d0c2:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800d0c6:	498f      	ldr	r1, [pc, #572]	; (800d304 <tcp_slowtmr+0x278>)
 800d0c8:	488f      	ldr	r0, [pc, #572]	; (800d308 <tcp_slowtmr+0x27c>)
 800d0ca:	f009 fd55 	bl	8016b78 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d0:	7d1b      	ldrb	r3, [r3, #20]
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d106      	bne.n	800d0e4 <tcp_slowtmr+0x58>
 800d0d6:	4b8a      	ldr	r3, [pc, #552]	; (800d300 <tcp_slowtmr+0x274>)
 800d0d8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d0dc:	498b      	ldr	r1, [pc, #556]	; (800d30c <tcp_slowtmr+0x280>)
 800d0de:	488a      	ldr	r0, [pc, #552]	; (800d308 <tcp_slowtmr+0x27c>)
 800d0e0:	f009 fd4a 	bl	8016b78 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e6:	7d1b      	ldrb	r3, [r3, #20]
 800d0e8:	2b0a      	cmp	r3, #10
 800d0ea:	d106      	bne.n	800d0fa <tcp_slowtmr+0x6e>
 800d0ec:	4b84      	ldr	r3, [pc, #528]	; (800d300 <tcp_slowtmr+0x274>)
 800d0ee:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800d0f2:	4987      	ldr	r1, [pc, #540]	; (800d310 <tcp_slowtmr+0x284>)
 800d0f4:	4884      	ldr	r0, [pc, #528]	; (800d308 <tcp_slowtmr+0x27c>)
 800d0f6:	f009 fd3f 	bl	8016b78 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fc:	7f5a      	ldrb	r2, [r3, #29]
 800d0fe:	4b7e      	ldr	r3, [pc, #504]	; (800d2f8 <tcp_slowtmr+0x26c>)
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	429a      	cmp	r2, r3
 800d104:	d103      	bne.n	800d10e <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800d106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800d10c:	e1fc      	b.n	800d508 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d10e:	4b7a      	ldr	r3, [pc, #488]	; (800d2f8 <tcp_slowtmr+0x26c>)
 800d110:	781a      	ldrb	r2, [r3, #0]
 800d112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d114:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800d116:	2300      	movs	r3, #0
 800d118:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800d11a:	2300      	movs	r3, #0
 800d11c:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	7d1b      	ldrb	r3, [r3, #20]
 800d122:	2b02      	cmp	r3, #2
 800d124:	d108      	bne.n	800d138 <tcp_slowtmr+0xac>
 800d126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d128:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d12c:	2b05      	cmp	r3, #5
 800d12e:	d903      	bls.n	800d138 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800d130:	7ffb      	ldrb	r3, [r7, #31]
 800d132:	3301      	adds	r3, #1
 800d134:	77fb      	strb	r3, [r7, #31]
 800d136:	e0a2      	b.n	800d27e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800d138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d13e:	2b0b      	cmp	r3, #11
 800d140:	d903      	bls.n	800d14a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d142:	7ffb      	ldrb	r3, [r7, #31]
 800d144:	3301      	adds	r3, #1
 800d146:	77fb      	strb	r3, [r7, #31]
 800d148:	e099      	b.n	800d27e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d150:	2b00      	cmp	r3, #0
 800d152:	d032      	beq.n	800d1ba <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800d154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d156:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d15a:	3b01      	subs	r3, #1
 800d15c:	4a6d      	ldr	r2, [pc, #436]	; (800d314 <tcp_slowtmr+0x288>)
 800d15e:	5cd3      	ldrb	r3, [r2, r3]
 800d160:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800d162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d164:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d168:	7cfa      	ldrb	r2, [r7, #19]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d907      	bls.n	800d17e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800d16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d170:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d174:	3301      	adds	r3, #1
 800d176:	b2da      	uxtb	r2, r3
 800d178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d180:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d184:	7cfa      	ldrb	r2, [r7, #19]
 800d186:	429a      	cmp	r2, r3
 800d188:	d879      	bhi.n	800d27e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800d18a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d18c:	f004 fbde 	bl	801194c <tcp_zero_window_probe>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d173      	bne.n	800d27e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800d196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d198:	2200      	movs	r2, #0
 800d19a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d1a4:	2b06      	cmp	r3, #6
 800d1a6:	d86a      	bhi.n	800d27e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1aa:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800d1b8:	e061      	b.n	800d27e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800d1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	db08      	blt.n	800d1d6 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	b21a      	sxth	r2, r3
 800d1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d4:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800d1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d04f      	beq.n	800d27e <tcp_slowtmr+0x1f2>
 800d1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e0:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	db47      	blt.n	800d27e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f0:	7d1b      	ldrb	r3, [r3, #20]
 800d1f2:	2b02      	cmp	r3, #2
 800d1f4:	d018      	beq.n	800d228 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800d1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1fc:	2b0c      	cmp	r3, #12
 800d1fe:	bf28      	it	cs
 800d200:	230c      	movcs	r3, #12
 800d202:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d206:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d20a:	10db      	asrs	r3, r3, #3
 800d20c:	b21b      	sxth	r3, r3
 800d20e:	461a      	mov	r2, r3
 800d210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d212:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d216:	4413      	add	r3, r2
 800d218:	7dfa      	ldrb	r2, [r7, #23]
 800d21a:	493f      	ldr	r1, [pc, #252]	; (800d318 <tcp_slowtmr+0x28c>)
 800d21c:	5c8a      	ldrb	r2, [r1, r2]
 800d21e:	4093      	lsls	r3, r2
 800d220:	b21a      	sxth	r2, r3
 800d222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d224:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800d228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22a:	2200      	movs	r2, #0
 800d22c:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d230:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d23a:	4293      	cmp	r3, r2
 800d23c:	bf28      	it	cs
 800d23e:	4613      	movcs	r3, r2
 800d240:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800d242:	8abb      	ldrh	r3, [r7, #20]
 800d244:	085b      	lsrs	r3, r3, #1
 800d246:	b29a      	uxth	r2, r3
 800d248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d250:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d256:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d258:	005b      	lsls	r3, r3, #1
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d206      	bcs.n	800d26e <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800d260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d264:	005b      	lsls	r3, r3, #1
 800d266:	b29a      	uxth	r2, r3
 800d268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800d26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d270:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d274:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800d278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d27a:	f004 fa4d 	bl	8011718 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d280:	7d1b      	ldrb	r3, [r3, #20]
 800d282:	2b06      	cmp	r3, #6
 800d284:	d10f      	bne.n	800d2a6 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d288:	7e9b      	ldrb	r3, [r3, #26]
 800d28a:	f003 0310 	and.w	r3, r3, #16
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d009      	beq.n	800d2a6 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d292:	4b18      	ldr	r3, [pc, #96]	; (800d2f4 <tcp_slowtmr+0x268>)
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d298:	6a1b      	ldr	r3, [r3, #32]
 800d29a:	1ad3      	subs	r3, r2, r3
 800d29c:	2b28      	cmp	r3, #40	; 0x28
 800d29e:	d902      	bls.n	800d2a6 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d2a0:	7ffb      	ldrb	r3, [r7, #31]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a8:	7a1b      	ldrb	r3, [r3, #8]
 800d2aa:	f003 0308 	and.w	r3, r3, #8
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d05d      	beq.n	800d36e <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800d2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b4:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d2b6:	2b04      	cmp	r3, #4
 800d2b8:	d003      	beq.n	800d2c2 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800d2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2bc:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800d2be:	2b07      	cmp	r3, #7
 800d2c0:	d155      	bne.n	800d36e <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d2c2:	4b0c      	ldr	r3, [pc, #48]	; (800d2f4 <tcp_slowtmr+0x268>)
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800d2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2d2:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d2d6:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d2da:	4910      	ldr	r1, [pc, #64]	; (800d31c <tcp_slowtmr+0x290>)
 800d2dc:	fba1 1303 	umull	r1, r3, r1, r3
 800d2e0:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d91c      	bls.n	800d320 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d2e6:	7ffb      	ldrb	r3, [r7, #31]
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800d2ec:	7fbb      	ldrb	r3, [r7, #30]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	77bb      	strb	r3, [r7, #30]
 800d2f2:	e03c      	b.n	800d36e <tcp_slowtmr+0x2e2>
 800d2f4:	2000fad8 	.word	0x2000fad8
 800d2f8:	20008c3e 	.word	0x20008c3e
 800d2fc:	2000fad4 	.word	0x2000fad4
 800d300:	0801953c 	.word	0x0801953c
 800d304:	080196ec 	.word	0x080196ec
 800d308:	08019578 	.word	0x08019578
 800d30c:	08019718 	.word	0x08019718
 800d310:	08019744 	.word	0x08019744
 800d314:	08026294 	.word	0x08026294
 800d318:	08026284 	.word	0x08026284
 800d31c:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d320:	4b97      	ldr	r3, [pc, #604]	; (800d580 <tcp_slowtmr+0x4f4>)
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d326:	6a1b      	ldr	r3, [r3, #32]
 800d328:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800d330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d332:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800d336:	4618      	mov	r0, r3
 800d338:	4b92      	ldr	r3, [pc, #584]	; (800d584 <tcp_slowtmr+0x4f8>)
 800d33a:	fb03 f300 	mul.w	r3, r3, r0
 800d33e:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800d340:	4991      	ldr	r1, [pc, #580]	; (800d588 <tcp_slowtmr+0x4fc>)
 800d342:	fba1 1303 	umull	r1, r3, r1, r3
 800d346:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d348:	429a      	cmp	r2, r3
 800d34a:	d910      	bls.n	800d36e <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800d34c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d34e:	f004 fac0 	bl	80118d2 <tcp_keepalive>
 800d352:	4603      	mov	r3, r0
 800d354:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800d356:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d107      	bne.n	800d36e <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d360:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800d364:	3301      	adds	r3, #1
 800d366:	b2da      	uxtb	r2, r3
 800d368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d372:	2b00      	cmp	r3, #0
 800d374:	d016      	beq.n	800d3a4 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800d376:	4b82      	ldr	r3, [pc, #520]	; (800d580 <tcp_slowtmr+0x4f4>)
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37c:	6a1b      	ldr	r3, [r3, #32]
 800d37e:	1ad2      	subs	r2, r2, r3
 800d380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d382:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d386:	4619      	mov	r1, r3
 800d388:	460b      	mov	r3, r1
 800d38a:	005b      	lsls	r3, r3, #1
 800d38c:	440b      	add	r3, r1
 800d38e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d390:	429a      	cmp	r2, r3
 800d392:	d307      	bcc.n	800d3a4 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800d394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d398:	4618      	mov	r0, r3
 800d39a:	f000 fa04 	bl	800d7a6 <tcp_segs_free>
      pcb->ooseq = NULL;
 800d39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a6:	7d1b      	ldrb	r3, [r3, #20]
 800d3a8:	2b03      	cmp	r3, #3
 800d3aa:	d109      	bne.n	800d3c0 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d3ac:	4b74      	ldr	r3, [pc, #464]	; (800d580 <tcp_slowtmr+0x4f4>)
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b2:	6a1b      	ldr	r3, [r3, #32]
 800d3b4:	1ad3      	subs	r3, r2, r3
 800d3b6:	2b28      	cmp	r3, #40	; 0x28
 800d3b8:	d902      	bls.n	800d3c0 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d3ba:	7ffb      	ldrb	r3, [r7, #31]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c2:	7d1b      	ldrb	r3, [r3, #20]
 800d3c4:	2b09      	cmp	r3, #9
 800d3c6:	d109      	bne.n	800d3dc <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d3c8:	4b6d      	ldr	r3, [pc, #436]	; (800d580 <tcp_slowtmr+0x4f4>)
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ce:	6a1b      	ldr	r3, [r3, #32]
 800d3d0:	1ad3      	subs	r3, r2, r3
 800d3d2:	2bf0      	cmp	r3, #240	; 0xf0
 800d3d4:	d902      	bls.n	800d3dc <tcp_slowtmr+0x350>
        ++pcb_remove;
 800d3d6:	7ffb      	ldrb	r3, [r7, #31]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d3dc:	7ffb      	ldrb	r3, [r7, #31]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d05d      	beq.n	800d49e <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3e8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d3ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3ec:	f000 fc52 	bl	800dc94 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d3f0:	6a3b      	ldr	r3, [r7, #32]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d010      	beq.n	800d418 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d3f6:	4b65      	ldr	r3, [pc, #404]	; (800d58c <tcp_slowtmr+0x500>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d106      	bne.n	800d40e <tcp_slowtmr+0x382>
 800d400:	4b63      	ldr	r3, [pc, #396]	; (800d590 <tcp_slowtmr+0x504>)
 800d402:	f240 4289 	movw	r2, #1161	; 0x489
 800d406:	4963      	ldr	r1, [pc, #396]	; (800d594 <tcp_slowtmr+0x508>)
 800d408:	4863      	ldr	r0, [pc, #396]	; (800d598 <tcp_slowtmr+0x50c>)
 800d40a:	f009 fbb5 	bl	8016b78 <iprintf>
        prev->next = pcb->next;
 800d40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d410:	68da      	ldr	r2, [r3, #12]
 800d412:	6a3b      	ldr	r3, [r7, #32]
 800d414:	60da      	str	r2, [r3, #12]
 800d416:	e00f      	b.n	800d438 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d418:	4b5c      	ldr	r3, [pc, #368]	; (800d58c <tcp_slowtmr+0x500>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d41e:	429a      	cmp	r2, r3
 800d420:	d006      	beq.n	800d430 <tcp_slowtmr+0x3a4>
 800d422:	4b5b      	ldr	r3, [pc, #364]	; (800d590 <tcp_slowtmr+0x504>)
 800d424:	f240 428d 	movw	r2, #1165	; 0x48d
 800d428:	495c      	ldr	r1, [pc, #368]	; (800d59c <tcp_slowtmr+0x510>)
 800d42a:	485b      	ldr	r0, [pc, #364]	; (800d598 <tcp_slowtmr+0x50c>)
 800d42c:	f009 fba4 	bl	8016b78 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	4a55      	ldr	r2, [pc, #340]	; (800d58c <tcp_slowtmr+0x500>)
 800d436:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d438:	7fbb      	ldrb	r3, [r7, #30]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d010      	beq.n	800d460 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d440:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d444:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d446:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44a:	1d1d      	adds	r5, r3, #4
 800d44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44e:	8adb      	ldrh	r3, [r3, #22]
 800d450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d452:	8b12      	ldrh	r2, [r2, #24]
 800d454:	9201      	str	r2, [sp, #4]
 800d456:	9300      	str	r3, [sp, #0]
 800d458:	462b      	mov	r3, r5
 800d45a:	4622      	mov	r2, r4
 800d45c:	f004 f8e6 	bl	801162c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d468:	7d1b      	ldrb	r3, [r3, #20]
 800d46a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800d476:	6839      	ldr	r1, [r7, #0]
 800d478:	2001      	movs	r0, #1
 800d47a:	f7fe f90b 	bl	800b694 <memp_free>

      tcp_active_pcbs_changed = 0;
 800d47e:	4b48      	ldr	r3, [pc, #288]	; (800d5a0 <tcp_slowtmr+0x514>)
 800d480:	2200      	movs	r2, #0
 800d482:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d004      	beq.n	800d494 <tcp_slowtmr+0x408>
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f06f 010c 	mvn.w	r1, #12
 800d490:	68b8      	ldr	r0, [r7, #8]
 800d492:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d494:	4b42      	ldr	r3, [pc, #264]	; (800d5a0 <tcp_slowtmr+0x514>)
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d035      	beq.n	800d508 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800d49c:	e606      	b.n	800d0ac <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a0:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800d4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a4:	68db      	ldr	r3, [r3, #12]
 800d4a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d4a8:	6a3b      	ldr	r3, [r7, #32]
 800d4aa:	7edb      	ldrb	r3, [r3, #27]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	b2da      	uxtb	r2, r3
 800d4b0:	6a3b      	ldr	r3, [r7, #32]
 800d4b2:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800d4b4:	6a3b      	ldr	r3, [r7, #32]
 800d4b6:	7eda      	ldrb	r2, [r3, #27]
 800d4b8:	6a3b      	ldr	r3, [r7, #32]
 800d4ba:	7f1b      	ldrb	r3, [r3, #28]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d323      	bcc.n	800d508 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800d4c0:	6a3b      	ldr	r3, [r7, #32]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d4c6:	4b36      	ldr	r3, [pc, #216]	; (800d5a0 <tcp_slowtmr+0x514>)
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d4cc:	6a3b      	ldr	r3, [r7, #32]
 800d4ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00a      	beq.n	800d4ec <tcp_slowtmr+0x460>
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4dc:	6a3a      	ldr	r2, [r7, #32]
 800d4de:	6912      	ldr	r2, [r2, #16]
 800d4e0:	6a39      	ldr	r1, [r7, #32]
 800d4e2:	4610      	mov	r0, r2
 800d4e4:	4798      	blx	r3
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	777b      	strb	r3, [r7, #29]
 800d4ea:	e001      	b.n	800d4f0 <tcp_slowtmr+0x464>
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800d4f0:	4b2b      	ldr	r3, [pc, #172]	; (800d5a0 <tcp_slowtmr+0x514>)
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d000      	beq.n	800d4fa <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800d4f8:	e5d8      	b.n	800d0ac <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d4fa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d102      	bne.n	800d508 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800d502:	6a38      	ldr	r0, [r7, #32]
 800d504:	f003 fe08 	bl	8011118 <tcp_output>
  while (pcb != NULL) {
 800d508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f47f add4 	bne.w	800d0b8 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d510:	2300      	movs	r3, #0
 800d512:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800d514:	4b23      	ldr	r3, [pc, #140]	; (800d5a4 <tcp_slowtmr+0x518>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800d51a:	e068      	b.n	800d5ee <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51e:	7d1b      	ldrb	r3, [r3, #20]
 800d520:	2b0a      	cmp	r3, #10
 800d522:	d006      	beq.n	800d532 <tcp_slowtmr+0x4a6>
 800d524:	4b1a      	ldr	r3, [pc, #104]	; (800d590 <tcp_slowtmr+0x504>)
 800d526:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800d52a:	491f      	ldr	r1, [pc, #124]	; (800d5a8 <tcp_slowtmr+0x51c>)
 800d52c:	481a      	ldr	r0, [pc, #104]	; (800d598 <tcp_slowtmr+0x50c>)
 800d52e:	f009 fb23 	bl	8016b78 <iprintf>
    pcb_remove = 0;
 800d532:	2300      	movs	r3, #0
 800d534:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d536:	4b12      	ldr	r3, [pc, #72]	; (800d580 <tcp_slowtmr+0x4f4>)
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53c:	6a1b      	ldr	r3, [r3, #32]
 800d53e:	1ad3      	subs	r3, r2, r3
 800d540:	2bf0      	cmp	r3, #240	; 0xf0
 800d542:	d902      	bls.n	800d54a <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800d544:	7ffb      	ldrb	r3, [r7, #31]
 800d546:	3301      	adds	r3, #1
 800d548:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d54a:	7ffb      	ldrb	r3, [r7, #31]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d049      	beq.n	800d5e4 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d550:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d552:	f000 fb9f 	bl	800dc94 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d556:	6a3b      	ldr	r3, [r7, #32]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d029      	beq.n	800d5b0 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d55c:	4b11      	ldr	r3, [pc, #68]	; (800d5a4 <tcp_slowtmr+0x518>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d562:	429a      	cmp	r2, r3
 800d564:	d106      	bne.n	800d574 <tcp_slowtmr+0x4e8>
 800d566:	4b0a      	ldr	r3, [pc, #40]	; (800d590 <tcp_slowtmr+0x504>)
 800d568:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800d56c:	490f      	ldr	r1, [pc, #60]	; (800d5ac <tcp_slowtmr+0x520>)
 800d56e:	480a      	ldr	r0, [pc, #40]	; (800d598 <tcp_slowtmr+0x50c>)
 800d570:	f009 fb02 	bl	8016b78 <iprintf>
        prev->next = pcb->next;
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	68da      	ldr	r2, [r3, #12]
 800d578:	6a3b      	ldr	r3, [r7, #32]
 800d57a:	60da      	str	r2, [r3, #12]
 800d57c:	e028      	b.n	800d5d0 <tcp_slowtmr+0x544>
 800d57e:	bf00      	nop
 800d580:	2000fad8 	.word	0x2000fad8
 800d584:	000124f8 	.word	0x000124f8
 800d588:	10624dd3 	.word	0x10624dd3
 800d58c:	2000fad4 	.word	0x2000fad4
 800d590:	0801953c 	.word	0x0801953c
 800d594:	08019774 	.word	0x08019774
 800d598:	08019578 	.word	0x08019578
 800d59c:	080197a0 	.word	0x080197a0
 800d5a0:	2000fad0 	.word	0x2000fad0
 800d5a4:	2000fae4 	.word	0x2000fae4
 800d5a8:	080197cc 	.word	0x080197cc
 800d5ac:	080197fc 	.word	0x080197fc
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d5b0:	4b12      	ldr	r3, [pc, #72]	; (800d5fc <tcp_slowtmr+0x570>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d006      	beq.n	800d5c8 <tcp_slowtmr+0x53c>
 800d5ba:	4b11      	ldr	r3, [pc, #68]	; (800d600 <tcp_slowtmr+0x574>)
 800d5bc:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800d5c0:	4910      	ldr	r1, [pc, #64]	; (800d604 <tcp_slowtmr+0x578>)
 800d5c2:	4811      	ldr	r0, [pc, #68]	; (800d608 <tcp_slowtmr+0x57c>)
 800d5c4:	f009 fad8 	bl	8016b78 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	4a0b      	ldr	r2, [pc, #44]	; (800d5fc <tcp_slowtmr+0x570>)
 800d5ce:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d2:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800d5da:	69b9      	ldr	r1, [r7, #24]
 800d5dc:	2001      	movs	r0, #1
 800d5de:	f7fe f859 	bl	800b694 <memp_free>
 800d5e2:	e004      	b.n	800d5ee <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800d5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d193      	bne.n	800d51c <tcp_slowtmr+0x490>
    }
  }
}
 800d5f4:	bf00      	nop
 800d5f6:	3728      	adds	r7, #40	; 0x28
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bdb0      	pop	{r4, r5, r7, pc}
 800d5fc:	2000fae4 	.word	0x2000fae4
 800d600:	0801953c 	.word	0x0801953c
 800d604:	08019824 	.word	0x08019824
 800d608:	08019578 	.word	0x08019578

0800d60c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d612:	4b2d      	ldr	r3, [pc, #180]	; (800d6c8 <tcp_fasttmr+0xbc>)
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	3301      	adds	r3, #1
 800d618:	b2da      	uxtb	r2, r3
 800d61a:	4b2b      	ldr	r3, [pc, #172]	; (800d6c8 <tcp_fasttmr+0xbc>)
 800d61c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d61e:	4b2b      	ldr	r3, [pc, #172]	; (800d6cc <tcp_fasttmr+0xc0>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d624:	e048      	b.n	800d6b8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	7f5a      	ldrb	r2, [r3, #29]
 800d62a:	4b27      	ldr	r3, [pc, #156]	; (800d6c8 <tcp_fasttmr+0xbc>)
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d03f      	beq.n	800d6b2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d632:	4b25      	ldr	r3, [pc, #148]	; (800d6c8 <tcp_fasttmr+0xbc>)
 800d634:	781a      	ldrb	r2, [r3, #0]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	7e9b      	ldrb	r3, [r3, #26]
 800d63e:	f003 0301 	and.w	r3, r3, #1
 800d642:	2b00      	cmp	r3, #0
 800d644:	d010      	beq.n	800d668 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	7e9b      	ldrb	r3, [r3, #26]
 800d64a:	f043 0302 	orr.w	r3, r3, #2
 800d64e:	b2da      	uxtb	r2, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f003 fd5f 	bl	8011118 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	7e9b      	ldrb	r3, [r3, #26]
 800d65e:	f023 0303 	bic.w	r3, r3, #3
 800d662:	b2da      	uxtb	r2, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	7e9b      	ldrb	r3, [r3, #26]
 800d66c:	f003 0308 	and.w	r3, r3, #8
 800d670:	2b00      	cmp	r3, #0
 800d672:	d009      	beq.n	800d688 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	7e9b      	ldrb	r3, [r3, #26]
 800d678:	f023 0308 	bic.w	r3, r3, #8
 800d67c:	b2da      	uxtb	r2, r3
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7ff f946 	bl	800c914 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	68db      	ldr	r3, [r3, #12]
 800d68c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00a      	beq.n	800d6ac <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d696:	4b0e      	ldr	r3, [pc, #56]	; (800d6d0 <tcp_fasttmr+0xc4>)
 800d698:	2200      	movs	r2, #0
 800d69a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 f819 	bl	800d6d4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d6a2:	4b0b      	ldr	r3, [pc, #44]	; (800d6d0 <tcp_fasttmr+0xc4>)
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d000      	beq.n	800d6ac <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d6aa:	e7b8      	b.n	800d61e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	607b      	str	r3, [r7, #4]
 800d6b0:	e002      	b.n	800d6b8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d1b3      	bne.n	800d626 <tcp_fasttmr+0x1a>
    }
  }
}
 800d6be:	bf00      	nop
 800d6c0:	3708      	adds	r7, #8
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	20008c3e 	.word	0x20008c3e
 800d6cc:	2000fad4 	.word	0x2000fad4
 800d6d0:	2000fad0 	.word	0x2000fad0

0800d6d4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d6d4:	b590      	push	{r4, r7, lr}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6e0:	7b5b      	ldrb	r3, [r3, #13]
 800d6e2:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6e8:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00b      	beq.n	800d712 <tcp_process_refused_data+0x3e>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6918      	ldr	r0, [r3, #16]
 800d704:	2300      	movs	r3, #0
 800d706:	68ba      	ldr	r2, [r7, #8]
 800d708:	6879      	ldr	r1, [r7, #4]
 800d70a:	47a0      	blx	r4
 800d70c:	4603      	mov	r3, r0
 800d70e:	73fb      	strb	r3, [r7, #15]
 800d710:	e007      	b.n	800d722 <tcp_process_refused_data+0x4e>
 800d712:	2300      	movs	r3, #0
 800d714:	68ba      	ldr	r2, [r7, #8]
 800d716:	6879      	ldr	r1, [r7, #4]
 800d718:	2000      	movs	r0, #0
 800d71a:	f000 f89b 	bl	800d854 <tcp_recv_null>
 800d71e:	4603      	mov	r3, r0
 800d720:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d12a      	bne.n	800d780 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800d72a:	7bbb      	ldrb	r3, [r7, #14]
 800d72c:	f003 0320 	and.w	r3, r3, #32
 800d730:	2b00      	cmp	r3, #0
 800d732:	d033      	beq.n	800d79c <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d738:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d73c:	d005      	beq.n	800d74a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d742:	3301      	adds	r3, #1
 800d744:	b29a      	uxth	r2, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00b      	beq.n	800d76c <tcp_process_refused_data+0x98>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6918      	ldr	r0, [r3, #16]
 800d75e:	2300      	movs	r3, #0
 800d760:	2200      	movs	r2, #0
 800d762:	6879      	ldr	r1, [r7, #4]
 800d764:	47a0      	blx	r4
 800d766:	4603      	mov	r3, r0
 800d768:	73fb      	strb	r3, [r7, #15]
 800d76a:	e001      	b.n	800d770 <tcp_process_refused_data+0x9c>
 800d76c:	2300      	movs	r3, #0
 800d76e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d774:	f113 0f0d 	cmn.w	r3, #13
 800d778:	d110      	bne.n	800d79c <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800d77a:	f06f 030c 	mvn.w	r3, #12
 800d77e:	e00e      	b.n	800d79e <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800d780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d784:	f113 0f0d 	cmn.w	r3, #13
 800d788:	d102      	bne.n	800d790 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d78a:	f06f 030c 	mvn.w	r3, #12
 800d78e:	e006      	b.n	800d79e <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800d796:	f06f 0304 	mvn.w	r3, #4
 800d79a:	e000      	b.n	800d79e <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800d79c:	2300      	movs	r3, #0
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3714      	adds	r7, #20
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd90      	pop	{r4, r7, pc}

0800d7a6 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b084      	sub	sp, #16
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d7ae:	e007      	b.n	800d7c0 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 f809 	bl	800d7ce <tcp_seg_free>
    seg = next;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d1f4      	bne.n	800d7b0 <tcp_segs_free+0xa>
  }
}
 800d7c6:	bf00      	nop
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b082      	sub	sp, #8
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00c      	beq.n	800d7f6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d004      	beq.n	800d7ee <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7fe fcb5 	bl	800c158 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d7ee:	6879      	ldr	r1, [r7, #4]
 800d7f0:	2003      	movs	r0, #3
 800d7f2:	f7fd ff4f 	bl	800b694 <memp_free>
  }
}
 800d7f6:	bf00      	nop
 800d7f8:	3708      	adds	r7, #8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800d7fe:	b480      	push	{r7}
 800d800:	b083      	sub	sp, #12
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
 800d806:	460b      	mov	r3, r1
 800d808:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	78fa      	ldrb	r2, [r7, #3]
 800d80e:	755a      	strb	r2, [r3, #21]
}
 800d810:	bf00      	nop
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d824:	2003      	movs	r0, #3
 800d826:	f7fd fee3 	bl	800b5f0 <memp_malloc>
 800d82a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <tcp_seg_copy+0x1a>
    return NULL;
 800d832:	2300      	movs	r3, #0
 800d834:	e00a      	b.n	800d84c <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d836:	2210      	movs	r2, #16
 800d838:	6879      	ldr	r1, [r7, #4]
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f009 f989 	bl	8016b52 <memcpy>
  pbuf_ref(cseg->p);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	4618      	mov	r0, r3
 800d846:	f7fe fd39 	bl	800c2bc <pbuf_ref>
  return cseg;
 800d84a:	68fb      	ldr	r3, [r7, #12]
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3710      	adds	r7, #16
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	607a      	str	r2, [r7, #4]
 800d860:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d009      	beq.n	800d87c <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	891b      	ldrh	r3, [r3, #8]
 800d86c:	4619      	mov	r1, r3
 800d86e:	68b8      	ldr	r0, [r7, #8]
 800d870:	f7ff fb6e 	bl	800cf50 <tcp_recved>
    pbuf_free(p);
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f7fe fc6f 	bl	800c158 <pbuf_free>
 800d87a:	e008      	b.n	800d88e <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800d87c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d104      	bne.n	800d88e <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800d884:	68b8      	ldr	r0, [r7, #8]
 800d886:	f7ff f8ab 	bl	800c9e0 <tcp_close>
 800d88a:	4603      	mov	r3, r0
 800d88c:	e000      	b.n	800d890 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b086      	sub	sp, #24
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	4603      	mov	r3, r0
 800d8a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d8a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	db01      	blt.n	800d8ae <tcp_kill_prio+0x16>
 800d8aa:	79fb      	ldrb	r3, [r7, #7]
 800d8ac:	e000      	b.n	800d8b0 <tcp_kill_prio+0x18>
 800d8ae:	237f      	movs	r3, #127	; 0x7f
 800d8b0:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8ba:	4b16      	ldr	r3, [pc, #88]	; (800d914 <tcp_kill_prio+0x7c>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	617b      	str	r3, [r7, #20]
 800d8c0:	e01a      	b.n	800d8f8 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	7d5b      	ldrb	r3, [r3, #21]
 800d8c6:	7afa      	ldrb	r2, [r7, #11]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d312      	bcc.n	800d8f2 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d8cc:	4b12      	ldr	r3, [pc, #72]	; (800d918 <tcp_kill_prio+0x80>)
 800d8ce:	681a      	ldr	r2, [r3, #0]
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	6a1b      	ldr	r3, [r3, #32]
 800d8d4:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800d8d6:	68fa      	ldr	r2, [r7, #12]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d80a      	bhi.n	800d8f2 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800d8dc:	4b0e      	ldr	r3, [pc, #56]	; (800d918 <tcp_kill_prio+0x80>)
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	6a1b      	ldr	r3, [r3, #32]
 800d8e4:	1ad3      	subs	r3, r2, r3
 800d8e6:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	7d5b      	ldrb	r3, [r3, #21]
 800d8f0:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	617b      	str	r3, [r7, #20]
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d1e1      	bne.n	800d8c2 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d002      	beq.n	800d90a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d904:	6938      	ldr	r0, [r7, #16]
 800d906:	f7ff f97d 	bl	800cc04 <tcp_abort>
  }
}
 800d90a:	bf00      	nop
 800d90c:	3718      	adds	r7, #24
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	2000fad4 	.word	0x2000fad4
 800d918:	2000fad8 	.word	0x2000fad8

0800d91c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b086      	sub	sp, #24
 800d920:	af00      	add	r7, sp, #0
 800d922:	4603      	mov	r3, r0
 800d924:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d926:	79fb      	ldrb	r3, [r7, #7]
 800d928:	2b08      	cmp	r3, #8
 800d92a:	d009      	beq.n	800d940 <tcp_kill_state+0x24>
 800d92c:	79fb      	ldrb	r3, [r7, #7]
 800d92e:	2b09      	cmp	r3, #9
 800d930:	d006      	beq.n	800d940 <tcp_kill_state+0x24>
 800d932:	4b1a      	ldr	r3, [pc, #104]	; (800d99c <tcp_kill_state+0x80>)
 800d934:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d938:	4919      	ldr	r1, [pc, #100]	; (800d9a0 <tcp_kill_state+0x84>)
 800d93a:	481a      	ldr	r0, [pc, #104]	; (800d9a4 <tcp_kill_state+0x88>)
 800d93c:	f009 f91c 	bl	8016b78 <iprintf>

  inactivity = 0;
 800d940:	2300      	movs	r3, #0
 800d942:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d944:	2300      	movs	r3, #0
 800d946:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d948:	4b17      	ldr	r3, [pc, #92]	; (800d9a8 <tcp_kill_state+0x8c>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	617b      	str	r3, [r7, #20]
 800d94e:	e017      	b.n	800d980 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	7d1b      	ldrb	r3, [r3, #20]
 800d954:	79fa      	ldrb	r2, [r7, #7]
 800d956:	429a      	cmp	r2, r3
 800d958:	d10f      	bne.n	800d97a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d95a:	4b14      	ldr	r3, [pc, #80]	; (800d9ac <tcp_kill_state+0x90>)
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	6a1b      	ldr	r3, [r3, #32]
 800d962:	1ad3      	subs	r3, r2, r3
 800d964:	68fa      	ldr	r2, [r7, #12]
 800d966:	429a      	cmp	r2, r3
 800d968:	d807      	bhi.n	800d97a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d96a:	4b10      	ldr	r3, [pc, #64]	; (800d9ac <tcp_kill_state+0x90>)
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	6a1b      	ldr	r3, [r3, #32]
 800d972:	1ad3      	subs	r3, r2, r3
 800d974:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	617b      	str	r3, [r7, #20]
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1e4      	bne.n	800d950 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d003      	beq.n	800d994 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d98c:	2100      	movs	r1, #0
 800d98e:	6938      	ldr	r0, [r7, #16]
 800d990:	f7ff f886 	bl	800caa0 <tcp_abandon>
  }
}
 800d994:	bf00      	nop
 800d996:	3718      	adds	r7, #24
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	0801953c 	.word	0x0801953c
 800d9a0:	0801984c 	.word	0x0801984c
 800d9a4:	08019578 	.word	0x08019578
 800d9a8:	2000fad4 	.word	0x2000fad4
 800d9ac:	2000fad8 	.word	0x2000fad8

0800d9b0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9be:	4b12      	ldr	r3, [pc, #72]	; (800da08 <tcp_kill_timewait+0x58>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	60fb      	str	r3, [r7, #12]
 800d9c4:	e012      	b.n	800d9ec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d9c6:	4b11      	ldr	r3, [pc, #68]	; (800da0c <tcp_kill_timewait+0x5c>)
 800d9c8:	681a      	ldr	r2, [r3, #0]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6a1b      	ldr	r3, [r3, #32]
 800d9ce:	1ad3      	subs	r3, r2, r3
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d807      	bhi.n	800d9e6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d9d6:	4b0d      	ldr	r3, [pc, #52]	; (800da0c <tcp_kill_timewait+0x5c>)
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	6a1b      	ldr	r3, [r3, #32]
 800d9de:	1ad3      	subs	r3, r2, r3
 800d9e0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	60fb      	str	r3, [r7, #12]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d1e9      	bne.n	800d9c6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d002      	beq.n	800d9fe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d9f8:	68b8      	ldr	r0, [r7, #8]
 800d9fa:	f7ff f903 	bl	800cc04 <tcp_abort>
  }
}
 800d9fe:	bf00      	nop
 800da00:	3710      	adds	r7, #16
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	2000fae4 	.word	0x2000fae4
 800da0c:	2000fad8 	.word	0x2000fad8

0800da10 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	4603      	mov	r3, r0
 800da18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da1a:	2001      	movs	r0, #1
 800da1c:	f7fd fde8 	bl	800b5f0 <memp_malloc>
 800da20:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d124      	bne.n	800da72 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800da28:	f7ff ffc2 	bl	800d9b0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da2c:	2001      	movs	r0, #1
 800da2e:	f7fd fddf 	bl	800b5f0 <memp_malloc>
 800da32:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d11b      	bne.n	800da72 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800da3a:	2009      	movs	r0, #9
 800da3c:	f7ff ff6e 	bl	800d91c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da40:	2001      	movs	r0, #1
 800da42:	f7fd fdd5 	bl	800b5f0 <memp_malloc>
 800da46:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d111      	bne.n	800da72 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800da4e:	2008      	movs	r0, #8
 800da50:	f7ff ff64 	bl	800d91c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da54:	2001      	movs	r0, #1
 800da56:	f7fd fdcb 	bl	800b5f0 <memp_malloc>
 800da5a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d107      	bne.n	800da72 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800da62:	79fb      	ldrb	r3, [r7, #7]
 800da64:	4618      	mov	r0, r3
 800da66:	f7ff ff17 	bl	800d898 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da6a:	2001      	movs	r0, #1
 800da6c:	f7fd fdc0 	bl	800b5f0 <memp_malloc>
 800da70:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d03f      	beq.n	800daf8 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800da78:	2298      	movs	r2, #152	; 0x98
 800da7a:	2100      	movs	r1, #0
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f009 f873 	bl	8016b68 <memset>
    pcb->prio = prio;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	79fa      	ldrb	r2, [r7, #7]
 800da86:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800da8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800da98:	855a      	strh	r2, [r3, #42]	; 0x2a
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	22ff      	movs	r2, #255	; 0xff
 800daa6:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800daae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2206      	movs	r2, #6
 800dab4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2206      	movs	r2, #6
 800dabc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dac4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2201      	movs	r2, #1
 800daca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800dace:	4b0d      	ldr	r3, [pc, #52]	; (800db04 <tcp_alloc+0xf4>)
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dad6:	4b0c      	ldr	r3, [pc, #48]	; (800db08 <tcp_alloc+0xf8>)
 800dad8:	781a      	ldrb	r2, [r3, #0]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dae4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	4a08      	ldr	r2, [pc, #32]	; (800db0c <tcp_alloc+0xfc>)
 800daec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	4a07      	ldr	r2, [pc, #28]	; (800db10 <tcp_alloc+0x100>)
 800daf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800daf8:	68fb      	ldr	r3, [r7, #12]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	2000fad8 	.word	0x2000fad8
 800db08:	20008c3e 	.word	0x20008c3e
 800db0c:	0800d855 	.word	0x0800d855
 800db10:	006ddd00 	.word	0x006ddd00

0800db14 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b084      	sub	sp, #16
 800db18:	af00      	add	r7, sp, #0
 800db1a:	4603      	mov	r3, r0
 800db1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800db1e:	2040      	movs	r0, #64	; 0x40
 800db20:	f7ff ff76 	bl	800da10 <tcp_alloc>
 800db24:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800db26:	68fb      	ldr	r3, [r7, #12]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d002      	beq.n	800db46 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	683a      	ldr	r2, [r7, #0]
 800db44:	611a      	str	r2, [r3, #16]
  }
}
 800db46:	bf00      	nop
 800db48:	370c      	adds	r7, #12
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
	...

0800db54 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00e      	beq.n	800db82 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	7d1b      	ldrb	r3, [r3, #20]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d106      	bne.n	800db7a <tcp_recv+0x26>
 800db6c:	4b07      	ldr	r3, [pc, #28]	; (800db8c <tcp_recv+0x38>)
 800db6e:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800db72:	4907      	ldr	r1, [pc, #28]	; (800db90 <tcp_recv+0x3c>)
 800db74:	4807      	ldr	r0, [pc, #28]	; (800db94 <tcp_recv+0x40>)
 800db76:	f008 ffff 	bl	8016b78 <iprintf>
    pcb->recv = recv;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	683a      	ldr	r2, [r7, #0]
 800db7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800db82:	bf00      	nop
 800db84:	3708      	adds	r7, #8
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	0801953c 	.word	0x0801953c
 800db90:	0801985c 	.word	0x0801985c
 800db94:	08019578 	.word	0x08019578

0800db98 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d00d      	beq.n	800dbc4 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	7d1b      	ldrb	r3, [r3, #20]
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d106      	bne.n	800dbbe <tcp_sent+0x26>
 800dbb0:	4b06      	ldr	r3, [pc, #24]	; (800dbcc <tcp_sent+0x34>)
 800dbb2:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800dbb6:	4906      	ldr	r1, [pc, #24]	; (800dbd0 <tcp_sent+0x38>)
 800dbb8:	4806      	ldr	r0, [pc, #24]	; (800dbd4 <tcp_sent+0x3c>)
 800dbba:	f008 ffdd 	bl	8016b78 <iprintf>
    pcb->sent = sent;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	683a      	ldr	r2, [r7, #0]
 800dbc2:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800dbc4:	bf00      	nop
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	0801953c 	.word	0x0801953c
 800dbd0:	08019884 	.word	0x08019884
 800dbd4:	08019578 	.word	0x08019578

0800dbd8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d00e      	beq.n	800dc06 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	7d1b      	ldrb	r3, [r3, #20]
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d106      	bne.n	800dbfe <tcp_err+0x26>
 800dbf0:	4b07      	ldr	r3, [pc, #28]	; (800dc10 <tcp_err+0x38>)
 800dbf2:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800dbf6:	4907      	ldr	r1, [pc, #28]	; (800dc14 <tcp_err+0x3c>)
 800dbf8:	4807      	ldr	r0, [pc, #28]	; (800dc18 <tcp_err+0x40>)
 800dbfa:	f008 ffbd 	bl	8016b78 <iprintf>
    pcb->errf = err;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	683a      	ldr	r2, [r7, #0]
 800dc02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800dc06:	bf00      	nop
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	0801953c 	.word	0x0801953c
 800dc14:	080198ac 	.word	0x080198ac
 800dc18:	08019578 	.word	0x08019578

0800dc1c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b085      	sub	sp, #20
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d008      	beq.n	800dc3e <tcp_accept+0x22>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	7d1b      	ldrb	r3, [r3, #20]
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d104      	bne.n	800dc3e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	683a      	ldr	r2, [r7, #0]
 800dc3c:	619a      	str	r2, [r3, #24]
  }
}
 800dc3e:	bf00      	nop
 800dc40:	3714      	adds	r7, #20
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr
	...

0800dc4c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	4613      	mov	r3, r2
 800dc58:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	7d1b      	ldrb	r3, [r3, #20]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d106      	bne.n	800dc70 <tcp_poll+0x24>
 800dc62:	4b09      	ldr	r3, [pc, #36]	; (800dc88 <tcp_poll+0x3c>)
 800dc64:	f240 7203 	movw	r2, #1795	; 0x703
 800dc68:	4908      	ldr	r1, [pc, #32]	; (800dc8c <tcp_poll+0x40>)
 800dc6a:	4809      	ldr	r0, [pc, #36]	; (800dc90 <tcp_poll+0x44>)
 800dc6c:	f008 ff84 	bl	8016b78 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	68ba      	ldr	r2, [r7, #8]
 800dc74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	79fa      	ldrb	r2, [r7, #7]
 800dc7c:	771a      	strb	r2, [r3, #28]
}
 800dc7e:	bf00      	nop
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	0801953c 	.word	0x0801953c
 800dc8c:	080198d4 	.word	0x080198d4
 800dc90:	08019578 	.word	0x08019578

0800dc94 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	7d1b      	ldrb	r3, [r3, #20]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d034      	beq.n	800dd0e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800dca8:	2b0a      	cmp	r3, #10
 800dcaa:	d030      	beq.n	800dd0e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d02c      	beq.n	800dd0e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d007      	beq.n	800dccc <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fe fa49 	bl	800c158 <pbuf_free>
      pcb->refused_data = NULL;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7ff fd68 	bl	800d7a6 <tcp_segs_free>
    pcb->ooseq = NULL;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dce2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7ff fd5c 	bl	800d7a6 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7ff fd57 	bl	800d7a6 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	669a      	str	r2, [r3, #104]	; 0x68
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800dd0e:	bf00      	nop
 800dd10:	3708      	adds	r7, #8
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
	...

0800dd18 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	683a      	ldr	r2, [r7, #0]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d105      	bne.n	800dd38 <tcp_pcb_remove+0x20>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	68da      	ldr	r2, [r3, #12]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	601a      	str	r2, [r3, #0]
 800dd36:	e013      	b.n	800dd60 <tcp_pcb_remove+0x48>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	60fb      	str	r3, [r7, #12]
 800dd3e:	e00c      	b.n	800dd5a <tcp_pcb_remove+0x42>
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	683a      	ldr	r2, [r7, #0]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d104      	bne.n	800dd54 <tcp_pcb_remove+0x3c>
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	68da      	ldr	r2, [r3, #12]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	60da      	str	r2, [r3, #12]
 800dd52:	e005      	b.n	800dd60 <tcp_pcb_remove+0x48>
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	60fb      	str	r3, [r7, #12]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d1ef      	bne.n	800dd40 <tcp_pcb_remove+0x28>
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	2200      	movs	r2, #0
 800dd64:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800dd66:	6838      	ldr	r0, [r7, #0]
 800dd68:	f7ff ff94 	bl	800dc94 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	7d1b      	ldrb	r3, [r3, #20]
 800dd70:	2b0a      	cmp	r3, #10
 800dd72:	d013      	beq.n	800dd9c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d00f      	beq.n	800dd9c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	7e9b      	ldrb	r3, [r3, #26]
 800dd80:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d009      	beq.n	800dd9c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	7e9b      	ldrb	r3, [r3, #26]
 800dd8c:	f043 0302 	orr.w	r3, r3, #2
 800dd90:	b2da      	uxtb	r2, r3
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800dd96:	6838      	ldr	r0, [r7, #0]
 800dd98:	f003 f9be 	bl	8011118 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	7d1b      	ldrb	r3, [r3, #20]
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d020      	beq.n	800dde6 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d006      	beq.n	800ddba <tcp_pcb_remove+0xa2>
 800ddac:	4b13      	ldr	r3, [pc, #76]	; (800ddfc <tcp_pcb_remove+0xe4>)
 800ddae:	f240 7253 	movw	r2, #1875	; 0x753
 800ddb2:	4913      	ldr	r1, [pc, #76]	; (800de00 <tcp_pcb_remove+0xe8>)
 800ddb4:	4813      	ldr	r0, [pc, #76]	; (800de04 <tcp_pcb_remove+0xec>)
 800ddb6:	f008 fedf 	bl	8016b78 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d006      	beq.n	800ddd0 <tcp_pcb_remove+0xb8>
 800ddc2:	4b0e      	ldr	r3, [pc, #56]	; (800ddfc <tcp_pcb_remove+0xe4>)
 800ddc4:	f240 7254 	movw	r2, #1876	; 0x754
 800ddc8:	490f      	ldr	r1, [pc, #60]	; (800de08 <tcp_pcb_remove+0xf0>)
 800ddca:	480e      	ldr	r0, [pc, #56]	; (800de04 <tcp_pcb_remove+0xec>)
 800ddcc:	f008 fed4 	bl	8016b78 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d006      	beq.n	800dde6 <tcp_pcb_remove+0xce>
 800ddd8:	4b08      	ldr	r3, [pc, #32]	; (800ddfc <tcp_pcb_remove+0xe4>)
 800ddda:	f240 7256 	movw	r2, #1878	; 0x756
 800ddde:	490b      	ldr	r1, [pc, #44]	; (800de0c <tcp_pcb_remove+0xf4>)
 800dde0:	4808      	ldr	r0, [pc, #32]	; (800de04 <tcp_pcb_remove+0xec>)
 800dde2:	f008 fec9 	bl	8016b78 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	2200      	movs	r2, #0
 800ddea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ddf2:	bf00      	nop
 800ddf4:	3710      	adds	r7, #16
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	0801953c 	.word	0x0801953c
 800de00:	080198f4 	.word	0x080198f4
 800de04:	08019578 	.word	0x08019578
 800de08:	0801990c 	.word	0x0801990c
 800de0c:	08019928 	.word	0x08019928

0800de10 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800de18:	4b07      	ldr	r3, [pc, #28]	; (800de38 <tcp_next_iss+0x28>)
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	4b07      	ldr	r3, [pc, #28]	; (800de3c <tcp_next_iss+0x2c>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4413      	add	r3, r2
 800de22:	4a05      	ldr	r2, [pc, #20]	; (800de38 <tcp_next_iss+0x28>)
 800de24:	6013      	str	r3, [r2, #0]
  return iss;
 800de26:	4b04      	ldr	r3, [pc, #16]	; (800de38 <tcp_next_iss+0x28>)
 800de28:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	370c      	adds	r7, #12
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr
 800de36:	bf00      	nop
 800de38:	20000014 	.word	0x20000014
 800de3c:	2000fad8 	.word	0x2000fad8

0800de40 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
 800de46:	4603      	mov	r3, r0
 800de48:	6039      	str	r1, [r7, #0]
 800de4a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800de4c:	6838      	ldr	r0, [r7, #0]
 800de4e:	f007 fad3 	bl	80153f8 <ip4_route>
 800de52:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d101      	bne.n	800de5e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800de5a:	88fb      	ldrh	r3, [r7, #6]
 800de5c:	e010      	b.n	800de80 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800de62:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800de64:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d008      	beq.n	800de7e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800de6c:	897b      	ldrh	r3, [r7, #10]
 800de6e:	3b28      	subs	r3, #40	; 0x28
 800de70:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800de72:	893a      	ldrh	r2, [r7, #8]
 800de74:	88fb      	ldrh	r3, [r7, #6]
 800de76:	4293      	cmp	r3, r2
 800de78:	bf28      	it	cs
 800de7a:	4613      	movcs	r3, r2
 800de7c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800de7e:	88fb      	ldrh	r3, [r7, #6]
}
 800de80:	4618      	mov	r0, r3
 800de82:	3710      	adds	r7, #16
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800de96:	e011      	b.n	800debc <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d108      	bne.n	800deb6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f7fe feaa 	bl	800cc04 <tcp_abort>
      pcb = next;
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	60fb      	str	r3, [r7, #12]
 800deb4:	e002      	b.n	800debc <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d1ea      	bne.n	800de98 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800dec2:	bf00      	nop
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
	...

0800decc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d02c      	beq.n	800df36 <tcp_netif_ip_addr_changed+0x6a>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d028      	beq.n	800df36 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dee4:	4b16      	ldr	r3, [pc, #88]	; (800df40 <tcp_netif_ip_addr_changed+0x74>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4619      	mov	r1, r3
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f7ff ffcc 	bl	800de88 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800def0:	4b14      	ldr	r3, [pc, #80]	; (800df44 <tcp_netif_ip_addr_changed+0x78>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4619      	mov	r1, r3
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f7ff ffc6 	bl	800de88 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d019      	beq.n	800df36 <tcp_netif_ip_addr_changed+0x6a>
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d015      	beq.n	800df36 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800df0a:	4b0f      	ldr	r3, [pc, #60]	; (800df48 <tcp_netif_ip_addr_changed+0x7c>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	60fb      	str	r3, [r7, #12]
 800df10:	e00e      	b.n	800df30 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	429a      	cmp	r2, r3
 800df22:	d103      	bne.n	800df2c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	60fb      	str	r3, [r7, #12]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1ed      	bne.n	800df12 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800df36:	bf00      	nop
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	2000fad4 	.word	0x2000fad4
 800df44:	2000fae0 	.word	0x2000fae0
 800df48:	2000fadc 	.word	0x2000fadc

0800df4c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800df4c:	b590      	push	{r4, r7, lr}
 800df4e:	b08b      	sub	sp, #44	; 0x2c
 800df50:	af02      	add	r7, sp, #8
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	4a82      	ldr	r2, [pc, #520]	; (800e164 <tcp_input+0x218>)
 800df5c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	895b      	ldrh	r3, [r3, #10]
 800df62:	2b13      	cmp	r3, #19
 800df64:	f240 838a 	bls.w	800e67c <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800df68:	4b7f      	ldr	r3, [pc, #508]	; (800e168 <tcp_input+0x21c>)
 800df6a:	695a      	ldr	r2, [r3, #20]
 800df6c:	4b7e      	ldr	r3, [pc, #504]	; (800e168 <tcp_input+0x21c>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4619      	mov	r1, r3
 800df72:	4610      	mov	r0, r2
 800df74:	f007 fcd8 	bl	8015928 <ip4_addr_isbroadcast_u32>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f040 8380 	bne.w	800e680 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800df80:	4b79      	ldr	r3, [pc, #484]	; (800e168 <tcp_input+0x21c>)
 800df82:	695b      	ldr	r3, [r3, #20]
 800df84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800df88:	2be0      	cmp	r3, #224	; 0xe0
 800df8a:	f000 8379 	beq.w	800e680 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800df8e:	4b75      	ldr	r3, [pc, #468]	; (800e164 <tcp_input+0x218>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	899b      	ldrh	r3, [r3, #12]
 800df94:	b29b      	uxth	r3, r3
 800df96:	4618      	mov	r0, r3
 800df98:	f7fc ff06 	bl	800ada8 <lwip_htons>
 800df9c:	4603      	mov	r3, r0
 800df9e:	0b1b      	lsrs	r3, r3, #12
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800dfa8:	7cbb      	ldrb	r3, [r7, #18]
 800dfaa:	2b13      	cmp	r3, #19
 800dfac:	f240 8368 	bls.w	800e680 <tcp_input+0x734>
 800dfb0:	7cbb      	ldrb	r3, [r7, #18]
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	891b      	ldrh	r3, [r3, #8]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	f200 8361 	bhi.w	800e680 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800dfbe:	7cbb      	ldrb	r3, [r7, #18]
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	3b14      	subs	r3, #20
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	4b69      	ldr	r3, [pc, #420]	; (800e16c <tcp_input+0x220>)
 800dfc8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dfca:	4b69      	ldr	r3, [pc, #420]	; (800e170 <tcp_input+0x224>)
 800dfcc:	2200      	movs	r2, #0
 800dfce:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	895a      	ldrh	r2, [r3, #10]
 800dfd4:	7cbb      	ldrb	r3, [r7, #18]
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d30d      	bcc.n	800dff8 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dfdc:	4b63      	ldr	r3, [pc, #396]	; (800e16c <tcp_input+0x220>)
 800dfde:	881a      	ldrh	r2, [r3, #0]
 800dfe0:	4b64      	ldr	r3, [pc, #400]	; (800e174 <tcp_input+0x228>)
 800dfe2:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800dfe4:	7cbb      	ldrb	r3, [r7, #18]
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	425b      	negs	r3, r3
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	b21b      	sxth	r3, r3
 800dfee:	4619      	mov	r1, r3
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f7fe f88d 	bl	800c110 <pbuf_header>
 800dff6:	e055      	b.n	800e0a4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d105      	bne.n	800e00c <tcp_input+0xc0>
 800e000:	4b5d      	ldr	r3, [pc, #372]	; (800e178 <tcp_input+0x22c>)
 800e002:	22b2      	movs	r2, #178	; 0xb2
 800e004:	495d      	ldr	r1, [pc, #372]	; (800e17c <tcp_input+0x230>)
 800e006:	485e      	ldr	r0, [pc, #376]	; (800e180 <tcp_input+0x234>)
 800e008:	f008 fdb6 	bl	8016b78 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800e00c:	f06f 0113 	mvn.w	r1, #19
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f7fe f87d 	bl	800c110 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	895a      	ldrh	r2, [r3, #10]
 800e01a:	4b56      	ldr	r3, [pc, #344]	; (800e174 <tcp_input+0x228>)
 800e01c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800e01e:	4b53      	ldr	r3, [pc, #332]	; (800e16c <tcp_input+0x220>)
 800e020:	881a      	ldrh	r2, [r3, #0]
 800e022:	4b54      	ldr	r3, [pc, #336]	; (800e174 <tcp_input+0x228>)
 800e024:	881b      	ldrh	r3, [r3, #0]
 800e026:	1ad3      	subs	r3, r2, r3
 800e028:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800e02a:	4b52      	ldr	r3, [pc, #328]	; (800e174 <tcp_input+0x228>)
 800e02c:	881b      	ldrh	r3, [r3, #0]
 800e02e:	425b      	negs	r3, r3
 800e030:	b29b      	uxth	r3, r3
 800e032:	b21b      	sxth	r3, r3
 800e034:	4619      	mov	r1, r3
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7fe f86a 	bl	800c110 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	895b      	ldrh	r3, [r3, #10]
 800e042:	8a3a      	ldrh	r2, [r7, #16]
 800e044:	429a      	cmp	r2, r3
 800e046:	f200 831d 	bhi.w	800e684 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	4a47      	ldr	r2, [pc, #284]	; (800e170 <tcp_input+0x224>)
 800e052:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	8a3b      	ldrh	r3, [r7, #16]
 800e05a:	425b      	negs	r3, r3
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	b21b      	sxth	r3, r3
 800e060:	4619      	mov	r1, r3
 800e062:	4610      	mov	r0, r2
 800e064:	f7fe f854 	bl	800c110 <pbuf_header>
    p->tot_len -= opt2len;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	891a      	ldrh	r2, [r3, #8]
 800e06c:	8a3b      	ldrh	r3, [r7, #16]
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	b29a      	uxth	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	895b      	ldrh	r3, [r3, #10]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d005      	beq.n	800e08a <tcp_input+0x13e>
 800e07e:	4b3e      	ldr	r3, [pc, #248]	; (800e178 <tcp_input+0x22c>)
 800e080:	22cf      	movs	r2, #207	; 0xcf
 800e082:	4940      	ldr	r1, [pc, #256]	; (800e184 <tcp_input+0x238>)
 800e084:	483e      	ldr	r0, [pc, #248]	; (800e180 <tcp_input+0x234>)
 800e086:	f008 fd77 	bl	8016b78 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	891a      	ldrh	r2, [r3, #8]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	891b      	ldrh	r3, [r3, #8]
 800e094:	429a      	cmp	r2, r3
 800e096:	d005      	beq.n	800e0a4 <tcp_input+0x158>
 800e098:	4b37      	ldr	r3, [pc, #220]	; (800e178 <tcp_input+0x22c>)
 800e09a:	22d0      	movs	r2, #208	; 0xd0
 800e09c:	493a      	ldr	r1, [pc, #232]	; (800e188 <tcp_input+0x23c>)
 800e09e:	4838      	ldr	r0, [pc, #224]	; (800e180 <tcp_input+0x234>)
 800e0a0:	f008 fd6a 	bl	8016b78 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e0a4:	4b2f      	ldr	r3, [pc, #188]	; (800e164 <tcp_input+0x218>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	881b      	ldrh	r3, [r3, #0]
 800e0aa:	b29a      	uxth	r2, r3
 800e0ac:	4b2d      	ldr	r3, [pc, #180]	; (800e164 <tcp_input+0x218>)
 800e0ae:	681c      	ldr	r4, [r3, #0]
 800e0b0:	4610      	mov	r0, r2
 800e0b2:	f7fc fe79 	bl	800ada8 <lwip_htons>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e0ba:	4b2a      	ldr	r3, [pc, #168]	; (800e164 <tcp_input+0x218>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	885b      	ldrh	r3, [r3, #2]
 800e0c0:	b29a      	uxth	r2, r3
 800e0c2:	4b28      	ldr	r3, [pc, #160]	; (800e164 <tcp_input+0x218>)
 800e0c4:	681c      	ldr	r4, [r3, #0]
 800e0c6:	4610      	mov	r0, r2
 800e0c8:	f7fc fe6e 	bl	800ada8 <lwip_htons>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e0d0:	4b24      	ldr	r3, [pc, #144]	; (800e164 <tcp_input+0x218>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	4b23      	ldr	r3, [pc, #140]	; (800e164 <tcp_input+0x218>)
 800e0d8:	681c      	ldr	r4, [r3, #0]
 800e0da:	4610      	mov	r0, r2
 800e0dc:	f7fc fe72 	bl	800adc4 <lwip_htonl>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	6063      	str	r3, [r4, #4]
 800e0e4:	6863      	ldr	r3, [r4, #4]
 800e0e6:	4a29      	ldr	r2, [pc, #164]	; (800e18c <tcp_input+0x240>)
 800e0e8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e0ea:	4b1e      	ldr	r3, [pc, #120]	; (800e164 <tcp_input+0x218>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	689a      	ldr	r2, [r3, #8]
 800e0f0:	4b1c      	ldr	r3, [pc, #112]	; (800e164 <tcp_input+0x218>)
 800e0f2:	681c      	ldr	r4, [r3, #0]
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	f7fc fe65 	bl	800adc4 <lwip_htonl>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	60a3      	str	r3, [r4, #8]
 800e0fe:	68a3      	ldr	r3, [r4, #8]
 800e100:	4a23      	ldr	r2, [pc, #140]	; (800e190 <tcp_input+0x244>)
 800e102:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e104:	4b17      	ldr	r3, [pc, #92]	; (800e164 <tcp_input+0x218>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	89db      	ldrh	r3, [r3, #14]
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	4b15      	ldr	r3, [pc, #84]	; (800e164 <tcp_input+0x218>)
 800e10e:	681c      	ldr	r4, [r3, #0]
 800e110:	4610      	mov	r0, r2
 800e112:	f7fc fe49 	bl	800ada8 <lwip_htons>
 800e116:	4603      	mov	r3, r0
 800e118:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e11a:	4b12      	ldr	r3, [pc, #72]	; (800e164 <tcp_input+0x218>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	899b      	ldrh	r3, [r3, #12]
 800e120:	b29b      	uxth	r3, r3
 800e122:	4618      	mov	r0, r3
 800e124:	f7fc fe40 	bl	800ada8 <lwip_htons>
 800e128:	4603      	mov	r3, r0
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e130:	b2da      	uxtb	r2, r3
 800e132:	4b18      	ldr	r3, [pc, #96]	; (800e194 <tcp_input+0x248>)
 800e134:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	891a      	ldrh	r2, [r3, #8]
 800e13a:	4b16      	ldr	r3, [pc, #88]	; (800e194 <tcp_input+0x248>)
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	f003 0303 	and.w	r3, r3, #3
 800e142:	2b00      	cmp	r3, #0
 800e144:	bf14      	ite	ne
 800e146:	2301      	movne	r3, #1
 800e148:	2300      	moveq	r3, #0
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	4413      	add	r3, r2
 800e150:	b29a      	uxth	r2, r3
 800e152:	4b11      	ldr	r3, [pc, #68]	; (800e198 <tcp_input+0x24c>)
 800e154:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e156:	2300      	movs	r3, #0
 800e158:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e15a:	4b10      	ldr	r3, [pc, #64]	; (800e19c <tcp_input+0x250>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	61fb      	str	r3, [r7, #28]
 800e160:	e082      	b.n	800e268 <tcp_input+0x31c>
 800e162:	bf00      	nop
 800e164:	20008c50 	.word	0x20008c50
 800e168:	2000c3a4 	.word	0x2000c3a4
 800e16c:	20008c54 	.word	0x20008c54
 800e170:	20008c58 	.word	0x20008c58
 800e174:	20008c56 	.word	0x20008c56
 800e178:	08019940 	.word	0x08019940
 800e17c:	08019974 	.word	0x08019974
 800e180:	08019984 	.word	0x08019984
 800e184:	080199ac 	.word	0x080199ac
 800e188:	080199b8 	.word	0x080199b8
 800e18c:	20008c60 	.word	0x20008c60
 800e190:	20008c64 	.word	0x20008c64
 800e194:	20008c6c 	.word	0x20008c6c
 800e198:	20008c6a 	.word	0x20008c6a
 800e19c:	2000fad4 	.word	0x2000fad4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	7d1b      	ldrb	r3, [r3, #20]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d105      	bne.n	800e1b4 <tcp_input+0x268>
 800e1a8:	4b8f      	ldr	r3, [pc, #572]	; (800e3e8 <tcp_input+0x49c>)
 800e1aa:	22e2      	movs	r2, #226	; 0xe2
 800e1ac:	498f      	ldr	r1, [pc, #572]	; (800e3ec <tcp_input+0x4a0>)
 800e1ae:	4890      	ldr	r0, [pc, #576]	; (800e3f0 <tcp_input+0x4a4>)
 800e1b0:	f008 fce2 	bl	8016b78 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	7d1b      	ldrb	r3, [r3, #20]
 800e1b8:	2b0a      	cmp	r3, #10
 800e1ba:	d105      	bne.n	800e1c8 <tcp_input+0x27c>
 800e1bc:	4b8a      	ldr	r3, [pc, #552]	; (800e3e8 <tcp_input+0x49c>)
 800e1be:	22e3      	movs	r2, #227	; 0xe3
 800e1c0:	498c      	ldr	r1, [pc, #560]	; (800e3f4 <tcp_input+0x4a8>)
 800e1c2:	488b      	ldr	r0, [pc, #556]	; (800e3f0 <tcp_input+0x4a4>)
 800e1c4:	f008 fcd8 	bl	8016b78 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	7d1b      	ldrb	r3, [r3, #20]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d105      	bne.n	800e1dc <tcp_input+0x290>
 800e1d0:	4b85      	ldr	r3, [pc, #532]	; (800e3e8 <tcp_input+0x49c>)
 800e1d2:	22e4      	movs	r2, #228	; 0xe4
 800e1d4:	4988      	ldr	r1, [pc, #544]	; (800e3f8 <tcp_input+0x4ac>)
 800e1d6:	4886      	ldr	r0, [pc, #536]	; (800e3f0 <tcp_input+0x4a4>)
 800e1d8:	f008 fcce 	bl	8016b78 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	8b1a      	ldrh	r2, [r3, #24]
 800e1e0:	4b86      	ldr	r3, [pc, #536]	; (800e3fc <tcp_input+0x4b0>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	881b      	ldrh	r3, [r3, #0]
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d138      	bne.n	800e25e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	8ada      	ldrh	r2, [r3, #22]
 800e1f0:	4b82      	ldr	r3, [pc, #520]	; (800e3fc <tcp_input+0x4b0>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	885b      	ldrh	r3, [r3, #2]
 800e1f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d130      	bne.n	800e25e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	685a      	ldr	r2, [r3, #4]
 800e200:	4b7f      	ldr	r3, [pc, #508]	; (800e400 <tcp_input+0x4b4>)
 800e202:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e204:	429a      	cmp	r2, r3
 800e206:	d12a      	bne.n	800e25e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	4b7c      	ldr	r3, [pc, #496]	; (800e400 <tcp_input+0x4b4>)
 800e20e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e210:	429a      	cmp	r2, r3
 800e212:	d124      	bne.n	800e25e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	69fa      	ldr	r2, [r7, #28]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d105      	bne.n	800e22a <tcp_input+0x2de>
 800e21e:	4b72      	ldr	r3, [pc, #456]	; (800e3e8 <tcp_input+0x49c>)
 800e220:	22ec      	movs	r2, #236	; 0xec
 800e222:	4978      	ldr	r1, [pc, #480]	; (800e404 <tcp_input+0x4b8>)
 800e224:	4872      	ldr	r0, [pc, #456]	; (800e3f0 <tcp_input+0x4a4>)
 800e226:	f008 fca7 	bl	8016b78 <iprintf>
      if (prev != NULL) {
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d00a      	beq.n	800e246 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	68da      	ldr	r2, [r3, #12]
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e238:	4b73      	ldr	r3, [pc, #460]	; (800e408 <tcp_input+0x4bc>)
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e240:	4a71      	ldr	r2, [pc, #452]	; (800e408 <tcp_input+0x4bc>)
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	68db      	ldr	r3, [r3, #12]
 800e24a:	69fa      	ldr	r2, [r7, #28]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d10f      	bne.n	800e270 <tcp_input+0x324>
 800e250:	4b65      	ldr	r3, [pc, #404]	; (800e3e8 <tcp_input+0x49c>)
 800e252:	22f4      	movs	r2, #244	; 0xf4
 800e254:	496d      	ldr	r1, [pc, #436]	; (800e40c <tcp_input+0x4c0>)
 800e256:	4866      	ldr	r0, [pc, #408]	; (800e3f0 <tcp_input+0x4a4>)
 800e258:	f008 fc8e 	bl	8016b78 <iprintf>
      break;
 800e25c:	e008      	b.n	800e270 <tcp_input+0x324>
    }
    prev = pcb;
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	61fb      	str	r3, [r7, #28]
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d198      	bne.n	800e1a0 <tcp_input+0x254>
 800e26e:	e000      	b.n	800e272 <tcp_input+0x326>
      break;
 800e270:	bf00      	nop
  }

  if (pcb == NULL) {
 800e272:	69fb      	ldr	r3, [r7, #28]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d173      	bne.n	800e360 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e278:	4b65      	ldr	r3, [pc, #404]	; (800e410 <tcp_input+0x4c4>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	61fb      	str	r3, [r7, #28]
 800e27e:	e02f      	b.n	800e2e0 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	7d1b      	ldrb	r3, [r3, #20]
 800e284:	2b0a      	cmp	r3, #10
 800e286:	d005      	beq.n	800e294 <tcp_input+0x348>
 800e288:	4b57      	ldr	r3, [pc, #348]	; (800e3e8 <tcp_input+0x49c>)
 800e28a:	22fe      	movs	r2, #254	; 0xfe
 800e28c:	4961      	ldr	r1, [pc, #388]	; (800e414 <tcp_input+0x4c8>)
 800e28e:	4858      	ldr	r0, [pc, #352]	; (800e3f0 <tcp_input+0x4a4>)
 800e290:	f008 fc72 	bl	8016b78 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	8b1a      	ldrh	r2, [r3, #24]
 800e298:	4b58      	ldr	r3, [pc, #352]	; (800e3fc <tcp_input+0x4b0>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	881b      	ldrh	r3, [r3, #0]
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d11a      	bne.n	800e2da <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	8ada      	ldrh	r2, [r3, #22]
 800e2a8:	4b54      	ldr	r3, [pc, #336]	; (800e3fc <tcp_input+0x4b0>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	885b      	ldrh	r3, [r3, #2]
 800e2ae:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d112      	bne.n	800e2da <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	685a      	ldr	r2, [r3, #4]
 800e2b8:	4b51      	ldr	r3, [pc, #324]	; (800e400 <tcp_input+0x4b4>)
 800e2ba:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d10c      	bne.n	800e2da <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	4b4e      	ldr	r3, [pc, #312]	; (800e400 <tcp_input+0x4b4>)
 800e2c6:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d106      	bne.n	800e2da <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800e2cc:	69f8      	ldr	r0, [r7, #28]
 800e2ce:	f000 fb15 	bl	800e8fc <tcp_timewait_input>
        pbuf_free(p);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f7fd ff40 	bl	800c158 <pbuf_free>
        return;
 800e2d8:	e1da      	b.n	800e690 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	61fb      	str	r3, [r7, #28]
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d1cc      	bne.n	800e280 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e2ea:	4b4b      	ldr	r3, [pc, #300]	; (800e418 <tcp_input+0x4cc>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	617b      	str	r3, [r7, #20]
 800e2f0:	e019      	b.n	800e326 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	8ada      	ldrh	r2, [r3, #22]
 800e2f6:	4b41      	ldr	r3, [pc, #260]	; (800e3fc <tcp_input+0x4b0>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	885b      	ldrh	r3, [r3, #2]
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d10c      	bne.n	800e31c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	4b3e      	ldr	r3, [pc, #248]	; (800e400 <tcp_input+0x4b4>)
 800e308:	695b      	ldr	r3, [r3, #20]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d00f      	beq.n	800e32e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d00d      	beq.n	800e330 <tcp_input+0x3e4>
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d009      	beq.n	800e330 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	617b      	str	r3, [r7, #20]
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d1e2      	bne.n	800e2f2 <tcp_input+0x3a6>
 800e32c:	e000      	b.n	800e330 <tcp_input+0x3e4>
            break;
 800e32e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d014      	beq.n	800e360 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e336:	69bb      	ldr	r3, [r7, #24]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00a      	beq.n	800e352 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	68da      	ldr	r2, [r3, #12]
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e344:	4b34      	ldr	r3, [pc, #208]	; (800e418 <tcp_input+0x4cc>)
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e34c:	4a32      	ldr	r2, [pc, #200]	; (800e418 <tcp_input+0x4cc>)
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800e352:	6978      	ldr	r0, [r7, #20]
 800e354:	f000 f9f0 	bl	800e738 <tcp_listen_input>
      pbuf_free(p);
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f7fd fefd 	bl	800c158 <pbuf_free>
      return;
 800e35e:	e197      	b.n	800e690 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	2b00      	cmp	r3, #0
 800e364:	f000 8164 	beq.w	800e630 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e368:	4b2c      	ldr	r3, [pc, #176]	; (800e41c <tcp_input+0x4d0>)
 800e36a:	2200      	movs	r2, #0
 800e36c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	891a      	ldrh	r2, [r3, #8]
 800e372:	4b2a      	ldr	r3, [pc, #168]	; (800e41c <tcp_input+0x4d0>)
 800e374:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e376:	4a29      	ldr	r2, [pc, #164]	; (800e41c <tcp_input+0x4d0>)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e37c:	4b1f      	ldr	r3, [pc, #124]	; (800e3fc <tcp_input+0x4b0>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4a26      	ldr	r2, [pc, #152]	; (800e41c <tcp_input+0x4d0>)
 800e382:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e384:	4b26      	ldr	r3, [pc, #152]	; (800e420 <tcp_input+0x4d4>)
 800e386:	2200      	movs	r2, #0
 800e388:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e38a:	4b26      	ldr	r3, [pc, #152]	; (800e424 <tcp_input+0x4d8>)
 800e38c:	2200      	movs	r2, #0
 800e38e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e390:	4b25      	ldr	r3, [pc, #148]	; (800e428 <tcp_input+0x4dc>)
 800e392:	2200      	movs	r2, #0
 800e394:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e396:	4b25      	ldr	r3, [pc, #148]	; (800e42c <tcp_input+0x4e0>)
 800e398:	781b      	ldrb	r3, [r3, #0]
 800e39a:	f003 0308 	and.w	r3, r3, #8
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d006      	beq.n	800e3b0 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	7b5b      	ldrb	r3, [r3, #13]
 800e3a6:	f043 0301 	orr.w	r3, r3, #1
 800e3aa:	b2da      	uxtb	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d03d      	beq.n	800e434 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e3b8:	69f8      	ldr	r0, [r7, #28]
 800e3ba:	f7ff f98b 	bl	800d6d4 <tcp_process_refused_data>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	f113 0f0d 	cmn.w	r3, #13
 800e3c4:	d007      	beq.n	800e3d6 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d032      	beq.n	800e434 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e3ce:	4b18      	ldr	r3, [pc, #96]	; (800e430 <tcp_input+0x4e4>)
 800e3d0:	881b      	ldrh	r3, [r3, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d02e      	beq.n	800e434 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	f040 8108 	bne.w	800e5f0 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e3e0:	69f8      	ldr	r0, [r7, #28]
 800e3e2:	f002 fe3d 	bl	8011060 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e3e6:	e103      	b.n	800e5f0 <tcp_input+0x6a4>
 800e3e8:	08019940 	.word	0x08019940
 800e3ec:	080199d8 	.word	0x080199d8
 800e3f0:	08019984 	.word	0x08019984
 800e3f4:	08019a00 	.word	0x08019a00
 800e3f8:	08019a2c 	.word	0x08019a2c
 800e3fc:	20008c50 	.word	0x20008c50
 800e400:	2000c3a4 	.word	0x2000c3a4
 800e404:	08019a54 	.word	0x08019a54
 800e408:	2000fad4 	.word	0x2000fad4
 800e40c:	08019a80 	.word	0x08019a80
 800e410:	2000fae4 	.word	0x2000fae4
 800e414:	08019aac 	.word	0x08019aac
 800e418:	2000fadc 	.word	0x2000fadc
 800e41c:	20008c40 	.word	0x20008c40
 800e420:	20008c70 	.word	0x20008c70
 800e424:	20008c6d 	.word	0x20008c6d
 800e428:	20008c68 	.word	0x20008c68
 800e42c:	20008c6c 	.word	0x20008c6c
 800e430:	20008c6a 	.word	0x20008c6a
      }
    }
    tcp_input_pcb = pcb;
 800e434:	4a98      	ldr	r2, [pc, #608]	; (800e698 <tcp_input+0x74c>)
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e43a:	69f8      	ldr	r0, [r7, #28]
 800e43c:	f000 fac6 	bl	800e9cc <tcp_process>
 800e440:	4603      	mov	r3, r0
 800e442:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e444:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e448:	f113 0f0d 	cmn.w	r3, #13
 800e44c:	f000 80d2 	beq.w	800e5f4 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800e450:	4b92      	ldr	r3, [pc, #584]	; (800e69c <tcp_input+0x750>)
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	f003 0308 	and.w	r3, r3, #8
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d016      	beq.n	800e48a <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e462:	2b00      	cmp	r3, #0
 800e464:	d008      	beq.n	800e478 <tcp_input+0x52c>
 800e466:	69fb      	ldr	r3, [r7, #28]
 800e468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e46c:	69fa      	ldr	r2, [r7, #28]
 800e46e:	6912      	ldr	r2, [r2, #16]
 800e470:	f06f 010d 	mvn.w	r1, #13
 800e474:	4610      	mov	r0, r2
 800e476:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e478:	69f9      	ldr	r1, [r7, #28]
 800e47a:	4889      	ldr	r0, [pc, #548]	; (800e6a0 <tcp_input+0x754>)
 800e47c:	f7ff fc4c 	bl	800dd18 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800e480:	69f9      	ldr	r1, [r7, #28]
 800e482:	2001      	movs	r0, #1
 800e484:	f7fd f906 	bl	800b694 <memp_free>
 800e488:	e0bf      	b.n	800e60a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800e48a:	2300      	movs	r3, #0
 800e48c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e48e:	4b85      	ldr	r3, [pc, #532]	; (800e6a4 <tcp_input+0x758>)
 800e490:	881b      	ldrh	r3, [r3, #0]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d01b      	beq.n	800e4ce <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e496:	4b83      	ldr	r3, [pc, #524]	; (800e6a4 <tcp_input+0x758>)
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d009      	beq.n	800e4b8 <tcp_input+0x56c>
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4a8:	69fa      	ldr	r2, [r7, #28]
 800e4aa:	6910      	ldr	r0, [r2, #16]
 800e4ac:	89fa      	ldrh	r2, [r7, #14]
 800e4ae:	69f9      	ldr	r1, [r7, #28]
 800e4b0:	4798      	blx	r3
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	74fb      	strb	r3, [r7, #19]
 800e4b6:	e001      	b.n	800e4bc <tcp_input+0x570>
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e4bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e4c0:	f113 0f0d 	cmn.w	r3, #13
 800e4c4:	f000 8098 	beq.w	800e5f8 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e4c8:	4b76      	ldr	r3, [pc, #472]	; (800e6a4 <tcp_input+0x758>)
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e4ce:	69f8      	ldr	r0, [r7, #28]
 800e4d0:	f000 f900 	bl	800e6d4 <tcp_input_delayed_close>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	f040 8090 	bne.w	800e5fc <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e4dc:	4b72      	ldr	r3, [pc, #456]	; (800e6a8 <tcp_input+0x75c>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d041      	beq.n	800e568 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d006      	beq.n	800e4fa <tcp_input+0x5ae>
 800e4ec:	4b6f      	ldr	r3, [pc, #444]	; (800e6ac <tcp_input+0x760>)
 800e4ee:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800e4f2:	496f      	ldr	r1, [pc, #444]	; (800e6b0 <tcp_input+0x764>)
 800e4f4:	486f      	ldr	r0, [pc, #444]	; (800e6b4 <tcp_input+0x768>)
 800e4f6:	f008 fb3f 	bl	8016b78 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	7e9b      	ldrb	r3, [r3, #26]
 800e4fe:	f003 0310 	and.w	r3, r3, #16
 800e502:	2b00      	cmp	r3, #0
 800e504:	d008      	beq.n	800e518 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e506:	4b68      	ldr	r3, [pc, #416]	; (800e6a8 <tcp_input+0x75c>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fd fe24 	bl	800c158 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e510:	69f8      	ldr	r0, [r7, #28]
 800e512:	f7fe fb77 	bl	800cc04 <tcp_abort>
            goto aborted;
 800e516:	e078      	b.n	800e60a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d00c      	beq.n	800e53c <tcp_input+0x5f0>
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	6918      	ldr	r0, [r3, #16]
 800e52c:	4b5e      	ldr	r3, [pc, #376]	; (800e6a8 <tcp_input+0x75c>)
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	2300      	movs	r3, #0
 800e532:	69f9      	ldr	r1, [r7, #28]
 800e534:	47a0      	blx	r4
 800e536:	4603      	mov	r3, r0
 800e538:	74fb      	strb	r3, [r7, #19]
 800e53a:	e008      	b.n	800e54e <tcp_input+0x602>
 800e53c:	4b5a      	ldr	r3, [pc, #360]	; (800e6a8 <tcp_input+0x75c>)
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	2300      	movs	r3, #0
 800e542:	69f9      	ldr	r1, [r7, #28]
 800e544:	2000      	movs	r0, #0
 800e546:	f7ff f985 	bl	800d854 <tcp_recv_null>
 800e54a:	4603      	mov	r3, r0
 800e54c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e54e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e552:	f113 0f0d 	cmn.w	r3, #13
 800e556:	d053      	beq.n	800e600 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e558:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d003      	beq.n	800e568 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e560:	4b51      	ldr	r3, [pc, #324]	; (800e6a8 <tcp_input+0x75c>)
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	69fb      	ldr	r3, [r7, #28]
 800e566:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e568:	4b4c      	ldr	r3, [pc, #304]	; (800e69c <tcp_input+0x750>)
 800e56a:	781b      	ldrb	r3, [r3, #0]
 800e56c:	f003 0320 	and.w	r3, r3, #32
 800e570:	2b00      	cmp	r3, #0
 800e572:	d030      	beq.n	800e5d6 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d009      	beq.n	800e590 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e580:	7b5a      	ldrb	r2, [r3, #13]
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e586:	f042 0220 	orr.w	r2, r2, #32
 800e58a:	b2d2      	uxtb	r2, r2
 800e58c:	735a      	strb	r2, [r3, #13]
 800e58e:	e022      	b.n	800e5d6 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e594:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e598:	d005      	beq.n	800e5a6 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e59e:	3301      	adds	r3, #1
 800e5a0:	b29a      	uxth	r2, r3
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00b      	beq.n	800e5c8 <tcp_input+0x67c>
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	6918      	ldr	r0, [r3, #16]
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	2200      	movs	r2, #0
 800e5be:	69f9      	ldr	r1, [r7, #28]
 800e5c0:	47a0      	blx	r4
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	74fb      	strb	r3, [r7, #19]
 800e5c6:	e001      	b.n	800e5cc <tcp_input+0x680>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e5cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5d0:	f113 0f0d 	cmn.w	r3, #13
 800e5d4:	d016      	beq.n	800e604 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e5d6:	4b30      	ldr	r3, [pc, #192]	; (800e698 <tcp_input+0x74c>)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e5dc:	69f8      	ldr	r0, [r7, #28]
 800e5de:	f000 f879 	bl	800e6d4 <tcp_input_delayed_close>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d10f      	bne.n	800e608 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e5e8:	69f8      	ldr	r0, [r7, #28]
 800e5ea:	f002 fd95 	bl	8011118 <tcp_output>
 800e5ee:	e00c      	b.n	800e60a <tcp_input+0x6be>
        goto aborted;
 800e5f0:	bf00      	nop
 800e5f2:	e00a      	b.n	800e60a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e5f4:	bf00      	nop
 800e5f6:	e008      	b.n	800e60a <tcp_input+0x6be>
              goto aborted;
 800e5f8:	bf00      	nop
 800e5fa:	e006      	b.n	800e60a <tcp_input+0x6be>
          goto aborted;
 800e5fc:	bf00      	nop
 800e5fe:	e004      	b.n	800e60a <tcp_input+0x6be>
            goto aborted;
 800e600:	bf00      	nop
 800e602:	e002      	b.n	800e60a <tcp_input+0x6be>
              goto aborted;
 800e604:	bf00      	nop
 800e606:	e000      	b.n	800e60a <tcp_input+0x6be>
          goto aborted;
 800e608:	bf00      	nop
    tcp_input_pcb = NULL;
 800e60a:	4b23      	ldr	r3, [pc, #140]	; (800e698 <tcp_input+0x74c>)
 800e60c:	2200      	movs	r2, #0
 800e60e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e610:	4b25      	ldr	r3, [pc, #148]	; (800e6a8 <tcp_input+0x75c>)
 800e612:	2200      	movs	r2, #0
 800e614:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800e616:	4b28      	ldr	r3, [pc, #160]	; (800e6b8 <tcp_input+0x76c>)
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d037      	beq.n	800e68e <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800e61e:	4b26      	ldr	r3, [pc, #152]	; (800e6b8 <tcp_input+0x76c>)
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	4618      	mov	r0, r3
 800e624:	f7fd fd98 	bl	800c158 <pbuf_free>
      inseg.p = NULL;
 800e628:	4b23      	ldr	r3, [pc, #140]	; (800e6b8 <tcp_input+0x76c>)
 800e62a:	2200      	movs	r2, #0
 800e62c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e62e:	e02e      	b.n	800e68e <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e630:	4b22      	ldr	r3, [pc, #136]	; (800e6bc <tcp_input+0x770>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	899b      	ldrh	r3, [r3, #12]
 800e636:	b29b      	uxth	r3, r3
 800e638:	4618      	mov	r0, r3
 800e63a:	f7fc fbb5 	bl	800ada8 <lwip_htons>
 800e63e:	4603      	mov	r3, r0
 800e640:	f003 0304 	and.w	r3, r3, #4
 800e644:	2b00      	cmp	r3, #0
 800e646:	d115      	bne.n	800e674 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e648:	4b1d      	ldr	r3, [pc, #116]	; (800e6c0 <tcp_input+0x774>)
 800e64a:	6818      	ldr	r0, [r3, #0]
 800e64c:	4b1d      	ldr	r3, [pc, #116]	; (800e6c4 <tcp_input+0x778>)
 800e64e:	881b      	ldrh	r3, [r3, #0]
 800e650:	461a      	mov	r2, r3
 800e652:	4b1d      	ldr	r3, [pc, #116]	; (800e6c8 <tcp_input+0x77c>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e658:	4b18      	ldr	r3, [pc, #96]	; (800e6bc <tcp_input+0x770>)
 800e65a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e65c:	885b      	ldrh	r3, [r3, #2]
 800e65e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e660:	4a16      	ldr	r2, [pc, #88]	; (800e6bc <tcp_input+0x770>)
 800e662:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e664:	8812      	ldrh	r2, [r2, #0]
 800e666:	b292      	uxth	r2, r2
 800e668:	9201      	str	r2, [sp, #4]
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	4b17      	ldr	r3, [pc, #92]	; (800e6cc <tcp_input+0x780>)
 800e66e:	4a18      	ldr	r2, [pc, #96]	; (800e6d0 <tcp_input+0x784>)
 800e670:	f002 ffdc 	bl	801162c <tcp_rst>
    pbuf_free(p);
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7fd fd6f 	bl	800c158 <pbuf_free>
  return;
 800e67a:	e008      	b.n	800e68e <tcp_input+0x742>
    goto dropped;
 800e67c:	bf00      	nop
 800e67e:	e002      	b.n	800e686 <tcp_input+0x73a>
dropped:
 800e680:	bf00      	nop
 800e682:	e000      	b.n	800e686 <tcp_input+0x73a>
      goto dropped;
 800e684:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f7fd fd66 	bl	800c158 <pbuf_free>
 800e68c:	e000      	b.n	800e690 <tcp_input+0x744>
  return;
 800e68e:	bf00      	nop
}
 800e690:	3724      	adds	r7, #36	; 0x24
 800e692:	46bd      	mov	sp, r7
 800e694:	bd90      	pop	{r4, r7, pc}
 800e696:	bf00      	nop
 800e698:	2000fae8 	.word	0x2000fae8
 800e69c:	20008c6d 	.word	0x20008c6d
 800e6a0:	2000fad4 	.word	0x2000fad4
 800e6a4:	20008c68 	.word	0x20008c68
 800e6a8:	20008c70 	.word	0x20008c70
 800e6ac:	08019940 	.word	0x08019940
 800e6b0:	08019adc 	.word	0x08019adc
 800e6b4:	08019984 	.word	0x08019984
 800e6b8:	20008c40 	.word	0x20008c40
 800e6bc:	20008c50 	.word	0x20008c50
 800e6c0:	20008c64 	.word	0x20008c64
 800e6c4:	20008c6a 	.word	0x20008c6a
 800e6c8:	20008c60 	.word	0x20008c60
 800e6cc:	2000c3b4 	.word	0x2000c3b4
 800e6d0:	2000c3b8 	.word	0x2000c3b8

0800e6d4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800e6dc:	4b14      	ldr	r3, [pc, #80]	; (800e730 <tcp_input_delayed_close+0x5c>)
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	f003 0310 	and.w	r3, r3, #16
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d01d      	beq.n	800e724 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	7e9b      	ldrb	r3, [r3, #26]
 800e6ec:	f003 0310 	and.w	r3, r3, #16
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d10d      	bne.n	800e710 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d008      	beq.n	800e710 <tcp_input_delayed_close+0x3c>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	6912      	ldr	r2, [r2, #16]
 800e708:	f06f 010e 	mvn.w	r1, #14
 800e70c:	4610      	mov	r0, r2
 800e70e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e710:	6879      	ldr	r1, [r7, #4]
 800e712:	4808      	ldr	r0, [pc, #32]	; (800e734 <tcp_input_delayed_close+0x60>)
 800e714:	f7ff fb00 	bl	800dd18 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800e718:	6879      	ldr	r1, [r7, #4]
 800e71a:	2001      	movs	r0, #1
 800e71c:	f7fc ffba 	bl	800b694 <memp_free>
    return 1;
 800e720:	2301      	movs	r3, #1
 800e722:	e000      	b.n	800e726 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800e724:	2300      	movs	r3, #0
}
 800e726:	4618      	mov	r0, r3
 800e728:	3708      	adds	r7, #8
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}
 800e72e:	bf00      	nop
 800e730:	20008c6d 	.word	0x20008c6d
 800e734:	2000fad4 	.word	0x2000fad4

0800e738 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b088      	sub	sp, #32
 800e73c:	af02      	add	r7, sp, #8
 800e73e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e740:	4b64      	ldr	r3, [pc, #400]	; (800e8d4 <tcp_listen_input+0x19c>)
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	f003 0304 	and.w	r3, r3, #4
 800e748:	2b00      	cmp	r3, #0
 800e74a:	f040 80bc 	bne.w	800e8c6 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e74e:	4b61      	ldr	r3, [pc, #388]	; (800e8d4 <tcp_listen_input+0x19c>)
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	f003 0310 	and.w	r3, r3, #16
 800e756:	2b00      	cmp	r3, #0
 800e758:	d016      	beq.n	800e788 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e75a:	4b5f      	ldr	r3, [pc, #380]	; (800e8d8 <tcp_listen_input+0x1a0>)
 800e75c:	6818      	ldr	r0, [r3, #0]
 800e75e:	4b5f      	ldr	r3, [pc, #380]	; (800e8dc <tcp_listen_input+0x1a4>)
 800e760:	881b      	ldrh	r3, [r3, #0]
 800e762:	461a      	mov	r2, r3
 800e764:	4b5e      	ldr	r3, [pc, #376]	; (800e8e0 <tcp_listen_input+0x1a8>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e76a:	4b5e      	ldr	r3, [pc, #376]	; (800e8e4 <tcp_listen_input+0x1ac>)
 800e76c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e76e:	885b      	ldrh	r3, [r3, #2]
 800e770:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e772:	4a5c      	ldr	r2, [pc, #368]	; (800e8e4 <tcp_listen_input+0x1ac>)
 800e774:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e776:	8812      	ldrh	r2, [r2, #0]
 800e778:	b292      	uxth	r2, r2
 800e77a:	9201      	str	r2, [sp, #4]
 800e77c:	9300      	str	r3, [sp, #0]
 800e77e:	4b5a      	ldr	r3, [pc, #360]	; (800e8e8 <tcp_listen_input+0x1b0>)
 800e780:	4a5a      	ldr	r2, [pc, #360]	; (800e8ec <tcp_listen_input+0x1b4>)
 800e782:	f002 ff53 	bl	801162c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e786:	e0a0      	b.n	800e8ca <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800e788:	4b52      	ldr	r3, [pc, #328]	; (800e8d4 <tcp_listen_input+0x19c>)
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	f003 0302 	and.w	r3, r3, #2
 800e790:	2b00      	cmp	r3, #0
 800e792:	f000 809a 	beq.w	800e8ca <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	7d5b      	ldrb	r3, [r3, #21]
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7ff f938 	bl	800da10 <tcp_alloc>
 800e7a0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d111      	bne.n	800e7cc <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	699b      	ldr	r3, [r3, #24]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d00a      	beq.n	800e7c6 <tcp_listen_input+0x8e>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	699b      	ldr	r3, [r3, #24]
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	6910      	ldr	r0, [r2, #16]
 800e7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e7bc:	2100      	movs	r1, #0
 800e7be:	4798      	blx	r3
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	73bb      	strb	r3, [r7, #14]
      return;
 800e7c4:	e082      	b.n	800e8cc <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e7c6:	23f0      	movs	r3, #240	; 0xf0
 800e7c8:	73bb      	strb	r3, [r7, #14]
      return;
 800e7ca:	e07f      	b.n	800e8cc <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e7cc:	4b48      	ldr	r3, [pc, #288]	; (800e8f0 <tcp_listen_input+0x1b8>)
 800e7ce:	695a      	ldr	r2, [r3, #20]
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e7d4:	4b46      	ldr	r3, [pc, #280]	; (800e8f0 <tcp_listen_input+0x1b8>)
 800e7d6:	691a      	ldr	r2, [r3, #16]
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	8ada      	ldrh	r2, [r3, #22]
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e7e4:	4b3f      	ldr	r3, [pc, #252]	; (800e8e4 <tcp_listen_input+0x1ac>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	881b      	ldrh	r3, [r3, #0]
 800e7ea:	b29a      	uxth	r2, r3
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	2203      	movs	r2, #3
 800e7f4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e7f6:	4b3a      	ldr	r3, [pc, #232]	; (800e8e0 <tcp_listen_input+0x1a8>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	1c5a      	adds	r2, r3, #1
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e808:	6978      	ldr	r0, [r7, #20]
 800e80a:	f7ff fb01 	bl	800de10 <tcp_next_iss>
 800e80e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	693a      	ldr	r2, [r7, #16]
 800e814:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	693a      	ldr	r2, [r7, #16]
 800e81a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	693a      	ldr	r2, [r7, #16]
 800e820:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	693a      	ldr	r2, [r7, #16]
 800e826:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e828:	4b2d      	ldr	r3, [pc, #180]	; (800e8e0 <tcp_listen_input+0x1a8>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	1e5a      	subs	r2, r3, #1
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	691a      	ldr	r2, [r3, #16]
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	7a1b      	ldrb	r3, [r3, #8]
 800e844:	f003 030c 	and.w	r3, r3, #12
 800e848:	b2da      	uxtb	r2, r3
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e84e:	4b29      	ldr	r3, [pc, #164]	; (800e8f4 <tcp_listen_input+0x1bc>)
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	60da      	str	r2, [r3, #12]
 800e856:	4a27      	ldr	r2, [pc, #156]	; (800e8f4 <tcp_listen_input+0x1bc>)
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	6013      	str	r3, [r2, #0]
 800e85c:	f003 f936 	bl	8011acc <tcp_timer_needed>
 800e860:	4b25      	ldr	r3, [pc, #148]	; (800e8f8 <tcp_listen_input+0x1c0>)
 800e862:	2201      	movs	r2, #1
 800e864:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e866:	6978      	ldr	r0, [r7, #20]
 800e868:	f001 fd14 	bl	8010294 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e86c:	4b1d      	ldr	r3, [pc, #116]	; (800e8e4 <tcp_listen_input+0x1ac>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	89db      	ldrh	r3, [r3, #14]
 800e872:	b29a      	uxth	r2, r3
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	3304      	adds	r3, #4
 800e88e:	4619      	mov	r1, r3
 800e890:	4610      	mov	r0, r2
 800e892:	f7ff fad5 	bl	800de40 <tcp_eff_send_mss_impl>
 800e896:	4603      	mov	r3, r0
 800e898:	461a      	mov	r2, r3
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e89e:	2112      	movs	r1, #18
 800e8a0:	6978      	ldr	r0, [r7, #20]
 800e8a2:	f002 fae1 	bl	8010e68 <tcp_enqueue_flags>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e8aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d004      	beq.n	800e8bc <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800e8b2:	2100      	movs	r1, #0
 800e8b4:	6978      	ldr	r0, [r7, #20]
 800e8b6:	f7fe f8f3 	bl	800caa0 <tcp_abandon>
      return;
 800e8ba:	e007      	b.n	800e8cc <tcp_listen_input+0x194>
    tcp_output(npcb);
 800e8bc:	6978      	ldr	r0, [r7, #20]
 800e8be:	f002 fc2b 	bl	8011118 <tcp_output>
  return;
 800e8c2:	bf00      	nop
 800e8c4:	e001      	b.n	800e8ca <tcp_listen_input+0x192>
    return;
 800e8c6:	bf00      	nop
 800e8c8:	e000      	b.n	800e8cc <tcp_listen_input+0x194>
  return;
 800e8ca:	bf00      	nop
}
 800e8cc:	3718      	adds	r7, #24
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	20008c6c 	.word	0x20008c6c
 800e8d8:	20008c64 	.word	0x20008c64
 800e8dc:	20008c6a 	.word	0x20008c6a
 800e8e0:	20008c60 	.word	0x20008c60
 800e8e4:	20008c50 	.word	0x20008c50
 800e8e8:	2000c3b4 	.word	0x2000c3b4
 800e8ec:	2000c3b8 	.word	0x2000c3b8
 800e8f0:	2000c3a4 	.word	0x2000c3a4
 800e8f4:	2000fad4 	.word	0x2000fad4
 800e8f8:	2000fad0 	.word	0x2000fad0

0800e8fc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af02      	add	r7, sp, #8
 800e902:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e904:	4b29      	ldr	r3, [pc, #164]	; (800e9ac <tcp_timewait_input+0xb0>)
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	f003 0304 	and.w	r3, r3, #4
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d147      	bne.n	800e9a0 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e910:	4b26      	ldr	r3, [pc, #152]	; (800e9ac <tcp_timewait_input+0xb0>)
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	f003 0302 	and.w	r3, r3, #2
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d027      	beq.n	800e96c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e91c:	4b24      	ldr	r3, [pc, #144]	; (800e9b0 <tcp_timewait_input+0xb4>)
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e924:	1ad3      	subs	r3, r2, r3
 800e926:	2b00      	cmp	r3, #0
 800e928:	db2a      	blt.n	800e980 <tcp_timewait_input+0x84>
 800e92a:	4b21      	ldr	r3, [pc, #132]	; (800e9b0 <tcp_timewait_input+0xb4>)
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e932:	6879      	ldr	r1, [r7, #4]
 800e934:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e936:	440b      	add	r3, r1
 800e938:	1ad3      	subs	r3, r2, r3
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	dc20      	bgt.n	800e980 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e93e:	4b1d      	ldr	r3, [pc, #116]	; (800e9b4 <tcp_timewait_input+0xb8>)
 800e940:	6818      	ldr	r0, [r3, #0]
 800e942:	4b1d      	ldr	r3, [pc, #116]	; (800e9b8 <tcp_timewait_input+0xbc>)
 800e944:	881b      	ldrh	r3, [r3, #0]
 800e946:	461a      	mov	r2, r3
 800e948:	4b19      	ldr	r3, [pc, #100]	; (800e9b0 <tcp_timewait_input+0xb4>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e94e:	4b1b      	ldr	r3, [pc, #108]	; (800e9bc <tcp_timewait_input+0xc0>)
 800e950:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e952:	885b      	ldrh	r3, [r3, #2]
 800e954:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e956:	4a19      	ldr	r2, [pc, #100]	; (800e9bc <tcp_timewait_input+0xc0>)
 800e958:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e95a:	8812      	ldrh	r2, [r2, #0]
 800e95c:	b292      	uxth	r2, r2
 800e95e:	9201      	str	r2, [sp, #4]
 800e960:	9300      	str	r3, [sp, #0]
 800e962:	4b17      	ldr	r3, [pc, #92]	; (800e9c0 <tcp_timewait_input+0xc4>)
 800e964:	4a17      	ldr	r2, [pc, #92]	; (800e9c4 <tcp_timewait_input+0xc8>)
 800e966:	f002 fe61 	bl	801162c <tcp_rst>
      return;
 800e96a:	e01c      	b.n	800e9a6 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800e96c:	4b0f      	ldr	r3, [pc, #60]	; (800e9ac <tcp_timewait_input+0xb0>)
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	f003 0301 	and.w	r3, r3, #1
 800e974:	2b00      	cmp	r3, #0
 800e976:	d003      	beq.n	800e980 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e978:	4b13      	ldr	r3, [pc, #76]	; (800e9c8 <tcp_timewait_input+0xcc>)
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e980:	4b0d      	ldr	r3, [pc, #52]	; (800e9b8 <tcp_timewait_input+0xbc>)
 800e982:	881b      	ldrh	r3, [r3, #0]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d00d      	beq.n	800e9a4 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	7e9b      	ldrb	r3, [r3, #26]
 800e98c:	f043 0302 	orr.w	r3, r3, #2
 800e990:	b2da      	uxtb	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f002 fbbe 	bl	8011118 <tcp_output>
  }
  return;
 800e99c:	bf00      	nop
 800e99e:	e001      	b.n	800e9a4 <tcp_timewait_input+0xa8>
    return;
 800e9a0:	bf00      	nop
 800e9a2:	e000      	b.n	800e9a6 <tcp_timewait_input+0xaa>
  return;
 800e9a4:	bf00      	nop
}
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	20008c6c 	.word	0x20008c6c
 800e9b0:	20008c60 	.word	0x20008c60
 800e9b4:	20008c64 	.word	0x20008c64
 800e9b8:	20008c6a 	.word	0x20008c6a
 800e9bc:	20008c50 	.word	0x20008c50
 800e9c0:	2000c3b4 	.word	0x2000c3b4
 800e9c4:	2000c3b8 	.word	0x2000c3b8
 800e9c8:	2000fad8 	.word	0x2000fad8

0800e9cc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b08a      	sub	sp, #40	; 0x28
 800e9d0:	af02      	add	r7, sp, #8
 800e9d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e9dc:	4ba4      	ldr	r3, [pc, #656]	; (800ec70 <tcp_process+0x2a4>)
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	f003 0304 	and.w	r3, r3, #4
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d04e      	beq.n	800ea86 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	7d1b      	ldrb	r3, [r3, #20]
 800e9ec:	2b02      	cmp	r3, #2
 800e9ee:	d108      	bne.n	800ea02 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9f4:	4b9f      	ldr	r3, [pc, #636]	; (800ec74 <tcp_process+0x2a8>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d123      	bne.n	800ea44 <tcp_process+0x78>
        acceptable = 1;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	76fb      	strb	r3, [r7, #27]
 800ea00:	e020      	b.n	800ea44 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea06:	4b9c      	ldr	r3, [pc, #624]	; (800ec78 <tcp_process+0x2ac>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d102      	bne.n	800ea14 <tcp_process+0x48>
        acceptable = 1;
 800ea0e:	2301      	movs	r3, #1
 800ea10:	76fb      	strb	r3, [r7, #27]
 800ea12:	e017      	b.n	800ea44 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ea14:	4b98      	ldr	r3, [pc, #608]	; (800ec78 <tcp_process+0x2ac>)
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea1c:	1ad3      	subs	r3, r2, r3
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	db10      	blt.n	800ea44 <tcp_process+0x78>
 800ea22:	4b95      	ldr	r3, [pc, #596]	; (800ec78 <tcp_process+0x2ac>)
 800ea24:	681a      	ldr	r2, [r3, #0]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea2a:	6879      	ldr	r1, [r7, #4]
 800ea2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ea2e:	440b      	add	r3, r1
 800ea30:	1ad3      	subs	r3, r2, r3
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	dc06      	bgt.n	800ea44 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	7e9b      	ldrb	r3, [r3, #26]
 800ea3a:	f043 0302 	orr.w	r3, r3, #2
 800ea3e:	b2da      	uxtb	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ea44:	7efb      	ldrb	r3, [r7, #27]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d01b      	beq.n	800ea82 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	7d1b      	ldrb	r3, [r3, #20]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d106      	bne.n	800ea60 <tcp_process+0x94>
 800ea52:	4b8a      	ldr	r3, [pc, #552]	; (800ec7c <tcp_process+0x2b0>)
 800ea54:	f240 22e7 	movw	r2, #743	; 0x2e7
 800ea58:	4989      	ldr	r1, [pc, #548]	; (800ec80 <tcp_process+0x2b4>)
 800ea5a:	488a      	ldr	r0, [pc, #552]	; (800ec84 <tcp_process+0x2b8>)
 800ea5c:	f008 f88c 	bl	8016b78 <iprintf>
      recv_flags |= TF_RESET;
 800ea60:	4b89      	ldr	r3, [pc, #548]	; (800ec88 <tcp_process+0x2bc>)
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	f043 0308 	orr.w	r3, r3, #8
 800ea68:	b2da      	uxtb	r2, r3
 800ea6a:	4b87      	ldr	r3, [pc, #540]	; (800ec88 <tcp_process+0x2bc>)
 800ea6c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	7e9b      	ldrb	r3, [r3, #26]
 800ea72:	f023 0301 	bic.w	r3, r3, #1
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800ea7c:	f06f 030d 	mvn.w	r3, #13
 800ea80:	e34d      	b.n	800f11e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ea82:	2300      	movs	r3, #0
 800ea84:	e34b      	b.n	800f11e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ea86:	4b7a      	ldr	r3, [pc, #488]	; (800ec70 <tcp_process+0x2a4>)
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	f003 0302 	and.w	r3, r3, #2
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d010      	beq.n	800eab4 <tcp_process+0xe8>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	7d1b      	ldrb	r3, [r3, #20]
 800ea96:	2b02      	cmp	r3, #2
 800ea98:	d00c      	beq.n	800eab4 <tcp_process+0xe8>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	7d1b      	ldrb	r3, [r3, #20]
 800ea9e:	2b03      	cmp	r3, #3
 800eaa0:	d008      	beq.n	800eab4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	7e9b      	ldrb	r3, [r3, #26]
 800eaa6:	f043 0302 	orr.w	r3, r3, #2
 800eaaa:	b2da      	uxtb	r2, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800eab0:	2300      	movs	r3, #0
 800eab2:	e334      	b.n	800f11e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	7e9b      	ldrb	r3, [r3, #26]
 800eab8:	f003 0310 	and.w	r3, r3, #16
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d103      	bne.n	800eac8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800eac0:	4b72      	ldr	r3, [pc, #456]	; (800ec8c <tcp_process+0x2c0>)
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2200      	movs	r2, #0
 800eacc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f001 fbdf 	bl	8010294 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	7d1b      	ldrb	r3, [r3, #20]
 800eada:	3b02      	subs	r3, #2
 800eadc:	2b07      	cmp	r3, #7
 800eade:	f200 830e 	bhi.w	800f0fe <tcp_process+0x732>
 800eae2:	a201      	add	r2, pc, #4	; (adr r2, 800eae8 <tcp_process+0x11c>)
 800eae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae8:	0800eb09 	.word	0x0800eb09
 800eaec:	0800ed01 	.word	0x0800ed01
 800eaf0:	0800ee59 	.word	0x0800ee59
 800eaf4:	0800ee83 	.word	0x0800ee83
 800eaf8:	0800efad 	.word	0x0800efad
 800eafc:	0800ee59 	.word	0x0800ee59
 800eb00:	0800f039 	.word	0x0800f039
 800eb04:	0800f0c9 	.word	0x0800f0c9
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800eb08:	4b59      	ldr	r3, [pc, #356]	; (800ec70 <tcp_process+0x2a4>)
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	f003 0310 	and.w	r3, r3, #16
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	f000 80cb 	beq.w	800ecac <tcp_process+0x2e0>
 800eb16:	4b56      	ldr	r3, [pc, #344]	; (800ec70 <tcp_process+0x2a4>)
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	f003 0302 	and.w	r3, r3, #2
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f000 80c4 	beq.w	800ecac <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb28:	1c5a      	adds	r2, r3, #1
 800eb2a:	4b52      	ldr	r3, [pc, #328]	; (800ec74 <tcp_process+0x2a8>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	f040 80bc 	bne.w	800ecac <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800eb34:	4b50      	ldr	r3, [pc, #320]	; (800ec78 <tcp_process+0x2ac>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	1c5a      	adds	r2, r3, #1
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800eb46:	4b4b      	ldr	r3, [pc, #300]	; (800ec74 <tcp_process+0x2a8>)
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800eb4e:	4b50      	ldr	r3, [pc, #320]	; (800ec90 <tcp_process+0x2c4>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	89db      	ldrh	r3, [r3, #14]
 800eb54:	b29a      	uxth	r2, r3
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800eb68:	4b43      	ldr	r3, [pc, #268]	; (800ec78 <tcp_process+0x2ac>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	1e5a      	subs	r2, r3, #1
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2204      	movs	r2, #4
 800eb76:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	3304      	adds	r3, #4
 800eb80:	4619      	mov	r1, r3
 800eb82:	4610      	mov	r0, r2
 800eb84:	f7ff f95c 	bl	800de40 <tcp_eff_send_mss_impl>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb94:	005b      	lsls	r3, r3, #1
 800eb96:	f241 121c 	movw	r2, #4380	; 0x111c
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	bf38      	it	cc
 800eb9e:	461a      	movcc	r2, r3
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eba4:	009b      	lsls	r3, r3, #2
 800eba6:	4293      	cmp	r3, r2
 800eba8:	bf28      	it	cs
 800ebaa:	4613      	movcs	r3, r2
 800ebac:	b29a      	uxth	r2, r3
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d106      	bne.n	800ebcc <tcp_process+0x200>
 800ebbe:	4b2f      	ldr	r3, [pc, #188]	; (800ec7c <tcp_process+0x2b0>)
 800ebc0:	f240 321a 	movw	r2, #794	; 0x31a
 800ebc4:	4933      	ldr	r1, [pc, #204]	; (800ec94 <tcp_process+0x2c8>)
 800ebc6:	482f      	ldr	r0, [pc, #188]	; (800ec84 <tcp_process+0x2b8>)
 800ebc8:	f007 ffd6 	bl	8016b78 <iprintf>
      --pcb->snd_queuelen;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebd2:	3b01      	subs	r3, #1
 800ebd4:	b29a      	uxth	r2, r3
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebe0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800ebe2:	69fb      	ldr	r3, [r7, #28]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d111      	bne.n	800ec0c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebec:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d106      	bne.n	800ec02 <tcp_process+0x236>
 800ebf4:	4b21      	ldr	r3, [pc, #132]	; (800ec7c <tcp_process+0x2b0>)
 800ebf6:	f240 3222 	movw	r2, #802	; 0x322
 800ebfa:	4927      	ldr	r1, [pc, #156]	; (800ec98 <tcp_process+0x2cc>)
 800ebfc:	4821      	ldr	r0, [pc, #132]	; (800ec84 <tcp_process+0x2b8>)
 800ebfe:	f007 ffbb 	bl	8016b78 <iprintf>
        pcb->unsent = rseg->next;
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	669a      	str	r2, [r3, #104]	; 0x68
 800ec0a:	e003      	b.n	800ec14 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800ec14:	69f8      	ldr	r0, [r7, #28]
 800ec16:	f7fe fdda 	bl	800d7ce <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d104      	bne.n	800ec2c <tcp_process+0x260>
        pcb->rtime = -1;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec28:	861a      	strh	r2, [r3, #48]	; 0x30
 800ec2a:	e006      	b.n	800ec3a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2200      	movs	r2, #0
 800ec36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d00a      	beq.n	800ec5a <tcp_process+0x28e>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	6910      	ldr	r0, [r2, #16]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	6879      	ldr	r1, [r7, #4]
 800ec52:	4798      	blx	r3
 800ec54:	4603      	mov	r3, r0
 800ec56:	76bb      	strb	r3, [r7, #26]
 800ec58:	e001      	b.n	800ec5e <tcp_process+0x292>
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800ec5e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec62:	f113 0f0d 	cmn.w	r3, #13
 800ec66:	d119      	bne.n	800ec9c <tcp_process+0x2d0>
        return ERR_ABRT;
 800ec68:	f06f 030c 	mvn.w	r3, #12
 800ec6c:	e257      	b.n	800f11e <tcp_process+0x752>
 800ec6e:	bf00      	nop
 800ec70:	20008c6c 	.word	0x20008c6c
 800ec74:	20008c64 	.word	0x20008c64
 800ec78:	20008c60 	.word	0x20008c60
 800ec7c:	08019940 	.word	0x08019940
 800ec80:	08019af8 	.word	0x08019af8
 800ec84:	08019984 	.word	0x08019984
 800ec88:	20008c6d 	.word	0x20008c6d
 800ec8c:	2000fad8 	.word	0x2000fad8
 800ec90:	20008c50 	.word	0x20008c50
 800ec94:	08019b18 	.word	0x08019b18
 800ec98:	08019b30 	.word	0x08019b30
      }
      tcp_ack_now(pcb);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	7e9b      	ldrb	r3, [r3, #26]
 800eca0:	f043 0302 	orr.w	r3, r3, #2
 800eca4:	b2da      	uxtb	r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800ecaa:	e22a      	b.n	800f102 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800ecac:	4b9f      	ldr	r3, [pc, #636]	; (800ef2c <tcp_process+0x560>)
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	f003 0310 	and.w	r3, r3, #16
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	f000 8224 	beq.w	800f102 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecba:	4b9d      	ldr	r3, [pc, #628]	; (800ef30 <tcp_process+0x564>)
 800ecbc:	6818      	ldr	r0, [r3, #0]
 800ecbe:	4b9d      	ldr	r3, [pc, #628]	; (800ef34 <tcp_process+0x568>)
 800ecc0:	881b      	ldrh	r3, [r3, #0]
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	4b9c      	ldr	r3, [pc, #624]	; (800ef38 <tcp_process+0x56c>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecca:	4b9c      	ldr	r3, [pc, #624]	; (800ef3c <tcp_process+0x570>)
 800eccc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecce:	885b      	ldrh	r3, [r3, #2]
 800ecd0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecd2:	4a9a      	ldr	r2, [pc, #616]	; (800ef3c <tcp_process+0x570>)
 800ecd4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecd6:	8812      	ldrh	r2, [r2, #0]
 800ecd8:	b292      	uxth	r2, r2
 800ecda:	9201      	str	r2, [sp, #4]
 800ecdc:	9300      	str	r3, [sp, #0]
 800ecde:	4b98      	ldr	r3, [pc, #608]	; (800ef40 <tcp_process+0x574>)
 800ece0:	4a98      	ldr	r2, [pc, #608]	; (800ef44 <tcp_process+0x578>)
 800ece2:	f002 fca3 	bl	801162c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ecec:	2b05      	cmp	r3, #5
 800ecee:	f200 8208 	bhi.w	800f102 <tcp_process+0x736>
        pcb->rtime = 0;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f002 fd0d 	bl	8011718 <tcp_rexmit_rto>
    break;
 800ecfe:	e200      	b.n	800f102 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800ed00:	4b8a      	ldr	r3, [pc, #552]	; (800ef2c <tcp_process+0x560>)
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	f003 0310 	and.w	r3, r3, #16
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	f000 8091 	beq.w	800ee30 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800ed0e:	4b88      	ldr	r3, [pc, #544]	; (800ef30 <tcp_process+0x564>)
 800ed10:	681a      	ldr	r2, [r3, #0]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed16:	1ad3      	subs	r3, r2, r3
 800ed18:	3b01      	subs	r3, #1
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	db71      	blt.n	800ee02 <tcp_process+0x436>
 800ed1e:	4b84      	ldr	r3, [pc, #528]	; (800ef30 <tcp_process+0x564>)
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed26:	1ad3      	subs	r3, r2, r3
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	dc6a      	bgt.n	800ee02 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2204      	movs	r2, #4
 800ed30:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d00b      	beq.n	800ed52 <tcp_process+0x386>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed3e:	699b      	ldr	r3, [r3, #24]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d106      	bne.n	800ed52 <tcp_process+0x386>
 800ed44:	4b80      	ldr	r3, [pc, #512]	; (800ef48 <tcp_process+0x57c>)
 800ed46:	f240 3251 	movw	r2, #849	; 0x351
 800ed4a:	4980      	ldr	r1, [pc, #512]	; (800ef4c <tcp_process+0x580>)
 800ed4c:	4880      	ldr	r0, [pc, #512]	; (800ef50 <tcp_process+0x584>)
 800ed4e:	f007 ff13 	bl	8016b78 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d102      	bne.n	800ed60 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800ed5a:	23fa      	movs	r3, #250	; 0xfa
 800ed5c:	76bb      	strb	r3, [r7, #26]
 800ed5e:	e011      	b.n	800ed84 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed64:	699b      	ldr	r3, [r3, #24]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d00a      	beq.n	800ed80 <tcp_process+0x3b4>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed6e:	699b      	ldr	r3, [r3, #24]
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	6910      	ldr	r0, [r2, #16]
 800ed74:	2200      	movs	r2, #0
 800ed76:	6879      	ldr	r1, [r7, #4]
 800ed78:	4798      	blx	r3
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	76bb      	strb	r3, [r7, #26]
 800ed7e:	e001      	b.n	800ed84 <tcp_process+0x3b8>
 800ed80:	23f0      	movs	r3, #240	; 0xf0
 800ed82:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800ed84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d00a      	beq.n	800eda2 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800ed8c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed90:	f113 0f0d 	cmn.w	r3, #13
 800ed94:	d002      	beq.n	800ed9c <tcp_process+0x3d0>
            tcp_abort(pcb);
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f7fd ff34 	bl	800cc04 <tcp_abort>
          }
          return ERR_ABRT;
 800ed9c:	f06f 030c 	mvn.w	r3, #12
 800eda0:	e1bd      	b.n	800f11e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 fa42 	bl	800f22c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800eda8:	4b6a      	ldr	r3, [pc, #424]	; (800ef54 <tcp_process+0x588>)
 800edaa:	881b      	ldrh	r3, [r3, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d005      	beq.n	800edbc <tcp_process+0x3f0>
          recv_acked--;
 800edb0:	4b68      	ldr	r3, [pc, #416]	; (800ef54 <tcp_process+0x588>)
 800edb2:	881b      	ldrh	r3, [r3, #0]
 800edb4:	3b01      	subs	r3, #1
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	4b66      	ldr	r3, [pc, #408]	; (800ef54 <tcp_process+0x588>)
 800edba:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edc0:	005b      	lsls	r3, r3, #1
 800edc2:	f241 121c 	movw	r2, #4380	; 0x111c
 800edc6:	429a      	cmp	r2, r3
 800edc8:	bf38      	it	cc
 800edca:	461a      	movcc	r2, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edd0:	009b      	lsls	r3, r3, #2
 800edd2:	4293      	cmp	r3, r2
 800edd4:	bf28      	it	cs
 800edd6:	4613      	movcs	r3, r2
 800edd8:	b29a      	uxth	r2, r3
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800ede0:	4b5d      	ldr	r3, [pc, #372]	; (800ef58 <tcp_process+0x58c>)
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	f003 0320 	and.w	r3, r3, #32
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d034      	beq.n	800ee56 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	7e9b      	ldrb	r3, [r3, #26]
 800edf0:	f043 0302 	orr.w	r3, r3, #2
 800edf4:	b2da      	uxtb	r2, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2207      	movs	r2, #7
 800edfe:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800ee00:	e029      	b.n	800ee56 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee02:	4b4b      	ldr	r3, [pc, #300]	; (800ef30 <tcp_process+0x564>)
 800ee04:	6818      	ldr	r0, [r3, #0]
 800ee06:	4b4b      	ldr	r3, [pc, #300]	; (800ef34 <tcp_process+0x568>)
 800ee08:	881b      	ldrh	r3, [r3, #0]
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	4b4a      	ldr	r3, [pc, #296]	; (800ef38 <tcp_process+0x56c>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee12:	4b4a      	ldr	r3, [pc, #296]	; (800ef3c <tcp_process+0x570>)
 800ee14:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee16:	885b      	ldrh	r3, [r3, #2]
 800ee18:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee1a:	4a48      	ldr	r2, [pc, #288]	; (800ef3c <tcp_process+0x570>)
 800ee1c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee1e:	8812      	ldrh	r2, [r2, #0]
 800ee20:	b292      	uxth	r2, r2
 800ee22:	9201      	str	r2, [sp, #4]
 800ee24:	9300      	str	r3, [sp, #0]
 800ee26:	4b46      	ldr	r3, [pc, #280]	; (800ef40 <tcp_process+0x574>)
 800ee28:	4a46      	ldr	r2, [pc, #280]	; (800ef44 <tcp_process+0x578>)
 800ee2a:	f002 fbff 	bl	801162c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800ee2e:	e16a      	b.n	800f106 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ee30:	4b3e      	ldr	r3, [pc, #248]	; (800ef2c <tcp_process+0x560>)
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	f003 0302 	and.w	r3, r3, #2
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	f000 8164 	beq.w	800f106 <tcp_process+0x73a>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee42:	1e5a      	subs	r2, r3, #1
 800ee44:	4b3c      	ldr	r3, [pc, #240]	; (800ef38 <tcp_process+0x56c>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	f040 815c 	bne.w	800f106 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f002 fc98 	bl	8011784 <tcp_rexmit>
    break;
 800ee54:	e157      	b.n	800f106 <tcp_process+0x73a>
 800ee56:	e156      	b.n	800f106 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f000 f9e7 	bl	800f22c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ee5e:	4b3e      	ldr	r3, [pc, #248]	; (800ef58 <tcp_process+0x58c>)
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	f003 0320 	and.w	r3, r3, #32
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	f000 814f 	beq.w	800f10a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	7e9b      	ldrb	r3, [r3, #26]
 800ee70:	f043 0302 	orr.w	r3, r3, #2
 800ee74:	b2da      	uxtb	r2, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2207      	movs	r2, #7
 800ee7e:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ee80:	e143      	b.n	800f10a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f000 f9d2 	bl	800f22c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ee88:	4b33      	ldr	r3, [pc, #204]	; (800ef58 <tcp_process+0x58c>)
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	f003 0320 	and.w	r3, r3, #32
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d074      	beq.n	800ef7e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee94:	4b25      	ldr	r3, [pc, #148]	; (800ef2c <tcp_process+0x560>)
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	f003 0310 	and.w	r3, r3, #16
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d063      	beq.n	800ef68 <tcp_process+0x59c>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eea4:	4b22      	ldr	r3, [pc, #136]	; (800ef30 <tcp_process+0x564>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d15d      	bne.n	800ef68 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d159      	bne.n	800ef68 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	7e9b      	ldrb	r3, [r3, #26]
 800eeb8:	f043 0302 	orr.w	r3, r3, #2
 800eebc:	b2da      	uxtb	r2, r3
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f7fe fee6 	bl	800dc94 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eec8:	4b24      	ldr	r3, [pc, #144]	; (800ef5c <tcp_process+0x590>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d105      	bne.n	800eede <tcp_process+0x512>
 800eed2:	4b22      	ldr	r3, [pc, #136]	; (800ef5c <tcp_process+0x590>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	4a20      	ldr	r2, [pc, #128]	; (800ef5c <tcp_process+0x590>)
 800eeda:	6013      	str	r3, [r2, #0]
 800eedc:	e013      	b.n	800ef06 <tcp_process+0x53a>
 800eede:	4b1f      	ldr	r3, [pc, #124]	; (800ef5c <tcp_process+0x590>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	617b      	str	r3, [r7, #20]
 800eee4:	e00c      	b.n	800ef00 <tcp_process+0x534>
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	68db      	ldr	r3, [r3, #12]
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d104      	bne.n	800eefa <tcp_process+0x52e>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	68da      	ldr	r2, [r3, #12]
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	60da      	str	r2, [r3, #12]
 800eef8:	e005      	b.n	800ef06 <tcp_process+0x53a>
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	617b      	str	r3, [r7, #20]
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d1ef      	bne.n	800eee6 <tcp_process+0x51a>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	60da      	str	r2, [r3, #12]
 800ef0c:	4b14      	ldr	r3, [pc, #80]	; (800ef60 <tcp_process+0x594>)
 800ef0e:	2201      	movs	r2, #1
 800ef10:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	220a      	movs	r2, #10
 800ef16:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ef18:	4b12      	ldr	r3, [pc, #72]	; (800ef64 <tcp_process+0x598>)
 800ef1a:	681a      	ldr	r2, [r3, #0]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	60da      	str	r2, [r3, #12]
 800ef20:	4a10      	ldr	r2, [pc, #64]	; (800ef64 <tcp_process+0x598>)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6013      	str	r3, [r2, #0]
 800ef26:	f002 fdd1 	bl	8011acc <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800ef2a:	e0f0      	b.n	800f10e <tcp_process+0x742>
 800ef2c:	20008c6c 	.word	0x20008c6c
 800ef30:	20008c64 	.word	0x20008c64
 800ef34:	20008c6a 	.word	0x20008c6a
 800ef38:	20008c60 	.word	0x20008c60
 800ef3c:	20008c50 	.word	0x20008c50
 800ef40:	2000c3b4 	.word	0x2000c3b4
 800ef44:	2000c3b8 	.word	0x2000c3b8
 800ef48:	08019940 	.word	0x08019940
 800ef4c:	08019b44 	.word	0x08019b44
 800ef50:	08019984 	.word	0x08019984
 800ef54:	20008c68 	.word	0x20008c68
 800ef58:	20008c6d 	.word	0x20008c6d
 800ef5c:	2000fad4 	.word	0x2000fad4
 800ef60:	2000fad0 	.word	0x2000fad0
 800ef64:	2000fae4 	.word	0x2000fae4
        tcp_ack_now(pcb);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	7e9b      	ldrb	r3, [r3, #26]
 800ef6c:	f043 0302 	orr.w	r3, r3, #2
 800ef70:	b2da      	uxtb	r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2208      	movs	r2, #8
 800ef7a:	751a      	strb	r2, [r3, #20]
    break;
 800ef7c:	e0c7      	b.n	800f10e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef7e:	4b6a      	ldr	r3, [pc, #424]	; (800f128 <tcp_process+0x75c>)
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	f003 0310 	and.w	r3, r3, #16
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	f000 80c1 	beq.w	800f10e <tcp_process+0x742>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef90:	4b66      	ldr	r3, [pc, #408]	; (800f12c <tcp_process+0x760>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	429a      	cmp	r2, r3
 800ef96:	f040 80ba 	bne.w	800f10e <tcp_process+0x742>
               pcb->unsent == NULL) {
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	f040 80b5 	bne.w	800f10e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2206      	movs	r2, #6
 800efa8:	751a      	strb	r2, [r3, #20]
    break;
 800efaa:	e0b0      	b.n	800f10e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f000 f93d 	bl	800f22c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800efb2:	4b5f      	ldr	r3, [pc, #380]	; (800f130 <tcp_process+0x764>)
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	f003 0320 	and.w	r3, r3, #32
 800efba:	2b00      	cmp	r3, #0
 800efbc:	f000 80a9 	beq.w	800f112 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	7e9b      	ldrb	r3, [r3, #26]
 800efc4:	f043 0302 	orr.w	r3, r3, #2
 800efc8:	b2da      	uxtb	r2, r3
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f7fe fe60 	bl	800dc94 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800efd4:	4b57      	ldr	r3, [pc, #348]	; (800f134 <tcp_process+0x768>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	687a      	ldr	r2, [r7, #4]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d105      	bne.n	800efea <tcp_process+0x61e>
 800efde:	4b55      	ldr	r3, [pc, #340]	; (800f134 <tcp_process+0x768>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	68db      	ldr	r3, [r3, #12]
 800efe4:	4a53      	ldr	r2, [pc, #332]	; (800f134 <tcp_process+0x768>)
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	e013      	b.n	800f012 <tcp_process+0x646>
 800efea:	4b52      	ldr	r3, [pc, #328]	; (800f134 <tcp_process+0x768>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	613b      	str	r3, [r7, #16]
 800eff0:	e00c      	b.n	800f00c <tcp_process+0x640>
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d104      	bne.n	800f006 <tcp_process+0x63a>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	68da      	ldr	r2, [r3, #12]
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	60da      	str	r2, [r3, #12]
 800f004:	e005      	b.n	800f012 <tcp_process+0x646>
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	613b      	str	r3, [r7, #16]
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d1ef      	bne.n	800eff2 <tcp_process+0x626>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2200      	movs	r2, #0
 800f016:	60da      	str	r2, [r3, #12]
 800f018:	4b47      	ldr	r3, [pc, #284]	; (800f138 <tcp_process+0x76c>)
 800f01a:	2201      	movs	r2, #1
 800f01c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	220a      	movs	r2, #10
 800f022:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f024:	4b45      	ldr	r3, [pc, #276]	; (800f13c <tcp_process+0x770>)
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	60da      	str	r2, [r3, #12]
 800f02c:	4a43      	ldr	r2, [pc, #268]	; (800f13c <tcp_process+0x770>)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6013      	str	r3, [r2, #0]
 800f032:	f002 fd4b 	bl	8011acc <tcp_timer_needed>
    }
    break;
 800f036:	e06c      	b.n	800f112 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f000 f8f7 	bl	800f22c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f03e:	4b3a      	ldr	r3, [pc, #232]	; (800f128 <tcp_process+0x75c>)
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	f003 0310 	and.w	r3, r3, #16
 800f046:	2b00      	cmp	r3, #0
 800f048:	d065      	beq.n	800f116 <tcp_process+0x74a>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f04e:	4b37      	ldr	r3, [pc, #220]	; (800f12c <tcp_process+0x760>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	429a      	cmp	r2, r3
 800f054:	d15f      	bne.n	800f116 <tcp_process+0x74a>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d15b      	bne.n	800f116 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f7fe fe18 	bl	800dc94 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f064:	4b33      	ldr	r3, [pc, #204]	; (800f134 <tcp_process+0x768>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d105      	bne.n	800f07a <tcp_process+0x6ae>
 800f06e:	4b31      	ldr	r3, [pc, #196]	; (800f134 <tcp_process+0x768>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	68db      	ldr	r3, [r3, #12]
 800f074:	4a2f      	ldr	r2, [pc, #188]	; (800f134 <tcp_process+0x768>)
 800f076:	6013      	str	r3, [r2, #0]
 800f078:	e013      	b.n	800f0a2 <tcp_process+0x6d6>
 800f07a:	4b2e      	ldr	r3, [pc, #184]	; (800f134 <tcp_process+0x768>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	60fb      	str	r3, [r7, #12]
 800f080:	e00c      	b.n	800f09c <tcp_process+0x6d0>
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	68db      	ldr	r3, [r3, #12]
 800f086:	687a      	ldr	r2, [r7, #4]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d104      	bne.n	800f096 <tcp_process+0x6ca>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	68da      	ldr	r2, [r3, #12]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	60da      	str	r2, [r3, #12]
 800f094:	e005      	b.n	800f0a2 <tcp_process+0x6d6>
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	68db      	ldr	r3, [r3, #12]
 800f09a:	60fb      	str	r3, [r7, #12]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1ef      	bne.n	800f082 <tcp_process+0x6b6>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	60da      	str	r2, [r3, #12]
 800f0a8:	4b23      	ldr	r3, [pc, #140]	; (800f138 <tcp_process+0x76c>)
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	220a      	movs	r2, #10
 800f0b2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f0b4:	4b21      	ldr	r3, [pc, #132]	; (800f13c <tcp_process+0x770>)
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	60da      	str	r2, [r3, #12]
 800f0bc:	4a1f      	ldr	r2, [pc, #124]	; (800f13c <tcp_process+0x770>)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6013      	str	r3, [r2, #0]
 800f0c2:	f002 fd03 	bl	8011acc <tcp_timer_needed>
    }
    break;
 800f0c6:	e026      	b.n	800f116 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 f8af 	bl	800f22c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f0ce:	4b16      	ldr	r3, [pc, #88]	; (800f128 <tcp_process+0x75c>)
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	f003 0310 	and.w	r3, r3, #16
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d01f      	beq.n	800f11a <tcp_process+0x74e>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f0de:	4b13      	ldr	r3, [pc, #76]	; (800f12c <tcp_process+0x760>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d119      	bne.n	800f11a <tcp_process+0x74e>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d115      	bne.n	800f11a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800f0ee:	4b10      	ldr	r3, [pc, #64]	; (800f130 <tcp_process+0x764>)
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	f043 0310 	orr.w	r3, r3, #16
 800f0f6:	b2da      	uxtb	r2, r3
 800f0f8:	4b0d      	ldr	r3, [pc, #52]	; (800f130 <tcp_process+0x764>)
 800f0fa:	701a      	strb	r2, [r3, #0]
    }
    break;
 800f0fc:	e00d      	b.n	800f11a <tcp_process+0x74e>
  default:
    break;
 800f0fe:	bf00      	nop
 800f100:	e00c      	b.n	800f11c <tcp_process+0x750>
    break;
 800f102:	bf00      	nop
 800f104:	e00a      	b.n	800f11c <tcp_process+0x750>
    break;
 800f106:	bf00      	nop
 800f108:	e008      	b.n	800f11c <tcp_process+0x750>
    break;
 800f10a:	bf00      	nop
 800f10c:	e006      	b.n	800f11c <tcp_process+0x750>
    break;
 800f10e:	bf00      	nop
 800f110:	e004      	b.n	800f11c <tcp_process+0x750>
    break;
 800f112:	bf00      	nop
 800f114:	e002      	b.n	800f11c <tcp_process+0x750>
    break;
 800f116:	bf00      	nop
 800f118:	e000      	b.n	800f11c <tcp_process+0x750>
    break;
 800f11a:	bf00      	nop
  }
  return ERR_OK;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3720      	adds	r7, #32
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	20008c6c 	.word	0x20008c6c
 800f12c:	20008c64 	.word	0x20008c64
 800f130:	20008c6d 	.word	0x20008c6d
 800f134:	2000fad4 	.word	0x2000fad4
 800f138:	2000fad0 	.word	0x2000fad0
 800f13c:	2000fae4 	.word	0x2000fae4

0800f140 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f140:	b590      	push	{r4, r7, lr}
 800f142:	b085      	sub	sp, #20
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	899b      	ldrh	r3, [r3, #12]
 800f150:	b29b      	uxth	r3, r3
 800f152:	4618      	mov	r0, r3
 800f154:	f7fb fe28 	bl	800ada8 <lwip_htons>
 800f158:	4603      	mov	r3, r0
 800f15a:	f003 0301 	and.w	r3, r3, #1
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d027      	beq.n	800f1b2 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f162:	6838      	ldr	r0, [r7, #0]
 800f164:	f7fe fb1f 	bl	800d7a6 <tcp_segs_free>
    next = NULL;
 800f168:	2300      	movs	r3, #0
 800f16a:	603b      	str	r3, [r7, #0]
 800f16c:	e055      	b.n	800f21a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	68db      	ldr	r3, [r3, #12]
 800f172:	899b      	ldrh	r3, [r3, #12]
 800f174:	b29b      	uxth	r3, r3
 800f176:	4618      	mov	r0, r3
 800f178:	f7fb fe16 	bl	800ada8 <lwip_htons>
 800f17c:	4603      	mov	r3, r0
 800f17e:	f003 0301 	and.w	r3, r3, #1
 800f182:	2b00      	cmp	r3, #0
 800f184:	d00d      	beq.n	800f1a2 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	68db      	ldr	r3, [r3, #12]
 800f18a:	899b      	ldrh	r3, [r3, #12]
 800f18c:	b29c      	uxth	r4, r3
 800f18e:	2001      	movs	r0, #1
 800f190:	f7fb fe0a 	bl	800ada8 <lwip_htons>
 800f194:	4603      	mov	r3, r0
 800f196:	461a      	mov	r2, r3
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	68db      	ldr	r3, [r3, #12]
 800f19c:	4322      	orrs	r2, r4
 800f19e:	b292      	uxth	r2, r2
 800f1a0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f1ac:	68f8      	ldr	r0, [r7, #12]
 800f1ae:	f7fe fb0e 	bl	800d7ce <tcp_seg_free>
    while (next &&
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d00e      	beq.n	800f1d6 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	891b      	ldrh	r3, [r3, #8]
 800f1bc:	461a      	mov	r2, r3
 800f1be:	4b1a      	ldr	r3, [pc, #104]	; (800f228 <tcp_oos_insert_segment+0xe8>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	441a      	add	r2, r3
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	68db      	ldr	r3, [r3, #12]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	6839      	ldr	r1, [r7, #0]
 800f1cc:	8909      	ldrh	r1, [r1, #8]
 800f1ce:	440b      	add	r3, r1
 800f1d0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	dacb      	bge.n	800f16e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d01e      	beq.n	800f21a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	891b      	ldrh	r3, [r3, #8]
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	4b11      	ldr	r3, [pc, #68]	; (800f228 <tcp_oos_insert_segment+0xe8>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	441a      	add	r2, r3
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	dd12      	ble.n	800f21a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	b29a      	uxth	r2, r3
 800f1fc:	4b0a      	ldr	r3, [pc, #40]	; (800f228 <tcp_oos_insert_segment+0xe8>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	b29b      	uxth	r3, r3
 800f202:	1ad3      	subs	r3, r2, r3
 800f204:	b29a      	uxth	r2, r3
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	685a      	ldr	r2, [r3, #4]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	891b      	ldrh	r3, [r3, #8]
 800f212:	4619      	mov	r1, r3
 800f214:	4610      	mov	r0, r2
 800f216:	f7fc fe2b 	bl	800be70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	683a      	ldr	r2, [r7, #0]
 800f21e:	601a      	str	r2, [r3, #0]
}
 800f220:	bf00      	nop
 800f222:	3714      	adds	r7, #20
 800f224:	46bd      	mov	sp, r7
 800f226:	bd90      	pop	{r4, r7, pc}
 800f228:	20008c60 	.word	0x20008c60

0800f22c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f22e:	b08d      	sub	sp, #52	; 0x34
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800f234:	2300      	movs	r3, #0
 800f236:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	7d1b      	ldrb	r3, [r3, #20]
 800f23c:	2b03      	cmp	r3, #3
 800f23e:	d806      	bhi.n	800f24e <tcp_receive+0x22>
 800f240:	4ba6      	ldr	r3, [pc, #664]	; (800f4dc <tcp_receive+0x2b0>)
 800f242:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800f246:	49a6      	ldr	r1, [pc, #664]	; (800f4e0 <tcp_receive+0x2b4>)
 800f248:	48a6      	ldr	r0, [pc, #664]	; (800f4e4 <tcp_receive+0x2b8>)
 800f24a:	f007 fc95 	bl	8016b78 <iprintf>

  if (flags & TCP_ACK) {
 800f24e:	4ba6      	ldr	r3, [pc, #664]	; (800f4e8 <tcp_receive+0x2bc>)
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	f003 0310 	and.w	r3, r3, #16
 800f256:	2b00      	cmp	r3, #0
 800f258:	f000 82bf 	beq.w	800f7da <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f262:	461a      	mov	r2, r3
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f268:	4413      	add	r3, r2
 800f26a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f270:	4b9e      	ldr	r3, [pc, #632]	; (800f4ec <tcp_receive+0x2c0>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	1ad3      	subs	r3, r2, r3
 800f276:	2b00      	cmp	r3, #0
 800f278:	db1b      	blt.n	800f2b2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f27e:	4b9b      	ldr	r3, [pc, #620]	; (800f4ec <tcp_receive+0x2c0>)
 800f280:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f282:	429a      	cmp	r2, r3
 800f284:	d106      	bne.n	800f294 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f28a:	4b99      	ldr	r3, [pc, #612]	; (800f4f0 <tcp_receive+0x2c4>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	1ad3      	subs	r3, r2, r3
 800f290:	2b00      	cmp	r3, #0
 800f292:	db0e      	blt.n	800f2b2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f298:	4b95      	ldr	r3, [pc, #596]	; (800f4f0 <tcp_receive+0x2c4>)
 800f29a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d141      	bne.n	800f324 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f2a0:	4b94      	ldr	r3, [pc, #592]	; (800f4f4 <tcp_receive+0x2c8>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	89db      	ldrh	r3, [r3, #14]
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d938      	bls.n	800f324 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f2b2:	4b90      	ldr	r3, [pc, #576]	; (800f4f4 <tcp_receive+0x2c8>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	89db      	ldrh	r3, [r3, #14]
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d205      	bcs.n	800f2dc <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800f2dc:	4b83      	ldr	r3, [pc, #524]	; (800f4ec <tcp_receive+0x2c0>)
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800f2e4:	4b82      	ldr	r3, [pc, #520]	; (800f4f0 <tcp_receive+0x2c4>)
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d10d      	bne.n	800f312 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d111      	bne.n	800f324 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2200      	movs	r2, #0
 800f304:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2201      	movs	r2, #1
 800f30c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800f310:	e008      	b.n	800f324 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d003      	beq.n	800f324 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f324:	4b72      	ldr	r3, [pc, #456]	; (800f4f0 <tcp_receive+0x2c4>)
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f32c:	1ad3      	subs	r3, r2, r3
 800f32e:	2b00      	cmp	r3, #0
 800f330:	dc53      	bgt.n	800f3da <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800f332:	4b71      	ldr	r3, [pc, #452]	; (800f4f8 <tcp_receive+0x2cc>)
 800f334:	881b      	ldrh	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d146      	bne.n	800f3c8 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f33e:	687a      	ldr	r2, [r7, #4]
 800f340:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800f344:	4413      	add	r3, r2
 800f346:	697a      	ldr	r2, [r7, #20]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d13d      	bne.n	800f3c8 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f352:	2b00      	cmp	r3, #0
 800f354:	db38      	blt.n	800f3c8 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f35a:	4b65      	ldr	r3, [pc, #404]	; (800f4f0 <tcp_receive+0x2c4>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	429a      	cmp	r2, r3
 800f360:	d132      	bne.n	800f3c8 <tcp_receive+0x19c>
              found_dupack = 1;
 800f362:	2301      	movs	r3, #1
 800f364:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f36c:	2bff      	cmp	r3, #255	; 0xff
 800f36e:	d007      	beq.n	800f380 <tcp_receive+0x154>
                ++pcb->dupacks;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f376:	3301      	adds	r3, #1
 800f378:	b2da      	uxtb	r2, r3
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f386:	2b03      	cmp	r3, #3
 800f388:	d916      	bls.n	800f3b8 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f394:	4413      	add	r3, r2
 800f396:	b29a      	uxth	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d912      	bls.n	800f3c8 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3ac:	4413      	add	r3, r2
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f3b6:	e007      	b.n	800f3c8 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f3be:	2b03      	cmp	r3, #3
 800f3c0:	d102      	bne.n	800f3c8 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f002 fa2e 	bl	8011824 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	f040 8169 	bne.w	800f6a2 <tcp_receive+0x476>
        pcb->dupacks = 0;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f3d8:	e163      	b.n	800f6a2 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f3da:	4b45      	ldr	r3, [pc, #276]	; (800f4f0 <tcp_receive+0x2c4>)
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3e2:	1ad3      	subs	r3, r2, r3
 800f3e4:	3b01      	subs	r3, #1
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	f2c0 8107 	blt.w	800f5fa <tcp_receive+0x3ce>
 800f3ec:	4b40      	ldr	r3, [pc, #256]	; (800f4f0 <tcp_receive+0x2c4>)
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3f4:	1ad3      	subs	r3, r2, r3
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	f300 80ff 	bgt.w	800f5fa <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	7e9b      	ldrb	r3, [r3, #26]
 800f400:	f003 0304 	and.w	r3, r3, #4
 800f404:	2b00      	cmp	r3, #0
 800f406:	d00c      	beq.n	800f422 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	7e9b      	ldrb	r3, [r3, #26]
 800f40c:	f023 0304 	bic.w	r3, r3, #4
 800f410:	b2da      	uxtb	r2, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2200      	movs	r2, #0
 800f426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f430:	10db      	asrs	r3, r3, #3
 800f432:	b21b      	sxth	r3, r3
 800f434:	b29a      	uxth	r2, r3
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	4413      	add	r3, r2
 800f440:	b29b      	uxth	r3, r3
 800f442:	b21a      	sxth	r2, r3
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2200      	movs	r2, #0
 800f44e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f452:	4b27      	ldr	r3, [pc, #156]	; (800f4f0 <tcp_receive+0x2c4>)
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	7d1b      	ldrb	r3, [r3, #20]
 800f45e:	2b03      	cmp	r3, #3
 800f460:	f240 8094 	bls.w	800f58c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f470:	429a      	cmp	r2, r3
 800f472:	d216      	bcs.n	800f4a2 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f47e:	4413      	add	r3, r2
 800f480:	b29a      	uxth	r2, r3
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f488:	429a      	cmp	r2, r3
 800f48a:	d97f      	bls.n	800f58c <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f496:	4413      	add	r3, r2
 800f498:	b29a      	uxth	r2, r3
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f4a0:	e074      	b.n	800f58c <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4b2:	fb03 f301 	mul.w	r3, r3, r1
 800f4b6:	6879      	ldr	r1, [r7, #4]
 800f4b8:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800f4bc:	fb93 f3f1 	sdiv	r3, r3, r1
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	4413      	add	r3, r2
 800f4c4:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f4cc:	8a7a      	ldrh	r2, [r7, #18]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d95c      	bls.n	800f58c <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	8a7a      	ldrh	r2, [r7, #18]
 800f4d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800f4da:	e057      	b.n	800f58c <tcp_receive+0x360>
 800f4dc:	08019940 	.word	0x08019940
 800f4e0:	08019b64 	.word	0x08019b64
 800f4e4:	08019984 	.word	0x08019984
 800f4e8:	20008c6c 	.word	0x20008c6c
 800f4ec:	20008c60 	.word	0x20008c60
 800f4f0:	20008c64 	.word	0x20008c64
 800f4f4:	20008c50 	.word	0x20008c50
 800f4f8:	20008c6a 	.word	0x20008c6a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f500:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800f512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	4618      	mov	r0, r3
 800f518:	f7fc feb8 	bl	800c28c <pbuf_clen>
 800f51c:	4603      	mov	r3, r0
 800f51e:	429c      	cmp	r4, r3
 800f520:	d206      	bcs.n	800f530 <tcp_receive+0x304>
 800f522:	4b70      	ldr	r3, [pc, #448]	; (800f6e4 <tcp_receive+0x4b8>)
 800f524:	f240 429e 	movw	r2, #1182	; 0x49e
 800f528:	496f      	ldr	r1, [pc, #444]	; (800f6e8 <tcp_receive+0x4bc>)
 800f52a:	4870      	ldr	r0, [pc, #448]	; (800f6ec <tcp_receive+0x4c0>)
 800f52c:	f007 fb24 	bl	8016b78 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800f530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	4618      	mov	r0, r3
 800f536:	f7fc fea9 	bl	800c28c <pbuf_clen>
 800f53a:	4603      	mov	r3, r0
 800f53c:	461a      	mov	r2, r3
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f544:	1a9b      	subs	r3, r3, r2
 800f546:	b29a      	uxth	r2, r3
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800f54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f550:	891a      	ldrh	r2, [r3, #8]
 800f552:	4b67      	ldr	r3, [pc, #412]	; (800f6f0 <tcp_receive+0x4c4>)
 800f554:	881b      	ldrh	r3, [r3, #0]
 800f556:	4413      	add	r3, r2
 800f558:	b29a      	uxth	r2, r3
 800f55a:	4b65      	ldr	r3, [pc, #404]	; (800f6f0 <tcp_receive+0x4c4>)
 800f55c:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800f55e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f560:	f7fe f935 	bl	800d7ce <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d00e      	beq.n	800f58c <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f572:	2b00      	cmp	r3, #0
 800f574:	d10a      	bne.n	800f58c <tcp_receive+0x360>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d106      	bne.n	800f58c <tcp_receive+0x360>
 800f57e:	4b59      	ldr	r3, [pc, #356]	; (800f6e4 <tcp_receive+0x4b8>)
 800f580:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800f584:	495b      	ldr	r1, [pc, #364]	; (800f6f4 <tcp_receive+0x4c8>)
 800f586:	4859      	ldr	r0, [pc, #356]	; (800f6ec <tcp_receive+0x4c0>)
 800f588:	f007 faf6 	bl	8016b78 <iprintf>
      while (pcb->unacked != NULL &&
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f590:	2b00      	cmp	r3, #0
 800f592:	d022      	beq.n	800f5da <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7fb fc11 	bl	800adc4 <lwip_htonl>
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5a8:	891b      	ldrh	r3, [r3, #8]
 800f5aa:	461d      	mov	r5, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5b0:	68db      	ldr	r3, [r3, #12]
 800f5b2:	899b      	ldrh	r3, [r3, #12]
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7fb fbf6 	bl	800ada8 <lwip_htons>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	f003 0303 	and.w	r3, r3, #3
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d001      	beq.n	800f5ca <tcp_receive+0x39e>
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	e000      	b.n	800f5cc <tcp_receive+0x3a0>
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	442b      	add	r3, r5
 800f5ce:	18e2      	adds	r2, r4, r3
 800f5d0:	4b49      	ldr	r3, [pc, #292]	; (800f6f8 <tcp_receive+0x4cc>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	dd90      	ble.n	800f4fc <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d104      	bne.n	800f5ec <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5e8:	861a      	strh	r2, [r3, #48]	; 0x30
 800f5ea:	e002      	b.n	800f5f2 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	76da      	strb	r2, [r3, #27]
 800f5f8:	e002      	b.n	800f600 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f001 fd30 	bl	8011060 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800f600:	e04f      	b.n	800f6a2 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f606:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f60c:	681a      	ldr	r2, [r3, #0]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f616:	2b00      	cmp	r3, #0
 800f618:	d103      	bne.n	800f622 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2200      	movs	r2, #0
 800f61e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800f628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62a:	685b      	ldr	r3, [r3, #4]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7fc fe2d 	bl	800c28c <pbuf_clen>
 800f632:	4603      	mov	r3, r0
 800f634:	429c      	cmp	r4, r3
 800f636:	d206      	bcs.n	800f646 <tcp_receive+0x41a>
 800f638:	4b2a      	ldr	r3, [pc, #168]	; (800f6e4 <tcp_receive+0x4b8>)
 800f63a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f63e:	492a      	ldr	r1, [pc, #168]	; (800f6e8 <tcp_receive+0x4bc>)
 800f640:	482a      	ldr	r0, [pc, #168]	; (800f6ec <tcp_receive+0x4c0>)
 800f642:	f007 fa99 	bl	8016b78 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800f646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7fc fe1e 	bl	800c28c <pbuf_clen>
 800f650:	4603      	mov	r3, r0
 800f652:	461a      	mov	r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f65a:	1a9b      	subs	r3, r3, r2
 800f65c:	b29a      	uxth	r2, r3
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800f664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f666:	891a      	ldrh	r2, [r3, #8]
 800f668:	4b21      	ldr	r3, [pc, #132]	; (800f6f0 <tcp_receive+0x4c4>)
 800f66a:	881b      	ldrh	r3, [r3, #0]
 800f66c:	4413      	add	r3, r2
 800f66e:	b29a      	uxth	r2, r3
 800f670:	4b1f      	ldr	r3, [pc, #124]	; (800f6f0 <tcp_receive+0x4c4>)
 800f672:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800f674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f676:	f7fe f8aa 	bl	800d7ce <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f680:	2b00      	cmp	r3, #0
 800f682:	d00e      	beq.n	800f6a2 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d10a      	bne.n	800f6a2 <tcp_receive+0x476>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f690:	2b00      	cmp	r3, #0
 800f692:	d106      	bne.n	800f6a2 <tcp_receive+0x476>
 800f694:	4b13      	ldr	r3, [pc, #76]	; (800f6e4 <tcp_receive+0x4b8>)
 800f696:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800f69a:	4916      	ldr	r1, [pc, #88]	; (800f6f4 <tcp_receive+0x4c8>)
 800f69c:	4813      	ldr	r0, [pc, #76]	; (800f6ec <tcp_receive+0x4c0>)
 800f69e:	f007 fa6b 	bl	8016b78 <iprintf>
    while (pcb->unsent != NULL &&
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d036      	beq.n	800f718 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800f6aa:	4b13      	ldr	r3, [pc, #76]	; (800f6f8 <tcp_receive+0x4cc>)
 800f6ac:	681c      	ldr	r4, [r3, #0]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6b2:	68db      	ldr	r3, [r3, #12]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fb fb84 	bl	800adc4 <lwip_htonl>
 800f6bc:	4605      	mov	r5, r0
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6c2:	891b      	ldrh	r3, [r3, #8]
 800f6c4:	461e      	mov	r6, r3
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6ca:	68db      	ldr	r3, [r3, #12]
 800f6cc:	899b      	ldrh	r3, [r3, #12]
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7fb fb69 	bl	800ada8 <lwip_htons>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	f003 0303 	and.w	r3, r3, #3
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d00d      	beq.n	800f6fc <tcp_receive+0x4d0>
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	e00c      	b.n	800f6fe <tcp_receive+0x4d2>
 800f6e4:	08019940 	.word	0x08019940
 800f6e8:	08019b80 	.word	0x08019b80
 800f6ec:	08019984 	.word	0x08019984
 800f6f0:	20008c68 	.word	0x20008c68
 800f6f4:	08019ba8 	.word	0x08019ba8
 800f6f8:	20008c64 	.word	0x20008c64
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	4433      	add	r3, r6
 800f700:	442b      	add	r3, r5
 800f702:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800f704:	2b00      	cmp	r3, #0
 800f706:	db07      	blt.n	800f718 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800f708:	4b8d      	ldr	r3, [pc, #564]	; (800f940 <tcp_receive+0x714>)
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f710:	1ad3      	subs	r3, r2, r3
 800f712:	2b00      	cmp	r3, #0
 800f714:	f77f af75 	ble.w	800f602 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f71e:	4b89      	ldr	r3, [pc, #548]	; (800f944 <tcp_receive+0x718>)
 800f720:	881b      	ldrh	r3, [r3, #0]
 800f722:	4413      	add	r3, r2
 800f724:	b29a      	uxth	r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f730:	2b00      	cmp	r3, #0
 800f732:	d052      	beq.n	800f7da <tcp_receive+0x5ae>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f738:	4b81      	ldr	r3, [pc, #516]	; (800f940 <tcp_receive+0x714>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	1ad3      	subs	r3, r2, r3
 800f73e:	2b00      	cmp	r3, #0
 800f740:	da4b      	bge.n	800f7da <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f742:	4b81      	ldr	r3, [pc, #516]	; (800f948 <tcp_receive+0x71c>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	b29a      	uxth	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f74c:	b29b      	uxth	r3, r3
 800f74e:	1ad3      	subs	r3, r2, r3
 800f750:	b29b      	uxth	r3, r3
 800f752:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800f754:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f75c:	10db      	asrs	r3, r3, #3
 800f75e:	b21b      	sxth	r3, r3
 800f760:	b29b      	uxth	r3, r3
 800f762:	1ad3      	subs	r3, r2, r3
 800f764:	b29b      	uxth	r3, r3
 800f766:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f76e:	b29a      	uxth	r2, r3
 800f770:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f772:	4413      	add	r3, r2
 800f774:	b29b      	uxth	r3, r3
 800f776:	b21a      	sxth	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f77c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f780:	2b00      	cmp	r3, #0
 800f782:	da03      	bge.n	800f78c <tcp_receive+0x560>
        m = -m;
 800f784:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f786:	425b      	negs	r3, r3
 800f788:	b29b      	uxth	r3, r3
 800f78a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800f78c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f794:	109b      	asrs	r3, r3, #2
 800f796:	b21b      	sxth	r3, r3
 800f798:	b29b      	uxth	r3, r3
 800f79a:	1ad3      	subs	r3, r2, r3
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7aa:	4413      	add	r3, r2
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	b21a      	sxth	r2, r3
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7ba:	10db      	asrs	r3, r3, #3
 800f7bc:	b21b      	sxth	r3, r3
 800f7be:	b29a      	uxth	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	4413      	add	r3, r2
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	b21a      	sxth	r2, r3
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f7da:	4b5c      	ldr	r3, [pc, #368]	; (800f94c <tcp_receive+0x720>)
 800f7dc:	881b      	ldrh	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	f000 84f1 	beq.w	80101c6 <tcp_receive+0xf9a>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	7d1b      	ldrb	r3, [r3, #20]
 800f7e8:	2b06      	cmp	r3, #6
 800f7ea:	f200 84ec 	bhi.w	80101c6 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7f2:	4b57      	ldr	r3, [pc, #348]	; (800f950 <tcp_receive+0x724>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	1ad3      	subs	r3, r2, r3
 800f7f8:	3b01      	subs	r3, #1
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f2c0 80b8 	blt.w	800f970 <tcp_receive+0x744>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f804:	4b51      	ldr	r3, [pc, #324]	; (800f94c <tcp_receive+0x720>)
 800f806:	881b      	ldrh	r3, [r3, #0]
 800f808:	4619      	mov	r1, r3
 800f80a:	4b51      	ldr	r3, [pc, #324]	; (800f950 <tcp_receive+0x724>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	440b      	add	r3, r1
 800f810:	1ad3      	subs	r3, r2, r3
 800f812:	3301      	adds	r3, #1
 800f814:	2b00      	cmp	r3, #0
 800f816:	f300 80ab 	bgt.w	800f970 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f81a:	4b4e      	ldr	r3, [pc, #312]	; (800f954 <tcp_receive+0x728>)
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f824:	4b4a      	ldr	r3, [pc, #296]	; (800f950 <tcp_receive+0x724>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	1ad3      	subs	r3, r2, r3
 800f82a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f82c:	4b49      	ldr	r3, [pc, #292]	; (800f954 <tcp_receive+0x728>)
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d106      	bne.n	800f842 <tcp_receive+0x616>
 800f834:	4b48      	ldr	r3, [pc, #288]	; (800f958 <tcp_receive+0x72c>)
 800f836:	f240 523c 	movw	r2, #1340	; 0x53c
 800f83a:	4948      	ldr	r1, [pc, #288]	; (800f95c <tcp_receive+0x730>)
 800f83c:	4848      	ldr	r0, [pc, #288]	; (800f960 <tcp_receive+0x734>)
 800f83e:	f007 f99b 	bl	8016b78 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800f842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f844:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f848:	4293      	cmp	r3, r2
 800f84a:	dd06      	ble.n	800f85a <tcp_receive+0x62e>
 800f84c:	4b42      	ldr	r3, [pc, #264]	; (800f958 <tcp_receive+0x72c>)
 800f84e:	f240 523d 	movw	r2, #1341	; 0x53d
 800f852:	4944      	ldr	r1, [pc, #272]	; (800f964 <tcp_receive+0x738>)
 800f854:	4842      	ldr	r0, [pc, #264]	; (800f960 <tcp_receive+0x734>)
 800f856:	f007 f98f 	bl	8016b78 <iprintf>
      if (inseg.p->len < off) {
 800f85a:	4b3e      	ldr	r3, [pc, #248]	; (800f954 <tcp_receive+0x728>)
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	895b      	ldrh	r3, [r3, #10]
 800f860:	461a      	mov	r2, r3
 800f862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f864:	4293      	cmp	r3, r2
 800f866:	dd3e      	ble.n	800f8e6 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f868:	4b3a      	ldr	r3, [pc, #232]	; (800f954 <tcp_receive+0x728>)
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	891b      	ldrh	r3, [r3, #8]
 800f86e:	461a      	mov	r2, r3
 800f870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f872:	4293      	cmp	r3, r2
 800f874:	dd06      	ble.n	800f884 <tcp_receive+0x658>
 800f876:	4b38      	ldr	r3, [pc, #224]	; (800f958 <tcp_receive+0x72c>)
 800f878:	f240 523f 	movw	r2, #1343	; 0x53f
 800f87c:	493a      	ldr	r1, [pc, #232]	; (800f968 <tcp_receive+0x73c>)
 800f87e:	4838      	ldr	r0, [pc, #224]	; (800f960 <tcp_receive+0x734>)
 800f880:	f007 f97a 	bl	8016b78 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f884:	4b33      	ldr	r3, [pc, #204]	; (800f954 <tcp_receive+0x728>)
 800f886:	685b      	ldr	r3, [r3, #4]
 800f888:	891a      	ldrh	r2, [r3, #8]
 800f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	1ad3      	subs	r3, r2, r3
 800f890:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800f892:	e00e      	b.n	800f8b2 <tcp_receive+0x686>
          off -= p->len;
 800f894:	69bb      	ldr	r3, [r7, #24]
 800f896:	895b      	ldrh	r3, [r3, #10]
 800f898:	461a      	mov	r2, r3
 800f89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89c:	1a9b      	subs	r3, r3, r2
 800f89e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800f8a0:	69bb      	ldr	r3, [r7, #24]
 800f8a2:	8a3a      	ldrh	r2, [r7, #16]
 800f8a4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800f8a6:	69bb      	ldr	r3, [r7, #24]
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800f8b2:	69bb      	ldr	r3, [r7, #24]
 800f8b4:	895b      	ldrh	r3, [r3, #10]
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	dcea      	bgt.n	800f894 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800f8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	425b      	negs	r3, r3
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	b21b      	sxth	r3, r3
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	69b8      	ldr	r0, [r7, #24]
 800f8cc:	f7fc fc20 	bl	800c110 <pbuf_header>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d01c      	beq.n	800f910 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800f8d6:	4b20      	ldr	r3, [pc, #128]	; (800f958 <tcp_receive+0x72c>)
 800f8d8:	f240 524c 	movw	r2, #1356	; 0x54c
 800f8dc:	4923      	ldr	r1, [pc, #140]	; (800f96c <tcp_receive+0x740>)
 800f8de:	4820      	ldr	r0, [pc, #128]	; (800f960 <tcp_receive+0x734>)
 800f8e0:	f007 f94a 	bl	8016b78 <iprintf>
 800f8e4:	e014      	b.n	800f910 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800f8e6:	4b1b      	ldr	r3, [pc, #108]	; (800f954 <tcp_receive+0x728>)
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8ec:	b292      	uxth	r2, r2
 800f8ee:	4252      	negs	r2, r2
 800f8f0:	b292      	uxth	r2, r2
 800f8f2:	b212      	sxth	r2, r2
 800f8f4:	4611      	mov	r1, r2
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fc fc0a 	bl	800c110 <pbuf_header>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d006      	beq.n	800f910 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800f902:	4b15      	ldr	r3, [pc, #84]	; (800f958 <tcp_receive+0x72c>)
 800f904:	f240 5251 	movw	r2, #1361	; 0x551
 800f908:	4918      	ldr	r1, [pc, #96]	; (800f96c <tcp_receive+0x740>)
 800f90a:	4815      	ldr	r0, [pc, #84]	; (800f960 <tcp_receive+0x734>)
 800f90c:	f007 f934 	bl	8016b78 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800f910:	4b10      	ldr	r3, [pc, #64]	; (800f954 <tcp_receive+0x728>)
 800f912:	891a      	ldrh	r2, [r3, #8]
 800f914:	4b0e      	ldr	r3, [pc, #56]	; (800f950 <tcp_receive+0x724>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	b299      	uxth	r1, r3
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91e:	b29b      	uxth	r3, r3
 800f920:	1acb      	subs	r3, r1, r3
 800f922:	b29b      	uxth	r3, r3
 800f924:	4413      	add	r3, r2
 800f926:	b29a      	uxth	r2, r3
 800f928:	4b0a      	ldr	r3, [pc, #40]	; (800f954 <tcp_receive+0x728>)
 800f92a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f930:	4a07      	ldr	r2, [pc, #28]	; (800f950 <tcp_receive+0x724>)
 800f932:	6013      	str	r3, [r2, #0]
 800f934:	4b07      	ldr	r3, [pc, #28]	; (800f954 <tcp_receive+0x728>)
 800f936:	68db      	ldr	r3, [r3, #12]
 800f938:	4a05      	ldr	r2, [pc, #20]	; (800f950 <tcp_receive+0x724>)
 800f93a:	6812      	ldr	r2, [r2, #0]
 800f93c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f93e:	e025      	b.n	800f98c <tcp_receive+0x760>
 800f940:	20008c64 	.word	0x20008c64
 800f944:	20008c68 	.word	0x20008c68
 800f948:	2000fad8 	.word	0x2000fad8
 800f94c:	20008c6a 	.word	0x20008c6a
 800f950:	20008c60 	.word	0x20008c60
 800f954:	20008c40 	.word	0x20008c40
 800f958:	08019940 	.word	0x08019940
 800f95c:	08019bc8 	.word	0x08019bc8
 800f960:	08019984 	.word	0x08019984
 800f964:	08019bd8 	.word	0x08019bd8
 800f968:	08019be8 	.word	0x08019be8
 800f96c:	08019bf8 	.word	0x08019bf8
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f970:	4b87      	ldr	r3, [pc, #540]	; (800fb90 <tcp_receive+0x964>)
 800f972:	681a      	ldr	r2, [r3, #0]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f978:	1ad3      	subs	r3, r2, r3
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	da06      	bge.n	800f98c <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	7e9b      	ldrb	r3, [r3, #26]
 800f982:	f043 0302 	orr.w	r3, r3, #2
 800f986:	b2da      	uxtb	r2, r3
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f98c:	4b80      	ldr	r3, [pc, #512]	; (800fb90 <tcp_receive+0x964>)
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f994:	1ad3      	subs	r3, r2, r3
 800f996:	2b00      	cmp	r3, #0
 800f998:	f2c0 8410 	blt.w	80101bc <tcp_receive+0xf90>
 800f99c:	4b7c      	ldr	r3, [pc, #496]	; (800fb90 <tcp_receive+0x964>)
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a4:	6879      	ldr	r1, [r7, #4]
 800f9a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f9a8:	440b      	add	r3, r1
 800f9aa:	1ad3      	subs	r3, r2, r3
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f300 8404 	bgt.w	80101bc <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9b8:	4b75      	ldr	r3, [pc, #468]	; (800fb90 <tcp_receive+0x964>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	f040 8287 	bne.w	800fed0 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f9c2:	4b74      	ldr	r3, [pc, #464]	; (800fb94 <tcp_receive+0x968>)
 800f9c4:	891c      	ldrh	r4, [r3, #8]
 800f9c6:	4b73      	ldr	r3, [pc, #460]	; (800fb94 <tcp_receive+0x968>)
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	899b      	ldrh	r3, [r3, #12]
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fb f9ea 	bl	800ada8 <lwip_htons>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	f003 0303 	and.w	r3, r3, #3
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d001      	beq.n	800f9e2 <tcp_receive+0x7b6>
 800f9de:	2301      	movs	r3, #1
 800f9e0:	e000      	b.n	800f9e4 <tcp_receive+0x7b8>
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	4423      	add	r3, r4
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	4b6b      	ldr	r3, [pc, #428]	; (800fb98 <tcp_receive+0x96c>)
 800f9ea:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9f0:	4b69      	ldr	r3, [pc, #420]	; (800fb98 <tcp_receive+0x96c>)
 800f9f2:	881b      	ldrh	r3, [r3, #0]
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d26e      	bcs.n	800fad6 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f9f8:	4b66      	ldr	r3, [pc, #408]	; (800fb94 <tcp_receive+0x968>)
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	899b      	ldrh	r3, [r3, #12]
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	4618      	mov	r0, r3
 800fa02:	f7fb f9d1 	bl	800ada8 <lwip_htons>
 800fa06:	4603      	mov	r3, r0
 800fa08:	f003 0301 	and.w	r3, r3, #1
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d01b      	beq.n	800fa48 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fa10:	4b60      	ldr	r3, [pc, #384]	; (800fb94 <tcp_receive+0x968>)
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	899b      	ldrh	r3, [r3, #12]
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fa1c:	b29c      	uxth	r4, r3
 800fa1e:	4b5d      	ldr	r3, [pc, #372]	; (800fb94 <tcp_receive+0x968>)
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	899b      	ldrh	r3, [r3, #12]
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fb f9be 	bl	800ada8 <lwip_htons>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fb f9b7 	bl	800ada8 <lwip_htons>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	4b55      	ldr	r3, [pc, #340]	; (800fb94 <tcp_receive+0x968>)
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	4322      	orrs	r2, r4
 800fa44:	b292      	uxth	r2, r2
 800fa46:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa4c:	4b51      	ldr	r3, [pc, #324]	; (800fb94 <tcp_receive+0x968>)
 800fa4e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fa50:	4b50      	ldr	r3, [pc, #320]	; (800fb94 <tcp_receive+0x968>)
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	899b      	ldrh	r3, [r3, #12]
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7fb f9a5 	bl	800ada8 <lwip_htons>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	f003 0302 	and.w	r3, r3, #2
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d005      	beq.n	800fa74 <tcp_receive+0x848>
            inseg.len -= 1;
 800fa68:	4b4a      	ldr	r3, [pc, #296]	; (800fb94 <tcp_receive+0x968>)
 800fa6a:	891b      	ldrh	r3, [r3, #8]
 800fa6c:	3b01      	subs	r3, #1
 800fa6e:	b29a      	uxth	r2, r3
 800fa70:	4b48      	ldr	r3, [pc, #288]	; (800fb94 <tcp_receive+0x968>)
 800fa72:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fa74:	4b47      	ldr	r3, [pc, #284]	; (800fb94 <tcp_receive+0x968>)
 800fa76:	685a      	ldr	r2, [r3, #4]
 800fa78:	4b46      	ldr	r3, [pc, #280]	; (800fb94 <tcp_receive+0x968>)
 800fa7a:	891b      	ldrh	r3, [r3, #8]
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	4610      	mov	r0, r2
 800fa80:	f7fc f9f6 	bl	800be70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fa84:	4b43      	ldr	r3, [pc, #268]	; (800fb94 <tcp_receive+0x968>)
 800fa86:	891c      	ldrh	r4, [r3, #8]
 800fa88:	4b42      	ldr	r3, [pc, #264]	; (800fb94 <tcp_receive+0x968>)
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	899b      	ldrh	r3, [r3, #12]
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7fb f989 	bl	800ada8 <lwip_htons>
 800fa96:	4603      	mov	r3, r0
 800fa98:	f003 0303 	and.w	r3, r3, #3
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d001      	beq.n	800faa4 <tcp_receive+0x878>
 800faa0:	2301      	movs	r3, #1
 800faa2:	e000      	b.n	800faa6 <tcp_receive+0x87a>
 800faa4:	2300      	movs	r3, #0
 800faa6:	4423      	add	r3, r4
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	4b3b      	ldr	r3, [pc, #236]	; (800fb98 <tcp_receive+0x96c>)
 800faac:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800faae:	4b3a      	ldr	r3, [pc, #232]	; (800fb98 <tcp_receive+0x96c>)
 800fab0:	881b      	ldrh	r3, [r3, #0]
 800fab2:	461a      	mov	r2, r3
 800fab4:	4b36      	ldr	r3, [pc, #216]	; (800fb90 <tcp_receive+0x964>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	441a      	add	r2, r3
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fabe:	6879      	ldr	r1, [r7, #4]
 800fac0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fac2:	440b      	add	r3, r1
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d006      	beq.n	800fad6 <tcp_receive+0x8aa>
 800fac8:	4b34      	ldr	r3, [pc, #208]	; (800fb9c <tcp_receive+0x970>)
 800faca:	f240 527f 	movw	r2, #1407	; 0x57f
 800face:	4934      	ldr	r1, [pc, #208]	; (800fba0 <tcp_receive+0x974>)
 800fad0:	4834      	ldr	r0, [pc, #208]	; (800fba4 <tcp_receive+0x978>)
 800fad2:	f007 f851 	bl	8016b78 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f000 80e1 	beq.w	800fca2 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fae0:	4b2c      	ldr	r3, [pc, #176]	; (800fb94 <tcp_receive+0x968>)
 800fae2:	68db      	ldr	r3, [r3, #12]
 800fae4:	899b      	ldrh	r3, [r3, #12]
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	4618      	mov	r0, r3
 800faea:	f7fb f95d 	bl	800ada8 <lwip_htons>
 800faee:	4603      	mov	r3, r0
 800faf0:	f003 0301 	and.w	r3, r3, #1
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d010      	beq.n	800fb1a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800faf8:	e00a      	b.n	800fb10 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fafe:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb04:	681a      	ldr	r2, [r3, #0]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800fb0a:	68b8      	ldr	r0, [r7, #8]
 800fb0c:	f7fd fe5f 	bl	800d7ce <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d1f0      	bne.n	800fafa <tcp_receive+0x8ce>
 800fb18:	e0c3      	b.n	800fca2 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fb20:	e04f      	b.n	800fbc2 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb24:	68db      	ldr	r3, [r3, #12]
 800fb26:	899b      	ldrh	r3, [r3, #12]
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7fb f93c 	bl	800ada8 <lwip_htons>
 800fb30:	4603      	mov	r3, r0
 800fb32:	f003 0301 	and.w	r3, r3, #1
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d03b      	beq.n	800fbb2 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fb3a:	4b16      	ldr	r3, [pc, #88]	; (800fb94 <tcp_receive+0x968>)
 800fb3c:	68db      	ldr	r3, [r3, #12]
 800fb3e:	899b      	ldrh	r3, [r3, #12]
 800fb40:	b29b      	uxth	r3, r3
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fb f930 	bl	800ada8 <lwip_htons>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d12f      	bne.n	800fbb2 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fb52:	4b10      	ldr	r3, [pc, #64]	; (800fb94 <tcp_receive+0x968>)
 800fb54:	68db      	ldr	r3, [r3, #12]
 800fb56:	899b      	ldrh	r3, [r3, #12]
 800fb58:	b29c      	uxth	r4, r3
 800fb5a:	2001      	movs	r0, #1
 800fb5c:	f7fb f924 	bl	800ada8 <lwip_htons>
 800fb60:	4603      	mov	r3, r0
 800fb62:	461a      	mov	r2, r3
 800fb64:	4b0b      	ldr	r3, [pc, #44]	; (800fb94 <tcp_receive+0x968>)
 800fb66:	68db      	ldr	r3, [r3, #12]
 800fb68:	4322      	orrs	r2, r4
 800fb6a:	b292      	uxth	r2, r2
 800fb6c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fb6e:	4b09      	ldr	r3, [pc, #36]	; (800fb94 <tcp_receive+0x968>)
 800fb70:	891c      	ldrh	r4, [r3, #8]
 800fb72:	4b08      	ldr	r3, [pc, #32]	; (800fb94 <tcp_receive+0x968>)
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	899b      	ldrh	r3, [r3, #12]
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7fb f914 	bl	800ada8 <lwip_htons>
 800fb80:	4603      	mov	r3, r0
 800fb82:	f003 0303 	and.w	r3, r3, #3
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d00e      	beq.n	800fba8 <tcp_receive+0x97c>
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	e00d      	b.n	800fbaa <tcp_receive+0x97e>
 800fb8e:	bf00      	nop
 800fb90:	20008c60 	.word	0x20008c60
 800fb94:	20008c40 	.word	0x20008c40
 800fb98:	20008c6a 	.word	0x20008c6a
 800fb9c:	08019940 	.word	0x08019940
 800fba0:	08019c0c 	.word	0x08019c0c
 800fba4:	08019984 	.word	0x08019984
 800fba8:	2300      	movs	r3, #0
 800fbaa:	4423      	add	r3, r4
 800fbac:	b29a      	uxth	r2, r3
 800fbae:	4b95      	ldr	r3, [pc, #596]	; (800fe04 <tcp_receive+0xbd8>)
 800fbb0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800fbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800fbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800fbbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbbe:	f7fd fe06 	bl	800d7ce <tcp_seg_free>
            while (next &&
 800fbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d00e      	beq.n	800fbe6 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fbc8:	4b8e      	ldr	r3, [pc, #568]	; (800fe04 <tcp_receive+0xbd8>)
 800fbca:	881b      	ldrh	r3, [r3, #0]
 800fbcc:	461a      	mov	r2, r3
 800fbce:	4b8e      	ldr	r3, [pc, #568]	; (800fe08 <tcp_receive+0xbdc>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	441a      	add	r2, r3
 800fbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd6:	68db      	ldr	r3, [r3, #12]
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbdc:	8909      	ldrh	r1, [r1, #8]
 800fbde:	440b      	add	r3, r1
 800fbe0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	da9d      	bge.n	800fb22 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d057      	beq.n	800fc9c <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800fbec:	4b85      	ldr	r3, [pc, #532]	; (800fe04 <tcp_receive+0xbd8>)
 800fbee:	881b      	ldrh	r3, [r3, #0]
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	4b85      	ldr	r3, [pc, #532]	; (800fe08 <tcp_receive+0xbdc>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	441a      	add	r2, r3
 800fbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfa:	68db      	ldr	r3, [r3, #12]
 800fbfc:	685b      	ldr	r3, [r3, #4]
 800fbfe:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	dd4b      	ble.n	800fc9c <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	685b      	ldr	r3, [r3, #4]
 800fc0a:	b29a      	uxth	r2, r3
 800fc0c:	4b7e      	ldr	r3, [pc, #504]	; (800fe08 <tcp_receive+0xbdc>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	b29b      	uxth	r3, r3
 800fc12:	1ad3      	subs	r3, r2, r3
 800fc14:	b29a      	uxth	r2, r3
 800fc16:	4b7d      	ldr	r3, [pc, #500]	; (800fe0c <tcp_receive+0xbe0>)
 800fc18:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fc1a:	4b7c      	ldr	r3, [pc, #496]	; (800fe0c <tcp_receive+0xbe0>)
 800fc1c:	68db      	ldr	r3, [r3, #12]
 800fc1e:	899b      	ldrh	r3, [r3, #12]
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fb f8c0 	bl	800ada8 <lwip_htons>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	f003 0302 	and.w	r3, r3, #2
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d005      	beq.n	800fc3e <tcp_receive+0xa12>
                inseg.len -= 1;
 800fc32:	4b76      	ldr	r3, [pc, #472]	; (800fe0c <tcp_receive+0xbe0>)
 800fc34:	891b      	ldrh	r3, [r3, #8]
 800fc36:	3b01      	subs	r3, #1
 800fc38:	b29a      	uxth	r2, r3
 800fc3a:	4b74      	ldr	r3, [pc, #464]	; (800fe0c <tcp_receive+0xbe0>)
 800fc3c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fc3e:	4b73      	ldr	r3, [pc, #460]	; (800fe0c <tcp_receive+0xbe0>)
 800fc40:	685a      	ldr	r2, [r3, #4]
 800fc42:	4b72      	ldr	r3, [pc, #456]	; (800fe0c <tcp_receive+0xbe0>)
 800fc44:	891b      	ldrh	r3, [r3, #8]
 800fc46:	4619      	mov	r1, r3
 800fc48:	4610      	mov	r0, r2
 800fc4a:	f7fc f911 	bl	800be70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fc4e:	4b6f      	ldr	r3, [pc, #444]	; (800fe0c <tcp_receive+0xbe0>)
 800fc50:	891c      	ldrh	r4, [r3, #8]
 800fc52:	4b6e      	ldr	r3, [pc, #440]	; (800fe0c <tcp_receive+0xbe0>)
 800fc54:	68db      	ldr	r3, [r3, #12]
 800fc56:	899b      	ldrh	r3, [r3, #12]
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7fb f8a4 	bl	800ada8 <lwip_htons>
 800fc60:	4603      	mov	r3, r0
 800fc62:	f003 0303 	and.w	r3, r3, #3
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d001      	beq.n	800fc6e <tcp_receive+0xa42>
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	e000      	b.n	800fc70 <tcp_receive+0xa44>
 800fc6e:	2300      	movs	r3, #0
 800fc70:	4423      	add	r3, r4
 800fc72:	b29a      	uxth	r2, r3
 800fc74:	4b63      	ldr	r3, [pc, #396]	; (800fe04 <tcp_receive+0xbd8>)
 800fc76:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fc78:	4b62      	ldr	r3, [pc, #392]	; (800fe04 <tcp_receive+0xbd8>)
 800fc7a:	881b      	ldrh	r3, [r3, #0]
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	4b62      	ldr	r3, [pc, #392]	; (800fe08 <tcp_receive+0xbdc>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	441a      	add	r2, r3
 800fc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d006      	beq.n	800fc9c <tcp_receive+0xa70>
 800fc8e:	4b60      	ldr	r3, [pc, #384]	; (800fe10 <tcp_receive+0xbe4>)
 800fc90:	f240 52af 	movw	r2, #1455	; 0x5af
 800fc94:	495f      	ldr	r1, [pc, #380]	; (800fe14 <tcp_receive+0xbe8>)
 800fc96:	4860      	ldr	r0, [pc, #384]	; (800fe18 <tcp_receive+0xbec>)
 800fc98:	f006 ff6e 	bl	8016b78 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fca0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fca2:	4b58      	ldr	r3, [pc, #352]	; (800fe04 <tcp_receive+0xbd8>)
 800fca4:	881b      	ldrh	r3, [r3, #0]
 800fca6:	461a      	mov	r2, r3
 800fca8:	4b57      	ldr	r3, [pc, #348]	; (800fe08 <tcp_receive+0xbdc>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	441a      	add	r2, r3
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fcb6:	4b53      	ldr	r3, [pc, #332]	; (800fe04 <tcp_receive+0xbd8>)
 800fcb8:	881b      	ldrh	r3, [r3, #0]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d206      	bcs.n	800fccc <tcp_receive+0xaa0>
 800fcbe:	4b54      	ldr	r3, [pc, #336]	; (800fe10 <tcp_receive+0xbe4>)
 800fcc0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800fcc4:	4955      	ldr	r1, [pc, #340]	; (800fe1c <tcp_receive+0xbf0>)
 800fcc6:	4854      	ldr	r0, [pc, #336]	; (800fe18 <tcp_receive+0xbec>)
 800fcc8:	f006 ff56 	bl	8016b78 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fcd0:	4b4c      	ldr	r3, [pc, #304]	; (800fe04 <tcp_receive+0xbd8>)
 800fcd2:	881b      	ldrh	r3, [r3, #0]
 800fcd4:	1ad3      	subs	r3, r2, r3
 800fcd6:	b29a      	uxth	r2, r3
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f7fd f8e9 	bl	800ceb4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fce2:	4b4a      	ldr	r3, [pc, #296]	; (800fe0c <tcp_receive+0xbe0>)
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	891b      	ldrh	r3, [r3, #8]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d006      	beq.n	800fcfa <tcp_receive+0xace>
          recv_data = inseg.p;
 800fcec:	4b47      	ldr	r3, [pc, #284]	; (800fe0c <tcp_receive+0xbe0>)
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	4a4b      	ldr	r2, [pc, #300]	; (800fe20 <tcp_receive+0xbf4>)
 800fcf2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fcf4:	4b45      	ldr	r3, [pc, #276]	; (800fe0c <tcp_receive+0xbe0>)
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fcfa:	4b44      	ldr	r3, [pc, #272]	; (800fe0c <tcp_receive+0xbe0>)
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	899b      	ldrh	r3, [r3, #12]
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fb f850 	bl	800ada8 <lwip_htons>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	f003 0301 	and.w	r3, r3, #1
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	f000 80b4 	beq.w	800fe7c <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fd14:	4b43      	ldr	r3, [pc, #268]	; (800fe24 <tcp_receive+0xbf8>)
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	f043 0320 	orr.w	r3, r3, #32
 800fd1c:	b2da      	uxtb	r2, r3
 800fd1e:	4b41      	ldr	r3, [pc, #260]	; (800fe24 <tcp_receive+0xbf8>)
 800fd20:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fd22:	e0ab      	b.n	800fe7c <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd28:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd2e:	68db      	ldr	r3, [r3, #12]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	4a35      	ldr	r2, [pc, #212]	; (800fe08 <tcp_receive+0xbdc>)
 800fd34:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	891b      	ldrh	r3, [r3, #8]
 800fd3a:	461c      	mov	r4, r3
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	899b      	ldrh	r3, [r3, #12]
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7fb f82f 	bl	800ada8 <lwip_htons>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	f003 0303 	and.w	r3, r3, #3
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d001      	beq.n	800fd58 <tcp_receive+0xb2c>
 800fd54:	2301      	movs	r3, #1
 800fd56:	e000      	b.n	800fd5a <tcp_receive+0xb2e>
 800fd58:	2300      	movs	r3, #0
 800fd5a:	191a      	adds	r2, r3, r4
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd60:	441a      	add	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd6a:	461c      	mov	r4, r3
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	891b      	ldrh	r3, [r3, #8]
 800fd70:	461d      	mov	r5, r3
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	899b      	ldrh	r3, [r3, #12]
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7fb f814 	bl	800ada8 <lwip_htons>
 800fd80:	4603      	mov	r3, r0
 800fd82:	f003 0303 	and.w	r3, r3, #3
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d001      	beq.n	800fd8e <tcp_receive+0xb62>
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	e000      	b.n	800fd90 <tcp_receive+0xb64>
 800fd8e:	2300      	movs	r3, #0
 800fd90:	442b      	add	r3, r5
 800fd92:	429c      	cmp	r4, r3
 800fd94:	d206      	bcs.n	800fda4 <tcp_receive+0xb78>
 800fd96:	4b1e      	ldr	r3, [pc, #120]	; (800fe10 <tcp_receive+0xbe4>)
 800fd98:	f240 52de 	movw	r2, #1502	; 0x5de
 800fd9c:	4922      	ldr	r1, [pc, #136]	; (800fe28 <tcp_receive+0xbfc>)
 800fd9e:	481e      	ldr	r0, [pc, #120]	; (800fe18 <tcp_receive+0xbec>)
 800fda0:	f006 feea 	bl	8016b78 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	891b      	ldrh	r3, [r3, #8]
 800fda8:	461c      	mov	r4, r3
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	68db      	ldr	r3, [r3, #12]
 800fdae:	899b      	ldrh	r3, [r3, #12]
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7fa fff8 	bl	800ada8 <lwip_htons>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	f003 0303 	and.w	r3, r3, #3
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d001      	beq.n	800fdc6 <tcp_receive+0xb9a>
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	e000      	b.n	800fdc8 <tcp_receive+0xb9c>
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	1919      	adds	r1, r3, r4
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fdce:	b28b      	uxth	r3, r1
 800fdd0:	1ad3      	subs	r3, r2, r3
 800fdd2:	b29a      	uxth	r2, r3
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f7fd f86b 	bl	800ceb4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	891b      	ldrh	r3, [r3, #8]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d028      	beq.n	800fe3a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fde8:	4b0d      	ldr	r3, [pc, #52]	; (800fe20 <tcp_receive+0xbf4>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d01d      	beq.n	800fe2c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800fdf0:	4b0b      	ldr	r3, [pc, #44]	; (800fe20 <tcp_receive+0xbf4>)
 800fdf2:	681a      	ldr	r2, [r3, #0]
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	685b      	ldr	r3, [r3, #4]
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	4610      	mov	r0, r2
 800fdfc:	f7fc fa86 	bl	800c30c <pbuf_cat>
 800fe00:	e018      	b.n	800fe34 <tcp_receive+0xc08>
 800fe02:	bf00      	nop
 800fe04:	20008c6a 	.word	0x20008c6a
 800fe08:	20008c60 	.word	0x20008c60
 800fe0c:	20008c40 	.word	0x20008c40
 800fe10:	08019940 	.word	0x08019940
 800fe14:	08019c44 	.word	0x08019c44
 800fe18:	08019984 	.word	0x08019984
 800fe1c:	08019c80 	.word	0x08019c80
 800fe20:	20008c70 	.word	0x20008c70
 800fe24:	20008c6d 	.word	0x20008c6d
 800fe28:	08019ca0 	.word	0x08019ca0
            } else {
              recv_data = cseg->p;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	4a71      	ldr	r2, [pc, #452]	; (800fff8 <tcp_receive+0xdcc>)
 800fe32:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	2200      	movs	r2, #0
 800fe38:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	68db      	ldr	r3, [r3, #12]
 800fe3e:	899b      	ldrh	r3, [r3, #12]
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7fa ffb0 	bl	800ada8 <lwip_htons>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	f003 0301 	and.w	r3, r3, #1
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d00d      	beq.n	800fe6e <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fe52:	4b6a      	ldr	r3, [pc, #424]	; (800fffc <tcp_receive+0xdd0>)
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	f043 0320 	orr.w	r3, r3, #32
 800fe5a:	b2da      	uxtb	r2, r3
 800fe5c:	4b67      	ldr	r3, [pc, #412]	; (800fffc <tcp_receive+0xdd0>)
 800fe5e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	7d1b      	ldrb	r3, [r3, #20]
 800fe64:	2b04      	cmp	r3, #4
 800fe66:	d102      	bne.n	800fe6e <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2207      	movs	r2, #7
 800fe6c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800fe76:	68f8      	ldr	r0, [r7, #12]
 800fe78:	f7fd fca9 	bl	800d7ce <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d008      	beq.n	800fe96 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe88:	68db      	ldr	r3, [r3, #12]
 800fe8a:	685a      	ldr	r2, [r3, #4]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fe90:	429a      	cmp	r2, r3
 800fe92:	f43f af47 	beq.w	800fd24 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	7e9b      	ldrb	r3, [r3, #26]
 800fe9a:	f003 0301 	and.w	r3, r3, #1
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d00e      	beq.n	800fec0 <tcp_receive+0xc94>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	7e9b      	ldrb	r3, [r3, #26]
 800fea6:	f023 0301 	bic.w	r3, r3, #1
 800feaa:	b2da      	uxtb	r2, r3
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	769a      	strb	r2, [r3, #26]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	7e9b      	ldrb	r3, [r3, #26]
 800feb4:	f043 0302 	orr.w	r3, r3, #2
 800feb8:	b2da      	uxtb	r2, r3
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800febe:	e181      	b.n	80101c4 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	7e9b      	ldrb	r3, [r3, #26]
 800fec4:	f043 0301 	orr.w	r3, r3, #1
 800fec8:	b2da      	uxtb	r2, r3
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fece:	e179      	b.n	80101c4 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f001 f8c5 	bl	8011060 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d106      	bne.n	800feec <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fede:	4848      	ldr	r0, [pc, #288]	; (8010000 <tcp_receive+0xdd4>)
 800fee0:	f7fd fc9c 	bl	800d81c <tcp_seg_copy>
 800fee4:	4602      	mov	r2, r0
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800feea:	e16b      	b.n	80101c4 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800feec:	2300      	movs	r3, #0
 800feee:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fef6:	e150      	b.n	801019a <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800fef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	685a      	ldr	r2, [r3, #4]
 800fefe:	4b41      	ldr	r3, [pc, #260]	; (8010004 <tcp_receive+0xdd8>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d11d      	bne.n	800ff42 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ff06:	4b3e      	ldr	r3, [pc, #248]	; (8010000 <tcp_receive+0xdd4>)
 800ff08:	891a      	ldrh	r2, [r3, #8]
 800ff0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0c:	891b      	ldrh	r3, [r3, #8]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	f240 8148 	bls.w	80101a4 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800ff14:	483a      	ldr	r0, [pc, #232]	; (8010000 <tcp_receive+0xdd4>)
 800ff16:	f7fd fc81 	bl	800d81c <tcp_seg_copy>
 800ff1a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	f000 8142 	beq.w	80101a8 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800ff24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d003      	beq.n	800ff32 <tcp_receive+0xd06>
                    prev->next = cseg;
 800ff2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff2c:	68fa      	ldr	r2, [r7, #12]
 800ff2e:	601a      	str	r2, [r3, #0]
 800ff30:	e002      	b.n	800ff38 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	68fa      	ldr	r2, [r7, #12]
 800ff36:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ff38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff3a:	68f8      	ldr	r0, [r7, #12]
 800ff3c:	f7ff f900 	bl	800f140 <tcp_oos_insert_segment>
                }
                break;
 800ff40:	e132      	b.n	80101a8 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ff42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d117      	bne.n	800ff78 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ff48:	4b2e      	ldr	r3, [pc, #184]	; (8010004 <tcp_receive+0xdd8>)
 800ff4a:	681a      	ldr	r2, [r3, #0]
 800ff4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4e:	68db      	ldr	r3, [r3, #12]
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	1ad3      	subs	r3, r2, r3
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	da57      	bge.n	8010008 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800ff58:	4829      	ldr	r0, [pc, #164]	; (8010000 <tcp_receive+0xdd4>)
 800ff5a:	f7fd fc5f 	bl	800d81c <tcp_seg_copy>
 800ff5e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	f000 8122 	beq.w	80101ac <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	68fa      	ldr	r2, [r7, #12]
 800ff6c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800ff6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff70:	68f8      	ldr	r0, [r7, #12]
 800ff72:	f7ff f8e5 	bl	800f140 <tcp_oos_insert_segment>
                  }
                  break;
 800ff76:	e119      	b.n	80101ac <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800ff78:	4b22      	ldr	r3, [pc, #136]	; (8010004 <tcp_receive+0xdd8>)
 800ff7a:	681a      	ldr	r2, [r3, #0]
 800ff7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	3b01      	subs	r3, #1
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	db3e      	blt.n	8010008 <tcp_receive+0xddc>
 800ff8a:	4b1e      	ldr	r3, [pc, #120]	; (8010004 <tcp_receive+0xdd8>)
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	1ad3      	subs	r3, r2, r3
 800ff96:	3301      	adds	r3, #1
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	dc35      	bgt.n	8010008 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800ff9c:	4818      	ldr	r0, [pc, #96]	; (8010000 <tcp_receive+0xdd4>)
 800ff9e:	f7fd fc3d 	bl	800d81c <tcp_seg_copy>
 800ffa2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f000 8102 	beq.w	80101b0 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ffac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffae:	68db      	ldr	r3, [r3, #12]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffb4:	8912      	ldrh	r2, [r2, #8]
 800ffb6:	441a      	add	r2, r3
 800ffb8:	4b12      	ldr	r3, [pc, #72]	; (8010004 <tcp_receive+0xdd8>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	1ad3      	subs	r3, r2, r3
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	dd12      	ble.n	800ffe8 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ffc2:	4b10      	ldr	r3, [pc, #64]	; (8010004 <tcp_receive+0xdd8>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	1ad3      	subs	r3, r2, r3
 800ffd2:	b29a      	uxth	r2, r3
 800ffd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ffd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffda:	685a      	ldr	r2, [r3, #4]
 800ffdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffde:	891b      	ldrh	r3, [r3, #8]
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	4610      	mov	r0, r2
 800ffe4:	f7fb ff44 	bl	800be70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ffe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffea:	68fa      	ldr	r2, [r7, #12]
 800ffec:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ffee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fff0:	68f8      	ldr	r0, [r7, #12]
 800fff2:	f7ff f8a5 	bl	800f140 <tcp_oos_insert_segment>
                  }
                  break;
 800fff6:	e0db      	b.n	80101b0 <tcp_receive+0xf84>
 800fff8:	20008c70 	.word	0x20008c70
 800fffc:	20008c6d 	.word	0x20008c6d
 8010000:	20008c40 	.word	0x20008c40
 8010004:	20008c60 	.word	0x20008c60
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	2b00      	cmp	r3, #0
 801000e:	f040 80bf 	bne.w	8010190 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010012:	4b7c      	ldr	r3, [pc, #496]	; (8010204 <tcp_receive+0xfd8>)
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801001e:	2b00      	cmp	r3, #0
 8010020:	f340 80b6 	ble.w	8010190 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	899b      	ldrh	r3, [r3, #12]
 801002a:	b29b      	uxth	r3, r3
 801002c:	4618      	mov	r0, r3
 801002e:	f7fa febb 	bl	800ada8 <lwip_htons>
 8010032:	4603      	mov	r3, r0
 8010034:	f003 0301 	and.w	r3, r3, #1
 8010038:	2b00      	cmp	r3, #0
 801003a:	f040 80bb 	bne.w	80101b4 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801003e:	4872      	ldr	r0, [pc, #456]	; (8010208 <tcp_receive+0xfdc>)
 8010040:	f7fd fbec 	bl	800d81c <tcp_seg_copy>
 8010044:	4602      	mov	r2, r0
 8010046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010048:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801004a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	f000 80b2 	beq.w	80101b8 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010056:	68db      	ldr	r3, [r3, #12]
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801005c:	8912      	ldrh	r2, [r2, #8]
 801005e:	441a      	add	r2, r3
 8010060:	4b68      	ldr	r3, [pc, #416]	; (8010204 <tcp_receive+0xfd8>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	1ad3      	subs	r3, r2, r3
 8010066:	2b00      	cmp	r3, #0
 8010068:	dd12      	ble.n	8010090 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801006a:	4b66      	ldr	r3, [pc, #408]	; (8010204 <tcp_receive+0xfd8>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	b29a      	uxth	r2, r3
 8010070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010072:	68db      	ldr	r3, [r3, #12]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	b29b      	uxth	r3, r3
 8010078:	1ad3      	subs	r3, r2, r3
 801007a:	b29a      	uxth	r2, r3
 801007c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010082:	685a      	ldr	r2, [r3, #4]
 8010084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010086:	891b      	ldrh	r3, [r3, #8]
 8010088:	4619      	mov	r1, r3
 801008a:	4610      	mov	r0, r2
 801008c:	f7fb fef0 	bl	800be70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010090:	4b5e      	ldr	r3, [pc, #376]	; (801020c <tcp_receive+0xfe0>)
 8010092:	881b      	ldrh	r3, [r3, #0]
 8010094:	461a      	mov	r2, r3
 8010096:	4b5b      	ldr	r3, [pc, #364]	; (8010204 <tcp_receive+0xfd8>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	441a      	add	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a0:	6879      	ldr	r1, [r7, #4]
 80100a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100a4:	440b      	add	r3, r1
 80100a6:	1ad3      	subs	r3, r2, r3
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	f340 8085 	ble.w	80101b8 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80100ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	899b      	ldrh	r3, [r3, #12]
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fa fe75 	bl	800ada8 <lwip_htons>
 80100be:	4603      	mov	r3, r0
 80100c0:	f003 0301 	and.w	r3, r3, #1
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d01e      	beq.n	8010106 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80100c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	899b      	ldrh	r3, [r3, #12]
 80100d0:	b29b      	uxth	r3, r3
 80100d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80100d6:	b29c      	uxth	r4, r3
 80100d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	68db      	ldr	r3, [r3, #12]
 80100de:	899b      	ldrh	r3, [r3, #12]
 80100e0:	b29b      	uxth	r3, r3
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7fa fe60 	bl	800ada8 <lwip_htons>
 80100e8:	4603      	mov	r3, r0
 80100ea:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fa fe59 	bl	800ada8 <lwip_htons>
 80100f6:	4603      	mov	r3, r0
 80100f8:	461a      	mov	r2, r3
 80100fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	68db      	ldr	r3, [r3, #12]
 8010100:	4322      	orrs	r2, r4
 8010102:	b292      	uxth	r2, r2
 8010104:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801010a:	b29a      	uxth	r2, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010110:	4413      	add	r3, r2
 8010112:	b299      	uxth	r1, r3
 8010114:	4b3b      	ldr	r3, [pc, #236]	; (8010204 <tcp_receive+0xfd8>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	b29a      	uxth	r2, r3
 801011a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	1a8a      	subs	r2, r1, r2
 8010120:	b292      	uxth	r2, r2
 8010122:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	685a      	ldr	r2, [r3, #4]
 801012a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	891b      	ldrh	r3, [r3, #8]
 8010130:	4619      	mov	r1, r3
 8010132:	4610      	mov	r0, r2
 8010134:	f7fb fe9c 	bl	800be70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	891c      	ldrh	r4, [r3, #8]
 801013e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	68db      	ldr	r3, [r3, #12]
 8010144:	899b      	ldrh	r3, [r3, #12]
 8010146:	b29b      	uxth	r3, r3
 8010148:	4618      	mov	r0, r3
 801014a:	f7fa fe2d 	bl	800ada8 <lwip_htons>
 801014e:	4603      	mov	r3, r0
 8010150:	f003 0303 	and.w	r3, r3, #3
 8010154:	2b00      	cmp	r3, #0
 8010156:	d001      	beq.n	801015c <tcp_receive+0xf30>
 8010158:	2301      	movs	r3, #1
 801015a:	e000      	b.n	801015e <tcp_receive+0xf32>
 801015c:	2300      	movs	r3, #0
 801015e:	4423      	add	r3, r4
 8010160:	b29a      	uxth	r2, r3
 8010162:	4b2a      	ldr	r3, [pc, #168]	; (801020c <tcp_receive+0xfe0>)
 8010164:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010166:	4b29      	ldr	r3, [pc, #164]	; (801020c <tcp_receive+0xfe0>)
 8010168:	881b      	ldrh	r3, [r3, #0]
 801016a:	461a      	mov	r2, r3
 801016c:	4b25      	ldr	r3, [pc, #148]	; (8010204 <tcp_receive+0xfd8>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	441a      	add	r2, r3
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010176:	6879      	ldr	r1, [r7, #4]
 8010178:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801017a:	440b      	add	r3, r1
 801017c:	429a      	cmp	r2, r3
 801017e:	d01b      	beq.n	80101b8 <tcp_receive+0xf8c>
 8010180:	4b23      	ldr	r3, [pc, #140]	; (8010210 <tcp_receive+0xfe4>)
 8010182:	f240 627b 	movw	r2, #1659	; 0x67b
 8010186:	4923      	ldr	r1, [pc, #140]	; (8010214 <tcp_receive+0xfe8>)
 8010188:	4823      	ldr	r0, [pc, #140]	; (8010218 <tcp_receive+0xfec>)
 801018a:	f006 fcf5 	bl	8016b78 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801018e:	e013      	b.n	80101b8 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8010190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010192:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	62fb      	str	r3, [r7, #44]	; 0x2c
 801019a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019c:	2b00      	cmp	r3, #0
 801019e:	f47f aeab 	bne.w	800fef8 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 80101a2:	e00f      	b.n	80101c4 <tcp_receive+0xf98>
                break;
 80101a4:	bf00      	nop
 80101a6:	e00d      	b.n	80101c4 <tcp_receive+0xf98>
                break;
 80101a8:	bf00      	nop
 80101aa:	e00b      	b.n	80101c4 <tcp_receive+0xf98>
                  break;
 80101ac:	bf00      	nop
 80101ae:	e009      	b.n	80101c4 <tcp_receive+0xf98>
                  break;
 80101b0:	bf00      	nop
 80101b2:	e007      	b.n	80101c4 <tcp_receive+0xf98>
                  break;
 80101b4:	bf00      	nop
 80101b6:	e005      	b.n	80101c4 <tcp_receive+0xf98>
                break;
 80101b8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80101ba:	e003      	b.n	80101c4 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f000 ff4f 	bl	8011060 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80101c2:	e01a      	b.n	80101fa <tcp_receive+0xfce>
 80101c4:	e019      	b.n	80101fa <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80101c6:	4b0f      	ldr	r3, [pc, #60]	; (8010204 <tcp_receive+0xfd8>)
 80101c8:	681a      	ldr	r2, [r3, #0]
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ce:	1ad3      	subs	r3, r2, r3
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	db0a      	blt.n	80101ea <tcp_receive+0xfbe>
 80101d4:	4b0b      	ldr	r3, [pc, #44]	; (8010204 <tcp_receive+0xfd8>)
 80101d6:	681a      	ldr	r2, [r3, #0]
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101dc:	6879      	ldr	r1, [r7, #4]
 80101de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101e0:	440b      	add	r3, r1
 80101e2:	1ad3      	subs	r3, r2, r3
 80101e4:	3301      	adds	r3, #1
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	dd07      	ble.n	80101fa <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	7e9b      	ldrb	r3, [r3, #26]
 80101ee:	f043 0302 	orr.w	r3, r3, #2
 80101f2:	b2da      	uxtb	r2, r3
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80101f8:	e7ff      	b.n	80101fa <tcp_receive+0xfce>
 80101fa:	bf00      	nop
 80101fc:	3734      	adds	r7, #52	; 0x34
 80101fe:	46bd      	mov	sp, r7
 8010200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010202:	bf00      	nop
 8010204:	20008c60 	.word	0x20008c60
 8010208:	20008c40 	.word	0x20008c40
 801020c:	20008c6a 	.word	0x20008c6a
 8010210:	08019940 	.word	0x08019940
 8010214:	08019c0c 	.word	0x08019c0c
 8010218:	08019984 	.word	0x08019984

0801021c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8010222:	4b18      	ldr	r3, [pc, #96]	; (8010284 <tcp_getoptbyte+0x68>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d005      	beq.n	8010236 <tcp_getoptbyte+0x1a>
 801022a:	4b17      	ldr	r3, [pc, #92]	; (8010288 <tcp_getoptbyte+0x6c>)
 801022c:	881a      	ldrh	r2, [r3, #0]
 801022e:	4b17      	ldr	r3, [pc, #92]	; (801028c <tcp_getoptbyte+0x70>)
 8010230:	881b      	ldrh	r3, [r3, #0]
 8010232:	429a      	cmp	r2, r3
 8010234:	d20e      	bcs.n	8010254 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8010236:	4b16      	ldr	r3, [pc, #88]	; (8010290 <tcp_getoptbyte+0x74>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	3314      	adds	r3, #20
 801023c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801023e:	4b12      	ldr	r3, [pc, #72]	; (8010288 <tcp_getoptbyte+0x6c>)
 8010240:	881b      	ldrh	r3, [r3, #0]
 8010242:	1c5a      	adds	r2, r3, #1
 8010244:	b291      	uxth	r1, r2
 8010246:	4a10      	ldr	r2, [pc, #64]	; (8010288 <tcp_getoptbyte+0x6c>)
 8010248:	8011      	strh	r1, [r2, #0]
 801024a:	461a      	mov	r2, r3
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	4413      	add	r3, r2
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	e010      	b.n	8010276 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8010254:	4b0c      	ldr	r3, [pc, #48]	; (8010288 <tcp_getoptbyte+0x6c>)
 8010256:	881b      	ldrh	r3, [r3, #0]
 8010258:	1c5a      	adds	r2, r3, #1
 801025a:	b291      	uxth	r1, r2
 801025c:	4a0a      	ldr	r2, [pc, #40]	; (8010288 <tcp_getoptbyte+0x6c>)
 801025e:	8011      	strh	r1, [r2, #0]
 8010260:	b2da      	uxtb	r2, r3
 8010262:	4b0a      	ldr	r3, [pc, #40]	; (801028c <tcp_getoptbyte+0x70>)
 8010264:	881b      	ldrh	r3, [r3, #0]
 8010266:	b2db      	uxtb	r3, r3
 8010268:	1ad3      	subs	r3, r2, r3
 801026a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 801026c:	4b05      	ldr	r3, [pc, #20]	; (8010284 <tcp_getoptbyte+0x68>)
 801026e:	681a      	ldr	r2, [r3, #0]
 8010270:	79fb      	ldrb	r3, [r7, #7]
 8010272:	4413      	add	r3, r2
 8010274:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010276:	4618      	mov	r0, r3
 8010278:	370c      	adds	r7, #12
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr
 8010282:	bf00      	nop
 8010284:	20008c58 	.word	0x20008c58
 8010288:	20008c5c 	.word	0x20008c5c
 801028c:	20008c56 	.word	0x20008c56
 8010290:	20008c50 	.word	0x20008c50

08010294 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801029c:	4b2d      	ldr	r3, [pc, #180]	; (8010354 <tcp_parseopt+0xc0>)
 801029e:	881b      	ldrh	r3, [r3, #0]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d053      	beq.n	801034c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80102a4:	4b2c      	ldr	r3, [pc, #176]	; (8010358 <tcp_parseopt+0xc4>)
 80102a6:	2200      	movs	r2, #0
 80102a8:	801a      	strh	r2, [r3, #0]
 80102aa:	e043      	b.n	8010334 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80102ac:	f7ff ffb6 	bl	801021c <tcp_getoptbyte>
 80102b0:	4603      	mov	r3, r0
 80102b2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80102b4:	7bfb      	ldrb	r3, [r7, #15]
 80102b6:	2b01      	cmp	r3, #1
 80102b8:	d03c      	beq.n	8010334 <tcp_parseopt+0xa0>
 80102ba:	2b02      	cmp	r3, #2
 80102bc:	d002      	beq.n	80102c4 <tcp_parseopt+0x30>
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d03f      	beq.n	8010342 <tcp_parseopt+0xae>
 80102c2:	e026      	b.n	8010312 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80102c4:	f7ff ffaa 	bl	801021c <tcp_getoptbyte>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b04      	cmp	r3, #4
 80102cc:	d13b      	bne.n	8010346 <tcp_parseopt+0xb2>
 80102ce:	4b22      	ldr	r3, [pc, #136]	; (8010358 <tcp_parseopt+0xc4>)
 80102d0:	881b      	ldrh	r3, [r3, #0]
 80102d2:	3302      	adds	r3, #2
 80102d4:	4a1f      	ldr	r2, [pc, #124]	; (8010354 <tcp_parseopt+0xc0>)
 80102d6:	8812      	ldrh	r2, [r2, #0]
 80102d8:	4293      	cmp	r3, r2
 80102da:	dc34      	bgt.n	8010346 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80102dc:	f7ff ff9e 	bl	801021c <tcp_getoptbyte>
 80102e0:	4603      	mov	r3, r0
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	021b      	lsls	r3, r3, #8
 80102e6:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80102e8:	f7ff ff98 	bl	801021c <tcp_getoptbyte>
 80102ec:	4603      	mov	r3, r0
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	89bb      	ldrh	r3, [r7, #12]
 80102f2:	4313      	orrs	r3, r2
 80102f4:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80102f6:	89bb      	ldrh	r3, [r7, #12]
 80102f8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80102fc:	d804      	bhi.n	8010308 <tcp_parseopt+0x74>
 80102fe:	89bb      	ldrh	r3, [r7, #12]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d001      	beq.n	8010308 <tcp_parseopt+0x74>
 8010304:	89ba      	ldrh	r2, [r7, #12]
 8010306:	e001      	b.n	801030c <tcp_parseopt+0x78>
 8010308:	f44f 7206 	mov.w	r2, #536	; 0x218
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8010310:	e010      	b.n	8010334 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8010312:	f7ff ff83 	bl	801021c <tcp_getoptbyte>
 8010316:	4603      	mov	r3, r0
 8010318:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801031a:	7afb      	ldrb	r3, [r7, #11]
 801031c:	2b01      	cmp	r3, #1
 801031e:	d914      	bls.n	801034a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8010320:	7afb      	ldrb	r3, [r7, #11]
 8010322:	b29a      	uxth	r2, r3
 8010324:	4b0c      	ldr	r3, [pc, #48]	; (8010358 <tcp_parseopt+0xc4>)
 8010326:	881b      	ldrh	r3, [r3, #0]
 8010328:	4413      	add	r3, r2
 801032a:	b29b      	uxth	r3, r3
 801032c:	3b02      	subs	r3, #2
 801032e:	b29a      	uxth	r2, r3
 8010330:	4b09      	ldr	r3, [pc, #36]	; (8010358 <tcp_parseopt+0xc4>)
 8010332:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010334:	4b08      	ldr	r3, [pc, #32]	; (8010358 <tcp_parseopt+0xc4>)
 8010336:	881a      	ldrh	r2, [r3, #0]
 8010338:	4b06      	ldr	r3, [pc, #24]	; (8010354 <tcp_parseopt+0xc0>)
 801033a:	881b      	ldrh	r3, [r3, #0]
 801033c:	429a      	cmp	r2, r3
 801033e:	d3b5      	bcc.n	80102ac <tcp_parseopt+0x18>
 8010340:	e004      	b.n	801034c <tcp_parseopt+0xb8>
        return;
 8010342:	bf00      	nop
 8010344:	e002      	b.n	801034c <tcp_parseopt+0xb8>
          return;
 8010346:	bf00      	nop
 8010348:	e000      	b.n	801034c <tcp_parseopt+0xb8>
          return;
 801034a:	bf00      	nop
      }
    }
  }
}
 801034c:	3710      	adds	r7, #16
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	20008c54 	.word	0x20008c54
 8010358:	20008c5c 	.word	0x20008c5c

0801035c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801035c:	b480      	push	{r7}
 801035e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010360:	4b05      	ldr	r3, [pc, #20]	; (8010378 <tcp_trigger_input_pcb_close+0x1c>)
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	f043 0310 	orr.w	r3, r3, #16
 8010368:	b2da      	uxtb	r2, r3
 801036a:	4b03      	ldr	r3, [pc, #12]	; (8010378 <tcp_trigger_input_pcb_close+0x1c>)
 801036c:	701a      	strb	r2, [r3, #0]
}
 801036e:	bf00      	nop
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr
 8010378:	20008c6d 	.word	0x20008c6d

0801037c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b086      	sub	sp, #24
 8010380:	af00      	add	r7, sp, #0
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	607b      	str	r3, [r7, #4]
 8010386:	460b      	mov	r3, r1
 8010388:	817b      	strh	r3, [r7, #10]
 801038a:	4613      	mov	r3, r2
 801038c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801038e:	897a      	ldrh	r2, [r7, #10]
 8010390:	893b      	ldrh	r3, [r7, #8]
 8010392:	4413      	add	r3, r2
 8010394:	b29b      	uxth	r3, r3
 8010396:	3314      	adds	r3, #20
 8010398:	b29b      	uxth	r3, r3
 801039a:	2200      	movs	r2, #0
 801039c:	4619      	mov	r1, r3
 801039e:	2001      	movs	r0, #1
 80103a0:	f7fb fb68 	bl	800ba74 <pbuf_alloc>
 80103a4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d057      	beq.n	801045c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	895b      	ldrh	r3, [r3, #10]
 80103b0:	461a      	mov	r2, r3
 80103b2:	897b      	ldrh	r3, [r7, #10]
 80103b4:	3314      	adds	r3, #20
 80103b6:	429a      	cmp	r2, r3
 80103b8:	da05      	bge.n	80103c6 <tcp_output_alloc_header+0x4a>
 80103ba:	4b2b      	ldr	r3, [pc, #172]	; (8010468 <tcp_output_alloc_header+0xec>)
 80103bc:	2273      	movs	r2, #115	; 0x73
 80103be:	492b      	ldr	r1, [pc, #172]	; (801046c <tcp_output_alloc_header+0xf0>)
 80103c0:	482b      	ldr	r0, [pc, #172]	; (8010470 <tcp_output_alloc_header+0xf4>)
 80103c2:	f006 fbd9 	bl	8016b78 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	8adb      	ldrh	r3, [r3, #22]
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7fa fce9 	bl	800ada8 <lwip_htons>
 80103d6:	4603      	mov	r3, r0
 80103d8:	461a      	mov	r2, r3
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	8b1b      	ldrh	r3, [r3, #24]
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7fa fce0 	bl	800ada8 <lwip_htons>
 80103e8:	4603      	mov	r3, r0
 80103ea:	461a      	mov	r2, r3
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	687a      	ldr	r2, [r7, #4]
 80103f4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7fa fce2 	bl	800adc4 <lwip_htonl>
 8010400:	4602      	mov	r2, r0
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8010406:	897b      	ldrh	r3, [r7, #10]
 8010408:	089b      	lsrs	r3, r3, #2
 801040a:	b29b      	uxth	r3, r3
 801040c:	3305      	adds	r3, #5
 801040e:	b29b      	uxth	r3, r3
 8010410:	031b      	lsls	r3, r3, #12
 8010412:	b29b      	uxth	r3, r3
 8010414:	f043 0310 	orr.w	r3, r3, #16
 8010418:	b29b      	uxth	r3, r3
 801041a:	4618      	mov	r0, r3
 801041c:	f7fa fcc4 	bl	800ada8 <lwip_htons>
 8010420:	4603      	mov	r3, r0
 8010422:	461a      	mov	r2, r3
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801042c:	4618      	mov	r0, r3
 801042e:	f7fa fcbb 	bl	800ada8 <lwip_htons>
 8010432:	4603      	mov	r3, r0
 8010434:	461a      	mov	r2, r3
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	2200      	movs	r2, #0
 801043e:	741a      	strb	r2, [r3, #16]
 8010440:	2200      	movs	r2, #0
 8010442:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	2200      	movs	r2, #0
 8010448:	749a      	strb	r2, [r3, #18]
 801044a:	2200      	movs	r2, #0
 801044c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010452:	68fa      	ldr	r2, [r7, #12]
 8010454:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010456:	441a      	add	r2, r3
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801045c:	697b      	ldr	r3, [r7, #20]
}
 801045e:	4618      	mov	r0, r3
 8010460:	3718      	adds	r7, #24
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
 8010466:	bf00      	nop
 8010468:	08019cc8 	.word	0x08019cc8
 801046c:	08019cfc 	.word	0x08019cfc
 8010470:	08019d2c 	.word	0x08019d2c

08010474 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010474:	b590      	push	{r4, r7, lr}
 8010476:	b085      	sub	sp, #20
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010480:	2b00      	cmp	r3, #0
 8010482:	d02d      	beq.n	80104e0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010488:	60fb      	str	r3, [r7, #12]
 801048a:	e002      	b.n	8010492 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d1f8      	bne.n	801048c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	68db      	ldr	r3, [r3, #12]
 801049e:	899b      	ldrh	r3, [r3, #12]
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	4618      	mov	r0, r3
 80104a4:	f7fa fc80 	bl	800ada8 <lwip_htons>
 80104a8:	4603      	mov	r3, r0
 80104aa:	f003 0307 	and.w	r3, r3, #7
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d116      	bne.n	80104e0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	899b      	ldrh	r3, [r3, #12]
 80104b8:	b29c      	uxth	r4, r3
 80104ba:	2001      	movs	r0, #1
 80104bc:	f7fa fc74 	bl	800ada8 <lwip_htons>
 80104c0:	4603      	mov	r3, r0
 80104c2:	461a      	mov	r2, r3
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	68db      	ldr	r3, [r3, #12]
 80104c8:	4322      	orrs	r2, r4
 80104ca:	b292      	uxth	r2, r2
 80104cc:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	7e9b      	ldrb	r3, [r3, #26]
 80104d2:	f043 0320 	orr.w	r3, r3, #32
 80104d6:	b2da      	uxtb	r2, r3
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80104dc:	2300      	movs	r3, #0
 80104de:	e004      	b.n	80104ea <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80104e0:	2101      	movs	r1, #1
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 fcc0 	bl	8010e68 <tcp_enqueue_flags>
 80104e8:	4603      	mov	r3, r0
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3714      	adds	r7, #20
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd90      	pop	{r4, r7, pc}
	...

080104f4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80104f4:	b590      	push	{r4, r7, lr}
 80104f6:	b087      	sub	sp, #28
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	60f8      	str	r0, [r7, #12]
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	603b      	str	r3, [r7, #0]
 8010500:	4613      	mov	r3, r2
 8010502:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010504:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010508:	009b      	lsls	r3, r3, #2
 801050a:	b2db      	uxtb	r3, r3
 801050c:	f003 0304 	and.w	r3, r3, #4
 8010510:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010512:	2003      	movs	r0, #3
 8010514:	f7fb f86c 	bl	800b5f0 <memp_malloc>
 8010518:	6138      	str	r0, [r7, #16]
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d104      	bne.n	801052a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010520:	68b8      	ldr	r0, [r7, #8]
 8010522:	f7fb fe19 	bl	800c158 <pbuf_free>
    return NULL;
 8010526:	2300      	movs	r3, #0
 8010528:	e061      	b.n	80105ee <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010530:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	2200      	movs	r2, #0
 8010536:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	68ba      	ldr	r2, [r7, #8]
 801053c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	891a      	ldrh	r2, [r3, #8]
 8010542:	7dfb      	ldrb	r3, [r7, #23]
 8010544:	b29b      	uxth	r3, r3
 8010546:	429a      	cmp	r2, r3
 8010548:	d205      	bcs.n	8010556 <tcp_create_segment+0x62>
 801054a:	4b2b      	ldr	r3, [pc, #172]	; (80105f8 <tcp_create_segment+0x104>)
 801054c:	22ba      	movs	r2, #186	; 0xba
 801054e:	492b      	ldr	r1, [pc, #172]	; (80105fc <tcp_create_segment+0x108>)
 8010550:	482b      	ldr	r0, [pc, #172]	; (8010600 <tcp_create_segment+0x10c>)
 8010552:	f006 fb11 	bl	8016b78 <iprintf>
  seg->len = p->tot_len - optlen;
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	891a      	ldrh	r2, [r3, #8]
 801055a:	7dfb      	ldrb	r3, [r7, #23]
 801055c:	b29b      	uxth	r3, r3
 801055e:	1ad3      	subs	r3, r2, r3
 8010560:	b29a      	uxth	r2, r3
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8010566:	2114      	movs	r1, #20
 8010568:	68b8      	ldr	r0, [r7, #8]
 801056a:	f7fb fdd1 	bl	800c110 <pbuf_header>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d004      	beq.n	801057e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010574:	6938      	ldr	r0, [r7, #16]
 8010576:	f7fd f92a 	bl	800d7ce <tcp_seg_free>
    return NULL;
 801057a:	2300      	movs	r3, #0
 801057c:	e037      	b.n	80105ee <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801057e:	693b      	ldr	r3, [r7, #16]
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	685a      	ldr	r2, [r3, #4]
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	8ada      	ldrh	r2, [r3, #22]
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	68dc      	ldr	r4, [r3, #12]
 8010590:	4610      	mov	r0, r2
 8010592:	f7fa fc09 	bl	800ada8 <lwip_htons>
 8010596:	4603      	mov	r3, r0
 8010598:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	8b1a      	ldrh	r2, [r3, #24]
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	68dc      	ldr	r4, [r3, #12]
 80105a2:	4610      	mov	r0, r2
 80105a4:	f7fa fc00 	bl	800ada8 <lwip_htons>
 80105a8:	4603      	mov	r3, r0
 80105aa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80105ac:	693b      	ldr	r3, [r7, #16]
 80105ae:	68dc      	ldr	r4, [r3, #12]
 80105b0:	6838      	ldr	r0, [r7, #0]
 80105b2:	f7fa fc07 	bl	800adc4 <lwip_htonl>
 80105b6:	4603      	mov	r3, r0
 80105b8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80105ba:	7dfb      	ldrb	r3, [r7, #23]
 80105bc:	089b      	lsrs	r3, r3, #2
 80105be:	b2db      	uxtb	r3, r3
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	3305      	adds	r3, #5
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	031b      	lsls	r3, r3, #12
 80105c8:	b29a      	uxth	r2, r3
 80105ca:	79fb      	ldrb	r3, [r7, #7]
 80105cc:	b29b      	uxth	r3, r3
 80105ce:	4313      	orrs	r3, r2
 80105d0:	b29a      	uxth	r2, r3
 80105d2:	693b      	ldr	r3, [r7, #16]
 80105d4:	68dc      	ldr	r4, [r3, #12]
 80105d6:	4610      	mov	r0, r2
 80105d8:	f7fa fbe6 	bl	800ada8 <lwip_htons>
 80105dc:	4603      	mov	r3, r0
 80105de:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	2200      	movs	r2, #0
 80105e6:	749a      	strb	r2, [r3, #18]
 80105e8:	2200      	movs	r2, #0
 80105ea:	74da      	strb	r2, [r3, #19]
  return seg;
 80105ec:	693b      	ldr	r3, [r7, #16]
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	371c      	adds	r7, #28
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd90      	pop	{r4, r7, pc}
 80105f6:	bf00      	nop
 80105f8:	08019cc8 	.word	0x08019cc8
 80105fc:	08019d54 	.word	0x08019d54
 8010600:	08019d2c 	.word	0x08019d2c

08010604 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b086      	sub	sp, #24
 8010608:	af00      	add	r7, sp, #0
 801060a:	607b      	str	r3, [r7, #4]
 801060c:	4603      	mov	r3, r0
 801060e:	73fb      	strb	r3, [r7, #15]
 8010610:	460b      	mov	r3, r1
 8010612:	81bb      	strh	r3, [r7, #12]
 8010614:	4613      	mov	r3, r2
 8010616:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010618:	89bb      	ldrh	r3, [r7, #12]
 801061a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801061c:	89ba      	ldrh	r2, [r7, #12]
 801061e:	897b      	ldrh	r3, [r7, #10]
 8010620:	429a      	cmp	r2, r3
 8010622:	d221      	bcs.n	8010668 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010624:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010628:	f003 0302 	and.w	r3, r3, #2
 801062c:	2b00      	cmp	r3, #0
 801062e:	d111      	bne.n	8010654 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8010630:	6a3b      	ldr	r3, [r7, #32]
 8010632:	7e9b      	ldrb	r3, [r3, #26]
 8010634:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010638:	2b00      	cmp	r3, #0
 801063a:	d115      	bne.n	8010668 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 801063c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010640:	2b00      	cmp	r3, #0
 8010642:	d007      	beq.n	8010654 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010644:	6a3b      	ldr	r3, [r7, #32]
 8010646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8010648:	2b00      	cmp	r3, #0
 801064a:	d103      	bne.n	8010654 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 801064c:	6a3b      	ldr	r3, [r7, #32]
 801064e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8010650:	2b00      	cmp	r3, #0
 8010652:	d009      	beq.n	8010668 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010654:	89bb      	ldrh	r3, [r7, #12]
 8010656:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801065a:	f023 0203 	bic.w	r2, r3, #3
 801065e:	897b      	ldrh	r3, [r7, #10]
 8010660:	4293      	cmp	r3, r2
 8010662:	bf28      	it	cs
 8010664:	4613      	movcs	r3, r2
 8010666:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010668:	8af9      	ldrh	r1, [r7, #22]
 801066a:	7bfb      	ldrb	r3, [r7, #15]
 801066c:	2200      	movs	r2, #0
 801066e:	4618      	mov	r0, r3
 8010670:	f7fb fa00 	bl	800ba74 <pbuf_alloc>
 8010674:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d101      	bne.n	8010680 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 801067c:	2300      	movs	r3, #0
 801067e:	e019      	b.n	80106b4 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d006      	beq.n	8010696 <tcp_pbuf_prealloc+0x92>
 8010688:	4b0c      	ldr	r3, [pc, #48]	; (80106bc <tcp_pbuf_prealloc+0xb8>)
 801068a:	f44f 7288 	mov.w	r2, #272	; 0x110
 801068e:	490c      	ldr	r1, [pc, #48]	; (80106c0 <tcp_pbuf_prealloc+0xbc>)
 8010690:	480c      	ldr	r0, [pc, #48]	; (80106c4 <tcp_pbuf_prealloc+0xc0>)
 8010692:	f006 fa71 	bl	8016b78 <iprintf>
  *oversize = p->len - length;
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	895a      	ldrh	r2, [r3, #10]
 801069a:	89bb      	ldrh	r3, [r7, #12]
 801069c:	1ad3      	subs	r3, r2, r3
 801069e:	b29a      	uxth	r2, r3
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	89ba      	ldrh	r2, [r7, #12]
 80106a8:	811a      	strh	r2, [r3, #8]
 80106aa:	693b      	ldr	r3, [r7, #16]
 80106ac:	891a      	ldrh	r2, [r3, #8]
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	815a      	strh	r2, [r3, #10]
  return p;
 80106b2:	693b      	ldr	r3, [r7, #16]
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3718      	adds	r7, #24
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	08019cc8 	.word	0x08019cc8
 80106c0:	08019d6c 	.word	0x08019d6c
 80106c4:	08019d2c 	.word	0x08019d2c

080106c8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b082      	sub	sp, #8
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	460b      	mov	r3, r1
 80106d2:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	7d1b      	ldrb	r3, [r3, #20]
 80106d8:	2b04      	cmp	r3, #4
 80106da:	d00e      	beq.n	80106fa <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80106e0:	2b07      	cmp	r3, #7
 80106e2:	d00a      	beq.n	80106fa <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80106e8:	2b02      	cmp	r3, #2
 80106ea:	d006      	beq.n	80106fa <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80106f0:	2b03      	cmp	r3, #3
 80106f2:	d002      	beq.n	80106fa <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80106f4:	f06f 030a 	mvn.w	r3, #10
 80106f8:	e04f      	b.n	801079a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 80106fa:	887b      	ldrh	r3, [r7, #2]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d101      	bne.n	8010704 <tcp_write_checks+0x3c>
    return ERR_OK;
 8010700:	2300      	movs	r3, #0
 8010702:	e04a      	b.n	801079a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801070a:	887a      	ldrh	r2, [r7, #2]
 801070c:	429a      	cmp	r2, r3
 801070e:	d909      	bls.n	8010724 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	7e9b      	ldrb	r3, [r3, #26]
 8010714:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010718:	b2da      	uxtb	r2, r3
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801071e:	f04f 33ff 	mov.w	r3, #4294967295
 8010722:	e03a      	b.n	801079a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801072a:	2b08      	cmp	r3, #8
 801072c:	d806      	bhi.n	801073c <tcp_write_checks+0x74>
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010734:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010738:	4293      	cmp	r3, r2
 801073a:	d909      	bls.n	8010750 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	7e9b      	ldrb	r3, [r3, #26]
 8010740:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010744:	b2da      	uxtb	r2, r3
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801074a:	f04f 33ff 	mov.w	r3, #4294967295
 801074e:	e024      	b.n	801079a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010756:	2b00      	cmp	r3, #0
 8010758:	d00f      	beq.n	801077a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801075e:	2b00      	cmp	r3, #0
 8010760:	d11a      	bne.n	8010798 <tcp_write_checks+0xd0>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010766:	2b00      	cmp	r3, #0
 8010768:	d116      	bne.n	8010798 <tcp_write_checks+0xd0>
 801076a:	4b0e      	ldr	r3, [pc, #56]	; (80107a4 <tcp_write_checks+0xdc>)
 801076c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8010770:	490d      	ldr	r1, [pc, #52]	; (80107a8 <tcp_write_checks+0xe0>)
 8010772:	480e      	ldr	r0, [pc, #56]	; (80107ac <tcp_write_checks+0xe4>)
 8010774:	f006 fa00 	bl	8016b78 <iprintf>
 8010778:	e00e      	b.n	8010798 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801077e:	2b00      	cmp	r3, #0
 8010780:	d103      	bne.n	801078a <tcp_write_checks+0xc2>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010786:	2b00      	cmp	r3, #0
 8010788:	d006      	beq.n	8010798 <tcp_write_checks+0xd0>
 801078a:	4b06      	ldr	r3, [pc, #24]	; (80107a4 <tcp_write_checks+0xdc>)
 801078c:	f240 1259 	movw	r2, #345	; 0x159
 8010790:	4907      	ldr	r1, [pc, #28]	; (80107b0 <tcp_write_checks+0xe8>)
 8010792:	4806      	ldr	r0, [pc, #24]	; (80107ac <tcp_write_checks+0xe4>)
 8010794:	f006 f9f0 	bl	8016b78 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010798:	2300      	movs	r3, #0
}
 801079a:	4618      	mov	r0, r3
 801079c:	3708      	adds	r7, #8
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	08019cc8 	.word	0x08019cc8
 80107a8:	08019d80 	.word	0x08019d80
 80107ac:	08019d2c 	.word	0x08019d2c
 80107b0:	08019dbc 	.word	0x08019dbc

080107b4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80107b4:	b590      	push	{r4, r7, lr}
 80107b6:	b09b      	sub	sp, #108	; 0x6c
 80107b8:	af04      	add	r7, sp, #16
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	4611      	mov	r1, r2
 80107c0:	461a      	mov	r2, r3
 80107c2:	460b      	mov	r3, r1
 80107c4:	80fb      	strh	r3, [r7, #6]
 80107c6:	4613      	mov	r3, r2
 80107c8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80107ca:	2300      	movs	r3, #0
 80107cc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80107ce:	2300      	movs	r3, #0
 80107d0:	653b      	str	r3, [r7, #80]	; 0x50
 80107d2:	2300      	movs	r3, #0
 80107d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80107d6:	2300      	movs	r3, #0
 80107d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80107da:	2300      	movs	r3, #0
 80107dc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80107de:	2300      	movs	r3, #0
 80107e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 80107e4:	2300      	movs	r3, #0
 80107e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 80107ea:	2300      	movs	r3, #0
 80107ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80107f0:	2300      	movs	r3, #0
 80107f2:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80107f4:	2300      	movs	r3, #0
 80107f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80107f8:	2300      	movs	r3, #0
 80107fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010802:	085b      	lsrs	r3, r3, #1
 8010804:	b29a      	uxth	r2, r3
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801080a:	4293      	cmp	r3, r2
 801080c:	bf28      	it	cs
 801080e:	4613      	movcs	r3, r2
 8010810:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010814:	2b00      	cmp	r3, #0
 8010816:	d102      	bne.n	801081e <tcp_write+0x6a>
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801081c:	e000      	b.n	8010820 <tcp_write+0x6c>
 801081e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010820:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d109      	bne.n	801083c <tcp_write+0x88>
 8010828:	4b92      	ldr	r3, [pc, #584]	; (8010a74 <tcp_write+0x2c0>)
 801082a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 801082e:	4992      	ldr	r1, [pc, #584]	; (8010a78 <tcp_write+0x2c4>)
 8010830:	4892      	ldr	r0, [pc, #584]	; (8010a7c <tcp_write+0x2c8>)
 8010832:	f006 f9a1 	bl	8016b78 <iprintf>
 8010836:	f06f 030f 	mvn.w	r3, #15
 801083a:	e30a      	b.n	8010e52 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801083c:	88fb      	ldrh	r3, [r7, #6]
 801083e:	4619      	mov	r1, r3
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f7ff ff41 	bl	80106c8 <tcp_write_checks>
 8010846:	4603      	mov	r3, r0
 8010848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801084c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010850:	2b00      	cmp	r3, #0
 8010852:	d002      	beq.n	801085a <tcp_write+0xa6>
    return err;
 8010854:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010858:	e2fb      	b.n	8010e52 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010860:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010868:	2b00      	cmp	r3, #0
 801086a:	f000 80f5 	beq.w	8010a58 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010872:	653b      	str	r3, [r7, #80]	; 0x50
 8010874:	e002      	b.n	801087c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8010876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801087c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d1f8      	bne.n	8010876 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8010884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010886:	7a9b      	ldrb	r3, [r3, #10]
 8010888:	009b      	lsls	r3, r3, #2
 801088a:	b29b      	uxth	r3, r3
 801088c:	f003 0304 	and.w	r3, r3, #4
 8010890:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010892:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010896:	891b      	ldrh	r3, [r3, #8]
 8010898:	4619      	mov	r1, r3
 801089a:	8c3b      	ldrh	r3, [r7, #32]
 801089c:	440b      	add	r3, r1
 801089e:	429a      	cmp	r2, r3
 80108a0:	da06      	bge.n	80108b0 <tcp_write+0xfc>
 80108a2:	4b74      	ldr	r3, [pc, #464]	; (8010a74 <tcp_write+0x2c0>)
 80108a4:	f240 12c7 	movw	r2, #455	; 0x1c7
 80108a8:	4975      	ldr	r1, [pc, #468]	; (8010a80 <tcp_write+0x2cc>)
 80108aa:	4874      	ldr	r0, [pc, #464]	; (8010a7c <tcp_write+0x2c8>)
 80108ac:	f006 f964 	bl	8016b78 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80108b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108b2:	891a      	ldrh	r2, [r3, #8]
 80108b4:	8c3b      	ldrh	r3, [r7, #32]
 80108b6:	4413      	add	r3, r2
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80108bc:	1ad3      	subs	r3, r2, r3
 80108be:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80108c6:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80108c8:	8a7b      	ldrh	r3, [r7, #18]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d027      	beq.n	801091e <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80108ce:	8a7b      	ldrh	r3, [r7, #18]
 80108d0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80108d2:	429a      	cmp	r2, r3
 80108d4:	d206      	bcs.n	80108e4 <tcp_write+0x130>
 80108d6:	4b67      	ldr	r3, [pc, #412]	; (8010a74 <tcp_write+0x2c0>)
 80108d8:	f240 12d9 	movw	r2, #473	; 0x1d9
 80108dc:	4969      	ldr	r1, [pc, #420]	; (8010a84 <tcp_write+0x2d0>)
 80108de:	4867      	ldr	r0, [pc, #412]	; (8010a7c <tcp_write+0x2c8>)
 80108e0:	f006 f94a 	bl	8016b78 <iprintf>
      seg = last_unsent;
 80108e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80108e8:	8a7b      	ldrh	r3, [r7, #18]
 80108ea:	88fa      	ldrh	r2, [r7, #6]
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d901      	bls.n	80108f4 <tcp_write+0x140>
 80108f0:	8a7b      	ldrh	r3, [r7, #18]
 80108f2:	e000      	b.n	80108f6 <tcp_write+0x142>
 80108f4:	88fb      	ldrh	r3, [r7, #6]
 80108f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80108f8:	4293      	cmp	r3, r2
 80108fa:	bfa8      	it	ge
 80108fc:	4613      	movge	r3, r2
 80108fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010900:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010904:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010906:	4413      	add	r3, r2
 8010908:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801090c:	8a7a      	ldrh	r2, [r7, #18]
 801090e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010910:	1ad3      	subs	r3, r2, r3
 8010912:	b29b      	uxth	r3, r3
 8010914:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010916:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010918:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801091a:	1ad3      	subs	r3, r2, r3
 801091c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801091e:	8a7b      	ldrh	r3, [r7, #18]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d00b      	beq.n	801093c <tcp_write+0x188>
 8010924:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010928:	88fb      	ldrh	r3, [r7, #6]
 801092a:	429a      	cmp	r2, r3
 801092c:	d006      	beq.n	801093c <tcp_write+0x188>
 801092e:	4b51      	ldr	r3, [pc, #324]	; (8010a74 <tcp_write+0x2c0>)
 8010930:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010934:	4954      	ldr	r1, [pc, #336]	; (8010a88 <tcp_write+0x2d4>)
 8010936:	4851      	ldr	r0, [pc, #324]	; (8010a7c <tcp_write+0x2c8>)
 8010938:	f006 f91e 	bl	8016b78 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801093c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010940:	88fb      	ldrh	r3, [r7, #6]
 8010942:	429a      	cmp	r2, r3
 8010944:	f080 8168 	bcs.w	8010c18 <tcp_write+0x464>
 8010948:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801094a:	2b00      	cmp	r3, #0
 801094c:	f000 8164 	beq.w	8010c18 <tcp_write+0x464>
 8010950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010952:	891b      	ldrh	r3, [r3, #8]
 8010954:	2b00      	cmp	r3, #0
 8010956:	f000 815f 	beq.w	8010c18 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801095a:	88fa      	ldrh	r2, [r7, #6]
 801095c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010960:	1ad2      	subs	r2, r2, r3
 8010962:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010964:	4293      	cmp	r3, r2
 8010966:	bfa8      	it	ge
 8010968:	4613      	movge	r3, r2
 801096a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801096c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801096e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010970:	797b      	ldrb	r3, [r7, #5]
 8010972:	f003 0301 	and.w	r3, r3, #1
 8010976:	2b00      	cmp	r3, #0
 8010978:	d027      	beq.n	80109ca <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801097a:	f107 0012 	add.w	r0, r7, #18
 801097e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010980:	8bf9      	ldrh	r1, [r7, #30]
 8010982:	2301      	movs	r3, #1
 8010984:	9302      	str	r3, [sp, #8]
 8010986:	797b      	ldrb	r3, [r7, #5]
 8010988:	9301      	str	r3, [sp, #4]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	9300      	str	r3, [sp, #0]
 801098e:	4603      	mov	r3, r0
 8010990:	2004      	movs	r0, #4
 8010992:	f7ff fe37 	bl	8010604 <tcp_pbuf_prealloc>
 8010996:	6578      	str	r0, [r7, #84]	; 0x54
 8010998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801099a:	2b00      	cmp	r3, #0
 801099c:	f000 8227 	beq.w	8010dee <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80109a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109a2:	6858      	ldr	r0, [r3, #4]
 80109a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109a8:	68ba      	ldr	r2, [r7, #8]
 80109aa:	4413      	add	r3, r2
 80109ac:	8bfa      	ldrh	r2, [r7, #30]
 80109ae:	4619      	mov	r1, r3
 80109b0:	f006 f8cf 	bl	8016b52 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80109b4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80109b6:	f7fb fc69 	bl	800c28c <pbuf_clen>
 80109ba:	4603      	mov	r3, r0
 80109bc:	461a      	mov	r2, r3
 80109be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80109c2:	4413      	add	r3, r2
 80109c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80109c8:	e03f      	b.n	8010a4a <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80109ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	637b      	str	r3, [r7, #52]	; 0x34
 80109d0:	e002      	b.n	80109d8 <tcp_write+0x224>
 80109d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	637b      	str	r3, [r7, #52]	; 0x34
 80109d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d1f8      	bne.n	80109d2 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80109e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109e2:	7b1b      	ldrb	r3, [r3, #12]
 80109e4:	2b01      	cmp	r3, #1
 80109e6:	d115      	bne.n	8010a14 <tcp_write+0x260>
 80109e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109ea:	685b      	ldr	r3, [r3, #4]
 80109ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109ee:	8952      	ldrh	r2, [r2, #10]
 80109f0:	4413      	add	r3, r2
 80109f2:	68ba      	ldr	r2, [r7, #8]
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d10d      	bne.n	8010a14 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80109f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d006      	beq.n	8010a0e <tcp_write+0x25a>
 8010a00:	4b1c      	ldr	r3, [pc, #112]	; (8010a74 <tcp_write+0x2c0>)
 8010a02:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8010a06:	4921      	ldr	r1, [pc, #132]	; (8010a8c <tcp_write+0x2d8>)
 8010a08:	481c      	ldr	r0, [pc, #112]	; (8010a7c <tcp_write+0x2c8>)
 8010a0a:	f006 f8b5 	bl	8016b78 <iprintf>
          extendlen = seglen;
 8010a0e:	8bfb      	ldrh	r3, [r7, #30]
 8010a10:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010a12:	e01a      	b.n	8010a4a <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010a14:	8bfb      	ldrh	r3, [r7, #30]
 8010a16:	2201      	movs	r2, #1
 8010a18:	4619      	mov	r1, r3
 8010a1a:	2004      	movs	r0, #4
 8010a1c:	f7fb f82a 	bl	800ba74 <pbuf_alloc>
 8010a20:	6578      	str	r0, [r7, #84]	; 0x54
 8010a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	f000 81e4 	beq.w	8010df2 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8010a2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a2e:	68ba      	ldr	r2, [r7, #8]
 8010a30:	441a      	add	r2, r3
 8010a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a34:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010a36:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010a38:	f7fb fc28 	bl	800c28c <pbuf_clen>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	461a      	mov	r2, r3
 8010a40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a44:	4413      	add	r3, r2
 8010a46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010a4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a4e:	8bfb      	ldrh	r3, [r7, #30]
 8010a50:	4413      	add	r3, r2
 8010a52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010a56:	e0df      	b.n	8010c18 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	f000 80da 	beq.w	8010c18 <tcp_write+0x464>
 8010a64:	4b03      	ldr	r3, [pc, #12]	; (8010a74 <tcp_write+0x2c0>)
 8010a66:	f240 2225 	movw	r2, #549	; 0x225
 8010a6a:	4909      	ldr	r1, [pc, #36]	; (8010a90 <tcp_write+0x2dc>)
 8010a6c:	4803      	ldr	r0, [pc, #12]	; (8010a7c <tcp_write+0x2c8>)
 8010a6e:	f006 f883 	bl	8016b78 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010a72:	e0d1      	b.n	8010c18 <tcp_write+0x464>
 8010a74:	08019cc8 	.word	0x08019cc8
 8010a78:	08019df0 	.word	0x08019df0
 8010a7c:	08019d2c 	.word	0x08019d2c
 8010a80:	08019e24 	.word	0x08019e24
 8010a84:	08019e3c 	.word	0x08019e3c
 8010a88:	08019e5c 	.word	0x08019e5c
 8010a8c:	08019e7c 	.word	0x08019e7c
 8010a90:	08019ea8 	.word	0x08019ea8
    struct pbuf *p;
    u16_t left = len - pos;
 8010a94:	88fa      	ldrh	r2, [r7, #6]
 8010a96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a9a:	1ad3      	subs	r3, r2, r3
 8010a9c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010aa2:	b29b      	uxth	r3, r3
 8010aa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010aa6:	1ad3      	subs	r3, r2, r3
 8010aa8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010aaa:	8b7a      	ldrh	r2, [r7, #26]
 8010aac:	8bbb      	ldrh	r3, [r7, #28]
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	bf28      	it	cs
 8010ab2:	4613      	movcs	r3, r2
 8010ab4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010ab6:	797b      	ldrb	r3, [r7, #5]
 8010ab8:	f003 0301 	and.w	r3, r3, #1
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d036      	beq.n	8010b2e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	8b3b      	ldrh	r3, [r7, #24]
 8010ac8:	4413      	add	r3, r2
 8010aca:	b299      	uxth	r1, r3
 8010acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	bf0c      	ite	eq
 8010ad2:	2301      	moveq	r3, #1
 8010ad4:	2300      	movne	r3, #0
 8010ad6:	b2db      	uxtb	r3, r3
 8010ad8:	f107 0012 	add.w	r0, r7, #18
 8010adc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010ade:	9302      	str	r3, [sp, #8]
 8010ae0:	797b      	ldrb	r3, [r7, #5]
 8010ae2:	9301      	str	r3, [sp, #4]
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	9300      	str	r3, [sp, #0]
 8010ae8:	4603      	mov	r3, r0
 8010aea:	2000      	movs	r0, #0
 8010aec:	f7ff fd8a 	bl	8010604 <tcp_pbuf_prealloc>
 8010af0:	6338      	str	r0, [r7, #48]	; 0x30
 8010af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	f000 817e 	beq.w	8010df6 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010afc:	895b      	ldrh	r3, [r3, #10]
 8010afe:	8b3a      	ldrh	r2, [r7, #24]
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d906      	bls.n	8010b12 <tcp_write+0x35e>
 8010b04:	4b8f      	ldr	r3, [pc, #572]	; (8010d44 <tcp_write+0x590>)
 8010b06:	f240 2241 	movw	r2, #577	; 0x241
 8010b0a:	498f      	ldr	r1, [pc, #572]	; (8010d48 <tcp_write+0x594>)
 8010b0c:	488f      	ldr	r0, [pc, #572]	; (8010d4c <tcp_write+0x598>)
 8010b0e:	f006 f833 	bl	8016b78 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8010b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b14:	685a      	ldr	r2, [r3, #4]
 8010b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b1a:	18d0      	adds	r0, r2, r3
 8010b1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b20:	68ba      	ldr	r2, [r7, #8]
 8010b22:	4413      	add	r3, r2
 8010b24:	8b3a      	ldrh	r2, [r7, #24]
 8010b26:	4619      	mov	r1, r3
 8010b28:	f006 f813 	bl	8016b52 <memcpy>
 8010b2c:	e02e      	b.n	8010b8c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010b2e:	8a7b      	ldrh	r3, [r7, #18]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d006      	beq.n	8010b42 <tcp_write+0x38e>
 8010b34:	4b83      	ldr	r3, [pc, #524]	; (8010d44 <tcp_write+0x590>)
 8010b36:	f240 224b 	movw	r2, #587	; 0x24b
 8010b3a:	4985      	ldr	r1, [pc, #532]	; (8010d50 <tcp_write+0x59c>)
 8010b3c:	4883      	ldr	r0, [pc, #524]	; (8010d4c <tcp_write+0x598>)
 8010b3e:	f006 f81b 	bl	8016b78 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010b42:	8b3b      	ldrh	r3, [r7, #24]
 8010b44:	2201      	movs	r2, #1
 8010b46:	4619      	mov	r1, r3
 8010b48:	2000      	movs	r0, #0
 8010b4a:	f7fa ff93 	bl	800ba74 <pbuf_alloc>
 8010b4e:	6178      	str	r0, [r7, #20]
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	f000 8151 	beq.w	8010dfa <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8010b58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b5c:	68ba      	ldr	r2, [r7, #8]
 8010b5e:	441a      	add	r2, r3
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	2000      	movs	r0, #0
 8010b70:	f7fa ff80 	bl	800ba74 <pbuf_alloc>
 8010b74:	6338      	str	r0, [r7, #48]	; 0x30
 8010b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d103      	bne.n	8010b84 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010b7c:	6978      	ldr	r0, [r7, #20]
 8010b7e:	f7fb faeb 	bl	800c158 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010b82:	e13d      	b.n	8010e00 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010b84:	6979      	ldr	r1, [r7, #20]
 8010b86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b88:	f7fb fbc0 	bl	800c30c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b8e:	f7fb fb7d 	bl	800c28c <pbuf_clen>
 8010b92:	4603      	mov	r3, r0
 8010b94:	461a      	mov	r2, r3
 8010b96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010b9a:	4413      	add	r3, r2
 8010b9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8010ba0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010ba4:	2b09      	cmp	r3, #9
 8010ba6:	d805      	bhi.n	8010bb4 <tcp_write+0x400>
 8010ba8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010bac:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	d903      	bls.n	8010bbc <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bb6:	f7fb facf 	bl	800c158 <pbuf_free>
      goto memerr;
 8010bba:	e121      	b.n	8010e00 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010bc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010bc4:	441a      	add	r2, r3
 8010bc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010bca:	9300      	str	r3, [sp, #0]
 8010bcc:	4613      	mov	r3, r2
 8010bce:	2200      	movs	r2, #0
 8010bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010bd2:	68f8      	ldr	r0, [r7, #12]
 8010bd4:	f7ff fc8e 	bl	80104f4 <tcp_create_segment>
 8010bd8:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	f000 810e 	beq.w	8010dfe <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d102      	bne.n	8010bee <tcp_write+0x43a>
      queue = seg;
 8010be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bea:	647b      	str	r3, [r7, #68]	; 0x44
 8010bec:	e00c      	b.n	8010c08 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d106      	bne.n	8010c02 <tcp_write+0x44e>
 8010bf4:	4b53      	ldr	r3, [pc, #332]	; (8010d44 <tcp_write+0x590>)
 8010bf6:	f240 2285 	movw	r2, #645	; 0x285
 8010bfa:	4956      	ldr	r1, [pc, #344]	; (8010d54 <tcp_write+0x5a0>)
 8010bfc:	4853      	ldr	r0, [pc, #332]	; (8010d4c <tcp_write+0x598>)
 8010bfe:	f005 ffbb 	bl	8016b78 <iprintf>
      prev_seg->next = seg;
 8010c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010c06:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c0a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010c0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c10:	8b3b      	ldrh	r3, [r7, #24]
 8010c12:	4413      	add	r3, r2
 8010c14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010c18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c1c:	88fb      	ldrh	r3, [r7, #6]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	f4ff af38 	bcc.w	8010a94 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010c24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d02c      	beq.n	8010c84 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c30:	e01e      	b.n	8010c70 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8010c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c34:	891a      	ldrh	r2, [r3, #8]
 8010c36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c38:	4413      	add	r3, r2
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c3e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d110      	bne.n	8010c6a <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c4a:	685b      	ldr	r3, [r3, #4]
 8010c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c4e:	8952      	ldrh	r2, [r2, #10]
 8010c50:	4413      	add	r3, r2
 8010c52:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010c54:	68b9      	ldr	r1, [r7, #8]
 8010c56:	4618      	mov	r0, r3
 8010c58:	f005 ff7b 	bl	8016b52 <memcpy>
        p->len += oversize_used;
 8010c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c5e:	895a      	ldrh	r2, [r3, #10]
 8010c60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c62:	4413      	add	r3, r2
 8010c64:	b29a      	uxth	r2, r3
 8010c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c68:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d1dd      	bne.n	8010c32 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8010c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c78:	891a      	ldrh	r2, [r3, #8]
 8010c7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c7c:	4413      	add	r3, r2
 8010c7e:	b29a      	uxth	r2, r3
 8010c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c82:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010c84:	8a7a      	ldrh	r2, [r7, #18]
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d018      	beq.n	8010cc4 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d106      	bne.n	8010ca6 <tcp_write+0x4f2>
 8010c98:	4b2a      	ldr	r3, [pc, #168]	; (8010d44 <tcp_write+0x590>)
 8010c9a:	f240 22bb 	movw	r2, #699	; 0x2bb
 8010c9e:	492e      	ldr	r1, [pc, #184]	; (8010d58 <tcp_write+0x5a4>)
 8010ca0:	482a      	ldr	r0, [pc, #168]	; (8010d4c <tcp_write+0x598>)
 8010ca2:	f005 ff69 	bl	8016b78 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7fb fb2d 	bl	800c30c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cb4:	891a      	ldrh	r2, [r3, #8]
 8010cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cb8:	891b      	ldrh	r3, [r3, #8]
 8010cba:	4413      	add	r3, r2
 8010cbc:	b29a      	uxth	r2, r3
 8010cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cc0:	811a      	strh	r2, [r3, #8]
 8010cc2:	e037      	b.n	8010d34 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8010cc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d034      	beq.n	8010d34 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d003      	beq.n	8010cd8 <tcp_write+0x524>
 8010cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d106      	bne.n	8010ce6 <tcp_write+0x532>
 8010cd8:	4b1a      	ldr	r3, [pc, #104]	; (8010d44 <tcp_write+0x590>)
 8010cda:	f240 22c1 	movw	r2, #705	; 0x2c1
 8010cde:	491f      	ldr	r1, [pc, #124]	; (8010d5c <tcp_write+0x5a8>)
 8010ce0:	481a      	ldr	r0, [pc, #104]	; (8010d4c <tcp_write+0x598>)
 8010ce2:	f005 ff49 	bl	8016b78 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cec:	e009      	b.n	8010d02 <tcp_write+0x54e>
      p->tot_len += extendlen;
 8010cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf0:	891a      	ldrh	r2, [r3, #8]
 8010cf2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010cf4:	4413      	add	r3, r2
 8010cf6:	b29a      	uxth	r2, r3
 8010cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfa:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d1f1      	bne.n	8010cee <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 8010d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0c:	891a      	ldrh	r2, [r3, #8]
 8010d0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d10:	4413      	add	r3, r2
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d16:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d1a:	895a      	ldrh	r2, [r3, #10]
 8010d1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d1e:	4413      	add	r3, r2
 8010d20:	b29a      	uxth	r2, r3
 8010d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d24:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d28:	891a      	ldrh	r2, [r3, #8]
 8010d2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d2c:	4413      	add	r3, r2
 8010d2e:	b29a      	uxth	r2, r3
 8010d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d32:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d112      	bne.n	8010d60 <tcp_write+0x5ac>
    pcb->unsent = queue;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d3e:	669a      	str	r2, [r3, #104]	; 0x68
 8010d40:	e011      	b.n	8010d66 <tcp_write+0x5b2>
 8010d42:	bf00      	nop
 8010d44:	08019cc8 	.word	0x08019cc8
 8010d48:	08019ed8 	.word	0x08019ed8
 8010d4c:	08019d2c 	.word	0x08019d2c
 8010d50:	08019f18 	.word	0x08019f18
 8010d54:	08019f28 	.word	0x08019f28
 8010d58:	08019f3c 	.word	0x08019f3c
 8010d5c:	08019f74 	.word	0x08019f74
  } else {
    last_unsent->next = queue;
 8010d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d64:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010d6a:	88fb      	ldrh	r3, [r7, #6]
 8010d6c:	441a      	add	r2, r3
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d78:	88fb      	ldrh	r3, [r7, #6]
 8010d7a:	1ad3      	subs	r3, r2, r3
 8010d7c:	b29a      	uxth	r2, r3
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010d8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00e      	beq.n	8010db6 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d10a      	bne.n	8010db6 <tcp_write+0x602>
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d106      	bne.n	8010db6 <tcp_write+0x602>
 8010da8:	4b2c      	ldr	r3, [pc, #176]	; (8010e5c <tcp_write+0x6a8>)
 8010daa:	f240 22ed 	movw	r2, #749	; 0x2ed
 8010dae:	492c      	ldr	r1, [pc, #176]	; (8010e60 <tcp_write+0x6ac>)
 8010db0:	482c      	ldr	r0, [pc, #176]	; (8010e64 <tcp_write+0x6b0>)
 8010db2:	f005 fee1 	bl	8016b78 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8010db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d016      	beq.n	8010dea <tcp_write+0x636>
 8010dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dbe:	68db      	ldr	r3, [r3, #12]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d012      	beq.n	8010dea <tcp_write+0x636>
 8010dc4:	797b      	ldrb	r3, [r7, #5]
 8010dc6:	f003 0302 	and.w	r3, r3, #2
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d10d      	bne.n	8010dea <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dd0:	68db      	ldr	r3, [r3, #12]
 8010dd2:	899b      	ldrh	r3, [r3, #12]
 8010dd4:	b29c      	uxth	r4, r3
 8010dd6:	2008      	movs	r0, #8
 8010dd8:	f7f9 ffe6 	bl	800ada8 <lwip_htons>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	461a      	mov	r2, r3
 8010de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010de2:	68db      	ldr	r3, [r3, #12]
 8010de4:	4322      	orrs	r2, r4
 8010de6:	b292      	uxth	r2, r2
 8010de8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010dea:	2300      	movs	r3, #0
 8010dec:	e031      	b.n	8010e52 <tcp_write+0x69e>
          goto memerr;
 8010dee:	bf00      	nop
 8010df0:	e006      	b.n	8010e00 <tcp_write+0x64c>
            goto memerr;
 8010df2:	bf00      	nop
 8010df4:	e004      	b.n	8010e00 <tcp_write+0x64c>
        goto memerr;
 8010df6:	bf00      	nop
 8010df8:	e002      	b.n	8010e00 <tcp_write+0x64c>
        goto memerr;
 8010dfa:	bf00      	nop
 8010dfc:	e000      	b.n	8010e00 <tcp_write+0x64c>
      goto memerr;
 8010dfe:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	7e9b      	ldrb	r3, [r3, #26]
 8010e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010e08:	b2da      	uxtb	r2, r3
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d002      	beq.n	8010e1a <tcp_write+0x666>
    pbuf_free(concat_p);
 8010e14:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010e16:	f7fb f99f 	bl	800c158 <pbuf_free>
  }
  if (queue != NULL) {
 8010e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d002      	beq.n	8010e26 <tcp_write+0x672>
    tcp_segs_free(queue);
 8010e20:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010e22:	f7fc fcc0 	bl	800d7a6 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d00e      	beq.n	8010e4e <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d10a      	bne.n	8010e4e <tcp_write+0x69a>
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d106      	bne.n	8010e4e <tcp_write+0x69a>
 8010e40:	4b06      	ldr	r3, [pc, #24]	; (8010e5c <tcp_write+0x6a8>)
 8010e42:	f240 3202 	movw	r2, #770	; 0x302
 8010e46:	4906      	ldr	r1, [pc, #24]	; (8010e60 <tcp_write+0x6ac>)
 8010e48:	4806      	ldr	r0, [pc, #24]	; (8010e64 <tcp_write+0x6b0>)
 8010e4a:	f005 fe95 	bl	8016b78 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	375c      	adds	r7, #92	; 0x5c
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd90      	pop	{r4, r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	08019cc8 	.word	0x08019cc8
 8010e60:	08019fac 	.word	0x08019fac
 8010e64:	08019d2c 	.word	0x08019d2c

08010e68 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b08a      	sub	sp, #40	; 0x28
 8010e6c:	af02      	add	r7, sp, #8
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	460b      	mov	r3, r1
 8010e72:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010e74:	2300      	movs	r3, #0
 8010e76:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010e7c:	78fb      	ldrb	r3, [r7, #3]
 8010e7e:	f003 0303 	and.w	r3, r3, #3
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d106      	bne.n	8010e94 <tcp_enqueue_flags+0x2c>
 8010e86:	4b6f      	ldr	r3, [pc, #444]	; (8011044 <tcp_enqueue_flags+0x1dc>)
 8010e88:	f240 321b 	movw	r2, #795	; 0x31b
 8010e8c:	496e      	ldr	r1, [pc, #440]	; (8011048 <tcp_enqueue_flags+0x1e0>)
 8010e8e:	486f      	ldr	r0, [pc, #444]	; (801104c <tcp_enqueue_flags+0x1e4>)
 8010e90:	f005 fe72 	bl	8016b78 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010e9a:	2b08      	cmp	r3, #8
 8010e9c:	d806      	bhi.n	8010eac <tcp_enqueue_flags+0x44>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010ea4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010ea8:	4293      	cmp	r3, r2
 8010eaa:	d90e      	bls.n	8010eca <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8010eac:	78fb      	ldrb	r3, [r7, #3]
 8010eae:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d109      	bne.n	8010eca <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	7e9b      	ldrb	r3, [r3, #26]
 8010eba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010ebe:	b2da      	uxtb	r2, r3
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ec8:	e0b7      	b.n	801103a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8010eca:	78fb      	ldrb	r3, [r7, #3]
 8010ecc:	f003 0302 	and.w	r3, r3, #2
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d001      	beq.n	8010ed8 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010ed8:	7ffb      	ldrb	r3, [r7, #31]
 8010eda:	009b      	lsls	r3, r3, #2
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	f003 0304 	and.w	r3, r3, #4
 8010ee2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010ee4:	7dfb      	ldrb	r3, [r7, #23]
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	2200      	movs	r2, #0
 8010eea:	4619      	mov	r1, r3
 8010eec:	2000      	movs	r0, #0
 8010eee:	f7fa fdc1 	bl	800ba74 <pbuf_alloc>
 8010ef2:	6138      	str	r0, [r7, #16]
 8010ef4:	693b      	ldr	r3, [r7, #16]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d109      	bne.n	8010f0e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	7e9b      	ldrb	r3, [r3, #26]
 8010efe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010f02:	b2da      	uxtb	r2, r3
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010f08:	f04f 33ff 	mov.w	r3, #4294967295
 8010f0c:	e095      	b.n	801103a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	895a      	ldrh	r2, [r3, #10]
 8010f12:	7dfb      	ldrb	r3, [r7, #23]
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d206      	bcs.n	8010f28 <tcp_enqueue_flags+0xc0>
 8010f1a:	4b4a      	ldr	r3, [pc, #296]	; (8011044 <tcp_enqueue_flags+0x1dc>)
 8010f1c:	f240 3241 	movw	r2, #833	; 0x341
 8010f20:	494b      	ldr	r1, [pc, #300]	; (8011050 <tcp_enqueue_flags+0x1e8>)
 8010f22:	484a      	ldr	r0, [pc, #296]	; (801104c <tcp_enqueue_flags+0x1e4>)
 8010f24:	f005 fe28 	bl	8016b78 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010f2c:	78fa      	ldrb	r2, [r7, #3]
 8010f2e:	7ffb      	ldrb	r3, [r7, #31]
 8010f30:	9300      	str	r3, [sp, #0]
 8010f32:	460b      	mov	r3, r1
 8010f34:	6939      	ldr	r1, [r7, #16]
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f7ff fadc 	bl	80104f4 <tcp_create_segment>
 8010f3c:	60f8      	str	r0, [r7, #12]
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d109      	bne.n	8010f58 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	7e9b      	ldrb	r3, [r3, #26]
 8010f48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010f4c:	b2da      	uxtb	r2, r3
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010f52:	f04f 33ff 	mov.w	r3, #4294967295
 8010f56:	e070      	b.n	801103a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	68db      	ldr	r3, [r3, #12]
 8010f5c:	f003 0303 	and.w	r3, r3, #3
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d006      	beq.n	8010f72 <tcp_enqueue_flags+0x10a>
 8010f64:	4b37      	ldr	r3, [pc, #220]	; (8011044 <tcp_enqueue_flags+0x1dc>)
 8010f66:	f240 3249 	movw	r2, #841	; 0x349
 8010f6a:	493a      	ldr	r1, [pc, #232]	; (8011054 <tcp_enqueue_flags+0x1ec>)
 8010f6c:	4837      	ldr	r0, [pc, #220]	; (801104c <tcp_enqueue_flags+0x1e4>)
 8010f6e:	f005 fe03 	bl	8016b78 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	891b      	ldrh	r3, [r3, #8]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d006      	beq.n	8010f88 <tcp_enqueue_flags+0x120>
 8010f7a:	4b32      	ldr	r3, [pc, #200]	; (8011044 <tcp_enqueue_flags+0x1dc>)
 8010f7c:	f240 324a 	movw	r2, #842	; 0x34a
 8010f80:	4935      	ldr	r1, [pc, #212]	; (8011058 <tcp_enqueue_flags+0x1f0>)
 8010f82:	4832      	ldr	r0, [pc, #200]	; (801104c <tcp_enqueue_flags+0x1e4>)
 8010f84:	f005 fdf8 	bl	8016b78 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d103      	bne.n	8010f98 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	68fa      	ldr	r2, [r7, #12]
 8010f94:	669a      	str	r2, [r3, #104]	; 0x68
 8010f96:	e00d      	b.n	8010fb4 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f9c:	61bb      	str	r3, [r7, #24]
 8010f9e:	e002      	b.n	8010fa6 <tcp_enqueue_flags+0x13e>
 8010fa0:	69bb      	ldr	r3, [r7, #24]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	61bb      	str	r3, [r7, #24]
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d1f8      	bne.n	8010fa0 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8010fae:	69bb      	ldr	r3, [r7, #24]
 8010fb0:	68fa      	ldr	r2, [r7, #12]
 8010fb2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010fbc:	78fb      	ldrb	r3, [r7, #3]
 8010fbe:	f003 0302 	and.w	r3, r3, #2
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d104      	bne.n	8010fd0 <tcp_enqueue_flags+0x168>
 8010fc6:	78fb      	ldrb	r3, [r7, #3]
 8010fc8:	f003 0301 	and.w	r3, r3, #1
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d004      	beq.n	8010fda <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fd4:	1c5a      	adds	r2, r3, #1
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010fda:	78fb      	ldrb	r3, [r7, #3]
 8010fdc:	f003 0301 	and.w	r3, r3, #1
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d006      	beq.n	8010ff2 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	7e9b      	ldrb	r3, [r3, #26]
 8010fe8:	f043 0320 	orr.w	r3, r3, #32
 8010fec:	b2da      	uxtb	r2, r3
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	685b      	ldr	r3, [r3, #4]
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f7fb f948 	bl	800c28c <pbuf_clen>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	461a      	mov	r2, r3
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011006:	4413      	add	r3, r2
 8011008:	b29a      	uxth	r2, r3
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011016:	2b00      	cmp	r3, #0
 8011018:	d00e      	beq.n	8011038 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801101e:	2b00      	cmp	r3, #0
 8011020:	d10a      	bne.n	8011038 <tcp_enqueue_flags+0x1d0>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011026:	2b00      	cmp	r3, #0
 8011028:	d106      	bne.n	8011038 <tcp_enqueue_flags+0x1d0>
 801102a:	4b06      	ldr	r3, [pc, #24]	; (8011044 <tcp_enqueue_flags+0x1dc>)
 801102c:	f240 326d 	movw	r2, #877	; 0x36d
 8011030:	490a      	ldr	r1, [pc, #40]	; (801105c <tcp_enqueue_flags+0x1f4>)
 8011032:	4806      	ldr	r0, [pc, #24]	; (801104c <tcp_enqueue_flags+0x1e4>)
 8011034:	f005 fda0 	bl	8016b78 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011038:	2300      	movs	r3, #0
}
 801103a:	4618      	mov	r0, r3
 801103c:	3720      	adds	r7, #32
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}
 8011042:	bf00      	nop
 8011044:	08019cc8 	.word	0x08019cc8
 8011048:	08019fcc 	.word	0x08019fcc
 801104c:	08019d2c 	.word	0x08019d2c
 8011050:	0801a024 	.word	0x0801a024
 8011054:	0801a060 	.word	0x0801a060
 8011058:	0801a078 	.word	0x0801a078
 801105c:	0801a0a4 	.word	0x0801a0a4

08011060 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011060:	b590      	push	{r4, r7, lr}
 8011062:	b08b      	sub	sp, #44	; 0x2c
 8011064:	af04      	add	r7, sp, #16
 8011066:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8011068:	2300      	movs	r3, #0
 801106a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801106c:	7dbb      	ldrb	r3, [r7, #22]
 801106e:	b29c      	uxth	r4, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011074:	4618      	mov	r0, r3
 8011076:	f7f9 fea5 	bl	800adc4 <lwip_htonl>
 801107a:	4603      	mov	r3, r0
 801107c:	2200      	movs	r2, #0
 801107e:	4621      	mov	r1, r4
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f7ff f97b 	bl	801037c <tcp_output_alloc_header>
 8011086:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d109      	bne.n	80110a2 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	7e9b      	ldrb	r3, [r3, #26]
 8011092:	f043 0303 	orr.w	r3, r3, #3
 8011096:	b2da      	uxtb	r2, r3
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801109c:	f06f 0301 	mvn.w	r3, #1
 80110a0:	e036      	b.n	8011110 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	3304      	adds	r3, #4
 80110a6:	4618      	mov	r0, r3
 80110a8:	f004 f9a6 	bl	80153f8 <ip4_route>
 80110ac:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d102      	bne.n	80110ba <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80110b4:	23fc      	movs	r3, #252	; 0xfc
 80110b6:	75fb      	strb	r3, [r7, #23]
 80110b8:	e012      	b.n	80110e0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80110ba:	6879      	ldr	r1, [r7, #4]
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	1d18      	adds	r0, r3, #4
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	7a9c      	ldrb	r4, [r3, #10]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	7a5b      	ldrb	r3, [r3, #9]
 80110c8:	68fa      	ldr	r2, [r7, #12]
 80110ca:	9202      	str	r2, [sp, #8]
 80110cc:	2206      	movs	r2, #6
 80110ce:	9201      	str	r2, [sp, #4]
 80110d0:	9300      	str	r3, [sp, #0]
 80110d2:	4623      	mov	r3, r4
 80110d4:	4602      	mov	r2, r0
 80110d6:	6938      	ldr	r0, [r7, #16]
 80110d8:	f004 fb54 	bl	8015784 <ip4_output_if>
 80110dc:	4603      	mov	r3, r0
 80110de:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80110e0:	6938      	ldr	r0, [r7, #16]
 80110e2:	f7fb f839 	bl	800c158 <pbuf_free>

  if (err != ERR_OK) {
 80110e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d007      	beq.n	80110fe <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	7e9b      	ldrb	r3, [r3, #26]
 80110f2:	f043 0303 	orr.w	r3, r3, #3
 80110f6:	b2da      	uxtb	r2, r3
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	769a      	strb	r2, [r3, #26]
 80110fc:	e006      	b.n	801110c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	7e9b      	ldrb	r3, [r3, #26]
 8011102:	f023 0303 	bic.w	r3, r3, #3
 8011106:	b2da      	uxtb	r2, r3
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 801110c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011110:	4618      	mov	r0, r3
 8011112:	371c      	adds	r7, #28
 8011114:	46bd      	mov	sp, r7
 8011116:	bd90      	pop	{r4, r7, pc}

08011118 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011118:	b5b0      	push	{r4, r5, r7, lr}
 801111a:	b08a      	sub	sp, #40	; 0x28
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	7d1b      	ldrb	r3, [r3, #20]
 8011124:	2b01      	cmp	r3, #1
 8011126:	d106      	bne.n	8011136 <tcp_output+0x1e>
 8011128:	4b9b      	ldr	r3, [pc, #620]	; (8011398 <tcp_output+0x280>)
 801112a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801112e:	499b      	ldr	r1, [pc, #620]	; (801139c <tcp_output+0x284>)
 8011130:	489b      	ldr	r0, [pc, #620]	; (80113a0 <tcp_output+0x288>)
 8011132:	f005 fd21 	bl	8016b78 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011136:	4b9b      	ldr	r3, [pc, #620]	; (80113a4 <tcp_output+0x28c>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	429a      	cmp	r2, r3
 801113e:	d101      	bne.n	8011144 <tcp_output+0x2c>
    return ERR_OK;
 8011140:	2300      	movs	r3, #0
 8011142:	e1cf      	b.n	80114e4 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011150:	429a      	cmp	r2, r3
 8011152:	d203      	bcs.n	801115c <tcp_output+0x44>
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801115a:	e002      	b.n	8011162 <tcp_output+0x4a>
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011162:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011168:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	7e9b      	ldrb	r3, [r3, #26]
 801116e:	f003 0302 	and.w	r3, r3, #2
 8011172:	2b00      	cmp	r3, #0
 8011174:	d017      	beq.n	80111a6 <tcp_output+0x8e>
 8011176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011178:	2b00      	cmp	r3, #0
 801117a:	d00f      	beq.n	801119c <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	4618      	mov	r0, r3
 8011184:	f7f9 fe1e 	bl	800adc4 <lwip_htonl>
 8011188:	4602      	mov	r2, r0
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801118e:	1ad3      	subs	r3, r2, r3
 8011190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011192:	8912      	ldrh	r2, [r2, #8]
 8011194:	4413      	add	r3, r2
     (seg == NULL ||
 8011196:	69ba      	ldr	r2, [r7, #24]
 8011198:	429a      	cmp	r2, r3
 801119a:	d204      	bcs.n	80111a6 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f7ff ff5f 	bl	8011060 <tcp_send_empty_ack>
 80111a2:	4603      	mov	r3, r0
 80111a4:	e19e      	b.n	80114e4 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111aa:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80111ac:	6a3b      	ldr	r3, [r7, #32]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d007      	beq.n	80111c2 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 80111b2:	e002      	b.n	80111ba <tcp_output+0xa2>
 80111b4:	6a3b      	ldr	r3, [r7, #32]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	623b      	str	r3, [r7, #32]
 80111ba:	6a3b      	ldr	r3, [r7, #32]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d1f8      	bne.n	80111b4 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	3304      	adds	r3, #4
 80111c6:	4618      	mov	r0, r3
 80111c8:	f004 f916 	bl	80153f8 <ip4_route>
 80111cc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d102      	bne.n	80111da <tcp_output+0xc2>
    return ERR_RTE;
 80111d4:	f06f 0303 	mvn.w	r3, #3
 80111d8:	e184      	b.n	80114e4 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d003      	beq.n	80111e8 <tcp_output+0xd0>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d111      	bne.n	801120c <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d002      	beq.n	80111f4 <tcp_output+0xdc>
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	3304      	adds	r3, #4
 80111f2:	e000      	b.n	80111f6 <tcp_output+0xde>
 80111f4:	2300      	movs	r3, #0
 80111f6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d102      	bne.n	8011204 <tcp_output+0xec>
      return ERR_RTE;
 80111fe:	f06f 0303 	mvn.w	r3, #3
 8011202:	e16f      	b.n	80114e4 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	681a      	ldr	r2, [r3, #0]
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 801120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120e:	2b00      	cmp	r3, #0
 8011210:	f000 813e 	beq.w	8011490 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011216:	68db      	ldr	r3, [r3, #12]
 8011218:	685b      	ldr	r3, [r3, #4]
 801121a:	4618      	mov	r0, r3
 801121c:	f7f9 fdd2 	bl	800adc4 <lwip_htonl>
 8011220:	4602      	mov	r2, r0
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011226:	1ad3      	subs	r3, r2, r3
 8011228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801122a:	8912      	ldrh	r2, [r2, #8]
 801122c:	4413      	add	r3, r2
  if (seg != NULL &&
 801122e:	69ba      	ldr	r2, [r7, #24]
 8011230:	429a      	cmp	r2, r3
 8011232:	f080 812d 	bcs.w	8011490 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	2b00      	cmp	r3, #0
 801123a:	f000 8129 	beq.w	8011490 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011244:	461a      	mov	r2, r3
 8011246:	69bb      	ldr	r3, [r7, #24]
 8011248:	4293      	cmp	r3, r2
 801124a:	f040 8121 	bne.w	8011490 <tcp_output+0x378>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011252:	2b00      	cmp	r3, #0
 8011254:	f040 811c 	bne.w	8011490 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801125e:	2b00      	cmp	r3, #0
 8011260:	f040 812b 	bne.w	80114ba <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2200      	movs	r2, #0
 8011268:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2201      	movs	r2, #1
 8011270:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8011274:	e121      	b.n	80114ba <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011278:	68db      	ldr	r3, [r3, #12]
 801127a:	899b      	ldrh	r3, [r3, #12]
 801127c:	b29b      	uxth	r3, r3
 801127e:	4618      	mov	r0, r3
 8011280:	f7f9 fd92 	bl	800ada8 <lwip_htons>
 8011284:	4603      	mov	r3, r0
 8011286:	f003 0304 	and.w	r3, r3, #4
 801128a:	2b00      	cmp	r3, #0
 801128c:	d006      	beq.n	801129c <tcp_output+0x184>
 801128e:	4b42      	ldr	r3, [pc, #264]	; (8011398 <tcp_output+0x280>)
 8011290:	f240 4246 	movw	r2, #1094	; 0x446
 8011294:	4944      	ldr	r1, [pc, #272]	; (80113a8 <tcp_output+0x290>)
 8011296:	4842      	ldr	r0, [pc, #264]	; (80113a0 <tcp_output+0x288>)
 8011298:	f005 fc6e 	bl	8016b78 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d01f      	beq.n	80112e4 <tcp_output+0x1cc>
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	7e9b      	ldrb	r3, [r3, #26]
 80112a8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d119      	bne.n	80112e4 <tcp_output+0x1cc>
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d00b      	beq.n	80112d0 <tcp_output+0x1b8>
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d110      	bne.n	80112e4 <tcp_output+0x1cc>
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112c6:	891a      	ldrh	r2, [r3, #8]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d209      	bcs.n	80112e4 <tcp_output+0x1cc>
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d004      	beq.n	80112e4 <tcp_output+0x1cc>
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80112e0:	2b08      	cmp	r3, #8
 80112e2:	d901      	bls.n	80112e8 <tcp_output+0x1d0>
 80112e4:	2301      	movs	r3, #1
 80112e6:	e000      	b.n	80112ea <tcp_output+0x1d2>
 80112e8:	2300      	movs	r3, #0
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d106      	bne.n	80112fc <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	7e9b      	ldrb	r3, [r3, #26]
 80112f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	f000 80e1 	beq.w	80114be <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	7d1b      	ldrb	r3, [r3, #20]
 8011300:	2b02      	cmp	r3, #2
 8011302:	d00d      	beq.n	8011320 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	899b      	ldrh	r3, [r3, #12]
 801130a:	b29c      	uxth	r4, r3
 801130c:	2010      	movs	r0, #16
 801130e:	f7f9 fd4b 	bl	800ada8 <lwip_htons>
 8011312:	4603      	mov	r3, r0
 8011314:	461a      	mov	r2, r3
 8011316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011318:	68db      	ldr	r3, [r3, #12]
 801131a:	4322      	orrs	r2, r4
 801131c:	b292      	uxth	r2, r2
 801131e:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8011320:	697a      	ldr	r2, [r7, #20]
 8011322:	6879      	ldr	r1, [r7, #4]
 8011324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011326:	f000 f8e1 	bl	80114ec <tcp_output_segment>
 801132a:	4603      	mov	r3, r0
 801132c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d009      	beq.n	801134a <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	7e9b      	ldrb	r3, [r3, #26]
 801133a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801133e:	b2da      	uxtb	r2, r3
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	769a      	strb	r2, [r3, #26]
      return err;
 8011344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011348:	e0cc      	b.n	80114e4 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 801134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134c:	681a      	ldr	r2, [r3, #0]
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	7d1b      	ldrb	r3, [r3, #20]
 8011356:	2b02      	cmp	r3, #2
 8011358:	d006      	beq.n	8011368 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	7e9b      	ldrb	r3, [r3, #26]
 801135e:	f023 0303 	bic.w	r3, r3, #3
 8011362:	b2da      	uxtb	r2, r3
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	685b      	ldr	r3, [r3, #4]
 801136e:	4618      	mov	r0, r3
 8011370:	f7f9 fd28 	bl	800adc4 <lwip_htonl>
 8011374:	4604      	mov	r4, r0
 8011376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011378:	891b      	ldrh	r3, [r3, #8]
 801137a:	461d      	mov	r5, r3
 801137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137e:	68db      	ldr	r3, [r3, #12]
 8011380:	899b      	ldrh	r3, [r3, #12]
 8011382:	b29b      	uxth	r3, r3
 8011384:	4618      	mov	r0, r3
 8011386:	f7f9 fd0f 	bl	800ada8 <lwip_htons>
 801138a:	4603      	mov	r3, r0
 801138c:	f003 0303 	and.w	r3, r3, #3
 8011390:	2b00      	cmp	r3, #0
 8011392:	d00b      	beq.n	80113ac <tcp_output+0x294>
 8011394:	2301      	movs	r3, #1
 8011396:	e00a      	b.n	80113ae <tcp_output+0x296>
 8011398:	08019cc8 	.word	0x08019cc8
 801139c:	0801a0cc 	.word	0x0801a0cc
 80113a0:	08019d2c 	.word	0x08019d2c
 80113a4:	2000fae8 	.word	0x2000fae8
 80113a8:	0801a0f4 	.word	0x0801a0f4
 80113ac:	2300      	movs	r3, #0
 80113ae:	442b      	add	r3, r5
 80113b0:	4423      	add	r3, r4
 80113b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	1ad3      	subs	r3, r2, r3
 80113bc:	2b00      	cmp	r3, #0
 80113be:	da02      	bge.n	80113c6 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	68ba      	ldr	r2, [r7, #8]
 80113c4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80113c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c8:	891b      	ldrh	r3, [r3, #8]
 80113ca:	461c      	mov	r4, r3
 80113cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	899b      	ldrh	r3, [r3, #12]
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7f9 fce7 	bl	800ada8 <lwip_htons>
 80113da:	4603      	mov	r3, r0
 80113dc:	f003 0303 	and.w	r3, r3, #3
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d001      	beq.n	80113e8 <tcp_output+0x2d0>
 80113e4:	2301      	movs	r3, #1
 80113e6:	e000      	b.n	80113ea <tcp_output+0x2d2>
 80113e8:	2300      	movs	r3, #0
 80113ea:	4423      	add	r3, r4
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d049      	beq.n	8011484 <tcp_output+0x36c>
      seg->next = NULL;
 80113f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f2:	2200      	movs	r2, #0
 80113f4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d105      	bne.n	801140a <tcp_output+0x2f2>
        pcb->unacked = seg;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011402:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8011404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011406:	623b      	str	r3, [r7, #32]
 8011408:	e03f      	b.n	801148a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801140c:	68db      	ldr	r3, [r3, #12]
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	4618      	mov	r0, r3
 8011412:	f7f9 fcd7 	bl	800adc4 <lwip_htonl>
 8011416:	4604      	mov	r4, r0
 8011418:	6a3b      	ldr	r3, [r7, #32]
 801141a:	68db      	ldr	r3, [r3, #12]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	4618      	mov	r0, r3
 8011420:	f7f9 fcd0 	bl	800adc4 <lwip_htonl>
 8011424:	4603      	mov	r3, r0
 8011426:	1ae3      	subs	r3, r4, r3
 8011428:	2b00      	cmp	r3, #0
 801142a:	da24      	bge.n	8011476 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	336c      	adds	r3, #108	; 0x6c
 8011430:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011432:	e002      	b.n	801143a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8011434:	69fb      	ldr	r3, [r7, #28]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801143a:	69fb      	ldr	r3, [r7, #28]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d011      	beq.n	8011466 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011442:	69fb      	ldr	r3, [r7, #28]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	68db      	ldr	r3, [r3, #12]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	4618      	mov	r0, r3
 801144c:	f7f9 fcba 	bl	800adc4 <lwip_htonl>
 8011450:	4604      	mov	r4, r0
 8011452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	4618      	mov	r0, r3
 801145a:	f7f9 fcb3 	bl	800adc4 <lwip_htonl>
 801145e:	4603      	mov	r3, r0
 8011460:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011462:	2b00      	cmp	r3, #0
 8011464:	dbe6      	blt.n	8011434 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8011466:	69fb      	ldr	r3, [r7, #28]
 8011468:	681a      	ldr	r2, [r3, #0]
 801146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801146c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801146e:	69fb      	ldr	r3, [r7, #28]
 8011470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011472:	601a      	str	r2, [r3, #0]
 8011474:	e009      	b.n	801148a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011476:	6a3b      	ldr	r3, [r7, #32]
 8011478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801147a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801147c:	6a3b      	ldr	r3, [r7, #32]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	623b      	str	r3, [r7, #32]
 8011482:	e002      	b.n	801148a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011486:	f7fc f9a2 	bl	800d7ce <tcp_seg_free>
    }
    seg = pcb->unsent;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801148e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011492:	2b00      	cmp	r3, #0
 8011494:	d015      	beq.n	80114c2 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011498:	68db      	ldr	r3, [r3, #12]
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	4618      	mov	r0, r3
 801149e:	f7f9 fc91 	bl	800adc4 <lwip_htonl>
 80114a2:	4602      	mov	r2, r0
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114a8:	1ad3      	subs	r3, r2, r3
 80114aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114ac:	8912      	ldrh	r2, [r2, #8]
 80114ae:	4413      	add	r3, r2
  while (seg != NULL &&
 80114b0:	69ba      	ldr	r2, [r7, #24]
 80114b2:	429a      	cmp	r2, r3
 80114b4:	f4bf aedf 	bcs.w	8011276 <tcp_output+0x15e>
  }
output_done:
 80114b8:	e003      	b.n	80114c2 <tcp_output+0x3aa>
    goto output_done;
 80114ba:	bf00      	nop
 80114bc:	e002      	b.n	80114c4 <tcp_output+0x3ac>
      break;
 80114be:	bf00      	nop
 80114c0:	e000      	b.n	80114c4 <tcp_output+0x3ac>
output_done:
 80114c2:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d103      	bne.n	80114d4 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2200      	movs	r2, #0
 80114d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	7e9b      	ldrb	r3, [r3, #26]
 80114d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114dc:	b2da      	uxtb	r2, r3
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80114e2:	2300      	movs	r3, #0
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	3728      	adds	r7, #40	; 0x28
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bdb0      	pop	{r4, r5, r7, pc}

080114ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80114ec:	b5b0      	push	{r4, r5, r7, lr}
 80114ee:	b08c      	sub	sp, #48	; 0x30
 80114f0:	af04      	add	r7, sp, #16
 80114f2:	60f8      	str	r0, [r7, #12]
 80114f4:	60b9      	str	r1, [r7, #8]
 80114f6:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	89db      	ldrh	r3, [r3, #14]
 80114fe:	2b01      	cmp	r3, #1
 8011500:	d001      	beq.n	8011506 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8011502:	2300      	movs	r3, #0
 8011504:	e08b      	b.n	801161e <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	68dc      	ldr	r4, [r3, #12]
 801150e:	4610      	mov	r0, r2
 8011510:	f7f9 fc58 	bl	800adc4 <lwip_htonl>
 8011514:	4603      	mov	r3, r0
 8011516:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	68dc      	ldr	r4, [r3, #12]
 8011520:	4610      	mov	r0, r2
 8011522:	f7f9 fc41 	bl	800ada8 <lwip_htons>
 8011526:	4603      	mov	r3, r0
 8011528:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801152e:	68ba      	ldr	r2, [r7, #8]
 8011530:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011532:	441a      	add	r2, r3
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	68db      	ldr	r3, [r3, #12]
 801153c:	3314      	adds	r3, #20
 801153e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	7a9b      	ldrb	r3, [r3, #10]
 8011544:	f003 0301 	and.w	r3, r3, #1
 8011548:	2b00      	cmp	r3, #0
 801154a:	d014      	beq.n	8011576 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	3304      	adds	r3, #4
 8011550:	4619      	mov	r1, r3
 8011552:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011556:	f7fc fc73 	bl	800de40 <tcp_eff_send_mss_impl>
 801155a:	4603      	mov	r3, r0
 801155c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801155e:	8b7b      	ldrh	r3, [r7, #26]
 8011560:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011564:	4618      	mov	r0, r3
 8011566:	f7f9 fc2d 	bl	800adc4 <lwip_htonl>
 801156a:	4602      	mov	r2, r0
 801156c:	69fb      	ldr	r3, [r7, #28]
 801156e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011570:	69fb      	ldr	r3, [r7, #28]
 8011572:	3304      	adds	r3, #4
 8011574:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801157c:	2b00      	cmp	r3, #0
 801157e:	da02      	bge.n	8011586 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	2200      	movs	r2, #0
 8011584:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801158a:	2b00      	cmp	r3, #0
 801158c:	d10c      	bne.n	80115a8 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 801158e:	4b26      	ldr	r3, [pc, #152]	; (8011628 <tcp_output_segment+0x13c>)
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	68db      	ldr	r3, [r3, #12]
 801159a:	685b      	ldr	r3, [r3, #4]
 801159c:	4618      	mov	r0, r3
 801159e:	f7f9 fc11 	bl	800adc4 <lwip_htonl>
 80115a2:	4602      	mov	r2, r0
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	68db      	ldr	r3, [r3, #12]
 80115ac:	461a      	mov	r2, r3
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	685b      	ldr	r3, [r3, #4]
 80115b2:	685b      	ldr	r3, [r3, #4]
 80115b4:	1ad3      	subs	r3, r2, r3
 80115b6:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	8959      	ldrh	r1, [r3, #10]
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	8b3a      	ldrh	r2, [r7, #24]
 80115c4:	1a8a      	subs	r2, r1, r2
 80115c6:	b292      	uxth	r2, r2
 80115c8:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	8919      	ldrh	r1, [r3, #8]
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	685b      	ldr	r3, [r3, #4]
 80115d4:	8b3a      	ldrh	r2, [r7, #24]
 80115d6:	1a8a      	subs	r2, r1, r2
 80115d8:	b292      	uxth	r2, r2
 80115da:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	685b      	ldr	r3, [r3, #4]
 80115e0:	68fa      	ldr	r2, [r7, #12]
 80115e2:	68d2      	ldr	r2, [r2, #12]
 80115e4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	2200      	movs	r2, #0
 80115ec:	741a      	strb	r2, [r3, #16]
 80115ee:	2200      	movs	r2, #0
 80115f0:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	6858      	ldr	r0, [r3, #4]
 80115f6:	68b9      	ldr	r1, [r7, #8]
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	1d1c      	adds	r4, r3, #4
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	7a9d      	ldrb	r5, [r3, #10]
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	7a5b      	ldrb	r3, [r3, #9]
 8011604:	687a      	ldr	r2, [r7, #4]
 8011606:	9202      	str	r2, [sp, #8]
 8011608:	2206      	movs	r2, #6
 801160a:	9201      	str	r2, [sp, #4]
 801160c:	9300      	str	r3, [sp, #0]
 801160e:	462b      	mov	r3, r5
 8011610:	4622      	mov	r2, r4
 8011612:	f004 f8b7 	bl	8015784 <ip4_output_if>
 8011616:	4603      	mov	r3, r0
 8011618:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801161a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801161e:	4618      	mov	r0, r3
 8011620:	3720      	adds	r7, #32
 8011622:	46bd      	mov	sp, r7
 8011624:	bdb0      	pop	{r4, r5, r7, pc}
 8011626:	bf00      	nop
 8011628:	2000fad8 	.word	0x2000fad8

0801162c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b08c      	sub	sp, #48	; 0x30
 8011630:	af04      	add	r7, sp, #16
 8011632:	60f8      	str	r0, [r7, #12]
 8011634:	60b9      	str	r1, [r7, #8]
 8011636:	607a      	str	r2, [r7, #4]
 8011638:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801163a:	2200      	movs	r2, #0
 801163c:	2114      	movs	r1, #20
 801163e:	2001      	movs	r0, #1
 8011640:	f7fa fa18 	bl	800ba74 <pbuf_alloc>
 8011644:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8011646:	69fb      	ldr	r3, [r7, #28]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d05b      	beq.n	8011704 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801164c:	69fb      	ldr	r3, [r7, #28]
 801164e:	895b      	ldrh	r3, [r3, #10]
 8011650:	2b13      	cmp	r3, #19
 8011652:	d806      	bhi.n	8011662 <tcp_rst+0x36>
 8011654:	4b2d      	ldr	r3, [pc, #180]	; (801170c <tcp_rst+0xe0>)
 8011656:	f240 524d 	movw	r2, #1357	; 0x54d
 801165a:	492d      	ldr	r1, [pc, #180]	; (8011710 <tcp_rst+0xe4>)
 801165c:	482d      	ldr	r0, [pc, #180]	; (8011714 <tcp_rst+0xe8>)
 801165e:	f005 fa8b 	bl	8016b78 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8011662:	69fb      	ldr	r3, [r7, #28]
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8011668:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801166a:	4618      	mov	r0, r3
 801166c:	f7f9 fb9c 	bl	800ada8 <lwip_htons>
 8011670:	4603      	mov	r3, r0
 8011672:	461a      	mov	r2, r3
 8011674:	69bb      	ldr	r3, [r7, #24]
 8011676:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8011678:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801167a:	4618      	mov	r0, r3
 801167c:	f7f9 fb94 	bl	800ada8 <lwip_htons>
 8011680:	4603      	mov	r3, r0
 8011682:	461a      	mov	r2, r3
 8011684:	69bb      	ldr	r3, [r7, #24]
 8011686:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8011688:	68f8      	ldr	r0, [r7, #12]
 801168a:	f7f9 fb9b 	bl	800adc4 <lwip_htonl>
 801168e:	4602      	mov	r2, r0
 8011690:	69bb      	ldr	r3, [r7, #24]
 8011692:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8011694:	68b8      	ldr	r0, [r7, #8]
 8011696:	f7f9 fb95 	bl	800adc4 <lwip_htonl>
 801169a:	4602      	mov	r2, r0
 801169c:	69bb      	ldr	r3, [r7, #24]
 801169e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80116a0:	f245 0014 	movw	r0, #20500	; 0x5014
 80116a4:	f7f9 fb80 	bl	800ada8 <lwip_htons>
 80116a8:	4603      	mov	r3, r0
 80116aa:	461a      	mov	r2, r3
 80116ac:	69bb      	ldr	r3, [r7, #24]
 80116ae:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80116b0:	69bb      	ldr	r3, [r7, #24]
 80116b2:	2200      	movs	r2, #0
 80116b4:	f042 0208 	orr.w	r2, r2, #8
 80116b8:	739a      	strb	r2, [r3, #14]
 80116ba:	2200      	movs	r2, #0
 80116bc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80116c0:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 80116c2:	69bb      	ldr	r3, [r7, #24]
 80116c4:	2200      	movs	r2, #0
 80116c6:	741a      	strb	r2, [r3, #16]
 80116c8:	2200      	movs	r2, #0
 80116ca:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 80116cc:	69bb      	ldr	r3, [r7, #24]
 80116ce:	2200      	movs	r2, #0
 80116d0:	749a      	strb	r2, [r3, #18]
 80116d2:	2200      	movs	r2, #0
 80116d4:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80116d6:	6838      	ldr	r0, [r7, #0]
 80116d8:	f003 fe8e 	bl	80153f8 <ip4_route>
 80116dc:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d00b      	beq.n	80116fc <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	9302      	str	r3, [sp, #8]
 80116e8:	2306      	movs	r3, #6
 80116ea:	9301      	str	r3, [sp, #4]
 80116ec:	2300      	movs	r3, #0
 80116ee:	9300      	str	r3, [sp, #0]
 80116f0:	23ff      	movs	r3, #255	; 0xff
 80116f2:	683a      	ldr	r2, [r7, #0]
 80116f4:	6879      	ldr	r1, [r7, #4]
 80116f6:	69f8      	ldr	r0, [r7, #28]
 80116f8:	f004 f844 	bl	8015784 <ip4_output_if>
  }
  pbuf_free(p);
 80116fc:	69f8      	ldr	r0, [r7, #28]
 80116fe:	f7fa fd2b 	bl	800c158 <pbuf_free>
 8011702:	e000      	b.n	8011706 <tcp_rst+0xda>
    return;
 8011704:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011706:	3720      	adds	r7, #32
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}
 801170c:	08019cc8 	.word	0x08019cc8
 8011710:	08019cfc 	.word	0x08019cfc
 8011714:	08019d2c 	.word	0x08019d2c

08011718 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b084      	sub	sp, #16
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011724:	2b00      	cmp	r3, #0
 8011726:	d029      	beq.n	801177c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801172c:	60fb      	str	r3, [r7, #12]
 801172e:	e002      	b.n	8011736 <tcp_rexmit_rto+0x1e>
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	60fb      	str	r3, [r7, #12]
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d1f8      	bne.n	8011730 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	2200      	movs	r2, #0
 8011752:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801175a:	2bff      	cmp	r3, #255	; 0xff
 801175c:	d007      	beq.n	801176e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011764:	3301      	adds	r3, #1
 8011766:	b2da      	uxtb	r2, r3
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2200      	movs	r2, #0
 8011772:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f7ff fccf 	bl	8011118 <tcp_output>
 801177a:	e000      	b.n	801177e <tcp_rexmit_rto+0x66>
    return;
 801177c:	bf00      	nop
}
 801177e:	3710      	adds	r7, #16
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}

08011784 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011784:	b590      	push	{r4, r7, lr}
 8011786:	b085      	sub	sp, #20
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011790:	2b00      	cmp	r3, #0
 8011792:	d043      	beq.n	801181c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011798:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	681a      	ldr	r2, [r3, #0]
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	3368      	adds	r3, #104	; 0x68
 80117a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80117a8:	e002      	b.n	80117b0 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d011      	beq.n	80117dc <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	68db      	ldr	r3, [r3, #12]
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7f9 faff 	bl	800adc4 <lwip_htonl>
 80117c6:	4604      	mov	r4, r0
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	68db      	ldr	r3, [r3, #12]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	4618      	mov	r0, r3
 80117d0:	f7f9 faf8 	bl	800adc4 <lwip_htonl>
 80117d4:	4603      	mov	r3, r0
 80117d6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80117d8:	2b00      	cmp	r3, #0
 80117da:	dbe6      	blt.n	80117aa <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	681a      	ldr	r2, [r3, #0]
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	68ba      	ldr	r2, [r7, #8]
 80117e8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d103      	bne.n	80117fa <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2200      	movs	r2, #0
 80117f6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011800:	2bff      	cmp	r3, #255	; 0xff
 8011802:	d007      	beq.n	8011814 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801180a:	3301      	adds	r3, #1
 801180c:	b2da      	uxtb	r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2200      	movs	r2, #0
 8011818:	635a      	str	r2, [r3, #52]	; 0x34
 801181a:	e000      	b.n	801181e <tcp_rexmit+0x9a>
    return;
 801181c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 801181e:	3714      	adds	r7, #20
 8011820:	46bd      	mov	sp, r7
 8011822:	bd90      	pop	{r4, r7, pc}

08011824 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b082      	sub	sp, #8
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011830:	2b00      	cmp	r3, #0
 8011832:	d04a      	beq.n	80118ca <tcp_rexmit_fast+0xa6>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	7e9b      	ldrb	r3, [r3, #26]
 8011838:	f003 0304 	and.w	r3, r3, #4
 801183c:	2b00      	cmp	r3, #0
 801183e:	d144      	bne.n	80118ca <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f7ff ff9f 	bl	8011784 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011852:	429a      	cmp	r2, r3
 8011854:	d207      	bcs.n	8011866 <tcp_rexmit_fast+0x42>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801185c:	0fda      	lsrs	r2, r3, #31
 801185e:	4413      	add	r3, r2
 8011860:	105b      	asrs	r3, r3, #1
 8011862:	b29b      	uxth	r3, r3
 8011864:	e006      	b.n	8011874 <tcp_rexmit_fast+0x50>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801186c:	0fda      	lsrs	r2, r3, #31
 801186e:	4413      	add	r3, r2
 8011870:	105b      	asrs	r3, r3, #1
 8011872:	b29b      	uxth	r3, r3
 8011874:	687a      	ldr	r2, [r7, #4]
 8011876:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011880:	461a      	mov	r2, r3
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011886:	005b      	lsls	r3, r3, #1
 8011888:	429a      	cmp	r2, r3
 801188a:	d206      	bcs.n	801189a <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011890:	005b      	lsls	r3, r3, #1
 8011892:	b29a      	uxth	r2, r3
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118a4:	4619      	mov	r1, r3
 80118a6:	0049      	lsls	r1, r1, #1
 80118a8:	440b      	add	r3, r1
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	4413      	add	r3, r2
 80118ae:	b29a      	uxth	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	7e9b      	ldrb	r3, [r3, #26]
 80118ba:	f043 0304 	orr.w	r3, r3, #4
 80118be:	b2da      	uxtb	r2, r3
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2200      	movs	r2, #0
 80118c8:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 80118ca:	bf00      	nop
 80118cc:	3708      	adds	r7, #8
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}

080118d2 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80118d2:	b580      	push	{r7, lr}
 80118d4:	b08a      	sub	sp, #40	; 0x28
 80118d6:	af04      	add	r7, sp, #16
 80118d8:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118de:	3b01      	subs	r3, #1
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7f9 fa6f 	bl	800adc4 <lwip_htonl>
 80118e6:	4603      	mov	r3, r0
 80118e8:	2200      	movs	r2, #0
 80118ea:	2100      	movs	r1, #0
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f7fe fd45 	bl	801037c <tcp_output_alloc_header>
 80118f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d102      	bne.n	8011900 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80118fa:	f04f 33ff 	mov.w	r3, #4294967295
 80118fe:	e021      	b.n	8011944 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	3304      	adds	r3, #4
 8011904:	4618      	mov	r0, r3
 8011906:	f003 fd77 	bl	80153f8 <ip4_route>
 801190a:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d102      	bne.n	8011918 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8011912:	23fc      	movs	r3, #252	; 0xfc
 8011914:	75fb      	strb	r3, [r7, #23]
 8011916:	e010      	b.n	801193a <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8011918:	6879      	ldr	r1, [r7, #4]
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	1d1a      	adds	r2, r3, #4
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	7a98      	ldrb	r0, [r3, #10]
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	9302      	str	r3, [sp, #8]
 8011926:	2306      	movs	r3, #6
 8011928:	9301      	str	r3, [sp, #4]
 801192a:	2300      	movs	r3, #0
 801192c:	9300      	str	r3, [sp, #0]
 801192e:	4603      	mov	r3, r0
 8011930:	6938      	ldr	r0, [r7, #16]
 8011932:	f003 ff27 	bl	8015784 <ip4_output_if>
 8011936:	4603      	mov	r3, r0
 8011938:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801193a:	6938      	ldr	r0, [r7, #16]
 801193c:	f7fa fc0c 	bl	800c158 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011940:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011944:	4618      	mov	r0, r3
 8011946:	3718      	adds	r7, #24
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801194c:	b590      	push	{r4, r7, lr}
 801194e:	b08f      	sub	sp, #60	; 0x3c
 8011950:	af04      	add	r7, sp, #16
 8011952:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011958:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 801195a:	6a3b      	ldr	r3, [r7, #32]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d102      	bne.n	8011966 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011964:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8011966:	6a3b      	ldr	r3, [r7, #32]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d101      	bne.n	8011970 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 801196c:	2300      	movs	r3, #0
 801196e:	e085      	b.n	8011a7c <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011970:	6a3b      	ldr	r3, [r7, #32]
 8011972:	68db      	ldr	r3, [r3, #12]
 8011974:	899b      	ldrh	r3, [r3, #12]
 8011976:	b29b      	uxth	r3, r3
 8011978:	4618      	mov	r0, r3
 801197a:	f7f9 fa15 	bl	800ada8 <lwip_htons>
 801197e:	4603      	mov	r3, r0
 8011980:	f003 0301 	and.w	r3, r3, #1
 8011984:	2b00      	cmp	r3, #0
 8011986:	d005      	beq.n	8011994 <tcp_zero_window_probe+0x48>
 8011988:	6a3b      	ldr	r3, [r7, #32]
 801198a:	891b      	ldrh	r3, [r3, #8]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d101      	bne.n	8011994 <tcp_zero_window_probe+0x48>
 8011990:	2301      	movs	r3, #1
 8011992:	e000      	b.n	8011996 <tcp_zero_window_probe+0x4a>
 8011994:	2300      	movs	r3, #0
 8011996:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011998:	7ffb      	ldrb	r3, [r7, #31]
 801199a:	2b00      	cmp	r3, #0
 801199c:	bf0c      	ite	eq
 801199e:	2301      	moveq	r3, #1
 80119a0:	2300      	movne	r3, #0
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80119a6:	6a3b      	ldr	r3, [r7, #32]
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	8bba      	ldrh	r2, [r7, #28]
 80119ae:	2100      	movs	r1, #0
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f7fe fce3 	bl	801037c <tcp_output_alloc_header>
 80119b6:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80119b8:	69bb      	ldr	r3, [r7, #24]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d102      	bne.n	80119c4 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80119be:	f04f 33ff 	mov.w	r3, #4294967295
 80119c2:	e05b      	b.n	8011a7c <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80119c4:	69bb      	ldr	r3, [r7, #24]
 80119c6:	685b      	ldr	r3, [r3, #4]
 80119c8:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80119ca:	7ffb      	ldrb	r3, [r7, #31]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d00e      	beq.n	80119ee <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	899b      	ldrh	r3, [r3, #12]
 80119d4:	b29b      	uxth	r3, r3
 80119d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80119da:	b29c      	uxth	r4, r3
 80119dc:	2011      	movs	r0, #17
 80119de:	f7f9 f9e3 	bl	800ada8 <lwip_htons>
 80119e2:	4603      	mov	r3, r0
 80119e4:	4323      	orrs	r3, r4
 80119e6:	b29a      	uxth	r2, r3
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	819a      	strh	r2, [r3, #12]
 80119ec:	e010      	b.n	8011a10 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80119ee:	69bb      	ldr	r3, [r7, #24]
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	3314      	adds	r3, #20
 80119f4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80119f6:	6a3b      	ldr	r3, [r7, #32]
 80119f8:	6858      	ldr	r0, [r3, #4]
 80119fa:	6a3b      	ldr	r3, [r7, #32]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	891a      	ldrh	r2, [r3, #8]
 8011a00:	6a3b      	ldr	r3, [r7, #32]
 8011a02:	891b      	ldrh	r3, [r3, #8]
 8011a04:	1ad3      	subs	r3, r2, r3
 8011a06:	b29b      	uxth	r3, r3
 8011a08:	2201      	movs	r2, #1
 8011a0a:	6939      	ldr	r1, [r7, #16]
 8011a0c:	f7fa fdb0 	bl	800c570 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011a10:	6a3b      	ldr	r3, [r7, #32]
 8011a12:	68db      	ldr	r3, [r3, #12]
 8011a14:	685b      	ldr	r3, [r3, #4]
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7f9 f9d4 	bl	800adc4 <lwip_htonl>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	3301      	adds	r3, #1
 8011a20:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	1ad3      	subs	r3, r2, r3
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	da02      	bge.n	8011a34 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	68fa      	ldr	r2, [r7, #12]
 8011a32:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	3304      	adds	r3, #4
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f003 fcdd 	bl	80153f8 <ip4_route>
 8011a3e:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d103      	bne.n	8011a4e <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8011a46:	23fc      	movs	r3, #252	; 0xfc
 8011a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a4c:	e011      	b.n	8011a72 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011a4e:	6879      	ldr	r1, [r7, #4]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	1d1a      	adds	r2, r3, #4
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	7a98      	ldrb	r0, [r3, #10]
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	9302      	str	r3, [sp, #8]
 8011a5c:	2306      	movs	r3, #6
 8011a5e:	9301      	str	r3, [sp, #4]
 8011a60:	2300      	movs	r3, #0
 8011a62:	9300      	str	r3, [sp, #0]
 8011a64:	4603      	mov	r3, r0
 8011a66:	69b8      	ldr	r0, [r7, #24]
 8011a68:	f003 fe8c 	bl	8015784 <ip4_output_if>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8011a72:	69b8      	ldr	r0, [r7, #24]
 8011a74:	f7fa fb70 	bl	800c158 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011a78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	372c      	adds	r7, #44	; 0x2c
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd90      	pop	{r4, r7, pc}

08011a84 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b082      	sub	sp, #8
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011a8c:	f7fa fdf2 	bl	800c674 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011a90:	4b0a      	ldr	r3, [pc, #40]	; (8011abc <tcpip_tcp_timer+0x38>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d103      	bne.n	8011aa0 <tcpip_tcp_timer+0x1c>
 8011a98:	4b09      	ldr	r3, [pc, #36]	; (8011ac0 <tcpip_tcp_timer+0x3c>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d005      	beq.n	8011aac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	4908      	ldr	r1, [pc, #32]	; (8011ac4 <tcpip_tcp_timer+0x40>)
 8011aa4:	20fa      	movs	r0, #250	; 0xfa
 8011aa6:	f000 f86f 	bl	8011b88 <sys_timeout>
 8011aaa:	e002      	b.n	8011ab2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011aac:	4b06      	ldr	r3, [pc, #24]	; (8011ac8 <tcpip_tcp_timer+0x44>)
 8011aae:	2200      	movs	r2, #0
 8011ab0:	601a      	str	r2, [r3, #0]
  }
}
 8011ab2:	bf00      	nop
 8011ab4:	3708      	adds	r7, #8
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	2000fad4 	.word	0x2000fad4
 8011ac0:	2000fae4 	.word	0x2000fae4
 8011ac4:	08011a85 	.word	0x08011a85
 8011ac8:	20008c7c 	.word	0x20008c7c

08011acc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011ad0:	4b0a      	ldr	r3, [pc, #40]	; (8011afc <tcp_timer_needed+0x30>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d10f      	bne.n	8011af8 <tcp_timer_needed+0x2c>
 8011ad8:	4b09      	ldr	r3, [pc, #36]	; (8011b00 <tcp_timer_needed+0x34>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d103      	bne.n	8011ae8 <tcp_timer_needed+0x1c>
 8011ae0:	4b08      	ldr	r3, [pc, #32]	; (8011b04 <tcp_timer_needed+0x38>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d007      	beq.n	8011af8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011ae8:	4b04      	ldr	r3, [pc, #16]	; (8011afc <tcp_timer_needed+0x30>)
 8011aea:	2201      	movs	r2, #1
 8011aec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011aee:	2200      	movs	r2, #0
 8011af0:	4905      	ldr	r1, [pc, #20]	; (8011b08 <tcp_timer_needed+0x3c>)
 8011af2:	20fa      	movs	r0, #250	; 0xfa
 8011af4:	f000 f848 	bl	8011b88 <sys_timeout>
  }
}
 8011af8:	bf00      	nop
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	20008c7c 	.word	0x20008c7c
 8011b00:	2000fad4 	.word	0x2000fad4
 8011b04:	2000fae4 	.word	0x2000fae4
 8011b08:	08011a85 	.word	0x08011a85

08011b0c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b084      	sub	sp, #16
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	4903      	ldr	r1, [pc, #12]	; (8011b34 <cyclic_timer+0x28>)
 8011b26:	4618      	mov	r0, r3
 8011b28:	f000 f82e 	bl	8011b88 <sys_timeout>
}
 8011b2c:	bf00      	nop
 8011b2e:	3710      	adds	r7, #16
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}
 8011b34:	08011b0d 	.word	0x08011b0d

08011b38 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011b3e:	2301      	movs	r3, #1
 8011b40:	607b      	str	r3, [r7, #4]
 8011b42:	e00e      	b.n	8011b62 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8011b44:	4a0d      	ldr	r2, [pc, #52]	; (8011b7c <sys_timeouts_init+0x44>)
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	00db      	lsls	r3, r3, #3
 8011b50:	4a0a      	ldr	r2, [pc, #40]	; (8011b7c <sys_timeouts_init+0x44>)
 8011b52:	4413      	add	r3, r2
 8011b54:	461a      	mov	r2, r3
 8011b56:	490a      	ldr	r1, [pc, #40]	; (8011b80 <sys_timeouts_init+0x48>)
 8011b58:	f000 f816 	bl	8011b88 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	3301      	adds	r3, #1
 8011b60:	607b      	str	r3, [r7, #4]
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2b04      	cmp	r3, #4
 8011b66:	d9ed      	bls.n	8011b44 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8011b68:	f7f3 f8bc 	bl	8004ce4 <sys_now>
 8011b6c:	4602      	mov	r2, r0
 8011b6e:	4b05      	ldr	r3, [pc, #20]	; (8011b84 <sys_timeouts_init+0x4c>)
 8011b70:	601a      	str	r2, [r3, #0]
}
 8011b72:	bf00      	nop
 8011b74:	3708      	adds	r7, #8
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	080262ac 	.word	0x080262ac
 8011b80:	08011b0d 	.word	0x08011b0d
 8011b84:	20008c78 	.word	0x20008c78

08011b88 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b088      	sub	sp, #32
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	60f8      	str	r0, [r7, #12]
 8011b90:	60b9      	str	r1, [r7, #8]
 8011b92:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011b94:	200a      	movs	r0, #10
 8011b96:	f7f9 fd2b 	bl	800b5f0 <memp_malloc>
 8011b9a:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d10a      	bne.n	8011bb8 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	f040 8084 	bne.w	8011cb2 <sys_timeout+0x12a>
 8011baa:	4b44      	ldr	r3, [pc, #272]	; (8011cbc <sys_timeout+0x134>)
 8011bac:	22d4      	movs	r2, #212	; 0xd4
 8011bae:	4944      	ldr	r1, [pc, #272]	; (8011cc0 <sys_timeout+0x138>)
 8011bb0:	4844      	ldr	r0, [pc, #272]	; (8011cc4 <sys_timeout+0x13c>)
 8011bb2:	f004 ffe1 	bl	8016b78 <iprintf>
    return;
 8011bb6:	e07c      	b.n	8011cb2 <sys_timeout+0x12a>
  }

  now = sys_now();
 8011bb8:	f7f3 f894 	bl	8004ce4 <sys_now>
 8011bbc:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8011bbe:	4b42      	ldr	r3, [pc, #264]	; (8011cc8 <sys_timeout+0x140>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d105      	bne.n	8011bd2 <sys_timeout+0x4a>
    diff = 0;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8011bca:	4a40      	ldr	r2, [pc, #256]	; (8011ccc <sys_timeout+0x144>)
 8011bcc:	693b      	ldr	r3, [r7, #16]
 8011bce:	6013      	str	r3, [r2, #0]
 8011bd0:	e004      	b.n	8011bdc <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8011bd2:	4b3e      	ldr	r3, [pc, #248]	; (8011ccc <sys_timeout+0x144>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	693a      	ldr	r2, [r7, #16]
 8011bd8:	1ad3      	subs	r3, r2, r3
 8011bda:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	2200      	movs	r2, #0
 8011be0:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	68ba      	ldr	r2, [r7, #8]
 8011be6:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	687a      	ldr	r2, [r7, #4]
 8011bec:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8011bee:	68fa      	ldr	r2, [r7, #12]
 8011bf0:	69bb      	ldr	r3, [r7, #24]
 8011bf2:	441a      	add	r2, r3
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011bf8:	4b33      	ldr	r3, [pc, #204]	; (8011cc8 <sys_timeout+0x140>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d103      	bne.n	8011c08 <sys_timeout+0x80>
    next_timeout = timeout;
 8011c00:	4a31      	ldr	r2, [pc, #196]	; (8011cc8 <sys_timeout+0x140>)
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	6013      	str	r3, [r2, #0]
    return;
 8011c06:	e055      	b.n	8011cb4 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8011c08:	4b2f      	ldr	r3, [pc, #188]	; (8011cc8 <sys_timeout+0x140>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	68fa      	ldr	r2, [r7, #12]
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d20f      	bcs.n	8011c34 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8011c14:	4b2c      	ldr	r3, [pc, #176]	; (8011cc8 <sys_timeout+0x140>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	6859      	ldr	r1, [r3, #4]
 8011c1a:	4b2b      	ldr	r3, [pc, #172]	; (8011cc8 <sys_timeout+0x140>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	68fa      	ldr	r2, [r7, #12]
 8011c20:	1a8a      	subs	r2, r1, r2
 8011c22:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8011c24:	4b28      	ldr	r3, [pc, #160]	; (8011cc8 <sys_timeout+0x140>)
 8011c26:	681a      	ldr	r2, [r3, #0]
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011c2c:	4a26      	ldr	r2, [pc, #152]	; (8011cc8 <sys_timeout+0x140>)
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	6013      	str	r3, [r2, #0]
 8011c32:	e03f      	b.n	8011cb4 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011c34:	4b24      	ldr	r3, [pc, #144]	; (8011cc8 <sys_timeout+0x140>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	61fb      	str	r3, [r7, #28]
 8011c3a:	e036      	b.n	8011caa <sys_timeout+0x122>
      timeout->time -= t->time;
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	685a      	ldr	r2, [r3, #4]
 8011c40:	69fb      	ldr	r3, [r7, #28]
 8011c42:	685b      	ldr	r3, [r3, #4]
 8011c44:	1ad2      	subs	r2, r2, r3
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8011c4a:	69fb      	ldr	r3, [r7, #28]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d006      	beq.n	8011c60 <sys_timeout+0xd8>
 8011c52:	69fb      	ldr	r3, [r7, #28]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	685a      	ldr	r2, [r3, #4]
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	685b      	ldr	r3, [r3, #4]
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d921      	bls.n	8011ca4 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8011c60:	69fb      	ldr	r3, [r7, #28]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d009      	beq.n	8011c7c <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8011c68:	69fb      	ldr	r3, [r7, #28]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	6859      	ldr	r1, [r3, #4]
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	685a      	ldr	r2, [r3, #4]
 8011c72:	69fb      	ldr	r3, [r7, #28]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	1a8a      	subs	r2, r1, r2
 8011c78:	605a      	str	r2, [r3, #4]
 8011c7a:	e00b      	b.n	8011c94 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	68fa      	ldr	r2, [r7, #12]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d206      	bcs.n	8011c94 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8011c86:	4b10      	ldr	r3, [pc, #64]	; (8011cc8 <sys_timeout+0x140>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	685a      	ldr	r2, [r3, #4]
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	441a      	add	r2, r3
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8011c94:	69fb      	ldr	r3, [r7, #28]
 8011c96:	681a      	ldr	r2, [r3, #0]
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011c9c:	69fb      	ldr	r3, [r7, #28]
 8011c9e:	697a      	ldr	r2, [r7, #20]
 8011ca0:	601a      	str	r2, [r3, #0]
        break;
 8011ca2:	e007      	b.n	8011cb4 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011ca4:	69fb      	ldr	r3, [r7, #28]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	61fb      	str	r3, [r7, #28]
 8011caa:	69fb      	ldr	r3, [r7, #28]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d1c5      	bne.n	8011c3c <sys_timeout+0xb4>
 8011cb0:	e000      	b.n	8011cb4 <sys_timeout+0x12c>
    return;
 8011cb2:	bf00      	nop
      }
    }
  }
}
 8011cb4:	3720      	adds	r7, #32
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	0801a10c 	.word	0x0801a10c
 8011cc0:	0801a140 	.word	0x0801a140
 8011cc4:	0801a180 	.word	0x0801a180
 8011cc8:	20008c74 	.word	0x20008c74
 8011ccc:	20008c78 	.word	0x20008c78

08011cd0 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b086      	sub	sp, #24
 8011cd4:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8011cd6:	4b24      	ldr	r3, [pc, #144]	; (8011d68 <sys_check_timeouts+0x98>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d03f      	beq.n	8011d5e <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8011cde:	f7f3 f801 	bl	8004ce4 <sys_now>
 8011ce2:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8011ce4:	4b21      	ldr	r3, [pc, #132]	; (8011d6c <sys_check_timeouts+0x9c>)
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	68fa      	ldr	r2, [r7, #12]
 8011cea:	1ad3      	subs	r3, r2, r3
 8011cec:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8011cf2:	4b1d      	ldr	r3, [pc, #116]	; (8011d68 <sys_check_timeouts+0x98>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d02c      	beq.n	8011d58 <sys_check_timeouts+0x88>
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	685b      	ldr	r3, [r3, #4]
 8011d02:	697a      	ldr	r2, [r7, #20]
 8011d04:	429a      	cmp	r2, r3
 8011d06:	d327      	bcc.n	8011d58 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8011d08:	2301      	movs	r3, #1
 8011d0a:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	685a      	ldr	r2, [r3, #4]
 8011d10:	4b16      	ldr	r3, [pc, #88]	; (8011d6c <sys_check_timeouts+0x9c>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	4413      	add	r3, r2
 8011d16:	4a15      	ldr	r2, [pc, #84]	; (8011d6c <sys_check_timeouts+0x9c>)
 8011d18:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	685b      	ldr	r3, [r3, #4]
 8011d1e:	697a      	ldr	r2, [r7, #20]
 8011d20:	1ad3      	subs	r3, r2, r3
 8011d22:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	4a0f      	ldr	r2, [pc, #60]	; (8011d68 <sys_check_timeouts+0x98>)
 8011d2a:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	689b      	ldr	r3, [r3, #8]
 8011d30:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	68db      	ldr	r3, [r3, #12]
 8011d36:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011d38:	68b9      	ldr	r1, [r7, #8]
 8011d3a:	200a      	movs	r0, #10
 8011d3c:	f7f9 fcaa 	bl	800b694 <memp_free>
        if (handler != NULL) {
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d008      	beq.n	8011d58 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8011d46:	480a      	ldr	r0, [pc, #40]	; (8011d70 <sys_check_timeouts+0xa0>)
 8011d48:	f004 fe70 	bl	8016a2c <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6838      	ldr	r0, [r7, #0]
 8011d50:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8011d52:	4807      	ldr	r0, [pc, #28]	; (8011d70 <sys_check_timeouts+0xa0>)
 8011d54:	f004 fe79 	bl	8016a4a <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8011d58:	7cfb      	ldrb	r3, [r7, #19]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d1c7      	bne.n	8011cee <sys_check_timeouts+0x1e>
  }
}
 8011d5e:	bf00      	nop
 8011d60:	3718      	adds	r7, #24
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}
 8011d66:	bf00      	nop
 8011d68:	20008c74 	.word	0x20008c74
 8011d6c:	20008c78 	.word	0x20008c78
 8011d70:	2000c394 	.word	0x2000c394

08011d74 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b082      	sub	sp, #8
 8011d78:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8011d7a:	4b0f      	ldr	r3, [pc, #60]	; (8011db8 <sys_timeouts_sleeptime+0x44>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d102      	bne.n	8011d88 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8011d82:	f04f 33ff 	mov.w	r3, #4294967295
 8011d86:	e013      	b.n	8011db0 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8011d88:	f7f2 ffac 	bl	8004ce4 <sys_now>
 8011d8c:	4602      	mov	r2, r0
 8011d8e:	4b0b      	ldr	r3, [pc, #44]	; (8011dbc <sys_timeouts_sleeptime+0x48>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	1ad3      	subs	r3, r2, r3
 8011d94:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8011d96:	4b08      	ldr	r3, [pc, #32]	; (8011db8 <sys_timeouts_sleeptime+0x44>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	687a      	ldr	r2, [r7, #4]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d901      	bls.n	8011da6 <sys_timeouts_sleeptime+0x32>
    return 0;
 8011da2:	2300      	movs	r3, #0
 8011da4:	e004      	b.n	8011db0 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8011da6:	4b04      	ldr	r3, [pc, #16]	; (8011db8 <sys_timeouts_sleeptime+0x44>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	685a      	ldr	r2, [r3, #4]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	1ad3      	subs	r3, r2, r3
  }
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3708      	adds	r7, #8
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}
 8011db8:	20008c74 	.word	0x20008c74
 8011dbc:	20008c78 	.word	0x20008c78

08011dc0 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b084      	sub	sp, #16
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8011dca:	4b0f      	ldr	r3, [pc, #60]	; (8011e08 <sys_timeouts_mbox_fetch+0x48>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d105      	bne.n	8011dde <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	6839      	ldr	r1, [r7, #0]
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f004 fcf3 	bl	80167c2 <sys_arch_mbox_fetch>
    return;
 8011ddc:	e011      	b.n	8011e02 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8011dde:	f7ff ffc9 	bl	8011d74 <sys_timeouts_sleeptime>
 8011de2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d008      	beq.n	8011dfc <sys_timeouts_mbox_fetch+0x3c>
 8011dea:	68fa      	ldr	r2, [r7, #12]
 8011dec:	6839      	ldr	r1, [r7, #0]
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f004 fce7 	bl	80167c2 <sys_arch_mbox_fetch>
 8011df4:	4603      	mov	r3, r0
 8011df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dfa:	d102      	bne.n	8011e02 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011dfc:	f7ff ff68 	bl	8011cd0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011e00:	e7e3      	b.n	8011dca <sys_timeouts_mbox_fetch+0xa>
  }
}
 8011e02:	3710      	adds	r7, #16
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}
 8011e08:	20008c74 	.word	0x20008c74

08011e0c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011e0c:	b480      	push	{r7}
 8011e0e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8011e10:	bf00      	nop
 8011e12:	46bd      	mov	sp, r7
 8011e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e18:	4770      	bx	lr
	...

08011e1c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b083      	sub	sp, #12
 8011e20:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011e22:	2300      	movs	r3, #0
 8011e24:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011e26:	4b17      	ldr	r3, [pc, #92]	; (8011e84 <udp_new_port+0x68>)
 8011e28:	881b      	ldrh	r3, [r3, #0]
 8011e2a:	1c5a      	adds	r2, r3, #1
 8011e2c:	b291      	uxth	r1, r2
 8011e2e:	4a15      	ldr	r2, [pc, #84]	; (8011e84 <udp_new_port+0x68>)
 8011e30:	8011      	strh	r1, [r2, #0]
 8011e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d103      	bne.n	8011e42 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011e3a:	4b12      	ldr	r3, [pc, #72]	; (8011e84 <udp_new_port+0x68>)
 8011e3c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011e40:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e42:	4b11      	ldr	r3, [pc, #68]	; (8011e88 <udp_new_port+0x6c>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	603b      	str	r3, [r7, #0]
 8011e48:	e011      	b.n	8011e6e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	8a5a      	ldrh	r2, [r3, #18]
 8011e4e:	4b0d      	ldr	r3, [pc, #52]	; (8011e84 <udp_new_port+0x68>)
 8011e50:	881b      	ldrh	r3, [r3, #0]
 8011e52:	429a      	cmp	r2, r3
 8011e54:	d108      	bne.n	8011e68 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011e56:	88fb      	ldrh	r3, [r7, #6]
 8011e58:	3301      	adds	r3, #1
 8011e5a:	80fb      	strh	r3, [r7, #6]
 8011e5c:	88fb      	ldrh	r3, [r7, #6]
 8011e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011e62:	d3e0      	bcc.n	8011e26 <udp_new_port+0xa>
        return 0;
 8011e64:	2300      	movs	r3, #0
 8011e66:	e007      	b.n	8011e78 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	68db      	ldr	r3, [r3, #12]
 8011e6c:	603b      	str	r3, [r7, #0]
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d1ea      	bne.n	8011e4a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011e74:	4b03      	ldr	r3, [pc, #12]	; (8011e84 <udp_new_port+0x68>)
 8011e76:	881b      	ldrh	r3, [r3, #0]
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	370c      	adds	r7, #12
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e82:	4770      	bx	lr
 8011e84:	20000018 	.word	0x20000018
 8011e88:	2000faec 	.word	0x2000faec

08011e8c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b085      	sub	sp, #20
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	4613      	mov	r3, r2
 8011e98:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011e9a:	79fb      	ldrb	r3, [r7, #7]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d018      	beq.n	8011ed2 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d013      	beq.n	8011ece <udp_input_local_match+0x42>
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d00f      	beq.n	8011ece <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011eae:	4b14      	ldr	r3, [pc, #80]	; (8011f00 <udp_input_local_match+0x74>)
 8011eb0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eb6:	d00a      	beq.n	8011ece <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	681a      	ldr	r2, [r3, #0]
 8011ebc:	4b10      	ldr	r3, [pc, #64]	; (8011f00 <udp_input_local_match+0x74>)
 8011ebe:	695b      	ldr	r3, [r3, #20]
 8011ec0:	405a      	eors	r2, r3
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	3308      	adds	r3, #8
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d110      	bne.n	8011ef0 <udp_input_local_match+0x64>
          return 1;
 8011ece:	2301      	movs	r3, #1
 8011ed0:	e00f      	b.n	8011ef2 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d009      	beq.n	8011eec <udp_input_local_match+0x60>
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d005      	beq.n	8011eec <udp_input_local_match+0x60>
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	681a      	ldr	r2, [r3, #0]
 8011ee4:	4b06      	ldr	r3, [pc, #24]	; (8011f00 <udp_input_local_match+0x74>)
 8011ee6:	695b      	ldr	r3, [r3, #20]
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d101      	bne.n	8011ef0 <udp_input_local_match+0x64>
      return 1;
 8011eec:	2301      	movs	r3, #1
 8011eee:	e000      	b.n	8011ef2 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8011ef0:	2300      	movs	r3, #0
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3714      	adds	r7, #20
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efc:	4770      	bx	lr
 8011efe:	bf00      	nop
 8011f00:	2000c3a4 	.word	0x2000c3a4

08011f04 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011f04:	b590      	push	{r4, r7, lr}
 8011f06:	b08d      	sub	sp, #52	; 0x34
 8011f08:	af02      	add	r7, sp, #8
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	895b      	ldrh	r3, [r3, #10]
 8011f16:	2b07      	cmp	r3, #7
 8011f18:	d803      	bhi.n	8011f22 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f7fa f91c 	bl	800c158 <pbuf_free>
    goto end;
 8011f20:	e0c6      	b.n	80120b0 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011f28:	4b63      	ldr	r3, [pc, #396]	; (80120b8 <udp_input+0x1b4>)
 8011f2a:	695a      	ldr	r2, [r3, #20]
 8011f2c:	4b62      	ldr	r3, [pc, #392]	; (80120b8 <udp_input+0x1b4>)
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	4619      	mov	r1, r3
 8011f32:	4610      	mov	r0, r2
 8011f34:	f003 fcf8 	bl	8015928 <ip4_addr_isbroadcast_u32>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	881b      	ldrh	r3, [r3, #0]
 8011f40:	b29b      	uxth	r3, r3
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7f8 ff30 	bl	800ada8 <lwip_htons>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	885b      	ldrh	r3, [r3, #2]
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7f8 ff28 	bl	800ada8 <lwip_htons>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011f60:	2300      	movs	r3, #0
 8011f62:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011f64:	2300      	movs	r3, #0
 8011f66:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f68:	4b54      	ldr	r3, [pc, #336]	; (80120bc <udp_input+0x1b8>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8011f6e:	e03b      	b.n	8011fe8 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f72:	8a5b      	ldrh	r3, [r3, #18]
 8011f74:	89fa      	ldrh	r2, [r7, #14]
 8011f76:	429a      	cmp	r2, r3
 8011f78:	d131      	bne.n	8011fde <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011f7a:	7cfb      	ldrb	r3, [r7, #19]
 8011f7c:	461a      	mov	r2, r3
 8011f7e:	6839      	ldr	r1, [r7, #0]
 8011f80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f82:	f7ff ff83 	bl	8011e8c <udp_input_local_match>
 8011f86:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d028      	beq.n	8011fde <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8011f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8e:	7c1b      	ldrb	r3, [r3, #16]
 8011f90:	f003 0304 	and.w	r3, r3, #4
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d104      	bne.n	8011fa2 <udp_input+0x9e>
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d101      	bne.n	8011fa2 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8011f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa0:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa4:	8a9b      	ldrh	r3, [r3, #20]
 8011fa6:	8a3a      	ldrh	r2, [r7, #16]
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d118      	bne.n	8011fde <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fae:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d005      	beq.n	8011fc0 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb6:	685a      	ldr	r2, [r3, #4]
 8011fb8:	4b3f      	ldr	r3, [pc, #252]	; (80120b8 <udp_input+0x1b4>)
 8011fba:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d10e      	bne.n	8011fde <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011fc0:	6a3b      	ldr	r3, [r7, #32]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d014      	beq.n	8011ff0 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc8:	68da      	ldr	r2, [r3, #12]
 8011fca:	6a3b      	ldr	r3, [r7, #32]
 8011fcc:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011fce:	4b3b      	ldr	r3, [pc, #236]	; (80120bc <udp_input+0x1b8>)
 8011fd0:	681a      	ldr	r2, [r3, #0]
 8011fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011fd6:	4a39      	ldr	r2, [pc, #228]	; (80120bc <udp_input+0x1b8>)
 8011fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fda:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011fdc:	e008      	b.n	8011ff0 <udp_input+0xec>
      }
    }

    prev = pcb;
 8011fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8011fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d1c0      	bne.n	8011f70 <udp_input+0x6c>
 8011fee:	e000      	b.n	8011ff2 <udp_input+0xee>
        break;
 8011ff0:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d101      	bne.n	8011ffc <udp_input+0xf8>
    pcb = uncon_pcb;
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d002      	beq.n	8012008 <udp_input+0x104>
    for_us = 1;
 8012002:	2301      	movs	r3, #1
 8012004:	76fb      	strb	r3, [r7, #27]
 8012006:	e00a      	b.n	801201e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	3304      	adds	r3, #4
 801200c:	681a      	ldr	r2, [r3, #0]
 801200e:	4b2a      	ldr	r3, [pc, #168]	; (80120b8 <udp_input+0x1b4>)
 8012010:	695b      	ldr	r3, [r3, #20]
 8012012:	429a      	cmp	r2, r3
 8012014:	bf0c      	ite	eq
 8012016:	2301      	moveq	r3, #1
 8012018:	2300      	movne	r3, #0
 801201a:	b2db      	uxtb	r3, r3
 801201c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801201e:	7efb      	ldrb	r3, [r7, #27]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d042      	beq.n	80120aa <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8012024:	f06f 0107 	mvn.w	r1, #7
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f7fa f871 	bl	800c110 <pbuf_header>
 801202e:	4603      	mov	r3, r0
 8012030:	2b00      	cmp	r3, #0
 8012032:	d00a      	beq.n	801204a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8012034:	4b22      	ldr	r3, [pc, #136]	; (80120c0 <udp_input+0x1bc>)
 8012036:	f240 1255 	movw	r2, #341	; 0x155
 801203a:	4922      	ldr	r1, [pc, #136]	; (80120c4 <udp_input+0x1c0>)
 801203c:	4822      	ldr	r0, [pc, #136]	; (80120c8 <udp_input+0x1c4>)
 801203e:	f004 fd9b 	bl	8016b78 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f7fa f888 	bl	800c158 <pbuf_free>
      goto end;
 8012048:	e032      	b.n	80120b0 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 801204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204c:	2b00      	cmp	r3, #0
 801204e:	d012      	beq.n	8012076 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012052:	699b      	ldr	r3, [r3, #24]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d00a      	beq.n	801206e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205a:	699c      	ldr	r4, [r3, #24]
 801205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205e:	69d8      	ldr	r0, [r3, #28]
 8012060:	8a3b      	ldrh	r3, [r7, #16]
 8012062:	9300      	str	r3, [sp, #0]
 8012064:	4b19      	ldr	r3, [pc, #100]	; (80120cc <udp_input+0x1c8>)
 8012066:	687a      	ldr	r2, [r7, #4]
 8012068:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801206a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801206c:	e021      	b.n	80120b2 <udp_input+0x1ae>
        pbuf_free(p);
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f7fa f872 	bl	800c158 <pbuf_free>
        goto end;
 8012074:	e01c      	b.n	80120b0 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012076:	7cfb      	ldrb	r3, [r7, #19]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d112      	bne.n	80120a2 <udp_input+0x19e>
 801207c:	4b0e      	ldr	r3, [pc, #56]	; (80120b8 <udp_input+0x1b4>)
 801207e:	695b      	ldr	r3, [r3, #20]
 8012080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012084:	2be0      	cmp	r3, #224	; 0xe0
 8012086:	d00c      	beq.n	80120a2 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012088:	4b0b      	ldr	r3, [pc, #44]	; (80120b8 <udp_input+0x1b4>)
 801208a:	899b      	ldrh	r3, [r3, #12]
 801208c:	3308      	adds	r3, #8
 801208e:	b29b      	uxth	r3, r3
 8012090:	b21b      	sxth	r3, r3
 8012092:	4619      	mov	r1, r3
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7fa f84d 	bl	800c134 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801209a:	2103      	movs	r1, #3
 801209c:	6878      	ldr	r0, [r7, #4]
 801209e:	f003 f923 	bl	80152e8 <icmp_dest_unreach>
      pbuf_free(p);
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f7fa f858 	bl	800c158 <pbuf_free>
  return;
 80120a8:	e003      	b.n	80120b2 <udp_input+0x1ae>
    pbuf_free(p);
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f7fa f854 	bl	800c158 <pbuf_free>
  return;
 80120b0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80120b2:	372c      	adds	r7, #44	; 0x2c
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd90      	pop	{r4, r7, pc}
 80120b8:	2000c3a4 	.word	0x2000c3a4
 80120bc:	2000faec 	.word	0x2000faec
 80120c0:	0801a1a8 	.word	0x0801a1a8
 80120c4:	0801a1d8 	.word	0x0801a1d8
 80120c8:	0801a1ec 	.word	0x0801a1ec
 80120cc:	2000c3b4 	.word	0x2000c3b4

080120d0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b088      	sub	sp, #32
 80120d4:	af02      	add	r7, sp, #8
 80120d6:	60f8      	str	r0, [r7, #12]
 80120d8:	60b9      	str	r1, [r7, #8]
 80120da:	607a      	str	r2, [r7, #4]
 80120dc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d002      	beq.n	80120ea <udp_sendto_if+0x1a>
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d102      	bne.n	80120f0 <udp_sendto_if+0x20>
    return ERR_VAL;
 80120ea:	f06f 0305 	mvn.w	r3, #5
 80120ee:	e028      	b.n	8012142 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d009      	beq.n	801210a <udp_sendto_if+0x3a>
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d005      	beq.n	801210a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012106:	2be0      	cmp	r3, #224	; 0xe0
 8012108:	d103      	bne.n	8012112 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 801210a:	6a3b      	ldr	r3, [r7, #32]
 801210c:	3304      	adds	r3, #4
 801210e:	617b      	str	r3, [r7, #20]
 8012110:	e00b      	b.n	801212a <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681a      	ldr	r2, [r3, #0]
 8012116:	6a3b      	ldr	r3, [r7, #32]
 8012118:	3304      	adds	r3, #4
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	429a      	cmp	r2, r3
 801211e:	d002      	beq.n	8012126 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8012120:	f06f 0303 	mvn.w	r3, #3
 8012124:	e00d      	b.n	8012142 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801212a:	887a      	ldrh	r2, [r7, #2]
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	9301      	str	r3, [sp, #4]
 8012130:	6a3b      	ldr	r3, [r7, #32]
 8012132:	9300      	str	r3, [sp, #0]
 8012134:	4613      	mov	r3, r2
 8012136:	687a      	ldr	r2, [r7, #4]
 8012138:	68b9      	ldr	r1, [r7, #8]
 801213a:	68f8      	ldr	r0, [r7, #12]
 801213c:	f000 f806 	bl	801214c <udp_sendto_if_src>
 8012140:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012142:	4618      	mov	r0, r3
 8012144:	3718      	adds	r7, #24
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
	...

0801214c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b08c      	sub	sp, #48	; 0x30
 8012150:	af04      	add	r7, sp, #16
 8012152:	60f8      	str	r0, [r7, #12]
 8012154:	60b9      	str	r1, [r7, #8]
 8012156:	607a      	str	r2, [r7, #4]
 8012158:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d002      	beq.n	8012166 <udp_sendto_if_src+0x1a>
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d102      	bne.n	801216c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8012166:	f06f 0305 	mvn.w	r3, #5
 801216a:	e07e      	b.n	801226a <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	8a5b      	ldrh	r3, [r3, #18]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d10f      	bne.n	8012194 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012174:	68f9      	ldr	r1, [r7, #12]
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	8a5b      	ldrh	r3, [r3, #18]
 801217a:	461a      	mov	r2, r3
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	f000 f87f 	bl	8012280 <udp_bind>
 8012182:	4603      	mov	r3, r0
 8012184:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012186:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d002      	beq.n	8012194 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801218e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012192:	e06a      	b.n	801226a <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8012194:	2108      	movs	r1, #8
 8012196:	68b8      	ldr	r0, [r7, #8]
 8012198:	f7f9 ffba 	bl	800c110 <pbuf_header>
 801219c:	4603      	mov	r3, r0
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d014      	beq.n	80121cc <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80121a2:	2200      	movs	r2, #0
 80121a4:	2108      	movs	r1, #8
 80121a6:	2001      	movs	r0, #1
 80121a8:	f7f9 fc64 	bl	800ba74 <pbuf_alloc>
 80121ac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80121ae:	69fb      	ldr	r3, [r7, #28]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d102      	bne.n	80121ba <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80121b4:	f04f 33ff 	mov.w	r3, #4294967295
 80121b8:	e057      	b.n	801226a <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	891b      	ldrh	r3, [r3, #8]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d006      	beq.n	80121d0 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80121c2:	68b9      	ldr	r1, [r7, #8]
 80121c4:	69f8      	ldr	r0, [r7, #28]
 80121c6:	f7fa f8f7 	bl	800c3b8 <pbuf_chain>
 80121ca:	e001      	b.n	80121d0 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80121cc:	68bb      	ldr	r3, [r7, #8]
 80121ce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80121d0:	69fb      	ldr	r3, [r7, #28]
 80121d2:	895b      	ldrh	r3, [r3, #10]
 80121d4:	2b07      	cmp	r3, #7
 80121d6:	d806      	bhi.n	80121e6 <udp_sendto_if_src+0x9a>
 80121d8:	4b26      	ldr	r3, [pc, #152]	; (8012274 <udp_sendto_if_src+0x128>)
 80121da:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80121de:	4926      	ldr	r1, [pc, #152]	; (8012278 <udp_sendto_if_src+0x12c>)
 80121e0:	4826      	ldr	r0, [pc, #152]	; (801227c <udp_sendto_if_src+0x130>)
 80121e2:	f004 fcc9 	bl	8016b78 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80121e6:	69fb      	ldr	r3, [r7, #28]
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	8a5b      	ldrh	r3, [r3, #18]
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7f8 fdd9 	bl	800ada8 <lwip_htons>
 80121f6:	4603      	mov	r3, r0
 80121f8:	461a      	mov	r2, r3
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80121fe:	887b      	ldrh	r3, [r7, #2]
 8012200:	4618      	mov	r0, r3
 8012202:	f7f8 fdd1 	bl	800ada8 <lwip_htons>
 8012206:	4603      	mov	r3, r0
 8012208:	461a      	mov	r2, r3
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	2200      	movs	r2, #0
 8012212:	719a      	strb	r2, [r3, #6]
 8012214:	2200      	movs	r2, #0
 8012216:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	891b      	ldrh	r3, [r3, #8]
 801221c:	4618      	mov	r0, r3
 801221e:	f7f8 fdc3 	bl	800ada8 <lwip_htons>
 8012222:	4603      	mov	r3, r0
 8012224:	461a      	mov	r2, r3
 8012226:	697b      	ldr	r3, [r7, #20]
 8012228:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801222a:	2311      	movs	r3, #17
 801222c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	7a9b      	ldrb	r3, [r3, #10]
 8012232:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	7a5b      	ldrb	r3, [r3, #9]
 8012238:	7cb9      	ldrb	r1, [r7, #18]
 801223a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801223c:	9202      	str	r2, [sp, #8]
 801223e:	7cfa      	ldrb	r2, [r7, #19]
 8012240:	9201      	str	r2, [sp, #4]
 8012242:	9300      	str	r3, [sp, #0]
 8012244:	460b      	mov	r3, r1
 8012246:	687a      	ldr	r2, [r7, #4]
 8012248:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801224a:	69f8      	ldr	r0, [r7, #28]
 801224c:	f003 fac4 	bl	80157d8 <ip4_output_if_src>
 8012250:	4603      	mov	r3, r0
 8012252:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012254:	69fa      	ldr	r2, [r7, #28]
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	429a      	cmp	r2, r3
 801225a:	d004      	beq.n	8012266 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 801225c:	69f8      	ldr	r0, [r7, #28]
 801225e:	f7f9 ff7b 	bl	800c158 <pbuf_free>
    q = NULL;
 8012262:	2300      	movs	r3, #0
 8012264:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012266:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801226a:	4618      	mov	r0, r3
 801226c:	3720      	adds	r7, #32
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	0801a1a8 	.word	0x0801a1a8
 8012278:	0801a214 	.word	0x0801a214
 801227c:	0801a1ec 	.word	0x0801a1ec

08012280 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b086      	sub	sp, #24
 8012284:	af00      	add	r7, sp, #0
 8012286:	60f8      	str	r0, [r7, #12]
 8012288:	60b9      	str	r1, [r7, #8]
 801228a:	4613      	mov	r3, r2
 801228c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d101      	bne.n	8012298 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012294:	4b30      	ldr	r3, [pc, #192]	; (8012358 <udp_bind+0xd8>)
 8012296:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d002      	beq.n	80122a4 <udp_bind+0x24>
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d102      	bne.n	80122aa <udp_bind+0x2a>
    return ERR_VAL;
 80122a4:	f06f 0305 	mvn.w	r3, #5
 80122a8:	e052      	b.n	8012350 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80122aa:	2300      	movs	r3, #0
 80122ac:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80122ae:	4b2b      	ldr	r3, [pc, #172]	; (801235c <udp_bind+0xdc>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	617b      	str	r3, [r7, #20]
 80122b4:	e009      	b.n	80122ca <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80122b6:	68fa      	ldr	r2, [r7, #12]
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d102      	bne.n	80122c4 <udp_bind+0x44>
      rebind = 1;
 80122be:	2301      	movs	r3, #1
 80122c0:	74fb      	strb	r3, [r7, #19]
      break;
 80122c2:	e005      	b.n	80122d0 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80122c4:	697b      	ldr	r3, [r7, #20]
 80122c6:	68db      	ldr	r3, [r3, #12]
 80122c8:	617b      	str	r3, [r7, #20]
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d1f2      	bne.n	80122b6 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 80122d0:	88fb      	ldrh	r3, [r7, #6]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d109      	bne.n	80122ea <udp_bind+0x6a>
    port = udp_new_port();
 80122d6:	f7ff fda1 	bl	8011e1c <udp_new_port>
 80122da:	4603      	mov	r3, r0
 80122dc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80122de:	88fb      	ldrh	r3, [r7, #6]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d11e      	bne.n	8012322 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80122e4:	f06f 0307 	mvn.w	r3, #7
 80122e8:	e032      	b.n	8012350 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80122ea:	4b1c      	ldr	r3, [pc, #112]	; (801235c <udp_bind+0xdc>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	617b      	str	r3, [r7, #20]
 80122f0:	e014      	b.n	801231c <udp_bind+0x9c>
      if (pcb != ipcb) {
 80122f2:	68fa      	ldr	r2, [r7, #12]
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d00d      	beq.n	8012316 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	8a5b      	ldrh	r3, [r3, #18]
 80122fe:	88fa      	ldrh	r2, [r7, #6]
 8012300:	429a      	cmp	r2, r3
 8012302:	d108      	bne.n	8012316 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	681a      	ldr	r2, [r3, #0]
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801230c:	429a      	cmp	r2, r3
 801230e:	d102      	bne.n	8012316 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012310:	f06f 0307 	mvn.w	r3, #7
 8012314:	e01c      	b.n	8012350 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	68db      	ldr	r3, [r3, #12]
 801231a:	617b      	str	r3, [r7, #20]
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d1e7      	bne.n	80122f2 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012322:	68bb      	ldr	r3, [r7, #8]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d002      	beq.n	801232e <udp_bind+0xae>
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	e000      	b.n	8012330 <udp_bind+0xb0>
 801232e:	2300      	movs	r3, #0
 8012330:	68fa      	ldr	r2, [r7, #12]
 8012332:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	88fa      	ldrh	r2, [r7, #6]
 8012338:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801233a:	7cfb      	ldrb	r3, [r7, #19]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d106      	bne.n	801234e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012340:	4b06      	ldr	r3, [pc, #24]	; (801235c <udp_bind+0xdc>)
 8012342:	681a      	ldr	r2, [r3, #0]
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012348:	4a04      	ldr	r2, [pc, #16]	; (801235c <udp_bind+0xdc>)
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801234e:	2300      	movs	r3, #0
}
 8012350:	4618      	mov	r0, r3
 8012352:	3718      	adds	r7, #24
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}
 8012358:	080262d4 	.word	0x080262d4
 801235c:	2000faec 	.word	0x2000faec

08012360 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b086      	sub	sp, #24
 8012364:	af00      	add	r7, sp, #0
 8012366:	60f8      	str	r0, [r7, #12]
 8012368:	60b9      	str	r1, [r7, #8]
 801236a:	4613      	mov	r3, r2
 801236c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d002      	beq.n	801237a <udp_connect+0x1a>
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d102      	bne.n	8012380 <udp_connect+0x20>
    return ERR_VAL;
 801237a:	f06f 0305 	mvn.w	r3, #5
 801237e:	e03e      	b.n	80123fe <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	8a5b      	ldrh	r3, [r3, #18]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d10f      	bne.n	80123a8 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012388:	68f9      	ldr	r1, [r7, #12]
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	8a5b      	ldrh	r3, [r3, #18]
 801238e:	461a      	mov	r2, r3
 8012390:	68f8      	ldr	r0, [r7, #12]
 8012392:	f7ff ff75 	bl	8012280 <udp_bind>
 8012396:	4603      	mov	r3, r0
 8012398:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801239a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d002      	beq.n	80123a8 <udp_connect+0x48>
      return err;
 80123a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123a6:	e02a      	b.n	80123fe <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d002      	beq.n	80123b4 <udp_connect+0x54>
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	e000      	b.n	80123b6 <udp_connect+0x56>
 80123b4:	2300      	movs	r3, #0
 80123b6:	68fa      	ldr	r2, [r7, #12]
 80123b8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	88fa      	ldrh	r2, [r7, #6]
 80123be:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	7c1b      	ldrb	r3, [r3, #16]
 80123c4:	f043 0304 	orr.w	r3, r3, #4
 80123c8:	b2da      	uxtb	r2, r3
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80123ce:	4b0e      	ldr	r3, [pc, #56]	; (8012408 <udp_connect+0xa8>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	617b      	str	r3, [r7, #20]
 80123d4:	e008      	b.n	80123e8 <udp_connect+0x88>
    if (pcb == ipcb) {
 80123d6:	68fa      	ldr	r2, [r7, #12]
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d101      	bne.n	80123e2 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 80123de:	2300      	movs	r3, #0
 80123e0:	e00d      	b.n	80123fe <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	68db      	ldr	r3, [r3, #12]
 80123e6:	617b      	str	r3, [r7, #20]
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d1f3      	bne.n	80123d6 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80123ee:	4b06      	ldr	r3, [pc, #24]	; (8012408 <udp_connect+0xa8>)
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80123f6:	4a04      	ldr	r2, [pc, #16]	; (8012408 <udp_connect+0xa8>)
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80123fc:	2300      	movs	r3, #0
}
 80123fe:	4618      	mov	r0, r3
 8012400:	3718      	adds	r7, #24
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}
 8012406:	bf00      	nop
 8012408:	2000faec 	.word	0x2000faec

0801240c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801240c:	b480      	push	{r7}
 801240e:	b085      	sub	sp, #20
 8012410:	af00      	add	r7, sp, #0
 8012412:	60f8      	str	r0, [r7, #12]
 8012414:	60b9      	str	r1, [r7, #8]
 8012416:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	68ba      	ldr	r2, [r7, #8]
 801241c:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	687a      	ldr	r2, [r7, #4]
 8012422:	61da      	str	r2, [r3, #28]
}
 8012424:	bf00      	nop
 8012426:	3714      	adds	r7, #20
 8012428:	46bd      	mov	sp, r7
 801242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242e:	4770      	bx	lr

08012430 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b084      	sub	sp, #16
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012438:	4b15      	ldr	r3, [pc, #84]	; (8012490 <udp_remove+0x60>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	687a      	ldr	r2, [r7, #4]
 801243e:	429a      	cmp	r2, r3
 8012440:	d105      	bne.n	801244e <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012442:	4b13      	ldr	r3, [pc, #76]	; (8012490 <udp_remove+0x60>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	68db      	ldr	r3, [r3, #12]
 8012448:	4a11      	ldr	r2, [pc, #68]	; (8012490 <udp_remove+0x60>)
 801244a:	6013      	str	r3, [r2, #0]
 801244c:	e017      	b.n	801247e <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801244e:	4b10      	ldr	r3, [pc, #64]	; (8012490 <udp_remove+0x60>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	60fb      	str	r3, [r7, #12]
 8012454:	e010      	b.n	8012478 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	68db      	ldr	r3, [r3, #12]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d009      	beq.n	8012472 <udp_remove+0x42>
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	687a      	ldr	r2, [r7, #4]
 8012464:	429a      	cmp	r2, r3
 8012466:	d104      	bne.n	8012472 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	68da      	ldr	r2, [r3, #12]
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	60da      	str	r2, [r3, #12]
        break;
 8012470:	e005      	b.n	801247e <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	68db      	ldr	r3, [r3, #12]
 8012476:	60fb      	str	r3, [r7, #12]
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d1eb      	bne.n	8012456 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801247e:	6879      	ldr	r1, [r7, #4]
 8012480:	2000      	movs	r0, #0
 8012482:	f7f9 f907 	bl	800b694 <memp_free>
}
 8012486:	bf00      	nop
 8012488:	3710      	adds	r7, #16
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}
 801248e:	bf00      	nop
 8012490:	2000faec 	.word	0x2000faec

08012494 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b082      	sub	sp, #8
 8012498:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801249a:	2000      	movs	r0, #0
 801249c:	f7f9 f8a8 	bl	800b5f0 <memp_malloc>
 80124a0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d007      	beq.n	80124b8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80124a8:	2220      	movs	r2, #32
 80124aa:	2100      	movs	r1, #0
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f004 fb5b 	bl	8016b68 <memset>
    pcb->ttl = UDP_TTL;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	22ff      	movs	r2, #255	; 0xff
 80124b6:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80124b8:	687b      	ldr	r3, [r7, #4]
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3708      	adds	r7, #8
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}

080124c2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b084      	sub	sp, #16
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	4603      	mov	r3, r0
 80124ca:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 80124cc:	f7ff ffe2 	bl	8012494 <udp_new>
 80124d0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80124d2:	68fb      	ldr	r3, [r7, #12]
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3710      	adds	r7, #16
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80124dc:	b480      	push	{r7}
 80124de:	b085      	sub	sp, #20
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d01e      	beq.n	801252a <udp_netif_ip_addr_changed+0x4e>
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d01a      	beq.n	801252a <udp_netif_ip_addr_changed+0x4e>
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d017      	beq.n	801252a <udp_netif_ip_addr_changed+0x4e>
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d013      	beq.n	801252a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012502:	4b0d      	ldr	r3, [pc, #52]	; (8012538 <udp_netif_ip_addr_changed+0x5c>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	60fb      	str	r3, [r7, #12]
 8012508:	e00c      	b.n	8012524 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	681a      	ldr	r2, [r3, #0]
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	429a      	cmp	r2, r3
 8012514:	d103      	bne.n	801251e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	681a      	ldr	r2, [r3, #0]
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	68db      	ldr	r3, [r3, #12]
 8012522:	60fb      	str	r3, [r7, #12]
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d1ef      	bne.n	801250a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801252a:	bf00      	nop
 801252c:	3714      	adds	r7, #20
 801252e:	46bd      	mov	sp, r7
 8012530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012534:	4770      	bx	lr
 8012536:	bf00      	nop
 8012538:	2000faec 	.word	0x2000faec

0801253c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012540:	4b20      	ldr	r3, [pc, #128]	; (80125c4 <dhcp_inc_pcb_refcount+0x88>)
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d133      	bne.n	80125b0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012548:	4b1f      	ldr	r3, [pc, #124]	; (80125c8 <dhcp_inc_pcb_refcount+0x8c>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d005      	beq.n	801255c <dhcp_inc_pcb_refcount+0x20>
 8012550:	4b1e      	ldr	r3, [pc, #120]	; (80125cc <dhcp_inc_pcb_refcount+0x90>)
 8012552:	22d9      	movs	r2, #217	; 0xd9
 8012554:	491e      	ldr	r1, [pc, #120]	; (80125d0 <dhcp_inc_pcb_refcount+0x94>)
 8012556:	481f      	ldr	r0, [pc, #124]	; (80125d4 <dhcp_inc_pcb_refcount+0x98>)
 8012558:	f004 fb0e 	bl	8016b78 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801255c:	f7ff ff9a 	bl	8012494 <udp_new>
 8012560:	4602      	mov	r2, r0
 8012562:	4b19      	ldr	r3, [pc, #100]	; (80125c8 <dhcp_inc_pcb_refcount+0x8c>)
 8012564:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8012566:	4b18      	ldr	r3, [pc, #96]	; (80125c8 <dhcp_inc_pcb_refcount+0x8c>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d102      	bne.n	8012574 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801256e:	f04f 33ff 	mov.w	r3, #4294967295
 8012572:	e024      	b.n	80125be <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012574:	4b14      	ldr	r3, [pc, #80]	; (80125c8 <dhcp_inc_pcb_refcount+0x8c>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	7a1a      	ldrb	r2, [r3, #8]
 801257a:	4b13      	ldr	r3, [pc, #76]	; (80125c8 <dhcp_inc_pcb_refcount+0x8c>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f042 0220 	orr.w	r2, r2, #32
 8012582:	b2d2      	uxtb	r2, r2
 8012584:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8012586:	4b10      	ldr	r3, [pc, #64]	; (80125c8 <dhcp_inc_pcb_refcount+0x8c>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	2244      	movs	r2, #68	; 0x44
 801258c:	4912      	ldr	r1, [pc, #72]	; (80125d8 <dhcp_inc_pcb_refcount+0x9c>)
 801258e:	4618      	mov	r0, r3
 8012590:	f7ff fe76 	bl	8012280 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8012594:	4b0c      	ldr	r3, [pc, #48]	; (80125c8 <dhcp_inc_pcb_refcount+0x8c>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2243      	movs	r2, #67	; 0x43
 801259a:	490f      	ldr	r1, [pc, #60]	; (80125d8 <dhcp_inc_pcb_refcount+0x9c>)
 801259c:	4618      	mov	r0, r3
 801259e:	f7ff fedf 	bl	8012360 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80125a2:	4b09      	ldr	r3, [pc, #36]	; (80125c8 <dhcp_inc_pcb_refcount+0x8c>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	2200      	movs	r2, #0
 80125a8:	490c      	ldr	r1, [pc, #48]	; (80125dc <dhcp_inc_pcb_refcount+0xa0>)
 80125aa:	4618      	mov	r0, r3
 80125ac:	f7ff ff2e 	bl	801240c <udp_recv>
  }

  dhcp_pcb_refcount++;
 80125b0:	4b04      	ldr	r3, [pc, #16]	; (80125c4 <dhcp_inc_pcb_refcount+0x88>)
 80125b2:	781b      	ldrb	r3, [r3, #0]
 80125b4:	3301      	adds	r3, #1
 80125b6:	b2da      	uxtb	r2, r3
 80125b8:	4b02      	ldr	r3, [pc, #8]	; (80125c4 <dhcp_inc_pcb_refcount+0x88>)
 80125ba:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80125bc:	2300      	movs	r3, #0
}
 80125be:	4618      	mov	r0, r3
 80125c0:	bd80      	pop	{r7, pc}
 80125c2:	bf00      	nop
 80125c4:	20008c84 	.word	0x20008c84
 80125c8:	20008c80 	.word	0x20008c80
 80125cc:	0801a244 	.word	0x0801a244
 80125d0:	0801a27c 	.word	0x0801a27c
 80125d4:	0801a2a4 	.word	0x0801a2a4
 80125d8:	080262d4 	.word	0x080262d4
 80125dc:	08013c99 	.word	0x08013c99

080125e0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80125e4:	4b0e      	ldr	r3, [pc, #56]	; (8012620 <dhcp_dec_pcb_refcount+0x40>)
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d105      	bne.n	80125f8 <dhcp_dec_pcb_refcount+0x18>
 80125ec:	4b0d      	ldr	r3, [pc, #52]	; (8012624 <dhcp_dec_pcb_refcount+0x44>)
 80125ee:	22f3      	movs	r2, #243	; 0xf3
 80125f0:	490d      	ldr	r1, [pc, #52]	; (8012628 <dhcp_dec_pcb_refcount+0x48>)
 80125f2:	480e      	ldr	r0, [pc, #56]	; (801262c <dhcp_dec_pcb_refcount+0x4c>)
 80125f4:	f004 fac0 	bl	8016b78 <iprintf>
  dhcp_pcb_refcount--;
 80125f8:	4b09      	ldr	r3, [pc, #36]	; (8012620 <dhcp_dec_pcb_refcount+0x40>)
 80125fa:	781b      	ldrb	r3, [r3, #0]
 80125fc:	3b01      	subs	r3, #1
 80125fe:	b2da      	uxtb	r2, r3
 8012600:	4b07      	ldr	r3, [pc, #28]	; (8012620 <dhcp_dec_pcb_refcount+0x40>)
 8012602:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012604:	4b06      	ldr	r3, [pc, #24]	; (8012620 <dhcp_dec_pcb_refcount+0x40>)
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d107      	bne.n	801261c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801260c:	4b08      	ldr	r3, [pc, #32]	; (8012630 <dhcp_dec_pcb_refcount+0x50>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	4618      	mov	r0, r3
 8012612:	f7ff ff0d 	bl	8012430 <udp_remove>
    dhcp_pcb = NULL;
 8012616:	4b06      	ldr	r3, [pc, #24]	; (8012630 <dhcp_dec_pcb_refcount+0x50>)
 8012618:	2200      	movs	r2, #0
 801261a:	601a      	str	r2, [r3, #0]
  }
}
 801261c:	bf00      	nop
 801261e:	bd80      	pop	{r7, pc}
 8012620:	20008c84 	.word	0x20008c84
 8012624:	0801a244 	.word	0x0801a244
 8012628:	0801a2cc 	.word	0x0801a2cc
 801262c:	0801a2a4 	.word	0x0801a2a4
 8012630:	20008c80 	.word	0x20008c80

08012634 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b084      	sub	sp, #16
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6a1b      	ldr	r3, [r3, #32]
 8012640:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012642:	210c      	movs	r1, #12
 8012644:	68f8      	ldr	r0, [r7, #12]
 8012646:	f000 ff85 	bl	8013554 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801264a:	4b06      	ldr	r3, [pc, #24]	; (8012664 <dhcp_handle_nak+0x30>)
 801264c:	4a05      	ldr	r2, [pc, #20]	; (8012664 <dhcp_handle_nak+0x30>)
 801264e:	4905      	ldr	r1, [pc, #20]	; (8012664 <dhcp_handle_nak+0x30>)
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f7f9 f8ad 	bl	800b7b0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f000 fbb6 	bl	8012dc8 <dhcp_discover>
}
 801265c:	bf00      	nop
 801265e:	3710      	adds	r7, #16
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}
 8012664:	080262d4 	.word	0x080262d4

08012668 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	6a1b      	ldr	r3, [r3, #32]
 8012674:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012676:	2108      	movs	r1, #8
 8012678:	68f8      	ldr	r0, [r7, #12]
 801267a:	f000 ff6b 	bl	8013554 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	3328      	adds	r3, #40	; 0x28
 8012682:	2200      	movs	r2, #0
 8012684:	4619      	mov	r1, r3
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f002 fb1e 	bl	8014cc8 <etharp_query>
 801268c:	4603      	mov	r3, r0
 801268e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	7a9b      	ldrb	r3, [r3, #10]
 8012694:	2bff      	cmp	r3, #255	; 0xff
 8012696:	d005      	beq.n	80126a4 <dhcp_check+0x3c>
    dhcp->tries++;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	7a9b      	ldrb	r3, [r3, #10]
 801269c:	3301      	adds	r3, #1
 801269e:	b2da      	uxtb	r2, r3
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 80126a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80126a8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80126aa:	893b      	ldrh	r3, [r7, #8]
 80126ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80126b0:	4a06      	ldr	r2, [pc, #24]	; (80126cc <dhcp_check+0x64>)
 80126b2:	fb82 1203 	smull	r1, r2, r2, r3
 80126b6:	1152      	asrs	r2, r2, #5
 80126b8:	17db      	asrs	r3, r3, #31
 80126ba:	1ad3      	subs	r3, r2, r3
 80126bc:	b29a      	uxth	r2, r3
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80126c2:	bf00      	nop
 80126c4:	3710      	adds	r7, #16
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}
 80126ca:	bf00      	nop
 80126cc:	10624dd3 	.word	0x10624dd3

080126d0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b084      	sub	sp, #16
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6a1b      	ldr	r3, [r3, #32]
 80126dc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80126de:	4b0c      	ldr	r3, [pc, #48]	; (8012710 <dhcp_handle_offer+0x40>)
 80126e0:	789b      	ldrb	r3, [r3, #2]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d00f      	beq.n	8012706 <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80126e6:	4b0b      	ldr	r3, [pc, #44]	; (8012714 <dhcp_handle_offer+0x44>)
 80126e8:	689b      	ldr	r3, [r3, #8]
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7f8 fb6a 	bl	800adc4 <lwip_htonl>
 80126f0:	4602      	mov	r2, r0
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	691a      	ldr	r2, [r3, #16]
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f000 f809 	bl	8012718 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 8012706:	bf00      	nop
 8012708:	3710      	adds	r7, #16
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	2000faf0 	.word	0x2000faf0
 8012714:	2000faf8 	.word	0x2000faf8

08012718 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b088      	sub	sp, #32
 801271c:	af02      	add	r7, sp, #8
 801271e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6a1b      	ldr	r3, [r3, #32]
 8012724:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012726:	2101      	movs	r1, #1
 8012728:	6938      	ldr	r0, [r7, #16]
 801272a:	f000 ff13 	bl	8013554 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801272e:	2203      	movs	r2, #3
 8012730:	6939      	ldr	r1, [r7, #16]
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f001 fb94 	bl	8013e60 <dhcp_create_msg>
 8012738:	4603      	mov	r3, r0
 801273a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801273c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d159      	bne.n	80127f8 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012744:	2202      	movs	r2, #2
 8012746:	2139      	movs	r1, #57	; 0x39
 8012748:	6938      	ldr	r0, [r7, #16]
 801274a:	f000 ff1d 	bl	8013588 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012752:	4619      	mov	r1, r3
 8012754:	6938      	ldr	r0, [r7, #16]
 8012756:	f000 ff79 	bl	801364c <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801275a:	2204      	movs	r2, #4
 801275c:	2132      	movs	r1, #50	; 0x32
 801275e:	6938      	ldr	r0, [r7, #16]
 8012760:	f000 ff12 	bl	8013588 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012764:	693b      	ldr	r3, [r7, #16]
 8012766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012768:	4618      	mov	r0, r3
 801276a:	f7f8 fb2b 	bl	800adc4 <lwip_htonl>
 801276e:	4603      	mov	r3, r0
 8012770:	4619      	mov	r1, r3
 8012772:	6938      	ldr	r0, [r7, #16]
 8012774:	f000 ffa4 	bl	80136c0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8012778:	2204      	movs	r2, #4
 801277a:	2136      	movs	r1, #54	; 0x36
 801277c:	6938      	ldr	r0, [r7, #16]
 801277e:	f000 ff03 	bl	8013588 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012782:	693b      	ldr	r3, [r7, #16]
 8012784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012786:	4618      	mov	r0, r3
 8012788:	f7f8 fb1c 	bl	800adc4 <lwip_htonl>
 801278c:	4603      	mov	r3, r0
 801278e:	4619      	mov	r1, r3
 8012790:	6938      	ldr	r0, [r7, #16]
 8012792:	f000 ff95 	bl	80136c0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012796:	2203      	movs	r2, #3
 8012798:	2137      	movs	r1, #55	; 0x37
 801279a:	6938      	ldr	r0, [r7, #16]
 801279c:	f000 fef4 	bl	8013588 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80127a0:	2300      	movs	r3, #0
 80127a2:	75fb      	strb	r3, [r7, #23]
 80127a4:	e009      	b.n	80127ba <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80127a6:	7dfb      	ldrb	r3, [r7, #23]
 80127a8:	4a29      	ldr	r2, [pc, #164]	; (8012850 <dhcp_select+0x138>)
 80127aa:	5cd3      	ldrb	r3, [r2, r3]
 80127ac:	4619      	mov	r1, r3
 80127ae:	6938      	ldr	r0, [r7, #16]
 80127b0:	f000 ff24 	bl	80135fc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80127b4:	7dfb      	ldrb	r3, [r7, #23]
 80127b6:	3301      	adds	r3, #1
 80127b8:	75fb      	strb	r3, [r7, #23]
 80127ba:	7dfb      	ldrb	r3, [r7, #23]
 80127bc:	2b02      	cmp	r3, #2
 80127be:	d9f2      	bls.n	80127a6 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 80127c0:	6938      	ldr	r0, [r7, #16]
 80127c2:	f001 fcf1 	bl	80141a8 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	68da      	ldr	r2, [r3, #12]
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	8a9b      	ldrh	r3, [r3, #20]
 80127ce:	33f0      	adds	r3, #240	; 0xf0
 80127d0:	b29b      	uxth	r3, r3
 80127d2:	4619      	mov	r1, r3
 80127d4:	4610      	mov	r0, r2
 80127d6:	f7f9 fb4b 	bl	800be70 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80127da:	4b1e      	ldr	r3, [pc, #120]	; (8012854 <dhcp_select+0x13c>)
 80127dc:	6818      	ldr	r0, [r3, #0]
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	68d9      	ldr	r1, [r3, #12]
 80127e2:	4b1d      	ldr	r3, [pc, #116]	; (8012858 <dhcp_select+0x140>)
 80127e4:	9301      	str	r3, [sp, #4]
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	9300      	str	r3, [sp, #0]
 80127ea:	2343      	movs	r3, #67	; 0x43
 80127ec:	4a1b      	ldr	r2, [pc, #108]	; (801285c <dhcp_select+0x144>)
 80127ee:	f7ff fcad 	bl	801214c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 80127f2:	6938      	ldr	r0, [r7, #16]
 80127f4:	f001 fc96 	bl	8014124 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	7a9b      	ldrb	r3, [r3, #10]
 80127fc:	2bff      	cmp	r3, #255	; 0xff
 80127fe:	d005      	beq.n	801280c <dhcp_select+0xf4>
    dhcp->tries++;
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	7a9b      	ldrb	r3, [r3, #10]
 8012804:	3301      	adds	r3, #1
 8012806:	b2da      	uxtb	r2, r3
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	7a9b      	ldrb	r3, [r3, #10]
 8012810:	2b05      	cmp	r3, #5
 8012812:	d807      	bhi.n	8012824 <dhcp_select+0x10c>
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	7a9b      	ldrb	r3, [r3, #10]
 8012818:	461a      	mov	r2, r3
 801281a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801281e:	4093      	lsls	r3, r2
 8012820:	b29b      	uxth	r3, r3
 8012822:	e001      	b.n	8012828 <dhcp_select+0x110>
 8012824:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012828:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801282a:	89bb      	ldrh	r3, [r7, #12]
 801282c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012830:	4a0b      	ldr	r2, [pc, #44]	; (8012860 <dhcp_select+0x148>)
 8012832:	fb82 1203 	smull	r1, r2, r2, r3
 8012836:	1152      	asrs	r2, r2, #5
 8012838:	17db      	asrs	r3, r3, #31
 801283a:	1ad3      	subs	r3, r2, r3
 801283c:	b29a      	uxth	r2, r3
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012842:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012846:	4618      	mov	r0, r3
 8012848:	3718      	adds	r7, #24
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}
 801284e:	bf00      	nop
 8012850:	2000001c 	.word	0x2000001c
 8012854:	20008c80 	.word	0x20008c80
 8012858:	080262d4 	.word	0x080262d4
 801285c:	080262d8 	.word	0x080262d8
 8012860:	10624dd3 	.word	0x10624dd3

08012864 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b082      	sub	sp, #8
 8012868:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 801286a:	4b27      	ldr	r3, [pc, #156]	; (8012908 <dhcp_coarse_tmr+0xa4>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 8012870:	e042      	b.n	80128f8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	6a1b      	ldr	r3, [r3, #32]
 8012876:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d039      	beq.n	80128f2 <dhcp_coarse_tmr+0x8e>
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	7a5b      	ldrb	r3, [r3, #9]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d035      	beq.n	80128f2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801288a:	2b00      	cmp	r3, #0
 801288c:	d012      	beq.n	80128b4 <dhcp_coarse_tmr+0x50>
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	8c1b      	ldrh	r3, [r3, #32]
 8012892:	3301      	adds	r3, #1
 8012894:	b29a      	uxth	r2, r3
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	841a      	strh	r2, [r3, #32]
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	8c1a      	ldrh	r2, [r3, #32]
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d106      	bne.n	80128b4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f000 fd94 	bl	80133d4 <dhcp_release>
        dhcp_discover(netif);
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f000 fa8b 	bl	8012dc8 <dhcp_discover>
 80128b2:	e01e      	b.n	80128f2 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	8bdb      	ldrh	r3, [r3, #30]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d00b      	beq.n	80128d4 <dhcp_coarse_tmr+0x70>
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	8bdb      	ldrh	r3, [r3, #30]
 80128c0:	1e5a      	subs	r2, r3, #1
 80128c2:	b291      	uxth	r1, r2
 80128c4:	683a      	ldr	r2, [r7, #0]
 80128c6:	83d1      	strh	r1, [r2, #30]
 80128c8:	2b01      	cmp	r3, #1
 80128ca:	d103      	bne.n	80128d4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f000 f8c6 	bl	8012a5e <dhcp_t2_timeout>
 80128d2:	e00e      	b.n	80128f2 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	8b9b      	ldrh	r3, [r3, #28]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d00a      	beq.n	80128f2 <dhcp_coarse_tmr+0x8e>
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	8b9b      	ldrh	r3, [r3, #28]
 80128e0:	1e5a      	subs	r2, r3, #1
 80128e2:	b291      	uxth	r1, r2
 80128e4:	683a      	ldr	r2, [r7, #0]
 80128e6:	8391      	strh	r1, [r2, #28]
 80128e8:	2b01      	cmp	r3, #1
 80128ea:	d102      	bne.n	80128f2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f000 f888 	bl	8012a02 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d1b9      	bne.n	8012872 <dhcp_coarse_tmr+0xe>
  }
}
 80128fe:	bf00      	nop
 8012900:	3708      	adds	r7, #8
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}
 8012906:	bf00      	nop
 8012908:	2000fac4 	.word	0x2000fac4

0801290c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b082      	sub	sp, #8
 8012910:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8012912:	4b16      	ldr	r3, [pc, #88]	; (801296c <dhcp_fine_tmr+0x60>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 8012918:	e020      	b.n	801295c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6a1b      	ldr	r3, [r3, #32]
 801291e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d017      	beq.n	8012956 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	8adb      	ldrh	r3, [r3, #22]
 801292a:	2b01      	cmp	r3, #1
 801292c:	d906      	bls.n	801293c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	8adb      	ldrh	r3, [r3, #22]
 8012932:	3b01      	subs	r3, #1
 8012934:	b29a      	uxth	r2, r3
 8012936:	683b      	ldr	r3, [r7, #0]
 8012938:	82da      	strh	r2, [r3, #22]
 801293a:	e00c      	b.n	8012956 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	8adb      	ldrh	r3, [r3, #22]
 8012940:	2b01      	cmp	r3, #1
 8012942:	d108      	bne.n	8012956 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	8adb      	ldrh	r3, [r3, #22]
 8012948:	3b01      	subs	r3, #1
 801294a:	b29a      	uxth	r2, r3
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f000 f80d 	bl	8012970 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d1db      	bne.n	801291a <dhcp_fine_tmr+0xe>
  }
}
 8012962:	bf00      	nop
 8012964:	3708      	adds	r7, #8
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
 801296a:	bf00      	nop
 801296c:	2000fac4 	.word	0x2000fac4

08012970 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b084      	sub	sp, #16
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6a1b      	ldr	r3, [r3, #32]
 801297c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	7a5b      	ldrb	r3, [r3, #9]
 8012982:	2b0c      	cmp	r3, #12
 8012984:	d003      	beq.n	801298e <dhcp_timeout+0x1e>
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	7a5b      	ldrb	r3, [r3, #9]
 801298a:	2b06      	cmp	r3, #6
 801298c:	d103      	bne.n	8012996 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f000 fa1a 	bl	8012dc8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012994:	e031      	b.n	80129fa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	7a5b      	ldrb	r3, [r3, #9]
 801299a:	2b01      	cmp	r3, #1
 801299c:	d10e      	bne.n	80129bc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	7a9b      	ldrb	r3, [r3, #10]
 80129a2:	2b05      	cmp	r3, #5
 80129a4:	d803      	bhi.n	80129ae <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f7ff feb6 	bl	8012718 <dhcp_select>
}
 80129ac:	e025      	b.n	80129fa <dhcp_timeout+0x8a>
      dhcp_release(netif);
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f000 fd10 	bl	80133d4 <dhcp_release>
      dhcp_discover(netif);
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f000 fa07 	bl	8012dc8 <dhcp_discover>
}
 80129ba:	e01e      	b.n	80129fa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	7a5b      	ldrb	r3, [r3, #9]
 80129c0:	2b08      	cmp	r3, #8
 80129c2:	d10b      	bne.n	80129dc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	7a9b      	ldrb	r3, [r3, #10]
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	d803      	bhi.n	80129d4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	f7ff fe4b 	bl	8012668 <dhcp_check>
}
 80129d2:	e012      	b.n	80129fa <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	f000 fa83 	bl	8012ee0 <dhcp_bind>
}
 80129da:	e00e      	b.n	80129fa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	7a5b      	ldrb	r3, [r3, #9]
 80129e0:	2b03      	cmp	r3, #3
 80129e2:	d10a      	bne.n	80129fa <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	7a9b      	ldrb	r3, [r3, #10]
 80129e8:	2b01      	cmp	r3, #1
 80129ea:	d803      	bhi.n	80129f4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80129ec:	6878      	ldr	r0, [r7, #4]
 80129ee:	f000 fc5d 	bl	80132ac <dhcp_reboot>
}
 80129f2:	e002      	b.n	80129fa <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f000 f9e7 	bl	8012dc8 <dhcp_discover>
}
 80129fa:	bf00      	nop
 80129fc:	3710      	adds	r7, #16
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}

08012a02 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012a02:	b580      	push	{r7, lr}
 8012a04:	b084      	sub	sp, #16
 8012a06:	af00      	add	r7, sp, #0
 8012a08:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6a1b      	ldr	r3, [r3, #32]
 8012a0e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	7a5b      	ldrb	r3, [r3, #9]
 8012a14:	2b01      	cmp	r3, #1
 8012a16:	d007      	beq.n	8012a28 <dhcp_t1_timeout+0x26>
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	7a5b      	ldrb	r3, [r3, #9]
 8012a1c:	2b0a      	cmp	r3, #10
 8012a1e:	d003      	beq.n	8012a28 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012a24:	2b05      	cmp	r3, #5
 8012a26:	d116      	bne.n	8012a56 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f000 fb33 	bl	8013094 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	8b5b      	ldrh	r3, [r3, #26]
 8012a32:	461a      	mov	r2, r3
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	8c1b      	ldrh	r3, [r3, #32]
 8012a38:	1ad3      	subs	r3, r2, r3
 8012a3a:	2b01      	cmp	r3, #1
 8012a3c:	dd0b      	ble.n	8012a56 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	8b5b      	ldrh	r3, [r3, #26]
 8012a42:	461a      	mov	r2, r3
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	8c1b      	ldrh	r3, [r3, #32]
 8012a48:	1ad3      	subs	r3, r2, r3
 8012a4a:	0fda      	lsrs	r2, r3, #31
 8012a4c:	4413      	add	r3, r2
 8012a4e:	105b      	asrs	r3, r3, #1
 8012a50:	b29a      	uxth	r2, r3
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	839a      	strh	r2, [r3, #28]
    }
  }
}
 8012a56:	bf00      	nop
 8012a58:	3710      	adds	r7, #16
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}

08012a5e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012a5e:	b580      	push	{r7, lr}
 8012a60:	b084      	sub	sp, #16
 8012a62:	af00      	add	r7, sp, #0
 8012a64:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6a1b      	ldr	r3, [r3, #32]
 8012a6a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	7a5b      	ldrb	r3, [r3, #9]
 8012a70:	2b01      	cmp	r3, #1
 8012a72:	d00b      	beq.n	8012a8c <dhcp_t2_timeout+0x2e>
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	7a5b      	ldrb	r3, [r3, #9]
 8012a78:	2b0a      	cmp	r3, #10
 8012a7a:	d007      	beq.n	8012a8c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012a80:	2b05      	cmp	r3, #5
 8012a82:	d003      	beq.n	8012a8c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	7a5b      	ldrb	r3, [r3, #9]
 8012a88:	2b04      	cmp	r3, #4
 8012a8a:	d116      	bne.n	8012aba <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f000 fb87 	bl	80131a0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012a96:	461a      	mov	r2, r3
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	8c1b      	ldrh	r3, [r3, #32]
 8012a9c:	1ad3      	subs	r3, r2, r3
 8012a9e:	2b01      	cmp	r3, #1
 8012aa0:	dd0b      	ble.n	8012aba <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	8c1b      	ldrh	r3, [r3, #32]
 8012aac:	1ad3      	subs	r3, r2, r3
 8012aae:	0fda      	lsrs	r2, r3, #31
 8012ab0:	4413      	add	r3, r2
 8012ab2:	105b      	asrs	r3, r3, #1
 8012ab4:	b29a      	uxth	r2, r3
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	83da      	strh	r2, [r3, #30]
    }
  }
}
 8012aba:	bf00      	nop
 8012abc:	3710      	adds	r7, #16
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}
	...

08012ac4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b084      	sub	sp, #16
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6a1b      	ldr	r3, [r3, #32]
 8012ad0:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	2200      	movs	r2, #0
 8012adc:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012ade:	4b27      	ldr	r3, [pc, #156]	; (8012b7c <dhcp_handle_ack+0xb8>)
 8012ae0:	78db      	ldrb	r3, [r3, #3]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d003      	beq.n	8012aee <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8012ae6:	4b26      	ldr	r3, [pc, #152]	; (8012b80 <dhcp_handle_ack+0xbc>)
 8012ae8:	68da      	ldr	r2, [r3, #12]
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012aee:	4b23      	ldr	r3, [pc, #140]	; (8012b7c <dhcp_handle_ack+0xb8>)
 8012af0:	791b      	ldrb	r3, [r3, #4]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d004      	beq.n	8012b00 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012af6:	4b22      	ldr	r3, [pc, #136]	; (8012b80 <dhcp_handle_ack+0xbc>)
 8012af8:	691a      	ldr	r2, [r3, #16]
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	639a      	str	r2, [r3, #56]	; 0x38
 8012afe:	e004      	b.n	8012b0a <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b04:	085a      	lsrs	r2, r3, #1
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012b0a:	4b1c      	ldr	r3, [pc, #112]	; (8012b7c <dhcp_handle_ack+0xb8>)
 8012b0c:	795b      	ldrb	r3, [r3, #5]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d004      	beq.n	8012b1c <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012b12:	4b1b      	ldr	r3, [pc, #108]	; (8012b80 <dhcp_handle_ack+0xbc>)
 8012b14:	695a      	ldr	r2, [r3, #20]
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	63da      	str	r2, [r3, #60]	; 0x3c
 8012b1a:	e007      	b.n	8012b2c <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012b20:	4613      	mov	r3, r2
 8012b22:	00db      	lsls	r3, r3, #3
 8012b24:	1a9b      	subs	r3, r3, r2
 8012b26:	08da      	lsrs	r2, r3, #3
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	691a      	ldr	r2, [r3, #16]
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8012b36:	4b11      	ldr	r3, [pc, #68]	; (8012b7c <dhcp_handle_ack+0xb8>)
 8012b38:	799b      	ldrb	r3, [r3, #6]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d00b      	beq.n	8012b56 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012b3e:	4b10      	ldr	r3, [pc, #64]	; (8012b80 <dhcp_handle_ack+0xbc>)
 8012b40:	699b      	ldr	r3, [r3, #24]
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7f8 f93e 	bl	800adc4 <lwip_htonl>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	2201      	movs	r2, #1
 8012b52:	72da      	strb	r2, [r3, #11]
 8012b54:	e002      	b.n	8012b5c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	2200      	movs	r2, #0
 8012b5a:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012b5c:	4b07      	ldr	r3, [pc, #28]	; (8012b7c <dhcp_handle_ack+0xb8>)
 8012b5e:	79db      	ldrb	r3, [r3, #7]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d007      	beq.n	8012b74 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012b64:	4b06      	ldr	r3, [pc, #24]	; (8012b80 <dhcp_handle_ack+0xbc>)
 8012b66:	69db      	ldr	r3, [r3, #28]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f7f8 f92b 	bl	800adc4 <lwip_htonl>
 8012b6e:	4602      	mov	r2, r0
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012b74:	bf00      	nop
 8012b76:	3710      	adds	r7, #16
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}
 8012b7c:	2000faf0 	.word	0x2000faf0
 8012b80:	2000faf8 	.word	0x2000faf8

08012b84 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b084      	sub	sp, #16
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d109      	bne.n	8012ba6 <dhcp_start+0x22>
 8012b92:	4b3c      	ldr	r3, [pc, #240]	; (8012c84 <dhcp_start+0x100>)
 8012b94:	f240 22d6 	movw	r2, #726	; 0x2d6
 8012b98:	493b      	ldr	r1, [pc, #236]	; (8012c88 <dhcp_start+0x104>)
 8012b9a:	483c      	ldr	r0, [pc, #240]	; (8012c8c <dhcp_start+0x108>)
 8012b9c:	f003 ffec 	bl	8016b78 <iprintf>
 8012ba0:	f06f 030f 	mvn.w	r3, #15
 8012ba4:	e069      	b.n	8012c7a <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012bac:	f003 0301 	and.w	r3, r3, #1
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d109      	bne.n	8012bc8 <dhcp_start+0x44>
 8012bb4:	4b33      	ldr	r3, [pc, #204]	; (8012c84 <dhcp_start+0x100>)
 8012bb6:	f240 22d7 	movw	r2, #727	; 0x2d7
 8012bba:	4935      	ldr	r1, [pc, #212]	; (8012c90 <dhcp_start+0x10c>)
 8012bbc:	4833      	ldr	r0, [pc, #204]	; (8012c8c <dhcp_start+0x108>)
 8012bbe:	f003 ffdb 	bl	8016b78 <iprintf>
 8012bc2:	f06f 030f 	mvn.w	r3, #15
 8012bc6:	e058      	b.n	8012c7a <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	6a1b      	ldr	r3, [r3, #32]
 8012bcc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012bd2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8012bd6:	d202      	bcs.n	8012bde <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8012bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8012bdc:	e04d      	b.n	8012c7a <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d10d      	bne.n	8012c00 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012be4:	2040      	movs	r0, #64	; 0x40
 8012be6:	f7f8 fb93 	bl	800b310 <mem_malloc>
 8012bea:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d102      	bne.n	8012bf8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8012bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8012bf6:	e040      	b.n	8012c7a <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	68fa      	ldr	r2, [r7, #12]
 8012bfc:	621a      	str	r2, [r3, #32]
 8012bfe:	e01b      	b.n	8012c38 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	68db      	ldr	r3, [r3, #12]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d006      	beq.n	8012c16 <dhcp_start+0x92>
 8012c08:	4b1e      	ldr	r3, [pc, #120]	; (8012c84 <dhcp_start+0x100>)
 8012c0a:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8012c0e:	4921      	ldr	r1, [pc, #132]	; (8012c94 <dhcp_start+0x110>)
 8012c10:	481e      	ldr	r0, [pc, #120]	; (8012c8c <dhcp_start+0x108>)
 8012c12:	f003 ffb1 	bl	8016b78 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	685b      	ldr	r3, [r3, #4]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d006      	beq.n	8012c2c <dhcp_start+0xa8>
 8012c1e:	4b19      	ldr	r3, [pc, #100]	; (8012c84 <dhcp_start+0x100>)
 8012c20:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012c24:	491c      	ldr	r1, [pc, #112]	; (8012c98 <dhcp_start+0x114>)
 8012c26:	4819      	ldr	r0, [pc, #100]	; (8012c8c <dhcp_start+0x108>)
 8012c28:	f003 ffa6 	bl	8016b78 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	7a1b      	ldrb	r3, [r3, #8]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d001      	beq.n	8012c38 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012c34:	f7ff fcd4 	bl	80125e0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012c38:	2240      	movs	r2, #64	; 0x40
 8012c3a:	2100      	movs	r1, #0
 8012c3c:	68f8      	ldr	r0, [r7, #12]
 8012c3e:	f003 ff93 	bl	8016b68 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012c42:	f7ff fc7b 	bl	801253c <dhcp_inc_pcb_refcount>
 8012c46:	4603      	mov	r3, r0
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d002      	beq.n	8012c52 <dhcp_start+0xce>
    return ERR_MEM;
 8012c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8012c50:	e013      	b.n	8012c7a <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	2201      	movs	r2, #1
 8012c56:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f000 f8b5 	bl	8012dc8 <dhcp_discover>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8012c62:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d005      	beq.n	8012c76 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f000 fc3a 	bl	80134e4 <dhcp_stop>
    return ERR_MEM;
 8012c70:	f04f 33ff 	mov.w	r3, #4294967295
 8012c74:	e001      	b.n	8012c7a <dhcp_start+0xf6>
  }
  return result;
 8012c76:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	3710      	adds	r7, #16
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
 8012c82:	bf00      	nop
 8012c84:	0801a244 	.word	0x0801a244
 8012c88:	0801a2f0 	.word	0x0801a2f0
 8012c8c:	0801a2a4 	.word	0x0801a2a4
 8012c90:	0801a334 	.word	0x0801a334
 8012c94:	0801a358 	.word	0x0801a358
 8012c98:	0801a370 	.word	0x0801a370

08012c9c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b084      	sub	sp, #16
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
 8012ca4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d107      	bne.n	8012cbc <dhcp_arp_reply+0x20>
 8012cac:	4b0e      	ldr	r3, [pc, #56]	; (8012ce8 <dhcp_arp_reply+0x4c>)
 8012cae:	f240 327b 	movw	r2, #891	; 0x37b
 8012cb2:	490e      	ldr	r1, [pc, #56]	; (8012cec <dhcp_arp_reply+0x50>)
 8012cb4:	480e      	ldr	r0, [pc, #56]	; (8012cf0 <dhcp_arp_reply+0x54>)
 8012cb6:	f003 ff5f 	bl	8016b78 <iprintf>
 8012cba:	e012      	b.n	8012ce2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	6a1b      	ldr	r3, [r3, #32]
 8012cc0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d00c      	beq.n	8012ce2 <dhcp_arp_reply+0x46>
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	7a5b      	ldrb	r3, [r3, #9]
 8012ccc:	2b08      	cmp	r3, #8
 8012cce:	d108      	bne.n	8012ce2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	681a      	ldr	r2, [r3, #0]
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d102      	bne.n	8012ce2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f000 f809 	bl	8012cf4 <dhcp_decline>
    }
  }
}
 8012ce2:	3710      	adds	r7, #16
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}
 8012ce8:	0801a244 	.word	0x0801a244
 8012cec:	0801a2f0 	.word	0x0801a2f0
 8012cf0:	0801a2a4 	.word	0x0801a2a4

08012cf4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b086      	sub	sp, #24
 8012cf8:	af02      	add	r7, sp, #8
 8012cfa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6a1b      	ldr	r3, [r3, #32]
 8012d00:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 8012d02:	2300      	movs	r3, #0
 8012d04:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012d06:	210c      	movs	r1, #12
 8012d08:	68f8      	ldr	r0, [r7, #12]
 8012d0a:	f000 fc23 	bl	8013554 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8012d0e:	2204      	movs	r2, #4
 8012d10:	68f9      	ldr	r1, [r7, #12]
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f001 f8a4 	bl	8013e60 <dhcp_create_msg>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 8012d1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d12a      	bne.n	8012d7a <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8012d24:	2204      	movs	r2, #4
 8012d26:	2132      	movs	r1, #50	; 0x32
 8012d28:	68f8      	ldr	r0, [r7, #12]
 8012d2a:	f000 fc2d 	bl	8013588 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7f8 f846 	bl	800adc4 <lwip_htonl>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	68f8      	ldr	r0, [r7, #12]
 8012d3e:	f000 fcbf 	bl	80136c0 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8012d42:	68f8      	ldr	r0, [r7, #12]
 8012d44:	f001 fa30 	bl	80141a8 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	68da      	ldr	r2, [r3, #12]
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	8a9b      	ldrh	r3, [r3, #20]
 8012d50:	33f0      	adds	r3, #240	; 0xf0
 8012d52:	b29b      	uxth	r3, r3
 8012d54:	4619      	mov	r1, r3
 8012d56:	4610      	mov	r0, r2
 8012d58:	f7f9 f88a 	bl	800be70 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8012d5c:	4b16      	ldr	r3, [pc, #88]	; (8012db8 <dhcp_decline+0xc4>)
 8012d5e:	6818      	ldr	r0, [r3, #0]
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	68d9      	ldr	r1, [r3, #12]
 8012d64:	4b15      	ldr	r3, [pc, #84]	; (8012dbc <dhcp_decline+0xc8>)
 8012d66:	9301      	str	r3, [sp, #4]
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	9300      	str	r3, [sp, #0]
 8012d6c:	2343      	movs	r3, #67	; 0x43
 8012d6e:	4a14      	ldr	r2, [pc, #80]	; (8012dc0 <dhcp_decline+0xcc>)
 8012d70:	f7ff f9ec 	bl	801214c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8012d74:	68f8      	ldr	r0, [r7, #12]
 8012d76:	f001 f9d5 	bl	8014124 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	7a9b      	ldrb	r3, [r3, #10]
 8012d7e:	2bff      	cmp	r3, #255	; 0xff
 8012d80:	d005      	beq.n	8012d8e <dhcp_decline+0x9a>
    dhcp->tries++;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	7a9b      	ldrb	r3, [r3, #10]
 8012d86:	3301      	adds	r3, #1
 8012d88:	b2da      	uxtb	r2, r3
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 8012d8e:	f242 7310 	movw	r3, #10000	; 0x2710
 8012d92:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8012d94:	893b      	ldrh	r3, [r7, #8]
 8012d96:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012d9a:	4a0a      	ldr	r2, [pc, #40]	; (8012dc4 <dhcp_decline+0xd0>)
 8012d9c:	fb82 1203 	smull	r1, r2, r2, r3
 8012da0:	1152      	asrs	r2, r2, #5
 8012da2:	17db      	asrs	r3, r3, #31
 8012da4:	1ad3      	subs	r3, r2, r3
 8012da6:	b29a      	uxth	r2, r3
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012dac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3710      	adds	r7, #16
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}
 8012db8:	20008c80 	.word	0x20008c80
 8012dbc:	080262d4 	.word	0x080262d4
 8012dc0:	080262d8 	.word	0x080262d8
 8012dc4:	10624dd3 	.word	0x10624dd3

08012dc8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b088      	sub	sp, #32
 8012dcc:	af02      	add	r7, sp, #8
 8012dce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	6a1b      	ldr	r3, [r3, #32]
 8012dd4:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012de0:	2106      	movs	r1, #6
 8012de2:	6938      	ldr	r0, [r7, #16]
 8012de4:	f000 fbb6 	bl	8013554 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8012de8:	2201      	movs	r2, #1
 8012dea:	6939      	ldr	r1, [r7, #16]
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f001 f837 	bl	8013e60 <dhcp_create_msg>
 8012df2:	4603      	mov	r3, r0
 8012df4:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8012df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d13b      	bne.n	8012e76 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012dfe:	2202      	movs	r2, #2
 8012e00:	2139      	movs	r1, #57	; 0x39
 8012e02:	6938      	ldr	r0, [r7, #16]
 8012e04:	f000 fbc0 	bl	8013588 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	6938      	ldr	r0, [r7, #16]
 8012e10:	f000 fc1c 	bl	801364c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012e14:	2203      	movs	r2, #3
 8012e16:	2137      	movs	r1, #55	; 0x37
 8012e18:	6938      	ldr	r0, [r7, #16]
 8012e1a:	f000 fbb5 	bl	8013588 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e1e:	2300      	movs	r3, #0
 8012e20:	75fb      	strb	r3, [r7, #23]
 8012e22:	e009      	b.n	8012e38 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8012e24:	7dfb      	ldrb	r3, [r7, #23]
 8012e26:	4a29      	ldr	r2, [pc, #164]	; (8012ecc <dhcp_discover+0x104>)
 8012e28:	5cd3      	ldrb	r3, [r2, r3]
 8012e2a:	4619      	mov	r1, r3
 8012e2c:	6938      	ldr	r0, [r7, #16]
 8012e2e:	f000 fbe5 	bl	80135fc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e32:	7dfb      	ldrb	r3, [r7, #23]
 8012e34:	3301      	adds	r3, #1
 8012e36:	75fb      	strb	r3, [r7, #23]
 8012e38:	7dfb      	ldrb	r3, [r7, #23]
 8012e3a:	2b02      	cmp	r3, #2
 8012e3c:	d9f2      	bls.n	8012e24 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 8012e3e:	6938      	ldr	r0, [r7, #16]
 8012e40:	f001 f9b2 	bl	80141a8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8012e44:	693b      	ldr	r3, [r7, #16]
 8012e46:	68da      	ldr	r2, [r3, #12]
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	8a9b      	ldrh	r3, [r3, #20]
 8012e4c:	33f0      	adds	r3, #240	; 0xf0
 8012e4e:	b29b      	uxth	r3, r3
 8012e50:	4619      	mov	r1, r3
 8012e52:	4610      	mov	r0, r2
 8012e54:	f7f9 f80c 	bl	800be70 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8012e58:	4b1d      	ldr	r3, [pc, #116]	; (8012ed0 <dhcp_discover+0x108>)
 8012e5a:	6818      	ldr	r0, [r3, #0]
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	68d9      	ldr	r1, [r3, #12]
 8012e60:	4b1c      	ldr	r3, [pc, #112]	; (8012ed4 <dhcp_discover+0x10c>)
 8012e62:	9301      	str	r3, [sp, #4]
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	9300      	str	r3, [sp, #0]
 8012e68:	2343      	movs	r3, #67	; 0x43
 8012e6a:	4a1b      	ldr	r2, [pc, #108]	; (8012ed8 <dhcp_discover+0x110>)
 8012e6c:	f7ff f96e 	bl	801214c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8012e70:	6938      	ldr	r0, [r7, #16]
 8012e72:	f001 f957 	bl	8014124 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	7a9b      	ldrb	r3, [r3, #10]
 8012e7a:	2bff      	cmp	r3, #255	; 0xff
 8012e7c:	d005      	beq.n	8012e8a <dhcp_discover+0xc2>
    dhcp->tries++;
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	7a9b      	ldrb	r3, [r3, #10]
 8012e82:	3301      	adds	r3, #1
 8012e84:	b2da      	uxtb	r2, r3
 8012e86:	693b      	ldr	r3, [r7, #16]
 8012e88:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	7a9b      	ldrb	r3, [r3, #10]
 8012e8e:	2b05      	cmp	r3, #5
 8012e90:	d807      	bhi.n	8012ea2 <dhcp_discover+0xda>
 8012e92:	693b      	ldr	r3, [r7, #16]
 8012e94:	7a9b      	ldrb	r3, [r3, #10]
 8012e96:	461a      	mov	r2, r3
 8012e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012e9c:	4093      	lsls	r3, r2
 8012e9e:	b29b      	uxth	r3, r3
 8012ea0:	e001      	b.n	8012ea6 <dhcp_discover+0xde>
 8012ea2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012ea6:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8012ea8:	89bb      	ldrh	r3, [r7, #12]
 8012eaa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012eae:	4a0b      	ldr	r2, [pc, #44]	; (8012edc <dhcp_discover+0x114>)
 8012eb0:	fb82 1203 	smull	r1, r2, r2, r3
 8012eb4:	1152      	asrs	r2, r2, #5
 8012eb6:	17db      	asrs	r3, r3, #31
 8012eb8:	1ad3      	subs	r3, r2, r3
 8012eba:	b29a      	uxth	r2, r3
 8012ebc:	693b      	ldr	r3, [r7, #16]
 8012ebe:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3718      	adds	r7, #24
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	2000001c 	.word	0x2000001c
 8012ed0:	20008c80 	.word	0x20008c80
 8012ed4:	080262d4 	.word	0x080262d4
 8012ed8:	080262d8 	.word	0x080262d8
 8012edc:	10624dd3 	.word	0x10624dd3

08012ee0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b088      	sub	sp, #32
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d107      	bne.n	8012efe <dhcp_bind+0x1e>
 8012eee:	4b64      	ldr	r3, [pc, #400]	; (8013080 <dhcp_bind+0x1a0>)
 8012ef0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8012ef4:	4963      	ldr	r1, [pc, #396]	; (8013084 <dhcp_bind+0x1a4>)
 8012ef6:	4864      	ldr	r0, [pc, #400]	; (8013088 <dhcp_bind+0x1a8>)
 8012ef8:	f003 fe3e 	bl	8016b78 <iprintf>
 8012efc:	e0bc      	b.n	8013078 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6a1b      	ldr	r3, [r3, #32]
 8012f02:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8012f04:	69bb      	ldr	r3, [r7, #24]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d107      	bne.n	8012f1a <dhcp_bind+0x3a>
 8012f0a:	4b5d      	ldr	r3, [pc, #372]	; (8013080 <dhcp_bind+0x1a0>)
 8012f0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012f10:	495e      	ldr	r1, [pc, #376]	; (801308c <dhcp_bind+0x1ac>)
 8012f12:	485d      	ldr	r0, [pc, #372]	; (8013088 <dhcp_bind+0x1a8>)
 8012f14:	f003 fe30 	bl	8016b78 <iprintf>
 8012f18:	e0ae      	b.n	8013078 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8012f1a:	69bb      	ldr	r3, [r7, #24]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8012f20:	69bb      	ldr	r3, [r7, #24]
 8012f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f28:	d019      	beq.n	8012f5e <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f2e:	331e      	adds	r3, #30
 8012f30:	4a57      	ldr	r2, [pc, #348]	; (8013090 <dhcp_bind+0x1b0>)
 8012f32:	fba2 2303 	umull	r2, r3, r2, r3
 8012f36:	095b      	lsrs	r3, r3, #5
 8012f38:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 8012f3a:	69fb      	ldr	r3, [r7, #28]
 8012f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f40:	d302      	bcc.n	8012f48 <dhcp_bind+0x68>
       timeout = 0xffff;
 8012f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012f46:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	b29a      	uxth	r2, r3
 8012f4c:	69bb      	ldr	r3, [r7, #24]
 8012f4e:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 8012f50:	69bb      	ldr	r3, [r7, #24]
 8012f52:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d102      	bne.n	8012f5e <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 8012f58:	69bb      	ldr	r3, [r7, #24]
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8012f5e:	69bb      	ldr	r3, [r7, #24]
 8012f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f66:	d01d      	beq.n	8012fa4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012f68:	69bb      	ldr	r3, [r7, #24]
 8012f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f6c:	331e      	adds	r3, #30
 8012f6e:	4a48      	ldr	r2, [pc, #288]	; (8013090 <dhcp_bind+0x1b0>)
 8012f70:	fba2 2303 	umull	r2, r3, r2, r3
 8012f74:	095b      	lsrs	r3, r3, #5
 8012f76:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012f78:	69fb      	ldr	r3, [r7, #28]
 8012f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f7e:	d302      	bcc.n	8012f86 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8012f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012f84:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8012f86:	69fb      	ldr	r3, [r7, #28]
 8012f88:	b29a      	uxth	r2, r3
 8012f8a:	69bb      	ldr	r3, [r7, #24]
 8012f8c:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 8012f8e:	69bb      	ldr	r3, [r7, #24]
 8012f90:	8b1b      	ldrh	r3, [r3, #24]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d102      	bne.n	8012f9c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8012f96:	69bb      	ldr	r3, [r7, #24]
 8012f98:	2201      	movs	r2, #1
 8012f9a:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012f9c:	69bb      	ldr	r3, [r7, #24]
 8012f9e:	8b1a      	ldrh	r2, [r3, #24]
 8012fa0:	69bb      	ldr	r3, [r7, #24]
 8012fa2:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8012fa4:	69bb      	ldr	r3, [r7, #24]
 8012fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fac:	d01d      	beq.n	8012fea <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012fae:	69bb      	ldr	r3, [r7, #24]
 8012fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fb2:	331e      	adds	r3, #30
 8012fb4:	4a36      	ldr	r2, [pc, #216]	; (8013090 <dhcp_bind+0x1b0>)
 8012fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8012fba:	095b      	lsrs	r3, r3, #5
 8012fbc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012fbe:	69fb      	ldr	r3, [r7, #28]
 8012fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012fc4:	d302      	bcc.n	8012fcc <dhcp_bind+0xec>
      timeout = 0xffff;
 8012fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012fca:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012fcc:	69fb      	ldr	r3, [r7, #28]
 8012fce:	b29a      	uxth	r2, r3
 8012fd0:	69bb      	ldr	r3, [r7, #24]
 8012fd2:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 8012fd4:	69bb      	ldr	r3, [r7, #24]
 8012fd6:	8b5b      	ldrh	r3, [r3, #26]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d102      	bne.n	8012fe2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8012fdc:	69bb      	ldr	r3, [r7, #24]
 8012fde:	2201      	movs	r2, #1
 8012fe0:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8012fe2:	69bb      	ldr	r3, [r7, #24]
 8012fe4:	8b5a      	ldrh	r2, [r3, #26]
 8012fe6:	69bb      	ldr	r3, [r7, #24]
 8012fe8:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012fea:	69bb      	ldr	r3, [r7, #24]
 8012fec:	8b1a      	ldrh	r2, [r3, #24]
 8012fee:	69bb      	ldr	r3, [r7, #24]
 8012ff0:	8b5b      	ldrh	r3, [r3, #26]
 8012ff2:	429a      	cmp	r2, r3
 8012ff4:	d306      	bcc.n	8013004 <dhcp_bind+0x124>
 8012ff6:	69bb      	ldr	r3, [r7, #24]
 8012ff8:	8b5b      	ldrh	r3, [r3, #26]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d002      	beq.n	8013004 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8012ffe:	69bb      	ldr	r3, [r7, #24]
 8013000:	2200      	movs	r2, #0
 8013002:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 8013004:	69bb      	ldr	r3, [r7, #24]
 8013006:	7adb      	ldrb	r3, [r3, #11]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d003      	beq.n	8013014 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801300c:	69bb      	ldr	r3, [r7, #24]
 801300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013010:	613b      	str	r3, [r7, #16]
 8013012:	e014      	b.n	801303e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013014:	69bb      	ldr	r3, [r7, #24]
 8013016:	3328      	adds	r3, #40	; 0x28
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801301c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013020:	2b00      	cmp	r3, #0
 8013022:	db02      	blt.n	801302a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013024:	23ff      	movs	r3, #255	; 0xff
 8013026:	613b      	str	r3, [r7, #16]
 8013028:	e009      	b.n	801303e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801302a:	7dfb      	ldrb	r3, [r7, #23]
 801302c:	2bbf      	cmp	r3, #191	; 0xbf
 801302e:	d903      	bls.n	8013038 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8013030:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013034:	613b      	str	r3, [r7, #16]
 8013036:	e002      	b.n	801303e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8013038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801303c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801303e:	69bb      	ldr	r3, [r7, #24]
 8013040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013042:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d108      	bne.n	801305c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801304a:	69bb      	ldr	r3, [r7, #24]
 801304c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	4013      	ands	r3, r2
 8013052:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801305a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801305c:	210a      	movs	r1, #10
 801305e:	69b8      	ldr	r0, [r7, #24]
 8013060:	f000 fa78 	bl	8013554 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013064:	69bb      	ldr	r3, [r7, #24]
 8013066:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801306a:	f107 030c 	add.w	r3, r7, #12
 801306e:	f107 0210 	add.w	r2, r7, #16
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f7f8 fb9c 	bl	800b7b0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8013078:	3720      	adds	r7, #32
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	0801a244 	.word	0x0801a244
 8013084:	0801a384 	.word	0x0801a384
 8013088:	0801a2a4 	.word	0x0801a2a4
 801308c:	0801a3a0 	.word	0x0801a3a0
 8013090:	88888889 	.word	0x88888889

08013094 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b088      	sub	sp, #32
 8013098:	af02      	add	r7, sp, #8
 801309a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	6a1b      	ldr	r3, [r3, #32]
 80130a0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80130a2:	2105      	movs	r1, #5
 80130a4:	6938      	ldr	r0, [r7, #16]
 80130a6:	f000 fa55 	bl	8013554 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80130aa:	2203      	movs	r2, #3
 80130ac:	6939      	ldr	r1, [r7, #16]
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f000 fed6 	bl	8013e60 <dhcp_create_msg>
 80130b4:	4603      	mov	r3, r0
 80130b6:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80130b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d13b      	bne.n	8013138 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80130c0:	2202      	movs	r2, #2
 80130c2:	2139      	movs	r1, #57	; 0x39
 80130c4:	6938      	ldr	r0, [r7, #16]
 80130c6:	f000 fa5f 	bl	8013588 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80130ce:	4619      	mov	r1, r3
 80130d0:	6938      	ldr	r0, [r7, #16]
 80130d2:	f000 fabb 	bl	801364c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80130d6:	2203      	movs	r2, #3
 80130d8:	2137      	movs	r1, #55	; 0x37
 80130da:	6938      	ldr	r0, [r7, #16]
 80130dc:	f000 fa54 	bl	8013588 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80130e0:	2300      	movs	r3, #0
 80130e2:	75fb      	strb	r3, [r7, #23]
 80130e4:	e009      	b.n	80130fa <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80130e6:	7dfb      	ldrb	r3, [r7, #23]
 80130e8:	4a2a      	ldr	r2, [pc, #168]	; (8013194 <dhcp_renew+0x100>)
 80130ea:	5cd3      	ldrb	r3, [r2, r3]
 80130ec:	4619      	mov	r1, r3
 80130ee:	6938      	ldr	r0, [r7, #16]
 80130f0:	f000 fa84 	bl	80135fc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80130f4:	7dfb      	ldrb	r3, [r7, #23]
 80130f6:	3301      	adds	r3, #1
 80130f8:	75fb      	strb	r3, [r7, #23]
 80130fa:	7dfb      	ldrb	r3, [r7, #23]
 80130fc:	2b02      	cmp	r3, #2
 80130fe:	d9f2      	bls.n	80130e6 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 8013100:	6938      	ldr	r0, [r7, #16]
 8013102:	f001 f851 	bl	80141a8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	68da      	ldr	r2, [r3, #12]
 801310a:	693b      	ldr	r3, [r7, #16]
 801310c:	8a9b      	ldrh	r3, [r3, #20]
 801310e:	33f0      	adds	r3, #240	; 0xf0
 8013110:	b29b      	uxth	r3, r3
 8013112:	4619      	mov	r1, r3
 8013114:	4610      	mov	r0, r2
 8013116:	f7f8 feab 	bl	800be70 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 801311a:	4b1f      	ldr	r3, [pc, #124]	; (8013198 <dhcp_renew+0x104>)
 801311c:	6818      	ldr	r0, [r3, #0]
 801311e:	693b      	ldr	r3, [r7, #16]
 8013120:	68d9      	ldr	r1, [r3, #12]
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	9300      	str	r3, [sp, #0]
 801312c:	2343      	movs	r3, #67	; 0x43
 801312e:	f7fe ffcf 	bl	80120d0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8013132:	6938      	ldr	r0, [r7, #16]
 8013134:	f000 fff6 	bl	8014124 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	7a9b      	ldrb	r3, [r3, #10]
 801313c:	2bff      	cmp	r3, #255	; 0xff
 801313e:	d005      	beq.n	801314c <dhcp_renew+0xb8>
    dhcp->tries++;
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	7a9b      	ldrb	r3, [r3, #10]
 8013144:	3301      	adds	r3, #1
 8013146:	b2da      	uxtb	r2, r3
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801314c:	693b      	ldr	r3, [r7, #16]
 801314e:	7a9b      	ldrb	r3, [r3, #10]
 8013150:	2b09      	cmp	r3, #9
 8013152:	d80a      	bhi.n	801316a <dhcp_renew+0xd6>
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	7a9b      	ldrb	r3, [r3, #10]
 8013158:	b29b      	uxth	r3, r3
 801315a:	461a      	mov	r2, r3
 801315c:	0152      	lsls	r2, r2, #5
 801315e:	1ad2      	subs	r2, r2, r3
 8013160:	0092      	lsls	r2, r2, #2
 8013162:	4413      	add	r3, r2
 8013164:	011b      	lsls	r3, r3, #4
 8013166:	b29b      	uxth	r3, r3
 8013168:	e001      	b.n	801316e <dhcp_renew+0xda>
 801316a:	f644 6320 	movw	r3, #20000	; 0x4e20
 801316e:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013170:	89bb      	ldrh	r3, [r7, #12]
 8013172:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013176:	4a09      	ldr	r2, [pc, #36]	; (801319c <dhcp_renew+0x108>)
 8013178:	fb82 1203 	smull	r1, r2, r2, r3
 801317c:	1152      	asrs	r2, r2, #5
 801317e:	17db      	asrs	r3, r3, #31
 8013180:	1ad3      	subs	r3, r2, r3
 8013182:	b29a      	uxth	r2, r3
 8013184:	693b      	ldr	r3, [r7, #16]
 8013186:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013188:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801318c:	4618      	mov	r0, r3
 801318e:	3718      	adds	r7, #24
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}
 8013194:	2000001c 	.word	0x2000001c
 8013198:	20008c80 	.word	0x20008c80
 801319c:	10624dd3 	.word	0x10624dd3

080131a0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b088      	sub	sp, #32
 80131a4:	af02      	add	r7, sp, #8
 80131a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	6a1b      	ldr	r3, [r3, #32]
 80131ac:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80131ae:	2104      	movs	r1, #4
 80131b0:	6938      	ldr	r0, [r7, #16]
 80131b2:	f000 f9cf 	bl	8013554 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80131b6:	2203      	movs	r2, #3
 80131b8:	6939      	ldr	r1, [r7, #16]
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f000 fe50 	bl	8013e60 <dhcp_create_msg>
 80131c0:	4603      	mov	r3, r0
 80131c2:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80131c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d139      	bne.n	8013240 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80131cc:	2202      	movs	r2, #2
 80131ce:	2139      	movs	r1, #57	; 0x39
 80131d0:	6938      	ldr	r0, [r7, #16]
 80131d2:	f000 f9d9 	bl	8013588 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80131da:	4619      	mov	r1, r3
 80131dc:	6938      	ldr	r0, [r7, #16]
 80131de:	f000 fa35 	bl	801364c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80131e2:	2203      	movs	r2, #3
 80131e4:	2137      	movs	r1, #55	; 0x37
 80131e6:	6938      	ldr	r0, [r7, #16]
 80131e8:	f000 f9ce 	bl	8013588 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80131ec:	2300      	movs	r3, #0
 80131ee:	75fb      	strb	r3, [r7, #23]
 80131f0:	e009      	b.n	8013206 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80131f2:	7dfb      	ldrb	r3, [r7, #23]
 80131f4:	4a29      	ldr	r2, [pc, #164]	; (801329c <dhcp_rebind+0xfc>)
 80131f6:	5cd3      	ldrb	r3, [r2, r3]
 80131f8:	4619      	mov	r1, r3
 80131fa:	6938      	ldr	r0, [r7, #16]
 80131fc:	f000 f9fe 	bl	80135fc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013200:	7dfb      	ldrb	r3, [r7, #23]
 8013202:	3301      	adds	r3, #1
 8013204:	75fb      	strb	r3, [r7, #23]
 8013206:	7dfb      	ldrb	r3, [r7, #23]
 8013208:	2b02      	cmp	r3, #2
 801320a:	d9f2      	bls.n	80131f2 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 801320c:	6938      	ldr	r0, [r7, #16]
 801320e:	f000 ffcb 	bl	80141a8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013212:	693b      	ldr	r3, [r7, #16]
 8013214:	68da      	ldr	r2, [r3, #12]
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	8a9b      	ldrh	r3, [r3, #20]
 801321a:	33f0      	adds	r3, #240	; 0xf0
 801321c:	b29b      	uxth	r3, r3
 801321e:	4619      	mov	r1, r3
 8013220:	4610      	mov	r0, r2
 8013222:	f7f8 fe25 	bl	800be70 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8013226:	4b1e      	ldr	r3, [pc, #120]	; (80132a0 <dhcp_rebind+0x100>)
 8013228:	6818      	ldr	r0, [r3, #0]
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	68d9      	ldr	r1, [r3, #12]
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	9300      	str	r3, [sp, #0]
 8013232:	2343      	movs	r3, #67	; 0x43
 8013234:	4a1b      	ldr	r2, [pc, #108]	; (80132a4 <dhcp_rebind+0x104>)
 8013236:	f7fe ff4b 	bl	80120d0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801323a:	6938      	ldr	r0, [r7, #16]
 801323c:	f000 ff72 	bl	8014124 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	7a9b      	ldrb	r3, [r3, #10]
 8013244:	2bff      	cmp	r3, #255	; 0xff
 8013246:	d005      	beq.n	8013254 <dhcp_rebind+0xb4>
    dhcp->tries++;
 8013248:	693b      	ldr	r3, [r7, #16]
 801324a:	7a9b      	ldrb	r3, [r3, #10]
 801324c:	3301      	adds	r3, #1
 801324e:	b2da      	uxtb	r2, r3
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	7a9b      	ldrb	r3, [r3, #10]
 8013258:	2b09      	cmp	r3, #9
 801325a:	d80a      	bhi.n	8013272 <dhcp_rebind+0xd2>
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	7a9b      	ldrb	r3, [r3, #10]
 8013260:	b29b      	uxth	r3, r3
 8013262:	461a      	mov	r2, r3
 8013264:	0152      	lsls	r2, r2, #5
 8013266:	1ad2      	subs	r2, r2, r3
 8013268:	0092      	lsls	r2, r2, #2
 801326a:	4413      	add	r3, r2
 801326c:	00db      	lsls	r3, r3, #3
 801326e:	b29b      	uxth	r3, r3
 8013270:	e001      	b.n	8013276 <dhcp_rebind+0xd6>
 8013272:	f242 7310 	movw	r3, #10000	; 0x2710
 8013276:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013278:	89bb      	ldrh	r3, [r7, #12]
 801327a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801327e:	4a0a      	ldr	r2, [pc, #40]	; (80132a8 <dhcp_rebind+0x108>)
 8013280:	fb82 1203 	smull	r1, r2, r2, r3
 8013284:	1152      	asrs	r2, r2, #5
 8013286:	17db      	asrs	r3, r3, #31
 8013288:	1ad3      	subs	r3, r2, r3
 801328a:	b29a      	uxth	r2, r3
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013294:	4618      	mov	r0, r3
 8013296:	3718      	adds	r7, #24
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}
 801329c:	2000001c 	.word	0x2000001c
 80132a0:	20008c80 	.word	0x20008c80
 80132a4:	080262d8 	.word	0x080262d8
 80132a8:	10624dd3 	.word	0x10624dd3

080132ac <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b088      	sub	sp, #32
 80132b0:	af02      	add	r7, sp, #8
 80132b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6a1b      	ldr	r3, [r3, #32]
 80132b8:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80132ba:	2103      	movs	r1, #3
 80132bc:	6938      	ldr	r0, [r7, #16]
 80132be:	f000 f949 	bl	8013554 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80132c2:	2203      	movs	r2, #3
 80132c4:	6939      	ldr	r1, [r7, #16]
 80132c6:	6878      	ldr	r0, [r7, #4]
 80132c8:	f000 fdca 	bl	8013e60 <dhcp_create_msg>
 80132cc:	4603      	mov	r3, r0
 80132ce:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80132d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d147      	bne.n	8013368 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80132d8:	2202      	movs	r2, #2
 80132da:	2139      	movs	r1, #57	; 0x39
 80132dc:	6938      	ldr	r0, [r7, #16]
 80132de:	f000 f953 	bl	8013588 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80132e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80132e6:	6938      	ldr	r0, [r7, #16]
 80132e8:	f000 f9b0 	bl	801364c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80132ec:	2204      	movs	r2, #4
 80132ee:	2132      	movs	r1, #50	; 0x32
 80132f0:	6938      	ldr	r0, [r7, #16]
 80132f2:	f000 f949 	bl	8013588 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80132f6:	693b      	ldr	r3, [r7, #16]
 80132f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132fa:	4618      	mov	r0, r3
 80132fc:	f7f7 fd62 	bl	800adc4 <lwip_htonl>
 8013300:	4603      	mov	r3, r0
 8013302:	4619      	mov	r1, r3
 8013304:	6938      	ldr	r0, [r7, #16]
 8013306:	f000 f9db 	bl	80136c0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801330a:	2203      	movs	r2, #3
 801330c:	2137      	movs	r1, #55	; 0x37
 801330e:	6938      	ldr	r0, [r7, #16]
 8013310:	f000 f93a 	bl	8013588 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013314:	2300      	movs	r3, #0
 8013316:	75fb      	strb	r3, [r7, #23]
 8013318:	e009      	b.n	801332e <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801331a:	7dfb      	ldrb	r3, [r7, #23]
 801331c:	4a29      	ldr	r2, [pc, #164]	; (80133c4 <dhcp_reboot+0x118>)
 801331e:	5cd3      	ldrb	r3, [r2, r3]
 8013320:	4619      	mov	r1, r3
 8013322:	6938      	ldr	r0, [r7, #16]
 8013324:	f000 f96a 	bl	80135fc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013328:	7dfb      	ldrb	r3, [r7, #23]
 801332a:	3301      	adds	r3, #1
 801332c:	75fb      	strb	r3, [r7, #23]
 801332e:	7dfb      	ldrb	r3, [r7, #23]
 8013330:	2b02      	cmp	r3, #2
 8013332:	d9f2      	bls.n	801331a <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 8013334:	6938      	ldr	r0, [r7, #16]
 8013336:	f000 ff37 	bl	80141a8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801333a:	693b      	ldr	r3, [r7, #16]
 801333c:	68da      	ldr	r2, [r3, #12]
 801333e:	693b      	ldr	r3, [r7, #16]
 8013340:	8a9b      	ldrh	r3, [r3, #20]
 8013342:	33f0      	adds	r3, #240	; 0xf0
 8013344:	b29b      	uxth	r3, r3
 8013346:	4619      	mov	r1, r3
 8013348:	4610      	mov	r0, r2
 801334a:	f7f8 fd91 	bl	800be70 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801334e:	4b1e      	ldr	r3, [pc, #120]	; (80133c8 <dhcp_reboot+0x11c>)
 8013350:	6818      	ldr	r0, [r3, #0]
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	68d9      	ldr	r1, [r3, #12]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	9300      	str	r3, [sp, #0]
 801335a:	2343      	movs	r3, #67	; 0x43
 801335c:	4a1b      	ldr	r2, [pc, #108]	; (80133cc <dhcp_reboot+0x120>)
 801335e:	f7fe feb7 	bl	80120d0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8013362:	6938      	ldr	r0, [r7, #16]
 8013364:	f000 fede 	bl	8014124 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	7a9b      	ldrb	r3, [r3, #10]
 801336c:	2bff      	cmp	r3, #255	; 0xff
 801336e:	d005      	beq.n	801337c <dhcp_reboot+0xd0>
    dhcp->tries++;
 8013370:	693b      	ldr	r3, [r7, #16]
 8013372:	7a9b      	ldrb	r3, [r3, #10]
 8013374:	3301      	adds	r3, #1
 8013376:	b2da      	uxtb	r2, r3
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	7a9b      	ldrb	r3, [r3, #10]
 8013380:	2b09      	cmp	r3, #9
 8013382:	d80a      	bhi.n	801339a <dhcp_reboot+0xee>
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	7a9b      	ldrb	r3, [r3, #10]
 8013388:	b29b      	uxth	r3, r3
 801338a:	461a      	mov	r2, r3
 801338c:	0152      	lsls	r2, r2, #5
 801338e:	1ad2      	subs	r2, r2, r3
 8013390:	0092      	lsls	r2, r2, #2
 8013392:	4413      	add	r3, r2
 8013394:	00db      	lsls	r3, r3, #3
 8013396:	b29b      	uxth	r3, r3
 8013398:	e001      	b.n	801339e <dhcp_reboot+0xf2>
 801339a:	f242 7310 	movw	r3, #10000	; 0x2710
 801339e:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80133a0:	89bb      	ldrh	r3, [r7, #12]
 80133a2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80133a6:	4a0a      	ldr	r2, [pc, #40]	; (80133d0 <dhcp_reboot+0x124>)
 80133a8:	fb82 1203 	smull	r1, r2, r2, r3
 80133ac:	1152      	asrs	r2, r2, #5
 80133ae:	17db      	asrs	r3, r3, #31
 80133b0:	1ad3      	subs	r3, r2, r3
 80133b2:	b29a      	uxth	r2, r3
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80133b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3718      	adds	r7, #24
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	2000001c 	.word	0x2000001c
 80133c8:	20008c80 	.word	0x20008c80
 80133cc:	080262d8 	.word	0x080262d8
 80133d0:	10624dd3 	.word	0x10624dd3

080133d4 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b088      	sub	sp, #32
 80133d8:	af02      	add	r7, sp, #8
 80133da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	6a1b      	ldr	r3, [r3, #32]
 80133e0:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d102      	bne.n	80133ee <dhcp_release+0x1a>
    return ERR_ARG;
 80133e8:	f06f 030f 	mvn.w	r3, #15
 80133ec:	e072      	b.n	80134d4 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133f2:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f000 ff31 	bl	801425c <dhcp_supplied_address>
 80133fa:	4603      	mov	r3, r0
 80133fc:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80133fe:	2100      	movs	r1, #0
 8013400:	6978      	ldr	r0, [r7, #20]
 8013402:	f000 f8a7 	bl	8013554 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	2200      	movs	r2, #0
 801340a:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	2200      	movs	r2, #0
 8013410:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	2200      	movs	r2, #0
 8013416:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	2200      	movs	r2, #0
 801341c:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	2200      	movs	r2, #0
 8013422:	63da      	str	r2, [r3, #60]	; 0x3c
 8013424:	697b      	ldr	r3, [r7, #20]
 8013426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	639a      	str	r2, [r3, #56]	; 0x38
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	2200      	movs	r2, #0
 8013438:	845a      	strh	r2, [r3, #34]	; 0x22
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	841a      	strh	r2, [r3, #32]
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	8c1a      	ldrh	r2, [r3, #32]
 8013446:	697b      	ldr	r3, [r7, #20]
 8013448:	83da      	strh	r2, [r3, #30]
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	8bda      	ldrh	r2, [r3, #30]
 801344e:	697b      	ldr	r3, [r7, #20]
 8013450:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 8013452:	7cfb      	ldrb	r3, [r7, #19]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d101      	bne.n	801345c <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 8013458:	2300      	movs	r3, #0
 801345a:	e03b      	b.n	80134d4 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 801345c:	2207      	movs	r2, #7
 801345e:	6979      	ldr	r1, [r7, #20]
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f000 fcfd 	bl	8013e60 <dhcp_create_msg>
 8013466:	4603      	mov	r3, r0
 8013468:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 801346a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d128      	bne.n	80134c4 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8013472:	2204      	movs	r2, #4
 8013474:	2136      	movs	r1, #54	; 0x36
 8013476:	6978      	ldr	r0, [r7, #20]
 8013478:	f000 f886 	bl	8013588 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	4618      	mov	r0, r3
 8013480:	f7f7 fca0 	bl	800adc4 <lwip_htonl>
 8013484:	4603      	mov	r3, r0
 8013486:	4619      	mov	r1, r3
 8013488:	6978      	ldr	r0, [r7, #20]
 801348a:	f000 f919 	bl	80136c0 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801348e:	6978      	ldr	r0, [r7, #20]
 8013490:	f000 fe8a 	bl	80141a8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	68da      	ldr	r2, [r3, #12]
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	8a9b      	ldrh	r3, [r3, #20]
 801349c:	33f0      	adds	r3, #240	; 0xf0
 801349e:	b29b      	uxth	r3, r3
 80134a0:	4619      	mov	r1, r3
 80134a2:	4610      	mov	r0, r2
 80134a4:	f7f8 fce4 	bl	800be70 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 80134a8:	4b0c      	ldr	r3, [pc, #48]	; (80134dc <dhcp_release+0x108>)
 80134aa:	6818      	ldr	r0, [r3, #0]
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	68d9      	ldr	r1, [r3, #12]
 80134b0:	f107 020c 	add.w	r2, r7, #12
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	9300      	str	r3, [sp, #0]
 80134b8:	2343      	movs	r3, #67	; 0x43
 80134ba:	f7fe fe09 	bl	80120d0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80134be:	6978      	ldr	r0, [r7, #20]
 80134c0:	f000 fe30 	bl	8014124 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80134c4:	4b06      	ldr	r3, [pc, #24]	; (80134e0 <dhcp_release+0x10c>)
 80134c6:	4a06      	ldr	r2, [pc, #24]	; (80134e0 <dhcp_release+0x10c>)
 80134c8:	4905      	ldr	r1, [pc, #20]	; (80134e0 <dhcp_release+0x10c>)
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f7f8 f970 	bl	800b7b0 <netif_set_addr>

  return result;
 80134d0:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	3718      	adds	r7, #24
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}
 80134dc:	20008c80 	.word	0x20008c80
 80134e0:	080262d4 	.word	0x080262d4

080134e4 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b084      	sub	sp, #16
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d107      	bne.n	8013502 <dhcp_stop+0x1e>
 80134f2:	4b14      	ldr	r3, [pc, #80]	; (8013544 <dhcp_stop+0x60>)
 80134f4:	f240 5242 	movw	r2, #1346	; 0x542
 80134f8:	4913      	ldr	r1, [pc, #76]	; (8013548 <dhcp_stop+0x64>)
 80134fa:	4814      	ldr	r0, [pc, #80]	; (801354c <dhcp_stop+0x68>)
 80134fc:	f003 fb3c 	bl	8016b78 <iprintf>
 8013500:	e01d      	b.n	801353e <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	6a1b      	ldr	r3, [r3, #32]
 8013506:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d017      	beq.n	801353e <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	685b      	ldr	r3, [r3, #4]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d006      	beq.n	8013524 <dhcp_stop+0x40>
 8013516:	4b0b      	ldr	r3, [pc, #44]	; (8013544 <dhcp_stop+0x60>)
 8013518:	f240 524f 	movw	r2, #1359	; 0x54f
 801351c:	490c      	ldr	r1, [pc, #48]	; (8013550 <dhcp_stop+0x6c>)
 801351e:	480b      	ldr	r0, [pc, #44]	; (801354c <dhcp_stop+0x68>)
 8013520:	f003 fb2a 	bl	8016b78 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013524:	2100      	movs	r1, #0
 8013526:	68f8      	ldr	r0, [r7, #12]
 8013528:	f000 f814 	bl	8013554 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	7a1b      	ldrb	r3, [r3, #8]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d004      	beq.n	801353e <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013534:	f7ff f854 	bl	80125e0 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	2200      	movs	r2, #0
 801353c:	721a      	strb	r2, [r3, #8]
    }
  }
}
 801353e:	3710      	adds	r7, #16
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}
 8013544:	0801a244 	.word	0x0801a244
 8013548:	0801a3b8 	.word	0x0801a3b8
 801354c:	0801a2a4 	.word	0x0801a2a4
 8013550:	0801a370 	.word	0x0801a370

08013554 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013554:	b480      	push	{r7}
 8013556:	b083      	sub	sp, #12
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	460b      	mov	r3, r1
 801355e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	7a5b      	ldrb	r3, [r3, #9]
 8013564:	78fa      	ldrb	r2, [r7, #3]
 8013566:	429a      	cmp	r2, r3
 8013568:	d008      	beq.n	801357c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	78fa      	ldrb	r2, [r7, #3]
 801356e:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2200      	movs	r2, #0
 8013574:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2200      	movs	r2, #0
 801357a:	82da      	strh	r2, [r3, #22]
  }
}
 801357c:	bf00      	nop
 801357e:	370c      	adds	r7, #12
 8013580:	46bd      	mov	sp, r7
 8013582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013586:	4770      	bx	lr

08013588 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b082      	sub	sp, #8
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	460b      	mov	r3, r1
 8013592:	70fb      	strb	r3, [r7, #3]
 8013594:	4613      	mov	r3, r2
 8013596:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	8a9b      	ldrh	r3, [r3, #20]
 801359c:	461a      	mov	r2, r3
 801359e:	78bb      	ldrb	r3, [r7, #2]
 80135a0:	4413      	add	r3, r2
 80135a2:	3302      	adds	r3, #2
 80135a4:	2b44      	cmp	r3, #68	; 0x44
 80135a6:	d906      	bls.n	80135b6 <dhcp_option+0x2e>
 80135a8:	4b11      	ldr	r3, [pc, #68]	; (80135f0 <dhcp_option+0x68>)
 80135aa:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80135ae:	4911      	ldr	r1, [pc, #68]	; (80135f4 <dhcp_option+0x6c>)
 80135b0:	4811      	ldr	r0, [pc, #68]	; (80135f8 <dhcp_option+0x70>)
 80135b2:	f003 fae1 	bl	8016b78 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	691a      	ldr	r2, [r3, #16]
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	8a9b      	ldrh	r3, [r3, #20]
 80135be:	1c59      	adds	r1, r3, #1
 80135c0:	b288      	uxth	r0, r1
 80135c2:	6879      	ldr	r1, [r7, #4]
 80135c4:	8288      	strh	r0, [r1, #20]
 80135c6:	4413      	add	r3, r2
 80135c8:	78fa      	ldrb	r2, [r7, #3]
 80135ca:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	691a      	ldr	r2, [r3, #16]
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	8a9b      	ldrh	r3, [r3, #20]
 80135d6:	1c59      	adds	r1, r3, #1
 80135d8:	b288      	uxth	r0, r1
 80135da:	6879      	ldr	r1, [r7, #4]
 80135dc:	8288      	strh	r0, [r1, #20]
 80135de:	4413      	add	r3, r2
 80135e0:	78ba      	ldrb	r2, [r7, #2]
 80135e2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 80135e6:	bf00      	nop
 80135e8:	3708      	adds	r7, #8
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}
 80135ee:	bf00      	nop
 80135f0:	0801a244 	.word	0x0801a244
 80135f4:	0801a3d4 	.word	0x0801a3d4
 80135f8:	0801a2a4 	.word	0x0801a2a4

080135fc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b082      	sub	sp, #8
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
 8013604:	460b      	mov	r3, r1
 8013606:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	8a9b      	ldrh	r3, [r3, #20]
 801360c:	2b43      	cmp	r3, #67	; 0x43
 801360e:	d906      	bls.n	801361e <dhcp_option_byte+0x22>
 8013610:	4b0b      	ldr	r3, [pc, #44]	; (8013640 <dhcp_option_byte+0x44>)
 8013612:	f240 527b 	movw	r2, #1403	; 0x57b
 8013616:	490b      	ldr	r1, [pc, #44]	; (8013644 <dhcp_option_byte+0x48>)
 8013618:	480b      	ldr	r0, [pc, #44]	; (8013648 <dhcp_option_byte+0x4c>)
 801361a:	f003 faad 	bl	8016b78 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	691a      	ldr	r2, [r3, #16]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	8a9b      	ldrh	r3, [r3, #20]
 8013626:	1c59      	adds	r1, r3, #1
 8013628:	b288      	uxth	r0, r1
 801362a:	6879      	ldr	r1, [r7, #4]
 801362c:	8288      	strh	r0, [r1, #20]
 801362e:	4413      	add	r3, r2
 8013630:	78fa      	ldrb	r2, [r7, #3]
 8013632:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8013636:	bf00      	nop
 8013638:	3708      	adds	r7, #8
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
 801363e:	bf00      	nop
 8013640:	0801a244 	.word	0x0801a244
 8013644:	0801a41c 	.word	0x0801a41c
 8013648:	0801a2a4 	.word	0x0801a2a4

0801364c <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 801364c:	b590      	push	{r4, r7, lr}
 801364e:	b083      	sub	sp, #12
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	460b      	mov	r3, r1
 8013656:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	8a9b      	ldrh	r3, [r3, #20]
 801365c:	3302      	adds	r3, #2
 801365e:	2b44      	cmp	r3, #68	; 0x44
 8013660:	d906      	bls.n	8013670 <dhcp_option_short+0x24>
 8013662:	4b14      	ldr	r3, [pc, #80]	; (80136b4 <dhcp_option_short+0x68>)
 8013664:	f240 5282 	movw	r2, #1410	; 0x582
 8013668:	4913      	ldr	r1, [pc, #76]	; (80136b8 <dhcp_option_short+0x6c>)
 801366a:	4814      	ldr	r0, [pc, #80]	; (80136bc <dhcp_option_short+0x70>)
 801366c:	f003 fa84 	bl	8016b78 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013670:	887b      	ldrh	r3, [r7, #2]
 8013672:	0a1b      	lsrs	r3, r3, #8
 8013674:	b298      	uxth	r0, r3
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	691a      	ldr	r2, [r3, #16]
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	8a9b      	ldrh	r3, [r3, #20]
 801367e:	1c59      	adds	r1, r3, #1
 8013680:	b28c      	uxth	r4, r1
 8013682:	6879      	ldr	r1, [r7, #4]
 8013684:	828c      	strh	r4, [r1, #20]
 8013686:	b2c1      	uxtb	r1, r0
 8013688:	4413      	add	r3, r2
 801368a:	460a      	mov	r2, r1
 801368c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	691a      	ldr	r2, [r3, #16]
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	8a9b      	ldrh	r3, [r3, #20]
 8013698:	1c59      	adds	r1, r3, #1
 801369a:	b288      	uxth	r0, r1
 801369c:	6879      	ldr	r1, [r7, #4]
 801369e:	8288      	strh	r0, [r1, #20]
 80136a0:	8879      	ldrh	r1, [r7, #2]
 80136a2:	b2c9      	uxtb	r1, r1
 80136a4:	4413      	add	r3, r2
 80136a6:	460a      	mov	r2, r1
 80136a8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 80136ac:	bf00      	nop
 80136ae:	370c      	adds	r7, #12
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd90      	pop	{r4, r7, pc}
 80136b4:	0801a244 	.word	0x0801a244
 80136b8:	0801a458 	.word	0x0801a458
 80136bc:	0801a2a4 	.word	0x0801a2a4

080136c0 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 80136c0:	b590      	push	{r4, r7, lr}
 80136c2:	b083      	sub	sp, #12
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	8a9b      	ldrh	r3, [r3, #20]
 80136ce:	3304      	adds	r3, #4
 80136d0:	2b44      	cmp	r3, #68	; 0x44
 80136d2:	d906      	bls.n	80136e2 <dhcp_option_long+0x22>
 80136d4:	4b22      	ldr	r3, [pc, #136]	; (8013760 <dhcp_option_long+0xa0>)
 80136d6:	f240 528a 	movw	r2, #1418	; 0x58a
 80136da:	4922      	ldr	r1, [pc, #136]	; (8013764 <dhcp_option_long+0xa4>)
 80136dc:	4822      	ldr	r0, [pc, #136]	; (8013768 <dhcp_option_long+0xa8>)
 80136de:	f003 fa4b 	bl	8016b78 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	0e18      	lsrs	r0, r3, #24
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	691a      	ldr	r2, [r3, #16]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	8a9b      	ldrh	r3, [r3, #20]
 80136ee:	1c59      	adds	r1, r3, #1
 80136f0:	b28c      	uxth	r4, r1
 80136f2:	6879      	ldr	r1, [r7, #4]
 80136f4:	828c      	strh	r4, [r1, #20]
 80136f6:	b2c1      	uxtb	r1, r0
 80136f8:	4413      	add	r3, r2
 80136fa:	460a      	mov	r2, r1
 80136fc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	0c18      	lsrs	r0, r3, #16
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	691a      	ldr	r2, [r3, #16]
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	8a9b      	ldrh	r3, [r3, #20]
 801370c:	1c59      	adds	r1, r3, #1
 801370e:	b28c      	uxth	r4, r1
 8013710:	6879      	ldr	r1, [r7, #4]
 8013712:	828c      	strh	r4, [r1, #20]
 8013714:	b2c1      	uxtb	r1, r0
 8013716:	4413      	add	r3, r2
 8013718:	460a      	mov	r2, r1
 801371a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	0a18      	lsrs	r0, r3, #8
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	691a      	ldr	r2, [r3, #16]
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	8a9b      	ldrh	r3, [r3, #20]
 801372a:	1c59      	adds	r1, r3, #1
 801372c:	b28c      	uxth	r4, r1
 801372e:	6879      	ldr	r1, [r7, #4]
 8013730:	828c      	strh	r4, [r1, #20]
 8013732:	b2c1      	uxtb	r1, r0
 8013734:	4413      	add	r3, r2
 8013736:	460a      	mov	r2, r1
 8013738:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	691a      	ldr	r2, [r3, #16]
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	8a9b      	ldrh	r3, [r3, #20]
 8013744:	1c59      	adds	r1, r3, #1
 8013746:	b288      	uxth	r0, r1
 8013748:	6879      	ldr	r1, [r7, #4]
 801374a:	8288      	strh	r0, [r1, #20]
 801374c:	6839      	ldr	r1, [r7, #0]
 801374e:	b2c9      	uxtb	r1, r1
 8013750:	4413      	add	r3, r2
 8013752:	460a      	mov	r2, r1
 8013754:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8013758:	bf00      	nop
 801375a:	370c      	adds	r7, #12
 801375c:	46bd      	mov	sp, r7
 801375e:	bd90      	pop	{r4, r7, pc}
 8013760:	0801a244 	.word	0x0801a244
 8013764:	0801a49c 	.word	0x0801a49c
 8013768:	0801a2a4 	.word	0x0801a2a4

0801376c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b08e      	sub	sp, #56	; 0x38
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
 8013774:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013776:	2300      	movs	r3, #0
 8013778:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 801377a:	2300      	movs	r3, #0
 801377c:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801377e:	2208      	movs	r2, #8
 8013780:	2100      	movs	r1, #0
 8013782:	48b3      	ldr	r0, [pc, #716]	; (8013a50 <dhcp_parse_reply+0x2e4>)
 8013784:	f003 f9f0 	bl	8016b68 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	895b      	ldrh	r3, [r3, #10]
 801378c:	2b2b      	cmp	r3, #43	; 0x2b
 801378e:	d802      	bhi.n	8013796 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013790:	f06f 0301 	mvn.w	r3, #1
 8013794:	e26a      	b.n	8013c6c <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	685a      	ldr	r2, [r3, #4]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801379e:	23f0      	movs	r3, #240	; 0xf0
 80137a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80137a2:	683b      	ldr	r3, [r7, #0]
 80137a4:	891b      	ldrh	r3, [r3, #8]
 80137a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 80137ac:	e00c      	b.n	80137c8 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 80137ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b0:	895b      	ldrh	r3, [r3, #10]
 80137b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80137b4:	1ad3      	subs	r3, r2, r3
 80137b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 80137b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ba:	895b      	ldrh	r3, [r3, #10]
 80137bc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80137be:	1ad3      	subs	r3, r2, r3
 80137c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 80137c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 80137c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d004      	beq.n	80137d8 <dhcp_parse_reply+0x6c>
 80137ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d0:	895b      	ldrh	r3, [r3, #10]
 80137d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80137d4:	429a      	cmp	r2, r3
 80137d6:	d2ea      	bcs.n	80137ae <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 80137d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d102      	bne.n	80137e4 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 80137de:	f06f 0301 	mvn.w	r3, #1
 80137e2:	e243      	b.n	8013c6c <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 80137e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80137e6:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 80137e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80137ea:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 80137ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ee:	685b      	ldr	r3, [r3, #4]
 80137f0:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80137f2:	e1fb      	b.n	8013bec <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 80137f4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80137f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137f8:	4413      	add	r3, r2
 80137fa:	781b      	ldrb	r3, [r3, #0]
 80137fc:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 80137fe:	2300      	movs	r3, #0
 8013800:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 8013802:	f04f 33ff 	mov.w	r3, #4294967295
 8013806:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 8013808:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801380a:	3302      	adds	r3, #2
 801380c:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801380e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013810:	3301      	adds	r3, #1
 8013812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013814:	8952      	ldrh	r2, [r2, #10]
 8013816:	4293      	cmp	r3, r2
 8013818:	da06      	bge.n	8013828 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 801381a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801381c:	3301      	adds	r3, #1
 801381e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013820:	4413      	add	r3, r2
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	77fb      	strb	r3, [r7, #31]
 8013826:	e00a      	b.n	801383e <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8013828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d004      	beq.n	801383a <dhcp_parse_reply+0xce>
 8013830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	685b      	ldr	r3, [r3, #4]
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	e000      	b.n	801383c <dhcp_parse_reply+0xd0>
 801383a:	2300      	movs	r3, #0
 801383c:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801383e:	7ffb      	ldrb	r3, [r7, #31]
 8013840:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 8013842:	7d7b      	ldrb	r3, [r7, #21]
 8013844:	2b3b      	cmp	r3, #59	; 0x3b
 8013846:	f200 8121 	bhi.w	8013a8c <dhcp_parse_reply+0x320>
 801384a:	a201      	add	r2, pc, #4	; (adr r2, 8013850 <dhcp_parse_reply+0xe4>)
 801384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013850:	08013941 	.word	0x08013941
 8013854:	08013951 	.word	0x08013951
 8013858:	08013a8d 	.word	0x08013a8d
 801385c:	08013971 	.word	0x08013971
 8013860:	08013a8d 	.word	0x08013a8d
 8013864:	08013a8d 	.word	0x08013a8d
 8013868:	08013a8d 	.word	0x08013a8d
 801386c:	08013a8d 	.word	0x08013a8d
 8013870:	08013a8d 	.word	0x08013a8d
 8013874:	08013a8d 	.word	0x08013a8d
 8013878:	08013a8d 	.word	0x08013a8d
 801387c:	08013a8d 	.word	0x08013a8d
 8013880:	08013a8d 	.word	0x08013a8d
 8013884:	08013a8d 	.word	0x08013a8d
 8013888:	08013a8d 	.word	0x08013a8d
 801388c:	08013a8d 	.word	0x08013a8d
 8013890:	08013a8d 	.word	0x08013a8d
 8013894:	08013a8d 	.word	0x08013a8d
 8013898:	08013a8d 	.word	0x08013a8d
 801389c:	08013a8d 	.word	0x08013a8d
 80138a0:	08013a8d 	.word	0x08013a8d
 80138a4:	08013a8d 	.word	0x08013a8d
 80138a8:	08013a8d 	.word	0x08013a8d
 80138ac:	08013a8d 	.word	0x08013a8d
 80138b0:	08013a8d 	.word	0x08013a8d
 80138b4:	08013a8d 	.word	0x08013a8d
 80138b8:	08013a8d 	.word	0x08013a8d
 80138bc:	08013a8d 	.word	0x08013a8d
 80138c0:	08013a8d 	.word	0x08013a8d
 80138c4:	08013a8d 	.word	0x08013a8d
 80138c8:	08013a8d 	.word	0x08013a8d
 80138cc:	08013a8d 	.word	0x08013a8d
 80138d0:	08013a8d 	.word	0x08013a8d
 80138d4:	08013a8d 	.word	0x08013a8d
 80138d8:	08013a8d 	.word	0x08013a8d
 80138dc:	08013a8d 	.word	0x08013a8d
 80138e0:	08013a8d 	.word	0x08013a8d
 80138e4:	08013a8d 	.word	0x08013a8d
 80138e8:	08013a8d 	.word	0x08013a8d
 80138ec:	08013a8d 	.word	0x08013a8d
 80138f0:	08013a8d 	.word	0x08013a8d
 80138f4:	08013a8d 	.word	0x08013a8d
 80138f8:	08013a8d 	.word	0x08013a8d
 80138fc:	08013a8d 	.word	0x08013a8d
 8013900:	08013a8d 	.word	0x08013a8d
 8013904:	08013a8d 	.word	0x08013a8d
 8013908:	08013a8d 	.word	0x08013a8d
 801390c:	08013a8d 	.word	0x08013a8d
 8013910:	08013a8d 	.word	0x08013a8d
 8013914:	08013a8d 	.word	0x08013a8d
 8013918:	08013a8d 	.word	0x08013a8d
 801391c:	08013997 	.word	0x08013997
 8013920:	080139b7 	.word	0x080139b7
 8013924:	080139f1 	.word	0x080139f1
 8013928:	08013a11 	.word	0x08013a11
 801392c:	08013a8d 	.word	0x08013a8d
 8013930:	08013a8d 	.word	0x08013a8d
 8013934:	08013a8d 	.word	0x08013a8d
 8013938:	08013a31 	.word	0x08013a31
 801393c:	08013a6d 	.word	0x08013a6d
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013940:	2300      	movs	r3, #0
 8013942:	77fb      	strb	r3, [r7, #31]
 8013944:	7ffb      	ldrb	r3, [r7, #31]
 8013946:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 8013948:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801394a:	3b01      	subs	r3, #1
 801394c:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 801394e:	e0a0      	b.n	8013a92 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013950:	7ffb      	ldrb	r3, [r7, #31]
 8013952:	2b04      	cmp	r3, #4
 8013954:	d009      	beq.n	801396a <dhcp_parse_reply+0x1fe>
 8013956:	4b3f      	ldr	r3, [pc, #252]	; (8013a54 <dhcp_parse_reply+0x2e8>)
 8013958:	f240 52f6 	movw	r2, #1526	; 0x5f6
 801395c:	493e      	ldr	r1, [pc, #248]	; (8013a58 <dhcp_parse_reply+0x2ec>)
 801395e:	483f      	ldr	r0, [pc, #252]	; (8013a5c <dhcp_parse_reply+0x2f0>)
 8013960:	f003 f90a 	bl	8016b78 <iprintf>
 8013964:	f06f 0305 	mvn.w	r3, #5
 8013968:	e180      	b.n	8013c6c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801396a:	2306      	movs	r3, #6
 801396c:	61bb      	str	r3, [r7, #24]
        break;
 801396e:	e090      	b.n	8013a92 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8013970:	2304      	movs	r3, #4
 8013972:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013974:	7ffa      	ldrb	r2, [r7, #31]
 8013976:	7fbb      	ldrb	r3, [r7, #30]
 8013978:	429a      	cmp	r2, r3
 801397a:	d209      	bcs.n	8013990 <dhcp_parse_reply+0x224>
 801397c:	4b35      	ldr	r3, [pc, #212]	; (8013a54 <dhcp_parse_reply+0x2e8>)
 801397e:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8013982:	4937      	ldr	r1, [pc, #220]	; (8013a60 <dhcp_parse_reply+0x2f4>)
 8013984:	4835      	ldr	r0, [pc, #212]	; (8013a5c <dhcp_parse_reply+0x2f0>)
 8013986:	f003 f8f7 	bl	8016b78 <iprintf>
 801398a:	f06f 0305 	mvn.w	r3, #5
 801398e:	e16d      	b.n	8013c6c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8013990:	2307      	movs	r3, #7
 8013992:	61bb      	str	r3, [r7, #24]
        break;
 8013994:	e07d      	b.n	8013a92 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013996:	7ffb      	ldrb	r3, [r7, #31]
 8013998:	2b04      	cmp	r3, #4
 801399a:	d009      	beq.n	80139b0 <dhcp_parse_reply+0x244>
 801399c:	4b2d      	ldr	r3, [pc, #180]	; (8013a54 <dhcp_parse_reply+0x2e8>)
 801399e:	f240 6209 	movw	r2, #1545	; 0x609
 80139a2:	492d      	ldr	r1, [pc, #180]	; (8013a58 <dhcp_parse_reply+0x2ec>)
 80139a4:	482d      	ldr	r0, [pc, #180]	; (8013a5c <dhcp_parse_reply+0x2f0>)
 80139a6:	f003 f8e7 	bl	8016b78 <iprintf>
 80139aa:	f06f 0305 	mvn.w	r3, #5
 80139ae:	e15d      	b.n	8013c6c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80139b0:	2303      	movs	r3, #3
 80139b2:	61bb      	str	r3, [r7, #24]
        break;
 80139b4:	e06d      	b.n	8013a92 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80139b6:	7ffb      	ldrb	r3, [r7, #31]
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d009      	beq.n	80139d0 <dhcp_parse_reply+0x264>
 80139bc:	4b25      	ldr	r3, [pc, #148]	; (8013a54 <dhcp_parse_reply+0x2e8>)
 80139be:	f240 6217 	movw	r2, #1559	; 0x617
 80139c2:	4928      	ldr	r1, [pc, #160]	; (8013a64 <dhcp_parse_reply+0x2f8>)
 80139c4:	4825      	ldr	r0, [pc, #148]	; (8013a5c <dhcp_parse_reply+0x2f0>)
 80139c6:	f003 f8d7 	bl	8016b78 <iprintf>
 80139ca:	f06f 0305 	mvn.w	r3, #5
 80139ce:	e14d      	b.n	8013c6c <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80139d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80139d2:	2bf0      	cmp	r3, #240	; 0xf0
 80139d4:	d009      	beq.n	80139ea <dhcp_parse_reply+0x27e>
 80139d6:	4b1f      	ldr	r3, [pc, #124]	; (8013a54 <dhcp_parse_reply+0x2e8>)
 80139d8:	f240 6219 	movw	r2, #1561	; 0x619
 80139dc:	4922      	ldr	r1, [pc, #136]	; (8013a68 <dhcp_parse_reply+0x2fc>)
 80139de:	481f      	ldr	r0, [pc, #124]	; (8013a5c <dhcp_parse_reply+0x2f0>)
 80139e0:	f003 f8ca 	bl	8016b78 <iprintf>
 80139e4:	f06f 0305 	mvn.w	r3, #5
 80139e8:	e140      	b.n	8013c6c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80139ea:	2300      	movs	r3, #0
 80139ec:	61bb      	str	r3, [r7, #24]
        break;
 80139ee:	e050      	b.n	8013a92 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80139f0:	7ffb      	ldrb	r3, [r7, #31]
 80139f2:	2b01      	cmp	r3, #1
 80139f4:	d009      	beq.n	8013a0a <dhcp_parse_reply+0x29e>
 80139f6:	4b17      	ldr	r3, [pc, #92]	; (8013a54 <dhcp_parse_reply+0x2e8>)
 80139f8:	f240 621d 	movw	r2, #1565	; 0x61d
 80139fc:	4919      	ldr	r1, [pc, #100]	; (8013a64 <dhcp_parse_reply+0x2f8>)
 80139fe:	4817      	ldr	r0, [pc, #92]	; (8013a5c <dhcp_parse_reply+0x2f0>)
 8013a00:	f003 f8ba 	bl	8016b78 <iprintf>
 8013a04:	f06f 0305 	mvn.w	r3, #5
 8013a08:	e130      	b.n	8013c6c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	61bb      	str	r3, [r7, #24]
        break;
 8013a0e:	e040      	b.n	8013a92 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013a10:	7ffb      	ldrb	r3, [r7, #31]
 8013a12:	2b04      	cmp	r3, #4
 8013a14:	d009      	beq.n	8013a2a <dhcp_parse_reply+0x2be>
 8013a16:	4b0f      	ldr	r3, [pc, #60]	; (8013a54 <dhcp_parse_reply+0x2e8>)
 8013a18:	f240 6221 	movw	r2, #1569	; 0x621
 8013a1c:	490e      	ldr	r1, [pc, #56]	; (8013a58 <dhcp_parse_reply+0x2ec>)
 8013a1e:	480f      	ldr	r0, [pc, #60]	; (8013a5c <dhcp_parse_reply+0x2f0>)
 8013a20:	f003 f8aa 	bl	8016b78 <iprintf>
 8013a24:	f06f 0305 	mvn.w	r3, #5
 8013a28:	e120      	b.n	8013c6c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8013a2a:	2302      	movs	r3, #2
 8013a2c:	61bb      	str	r3, [r7, #24]
        break;
 8013a2e:	e030      	b.n	8013a92 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013a30:	7ffb      	ldrb	r3, [r7, #31]
 8013a32:	2b04      	cmp	r3, #4
 8013a34:	d009      	beq.n	8013a4a <dhcp_parse_reply+0x2de>
 8013a36:	4b07      	ldr	r3, [pc, #28]	; (8013a54 <dhcp_parse_reply+0x2e8>)
 8013a38:	f240 6225 	movw	r2, #1573	; 0x625
 8013a3c:	4906      	ldr	r1, [pc, #24]	; (8013a58 <dhcp_parse_reply+0x2ec>)
 8013a3e:	4807      	ldr	r0, [pc, #28]	; (8013a5c <dhcp_parse_reply+0x2f0>)
 8013a40:	f003 f89a 	bl	8016b78 <iprintf>
 8013a44:	f06f 0305 	mvn.w	r3, #5
 8013a48:	e110      	b.n	8013c6c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013a4a:	2304      	movs	r3, #4
 8013a4c:	61bb      	str	r3, [r7, #24]
        break;
 8013a4e:	e020      	b.n	8013a92 <dhcp_parse_reply+0x326>
 8013a50:	2000faf0 	.word	0x2000faf0
 8013a54:	0801a244 	.word	0x0801a244
 8013a58:	0801a4dc 	.word	0x0801a4dc
 8013a5c:	0801a2a4 	.word	0x0801a2a4
 8013a60:	0801a4e8 	.word	0x0801a4e8
 8013a64:	0801a4fc 	.word	0x0801a4fc
 8013a68:	0801a508 	.word	0x0801a508
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013a6c:	7ffb      	ldrb	r3, [r7, #31]
 8013a6e:	2b04      	cmp	r3, #4
 8013a70:	d009      	beq.n	8013a86 <dhcp_parse_reply+0x31a>
 8013a72:	4b80      	ldr	r3, [pc, #512]	; (8013c74 <dhcp_parse_reply+0x508>)
 8013a74:	f240 6229 	movw	r2, #1577	; 0x629
 8013a78:	497f      	ldr	r1, [pc, #508]	; (8013c78 <dhcp_parse_reply+0x50c>)
 8013a7a:	4880      	ldr	r0, [pc, #512]	; (8013c7c <dhcp_parse_reply+0x510>)
 8013a7c:	f003 f87c 	bl	8016b78 <iprintf>
 8013a80:	f06f 0305 	mvn.w	r3, #5
 8013a84:	e0f2      	b.n	8013c6c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 8013a86:	2305      	movs	r3, #5
 8013a88:	61bb      	str	r3, [r7, #24]
        break;
 8013a8a:	e002      	b.n	8013a92 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 8013a90:	bf00      	nop
    }
    offset += len + 2;
 8013a92:	7ffb      	ldrb	r3, [r7, #31]
 8013a94:	b29a      	uxth	r2, r3
 8013a96:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013a98:	4413      	add	r3, r2
 8013a9a:	b29b      	uxth	r3, r3
 8013a9c:	3302      	adds	r3, #2
 8013a9e:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 8013aa0:	7fbb      	ldrb	r3, [r7, #30]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d079      	beq.n	8013b9a <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8013aaa:	69bb      	ldr	r3, [r7, #24]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	db02      	blt.n	8013ab6 <dhcp_parse_reply+0x34a>
 8013ab0:	69bb      	ldr	r3, [r7, #24]
 8013ab2:	2b07      	cmp	r3, #7
 8013ab4:	dd06      	ble.n	8013ac4 <dhcp_parse_reply+0x358>
 8013ab6:	4b6f      	ldr	r3, [pc, #444]	; (8013c74 <dhcp_parse_reply+0x508>)
 8013ab8:	f240 6236 	movw	r2, #1590	; 0x636
 8013abc:	4970      	ldr	r1, [pc, #448]	; (8013c80 <dhcp_parse_reply+0x514>)
 8013abe:	486f      	ldr	r0, [pc, #444]	; (8013c7c <dhcp_parse_reply+0x510>)
 8013ac0:	f003 f85a 	bl	8016b78 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8013ac4:	4a6f      	ldr	r2, [pc, #444]	; (8013c84 <dhcp_parse_reply+0x518>)
 8013ac6:	69bb      	ldr	r3, [r7, #24]
 8013ac8:	4413      	add	r3, r2
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d164      	bne.n	8013b9a <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 8013ad0:	7fbb      	ldrb	r3, [r7, #30]
 8013ad2:	2b04      	cmp	r3, #4
 8013ad4:	bf28      	it	cs
 8013ad6:	2304      	movcs	r3, #4
 8013ad8:	b2db      	uxtb	r3, r3
 8013ada:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013adc:	8afb      	ldrh	r3, [r7, #22]
 8013ade:	8a7a      	ldrh	r2, [r7, #18]
 8013ae0:	f107 0108 	add.w	r1, r7, #8
 8013ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ae6:	f7f8 fd43 	bl	800c570 <pbuf_copy_partial>
 8013aea:	4603      	mov	r3, r0
 8013aec:	461a      	mov	r2, r3
 8013aee:	8a7b      	ldrh	r3, [r7, #18]
 8013af0:	4293      	cmp	r3, r2
 8013af2:	d002      	beq.n	8013afa <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 8013af4:	f06f 0301 	mvn.w	r3, #1
 8013af8:	e0b8      	b.n	8013c6c <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 8013afa:	7fbb      	ldrb	r3, [r7, #30]
 8013afc:	2b04      	cmp	r3, #4
 8013afe:	d927      	bls.n	8013b50 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013b00:	7fbb      	ldrb	r3, [r7, #30]
 8013b02:	f003 0303 	and.w	r3, r3, #3
 8013b06:	b2db      	uxtb	r3, r3
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d009      	beq.n	8013b20 <dhcp_parse_reply+0x3b4>
 8013b0c:	4b59      	ldr	r3, [pc, #356]	; (8013c74 <dhcp_parse_reply+0x508>)
 8013b0e:	f240 623e 	movw	r2, #1598	; 0x63e
 8013b12:	495d      	ldr	r1, [pc, #372]	; (8013c88 <dhcp_parse_reply+0x51c>)
 8013b14:	4859      	ldr	r0, [pc, #356]	; (8013c7c <dhcp_parse_reply+0x510>)
 8013b16:	f003 f82f 	bl	8016b78 <iprintf>
 8013b1a:	f06f 0305 	mvn.w	r3, #5
 8013b1e:	e0a5      	b.n	8013c6c <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 8013b20:	4a58      	ldr	r2, [pc, #352]	; (8013c84 <dhcp_parse_reply+0x518>)
 8013b22:	69bb      	ldr	r3, [r7, #24]
 8013b24:	4413      	add	r3, r2
 8013b26:	2201      	movs	r2, #1
 8013b28:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7f7 f949 	bl	800adc4 <lwip_htonl>
 8013b32:	4601      	mov	r1, r0
 8013b34:	4a55      	ldr	r2, [pc, #340]	; (8013c8c <dhcp_parse_reply+0x520>)
 8013b36:	69bb      	ldr	r3, [r7, #24]
 8013b38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 8013b3c:	7fbb      	ldrb	r3, [r7, #30]
 8013b3e:	3b04      	subs	r3, #4
 8013b40:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 8013b42:	8afb      	ldrh	r3, [r7, #22]
 8013b44:	3304      	adds	r3, #4
 8013b46:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 8013b48:	69bb      	ldr	r3, [r7, #24]
 8013b4a:	3301      	adds	r3, #1
 8013b4c:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 8013b4e:	e7ac      	b.n	8013aaa <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 8013b50:	7fbb      	ldrb	r3, [r7, #30]
 8013b52:	2b04      	cmp	r3, #4
 8013b54:	d106      	bne.n	8013b64 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7f7 f933 	bl	800adc4 <lwip_htonl>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	60bb      	str	r3, [r7, #8]
 8013b62:	e010      	b.n	8013b86 <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013b64:	7fbb      	ldrb	r3, [r7, #30]
 8013b66:	2b01      	cmp	r3, #1
 8013b68:	d009      	beq.n	8013b7e <dhcp_parse_reply+0x412>
 8013b6a:	4b42      	ldr	r3, [pc, #264]	; (8013c74 <dhcp_parse_reply+0x508>)
 8013b6c:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8013b70:	4947      	ldr	r1, [pc, #284]	; (8013c90 <dhcp_parse_reply+0x524>)
 8013b72:	4842      	ldr	r0, [pc, #264]	; (8013c7c <dhcp_parse_reply+0x510>)
 8013b74:	f003 f800 	bl	8016b78 <iprintf>
 8013b78:	f06f 0305 	mvn.w	r3, #5
 8013b7c:	e076      	b.n	8013c6c <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 8013b7e:	f107 0308 	add.w	r3, r7, #8
 8013b82:	781b      	ldrb	r3, [r3, #0]
 8013b84:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 8013b86:	4a3f      	ldr	r2, [pc, #252]	; (8013c84 <dhcp_parse_reply+0x518>)
 8013b88:	69bb      	ldr	r3, [r7, #24]
 8013b8a:	4413      	add	r3, r2
 8013b8c:	2201      	movs	r2, #1
 8013b8e:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 8013b90:	68ba      	ldr	r2, [r7, #8]
 8013b92:	493e      	ldr	r1, [pc, #248]	; (8013c8c <dhcp_parse_reply+0x520>)
 8013b94:	69bb      	ldr	r3, [r7, #24]
 8013b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 8013b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b9c:	895b      	ldrh	r3, [r3, #10]
 8013b9e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	d323      	bcc.n	8013bec <dhcp_parse_reply+0x480>
      offset -= q->len;
 8013ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba6:	895b      	ldrh	r3, [r3, #10]
 8013ba8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8013baa:	1ad3      	subs	r3, r2, r3
 8013bac:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 8013bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb0:	895b      	ldrh	r3, [r3, #10]
 8013bb2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8013bb4:	1ad3      	subs	r3, r2, r3
 8013bb6:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 8013bb8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8013bba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d223      	bcs.n	8013c08 <dhcp_parse_reply+0x49c>
 8013bc0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d020      	beq.n	8013c08 <dhcp_parse_reply+0x49c>
        q = q->next;
 8013bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d109      	bne.n	8013be6 <dhcp_parse_reply+0x47a>
 8013bd2:	4b28      	ldr	r3, [pc, #160]	; (8013c74 <dhcp_parse_reply+0x508>)
 8013bd4:	f240 6254 	movw	r2, #1620	; 0x654
 8013bd8:	492e      	ldr	r1, [pc, #184]	; (8013c94 <dhcp_parse_reply+0x528>)
 8013bda:	4828      	ldr	r0, [pc, #160]	; (8013c7c <dhcp_parse_reply+0x510>)
 8013bdc:	f002 ffcc 	bl	8016b78 <iprintf>
 8013be0:	f06f 0305 	mvn.w	r3, #5
 8013be4:	e042      	b.n	8013c6c <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 8013be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be8:	685b      	ldr	r3, [r3, #4]
 8013bea:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d00a      	beq.n	8013c08 <dhcp_parse_reply+0x49c>
 8013bf2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8013bf4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d206      	bcs.n	8013c08 <dhcp_parse_reply+0x49c>
 8013bfa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bfe:	4413      	add	r3, r2
 8013c00:	781b      	ldrb	r3, [r3, #0]
 8013c02:	2bff      	cmp	r3, #255	; 0xff
 8013c04:	f47f adf6 	bne.w	80137f4 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8013c08:	4b1e      	ldr	r3, [pc, #120]	; (8013c84 <dhcp_parse_reply+0x518>)
 8013c0a:	781b      	ldrb	r3, [r3, #0]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d018      	beq.n	8013c42 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013c10:	4b1e      	ldr	r3, [pc, #120]	; (8013c8c <dhcp_parse_reply+0x520>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013c16:	4b1b      	ldr	r3, [pc, #108]	; (8013c84 <dhcp_parse_reply+0x518>)
 8013c18:	2200      	movs	r2, #0
 8013c1a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	2b01      	cmp	r3, #1
 8013c20:	d102      	bne.n	8013c28 <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 8013c22:	2301      	movs	r3, #1
 8013c24:	627b      	str	r3, [r7, #36]	; 0x24
 8013c26:	e00c      	b.n	8013c42 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	2b02      	cmp	r3, #2
 8013c2c:	d102      	bne.n	8013c34 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 8013c2e:	2301      	movs	r3, #1
 8013c30:	623b      	str	r3, [r7, #32]
 8013c32:	e006      	b.n	8013c42 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	2b03      	cmp	r3, #3
 8013c38:	d103      	bne.n	8013c42 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 8013c3e:	2301      	movs	r3, #1
 8013c40:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 8013c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d006      	beq.n	8013c56 <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8013c48:	2300      	movs	r3, #0
 8013c4a:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 8013c4c:	236c      	movs	r3, #108	; 0x6c
 8013c4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8013c50:	23ec      	movs	r3, #236	; 0xec
 8013c52:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 8013c54:	e5a8      	b.n	80137a8 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 8013c56:	6a3b      	ldr	r3, [r7, #32]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d006      	beq.n	8013c6a <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 8013c60:	232c      	movs	r3, #44	; 0x2c
 8013c62:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013c64:	236c      	movs	r3, #108	; 0x6c
 8013c66:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 8013c68:	e59e      	b.n	80137a8 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 8013c6a:	2300      	movs	r3, #0
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3738      	adds	r7, #56	; 0x38
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	0801a244 	.word	0x0801a244
 8013c78:	0801a4dc 	.word	0x0801a4dc
 8013c7c:	0801a2a4 	.word	0x0801a2a4
 8013c80:	0801a520 	.word	0x0801a520
 8013c84:	2000faf0 	.word	0x2000faf0
 8013c88:	0801a534 	.word	0x0801a534
 8013c8c:	2000faf8 	.word	0x2000faf8
 8013c90:	0801a54c 	.word	0x0801a54c
 8013c94:	0801a560 	.word	0x0801a560

08013c98 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b08a      	sub	sp, #40	; 0x28
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	607a      	str	r2, [r7, #4]
 8013ca4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8013ca6:	4b68      	ldr	r3, [pc, #416]	; (8013e48 <dhcp_recv+0x1b0>)
 8013ca8:	685b      	ldr	r3, [r3, #4]
 8013caa:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013cac:	6a3b      	ldr	r3, [r7, #32]
 8013cae:	6a1b      	ldr	r3, [r3, #32]
 8013cb0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	685b      	ldr	r3, [r3, #4]
 8013cb6:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8013cb8:	69fb      	ldr	r3, [r7, #28]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	f000 80a9 	beq.w	8013e12 <dhcp_recv+0x17a>
 8013cc0:	69fb      	ldr	r3, [r7, #28]
 8013cc2:	7a1b      	ldrb	r3, [r3, #8]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	f000 80a4 	beq.w	8013e12 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8013cca:	69fb      	ldr	r3, [r7, #28]
 8013ccc:	685b      	ldr	r3, [r3, #4]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d006      	beq.n	8013ce0 <dhcp_recv+0x48>
 8013cd2:	4b5e      	ldr	r3, [pc, #376]	; (8013e4c <dhcp_recv+0x1b4>)
 8013cd4:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8013cd8:	495d      	ldr	r1, [pc, #372]	; (8013e50 <dhcp_recv+0x1b8>)
 8013cda:	485e      	ldr	r0, [pc, #376]	; (8013e54 <dhcp_recv+0x1bc>)
 8013cdc:	f002 ff4c 	bl	8016b78 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	895b      	ldrh	r3, [r3, #10]
 8013ce4:	2b2b      	cmp	r3, #43	; 0x2b
 8013ce6:	f240 8096 	bls.w	8013e16 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8013cea:	69bb      	ldr	r3, [r7, #24]
 8013cec:	781b      	ldrb	r3, [r3, #0]
 8013cee:	2b02      	cmp	r3, #2
 8013cf0:	f040 8093 	bne.w	8013e1a <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013cfa:	e012      	b.n	8013d22 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d00:	6a3a      	ldr	r2, [r7, #32]
 8013d02:	4413      	add	r3, r2
 8013d04:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8013d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d0c:	69b9      	ldr	r1, [r7, #24]
 8013d0e:	440b      	add	r3, r1
 8013d10:	7f1b      	ldrb	r3, [r3, #28]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	f040 8083 	bne.w	8013e1e <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8013d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d1c:	3301      	adds	r3, #1
 8013d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d22:	6a3b      	ldr	r3, [r7, #32]
 8013d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d207      	bcs.n	8013d40 <dhcp_recv+0xa8>
 8013d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d34:	2b05      	cmp	r3, #5
 8013d36:	d803      	bhi.n	8013d40 <dhcp_recv+0xa8>
 8013d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d3c:	2b0f      	cmp	r3, #15
 8013d3e:	d9dd      	bls.n	8013cfc <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013d40:	69bb      	ldr	r3, [r7, #24]
 8013d42:	685b      	ldr	r3, [r3, #4]
 8013d44:	4618      	mov	r0, r3
 8013d46:	f7f7 f83d 	bl	800adc4 <lwip_htonl>
 8013d4a:	4602      	mov	r2, r0
 8013d4c:	69fb      	ldr	r3, [r7, #28]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d166      	bne.n	8013e22 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 8013d54:	6879      	ldr	r1, [r7, #4]
 8013d56:	69f8      	ldr	r0, [r7, #28]
 8013d58:	f7ff fd08 	bl	801376c <dhcp_parse_reply>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d161      	bne.n	8013e26 <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013d62:	4b3d      	ldr	r3, [pc, #244]	; (8013e58 <dhcp_recv+0x1c0>)
 8013d64:	785b      	ldrb	r3, [r3, #1]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d05f      	beq.n	8013e2a <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8013d6a:	4b3c      	ldr	r3, [pc, #240]	; (8013e5c <dhcp_recv+0x1c4>)
 8013d6c:	685b      	ldr	r3, [r3, #4]
 8013d6e:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8013d70:	7dfb      	ldrb	r3, [r7, #23]
 8013d72:	2b05      	cmp	r3, #5
 8013d74:	d128      	bne.n	8013dc8 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013d76:	69fb      	ldr	r3, [r7, #28]
 8013d78:	7a5b      	ldrb	r3, [r3, #9]
 8013d7a:	2b01      	cmp	r3, #1
 8013d7c:	d111      	bne.n	8013da2 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 8013d7e:	6a38      	ldr	r0, [r7, #32]
 8013d80:	f7fe fea0 	bl	8012ac4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8013d84:	6a3b      	ldr	r3, [r7, #32]
 8013d86:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013d8a:	f003 0308 	and.w	r3, r3, #8
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d003      	beq.n	8013d9a <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8013d92:	6a38      	ldr	r0, [r7, #32]
 8013d94:	f7fe fc68 	bl	8012668 <dhcp_check>
 8013d98:	e048      	b.n	8013e2c <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013d9a:	6a38      	ldr	r0, [r7, #32]
 8013d9c:	f7ff f8a0 	bl	8012ee0 <dhcp_bind>
 8013da0:	e044      	b.n	8013e2c <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013da2:	69fb      	ldr	r3, [r7, #28]
 8013da4:	7a5b      	ldrb	r3, [r3, #9]
 8013da6:	2b03      	cmp	r3, #3
 8013da8:	d007      	beq.n	8013dba <dhcp_recv+0x122>
 8013daa:	69fb      	ldr	r3, [r7, #28]
 8013dac:	7a5b      	ldrb	r3, [r3, #9]
 8013dae:	2b04      	cmp	r3, #4
 8013db0:	d003      	beq.n	8013dba <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8013db2:	69fb      	ldr	r3, [r7, #28]
 8013db4:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013db6:	2b05      	cmp	r3, #5
 8013db8:	d138      	bne.n	8013e2c <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 8013dba:	6a38      	ldr	r0, [r7, #32]
 8013dbc:	f7fe fe82 	bl	8012ac4 <dhcp_handle_ack>
      dhcp_bind(netif);
 8013dc0:	6a38      	ldr	r0, [r7, #32]
 8013dc2:	f7ff f88d 	bl	8012ee0 <dhcp_bind>
 8013dc6:	e031      	b.n	8013e2c <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013dc8:	7dfb      	ldrb	r3, [r7, #23]
 8013dca:	2b06      	cmp	r3, #6
 8013dcc:	d113      	bne.n	8013df6 <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013dce:	69fb      	ldr	r3, [r7, #28]
 8013dd0:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 8013dd2:	2b03      	cmp	r3, #3
 8013dd4:	d00b      	beq.n	8013dee <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013dd6:	69fb      	ldr	r3, [r7, #28]
 8013dd8:	7a5b      	ldrb	r3, [r3, #9]
 8013dda:	2b01      	cmp	r3, #1
 8013ddc:	d007      	beq.n	8013dee <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013dde:	69fb      	ldr	r3, [r7, #28]
 8013de0:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013de2:	2b04      	cmp	r3, #4
 8013de4:	d003      	beq.n	8013dee <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013de6:	69fb      	ldr	r3, [r7, #28]
 8013de8:	7a5b      	ldrb	r3, [r3, #9]
 8013dea:	2b05      	cmp	r3, #5
 8013dec:	d103      	bne.n	8013df6 <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8013dee:	6a38      	ldr	r0, [r7, #32]
 8013df0:	f7fe fc20 	bl	8012634 <dhcp_handle_nak>
 8013df4:	e01a      	b.n	8013e2c <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8013df6:	7dfb      	ldrb	r3, [r7, #23]
 8013df8:	2b02      	cmp	r3, #2
 8013dfa:	d10a      	bne.n	8013e12 <dhcp_recv+0x17a>
 8013dfc:	69fb      	ldr	r3, [r7, #28]
 8013dfe:	7a5b      	ldrb	r3, [r3, #9]
 8013e00:	2b06      	cmp	r3, #6
 8013e02:	d106      	bne.n	8013e12 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 8013e04:	69fb      	ldr	r3, [r7, #28]
 8013e06:	2200      	movs	r2, #0
 8013e08:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 8013e0a:	6a38      	ldr	r0, [r7, #32]
 8013e0c:	f7fe fc60 	bl	80126d0 <dhcp_handle_offer>
 8013e10:	e00c      	b.n	8013e2c <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 8013e12:	bf00      	nop
 8013e14:	e00a      	b.n	8013e2c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013e16:	bf00      	nop
 8013e18:	e008      	b.n	8013e2c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013e1a:	bf00      	nop
 8013e1c:	e006      	b.n	8013e2c <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 8013e1e:	bf00      	nop
 8013e20:	e004      	b.n	8013e2c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013e22:	bf00      	nop
 8013e24:	e002      	b.n	8013e2c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013e26:	bf00      	nop
 8013e28:	e000      	b.n	8013e2c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013e2a:	bf00      	nop
  if (dhcp != NULL) {
 8013e2c:	69fb      	ldr	r3, [r7, #28]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d002      	beq.n	8013e38 <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 8013e32:	69fb      	ldr	r3, [r7, #28]
 8013e34:	2200      	movs	r2, #0
 8013e36:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f7f8 f98d 	bl	800c158 <pbuf_free>
}
 8013e3e:	bf00      	nop
 8013e40:	3728      	adds	r7, #40	; 0x28
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}
 8013e46:	bf00      	nop
 8013e48:	2000c3a4 	.word	0x2000c3a4
 8013e4c:	0801a244 	.word	0x0801a244
 8013e50:	0801a370 	.word	0x0801a370
 8013e54:	0801a2a4 	.word	0x0801a2a4
 8013e58:	2000faf0 	.word	0x2000faf0
 8013e5c:	2000faf8 	.word	0x2000faf8

08013e60 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8013e60:	b590      	push	{r4, r7, lr}
 8013e62:	b087      	sub	sp, #28
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	60f8      	str	r0, [r7, #12]
 8013e68:	60b9      	str	r1, [r7, #8]
 8013e6a:	4613      	mov	r3, r2
 8013e6c:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d109      	bne.n	8013e88 <dhcp_create_msg+0x28>
 8013e74:	4ba3      	ldr	r3, [pc, #652]	; (8014104 <dhcp_create_msg+0x2a4>)
 8013e76:	f240 721d 	movw	r2, #1821	; 0x71d
 8013e7a:	49a3      	ldr	r1, [pc, #652]	; (8014108 <dhcp_create_msg+0x2a8>)
 8013e7c:	48a3      	ldr	r0, [pc, #652]	; (801410c <dhcp_create_msg+0x2ac>)
 8013e7e:	f002 fe7b 	bl	8016b78 <iprintf>
 8013e82:	f06f 030f 	mvn.w	r3, #15
 8013e86:	e138      	b.n	80140fa <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d109      	bne.n	8013ea2 <dhcp_create_msg+0x42>
 8013e8e:	4b9d      	ldr	r3, [pc, #628]	; (8014104 <dhcp_create_msg+0x2a4>)
 8013e90:	f240 721e 	movw	r2, #1822	; 0x71e
 8013e94:	499e      	ldr	r1, [pc, #632]	; (8014110 <dhcp_create_msg+0x2b0>)
 8013e96:	489d      	ldr	r0, [pc, #628]	; (801410c <dhcp_create_msg+0x2ac>)
 8013e98:	f002 fe6e 	bl	8016b78 <iprintf>
 8013e9c:	f06f 0305 	mvn.w	r3, #5
 8013ea0:	e12b      	b.n	80140fa <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8013ea2:	68bb      	ldr	r3, [r7, #8]
 8013ea4:	68db      	ldr	r3, [r3, #12]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d006      	beq.n	8013eb8 <dhcp_create_msg+0x58>
 8013eaa:	4b96      	ldr	r3, [pc, #600]	; (8014104 <dhcp_create_msg+0x2a4>)
 8013eac:	f240 721f 	movw	r2, #1823	; 0x71f
 8013eb0:	4998      	ldr	r1, [pc, #608]	; (8014114 <dhcp_create_msg+0x2b4>)
 8013eb2:	4896      	ldr	r0, [pc, #600]	; (801410c <dhcp_create_msg+0x2ac>)
 8013eb4:	f002 fe60 	bl	8016b78 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	691b      	ldr	r3, [r3, #16]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d006      	beq.n	8013ece <dhcp_create_msg+0x6e>
 8013ec0:	4b90      	ldr	r3, [pc, #576]	; (8014104 <dhcp_create_msg+0x2a4>)
 8013ec2:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8013ec6:	4994      	ldr	r1, [pc, #592]	; (8014118 <dhcp_create_msg+0x2b8>)
 8013ec8:	4890      	ldr	r0, [pc, #576]	; (801410c <dhcp_create_msg+0x2ac>)
 8013eca:	f002 fe55 	bl	8016b78 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013ece:	2200      	movs	r2, #0
 8013ed0:	f44f 719a 	mov.w	r1, #308	; 0x134
 8013ed4:	2000      	movs	r0, #0
 8013ed6:	f7f7 fdcd 	bl	800ba74 <pbuf_alloc>
 8013eda:	4602      	mov	r2, r0
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	68db      	ldr	r3, [r3, #12]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d102      	bne.n	8013eee <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 8013ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8013eec:	e105      	b.n	80140fa <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	68db      	ldr	r3, [r3, #12]
 8013ef2:	895b      	ldrh	r3, [r3, #10]
 8013ef4:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8013ef8:	d206      	bcs.n	8013f08 <dhcp_create_msg+0xa8>
 8013efa:	4b82      	ldr	r3, [pc, #520]	; (8014104 <dhcp_create_msg+0x2a4>)
 8013efc:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8013f00:	4986      	ldr	r1, [pc, #536]	; (801411c <dhcp_create_msg+0x2bc>)
 8013f02:	4882      	ldr	r0, [pc, #520]	; (801410c <dhcp_create_msg+0x2ac>)
 8013f04:	f002 fe38 	bl	8016b78 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8013f08:	79fb      	ldrb	r3, [r7, #7]
 8013f0a:	2b03      	cmp	r3, #3
 8013f0c:	d103      	bne.n	8013f16 <dhcp_create_msg+0xb6>
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	7a5b      	ldrb	r3, [r3, #9]
 8013f12:	2b03      	cmp	r3, #3
 8013f14:	d10d      	bne.n	8013f32 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	7a9b      	ldrb	r3, [r3, #10]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d105      	bne.n	8013f2a <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8013f1e:	f002 fe43 	bl	8016ba8 <rand>
 8013f22:	4603      	mov	r3, r0
 8013f24:	461a      	mov	r2, r3
 8013f26:	4b7e      	ldr	r3, [pc, #504]	; (8014120 <dhcp_create_msg+0x2c0>)
 8013f28:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8013f2a:	4b7d      	ldr	r3, [pc, #500]	; (8014120 <dhcp_create_msg+0x2c0>)
 8013f2c:	681a      	ldr	r2, [r3, #0]
 8013f2e:	68bb      	ldr	r3, [r7, #8]
 8013f30:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	68db      	ldr	r3, [r3, #12]
 8013f36:	685a      	ldr	r2, [r3, #4]
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8013f3c:	68bb      	ldr	r3, [r7, #8]
 8013f3e:	691b      	ldr	r3, [r3, #16]
 8013f40:	2201      	movs	r2, #1
 8013f42:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	691b      	ldr	r3, [r3, #16]
 8013f48:	2201      	movs	r2, #1
 8013f4a:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	691b      	ldr	r3, [r3, #16]
 8013f50:	68fa      	ldr	r2, [r7, #12]
 8013f52:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8013f56:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	691b      	ldr	r3, [r3, #16]
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	681a      	ldr	r2, [r3, #0]
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	691c      	ldr	r4, [r3, #16]
 8013f68:	4610      	mov	r0, r2
 8013f6a:	f7f6 ff2b 	bl	800adc4 <lwip_htonl>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	691b      	ldr	r3, [r3, #16]
 8013f76:	2200      	movs	r2, #0
 8013f78:	721a      	strb	r2, [r3, #8]
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	691b      	ldr	r3, [r3, #16]
 8013f82:	2200      	movs	r2, #0
 8013f84:	729a      	strb	r2, [r3, #10]
 8013f86:	2200      	movs	r2, #0
 8013f88:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	691b      	ldr	r3, [r3, #16]
 8013f8e:	2200      	movs	r2, #0
 8013f90:	731a      	strb	r2, [r3, #12]
 8013f92:	2200      	movs	r2, #0
 8013f94:	735a      	strb	r2, [r3, #13]
 8013f96:	2200      	movs	r2, #0
 8013f98:	739a      	strb	r2, [r3, #14]
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013f9e:	79fb      	ldrb	r3, [r7, #7]
 8013fa0:	2b08      	cmp	r3, #8
 8013fa2:	d010      	beq.n	8013fc6 <dhcp_create_msg+0x166>
 8013fa4:	79fb      	ldrb	r3, [r7, #7]
 8013fa6:	2b04      	cmp	r3, #4
 8013fa8:	d00d      	beq.n	8013fc6 <dhcp_create_msg+0x166>
 8013faa:	79fb      	ldrb	r3, [r7, #7]
 8013fac:	2b07      	cmp	r3, #7
 8013fae:	d00a      	beq.n	8013fc6 <dhcp_create_msg+0x166>
 8013fb0:	79fb      	ldrb	r3, [r7, #7]
 8013fb2:	2b03      	cmp	r3, #3
 8013fb4:	d10d      	bne.n	8013fd2 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013fba:	2b05      	cmp	r3, #5
 8013fbc:	d003      	beq.n	8013fc6 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	7a5b      	ldrb	r3, [r3, #9]
 8013fc2:	2b04      	cmp	r3, #4
 8013fc4:	d105      	bne.n	8013fd2 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	1d1a      	adds	r2, r3, #4
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	691b      	ldr	r3, [r3, #16]
 8013fce:	6812      	ldr	r2, [r2, #0]
 8013fd0:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	691b      	ldr	r3, [r3, #16]
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	741a      	strb	r2, [r3, #16]
 8013fda:	2200      	movs	r2, #0
 8013fdc:	745a      	strb	r2, [r3, #17]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	749a      	strb	r2, [r3, #18]
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8013fe6:	68bb      	ldr	r3, [r7, #8]
 8013fe8:	691b      	ldr	r3, [r3, #16]
 8013fea:	2200      	movs	r2, #0
 8013fec:	751a      	strb	r2, [r3, #20]
 8013fee:	2200      	movs	r2, #0
 8013ff0:	755a      	strb	r2, [r3, #21]
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	759a      	strb	r2, [r3, #22]
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	691b      	ldr	r3, [r3, #16]
 8013ffe:	2200      	movs	r2, #0
 8014000:	761a      	strb	r2, [r3, #24]
 8014002:	2200      	movs	r2, #0
 8014004:	765a      	strb	r2, [r3, #25]
 8014006:	2200      	movs	r2, #0
 8014008:	769a      	strb	r2, [r3, #26]
 801400a:	2200      	movs	r2, #0
 801400c:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801400e:	2300      	movs	r3, #0
 8014010:	82fb      	strh	r3, [r7, #22]
 8014012:	e019      	b.n	8014048 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801401a:	b29b      	uxth	r3, r3
 801401c:	8afa      	ldrh	r2, [r7, #22]
 801401e:	429a      	cmp	r2, r3
 8014020:	d208      	bcs.n	8014034 <dhcp_create_msg+0x1d4>
 8014022:	8afb      	ldrh	r3, [r7, #22]
 8014024:	2b05      	cmp	r3, #5
 8014026:	d805      	bhi.n	8014034 <dhcp_create_msg+0x1d4>
 8014028:	8afb      	ldrh	r3, [r7, #22]
 801402a:	68fa      	ldr	r2, [r7, #12]
 801402c:	4413      	add	r3, r2
 801402e:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8014032:	e000      	b.n	8014036 <dhcp_create_msg+0x1d6>
 8014034:	2100      	movs	r1, #0
 8014036:	68bb      	ldr	r3, [r7, #8]
 8014038:	691a      	ldr	r2, [r3, #16]
 801403a:	8afb      	ldrh	r3, [r7, #22]
 801403c:	4413      	add	r3, r2
 801403e:	460a      	mov	r2, r1
 8014040:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8014042:	8afb      	ldrh	r3, [r7, #22]
 8014044:	3301      	adds	r3, #1
 8014046:	82fb      	strh	r3, [r7, #22]
 8014048:	8afb      	ldrh	r3, [r7, #22]
 801404a:	2b0f      	cmp	r3, #15
 801404c:	d9e2      	bls.n	8014014 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801404e:	2300      	movs	r3, #0
 8014050:	82fb      	strh	r3, [r7, #22]
 8014052:	e009      	b.n	8014068 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	691a      	ldr	r2, [r3, #16]
 8014058:	8afb      	ldrh	r3, [r7, #22]
 801405a:	4413      	add	r3, r2
 801405c:	2200      	movs	r2, #0
 801405e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8014062:	8afb      	ldrh	r3, [r7, #22]
 8014064:	3301      	adds	r3, #1
 8014066:	82fb      	strh	r3, [r7, #22]
 8014068:	8afb      	ldrh	r3, [r7, #22]
 801406a:	2b3f      	cmp	r3, #63	; 0x3f
 801406c:	d9f2      	bls.n	8014054 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801406e:	2300      	movs	r3, #0
 8014070:	82fb      	strh	r3, [r7, #22]
 8014072:	e009      	b.n	8014088 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 8014074:	68bb      	ldr	r3, [r7, #8]
 8014076:	691a      	ldr	r2, [r3, #16]
 8014078:	8afb      	ldrh	r3, [r7, #22]
 801407a:	4413      	add	r3, r2
 801407c:	2200      	movs	r2, #0
 801407e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8014082:	8afb      	ldrh	r3, [r7, #22]
 8014084:	3301      	adds	r3, #1
 8014086:	82fb      	strh	r3, [r7, #22]
 8014088:	8afb      	ldrh	r3, [r7, #22]
 801408a:	2b7f      	cmp	r3, #127	; 0x7f
 801408c:	d9f2      	bls.n	8014074 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801408e:	68bb      	ldr	r3, [r7, #8]
 8014090:	691b      	ldr	r3, [r3, #16]
 8014092:	2200      	movs	r2, #0
 8014094:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014098:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801409c:	2200      	movs	r2, #0
 801409e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80140a2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80140a6:	2200      	movs	r2, #0
 80140a8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80140ac:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80140b0:	2200      	movs	r2, #0
 80140b2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80140b6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	2200      	movs	r2, #0
 80140be:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 80140c0:	2300      	movs	r3, #0
 80140c2:	82fb      	strh	r3, [r7, #22]
 80140c4:	e00b      	b.n	80140de <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	691a      	ldr	r2, [r3, #16]
 80140ca:	8afb      	ldrh	r3, [r7, #22]
 80140cc:	8af9      	ldrh	r1, [r7, #22]
 80140ce:	b2c9      	uxtb	r1, r1
 80140d0:	4413      	add	r3, r2
 80140d2:	460a      	mov	r2, r1
 80140d4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 80140d8:	8afb      	ldrh	r3, [r7, #22]
 80140da:	3301      	adds	r3, #1
 80140dc:	82fb      	strh	r3, [r7, #22]
 80140de:	8afb      	ldrh	r3, [r7, #22]
 80140e0:	2b43      	cmp	r3, #67	; 0x43
 80140e2:	d9f0      	bls.n	80140c6 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80140e4:	2201      	movs	r2, #1
 80140e6:	2135      	movs	r1, #53	; 0x35
 80140e8:	68b8      	ldr	r0, [r7, #8]
 80140ea:	f7ff fa4d 	bl	8013588 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 80140ee:	79fb      	ldrb	r3, [r7, #7]
 80140f0:	4619      	mov	r1, r3
 80140f2:	68b8      	ldr	r0, [r7, #8]
 80140f4:	f7ff fa82 	bl	80135fc <dhcp_option_byte>
  return ERR_OK;
 80140f8:	2300      	movs	r3, #0
}
 80140fa:	4618      	mov	r0, r3
 80140fc:	371c      	adds	r7, #28
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd90      	pop	{r4, r7, pc}
 8014102:	bf00      	nop
 8014104:	0801a244 	.word	0x0801a244
 8014108:	0801a574 	.word	0x0801a574
 801410c:	0801a2a4 	.word	0x0801a2a4
 8014110:	0801a594 	.word	0x0801a594
 8014114:	0801a5b4 	.word	0x0801a5b4
 8014118:	0801a5dc 	.word	0x0801a5dc
 801411c:	0801a604 	.word	0x0801a604
 8014120:	20008c88 	.word	0x20008c88

08014124 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b082      	sub	sp, #8
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d107      	bne.n	8014142 <dhcp_delete_msg+0x1e>
 8014132:	4b18      	ldr	r3, [pc, #96]	; (8014194 <dhcp_delete_msg+0x70>)
 8014134:	f240 726d 	movw	r2, #1901	; 0x76d
 8014138:	4917      	ldr	r1, [pc, #92]	; (8014198 <dhcp_delete_msg+0x74>)
 801413a:	4818      	ldr	r0, [pc, #96]	; (801419c <dhcp_delete_msg+0x78>)
 801413c:	f002 fd1c 	bl	8016b78 <iprintf>
 8014140:	e024      	b.n	801418c <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	68db      	ldr	r3, [r3, #12]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d106      	bne.n	8014158 <dhcp_delete_msg+0x34>
 801414a:	4b12      	ldr	r3, [pc, #72]	; (8014194 <dhcp_delete_msg+0x70>)
 801414c:	f240 726e 	movw	r2, #1902	; 0x76e
 8014150:	4913      	ldr	r1, [pc, #76]	; (80141a0 <dhcp_delete_msg+0x7c>)
 8014152:	4812      	ldr	r0, [pc, #72]	; (801419c <dhcp_delete_msg+0x78>)
 8014154:	f002 fd10 	bl	8016b78 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	691b      	ldr	r3, [r3, #16]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d106      	bne.n	801416e <dhcp_delete_msg+0x4a>
 8014160:	4b0c      	ldr	r3, [pc, #48]	; (8014194 <dhcp_delete_msg+0x70>)
 8014162:	f240 726f 	movw	r2, #1903	; 0x76f
 8014166:	490f      	ldr	r1, [pc, #60]	; (80141a4 <dhcp_delete_msg+0x80>)
 8014168:	480c      	ldr	r0, [pc, #48]	; (801419c <dhcp_delete_msg+0x78>)
 801416a:	f002 fd05 	bl	8016b78 <iprintf>
  if (dhcp->p_out != NULL) {
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	68db      	ldr	r3, [r3, #12]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d004      	beq.n	8014180 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	68db      	ldr	r3, [r3, #12]
 801417a:	4618      	mov	r0, r3
 801417c:	f7f7 ffec 	bl	800c158 <pbuf_free>
  }
  dhcp->p_out = NULL;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2200      	movs	r2, #0
 8014184:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	2200      	movs	r2, #0
 801418a:	611a      	str	r2, [r3, #16]
}
 801418c:	3708      	adds	r7, #8
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}
 8014192:	bf00      	nop
 8014194:	0801a244 	.word	0x0801a244
 8014198:	0801a644 	.word	0x0801a644
 801419c:	0801a2a4 	.word	0x0801a2a4
 80141a0:	0801a664 	.word	0x0801a664
 80141a4:	0801a68c 	.word	0x0801a68c

080141a8 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b082      	sub	sp, #8
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d107      	bne.n	80141c6 <dhcp_option_trailer+0x1e>
 80141b6:	4b24      	ldr	r3, [pc, #144]	; (8014248 <dhcp_option_trailer+0xa0>)
 80141b8:	f240 7282 	movw	r2, #1922	; 0x782
 80141bc:	4923      	ldr	r1, [pc, #140]	; (801424c <dhcp_option_trailer+0xa4>)
 80141be:	4824      	ldr	r0, [pc, #144]	; (8014250 <dhcp_option_trailer+0xa8>)
 80141c0:	f002 fcda 	bl	8016b78 <iprintf>
 80141c4:	e03c      	b.n	8014240 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	691b      	ldr	r3, [r3, #16]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d106      	bne.n	80141dc <dhcp_option_trailer+0x34>
 80141ce:	4b1e      	ldr	r3, [pc, #120]	; (8014248 <dhcp_option_trailer+0xa0>)
 80141d0:	f240 7283 	movw	r2, #1923	; 0x783
 80141d4:	491f      	ldr	r1, [pc, #124]	; (8014254 <dhcp_option_trailer+0xac>)
 80141d6:	481e      	ldr	r0, [pc, #120]	; (8014250 <dhcp_option_trailer+0xa8>)
 80141d8:	f002 fcce 	bl	8016b78 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	8a9b      	ldrh	r3, [r3, #20]
 80141e0:	2b43      	cmp	r3, #67	; 0x43
 80141e2:	d906      	bls.n	80141f2 <dhcp_option_trailer+0x4a>
 80141e4:	4b18      	ldr	r3, [pc, #96]	; (8014248 <dhcp_option_trailer+0xa0>)
 80141e6:	f240 7284 	movw	r2, #1924	; 0x784
 80141ea:	491b      	ldr	r1, [pc, #108]	; (8014258 <dhcp_option_trailer+0xb0>)
 80141ec:	4818      	ldr	r0, [pc, #96]	; (8014250 <dhcp_option_trailer+0xa8>)
 80141ee:	f002 fcc3 	bl	8016b78 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	691a      	ldr	r2, [r3, #16]
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	8a9b      	ldrh	r3, [r3, #20]
 80141fa:	1c59      	adds	r1, r3, #1
 80141fc:	b288      	uxth	r0, r1
 80141fe:	6879      	ldr	r1, [r7, #4]
 8014200:	8288      	strh	r0, [r1, #20]
 8014202:	4413      	add	r3, r2
 8014204:	22ff      	movs	r2, #255	; 0xff
 8014206:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801420a:	e00b      	b.n	8014224 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	691a      	ldr	r2, [r3, #16]
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	8a9b      	ldrh	r3, [r3, #20]
 8014214:	1c59      	adds	r1, r3, #1
 8014216:	b288      	uxth	r0, r1
 8014218:	6879      	ldr	r1, [r7, #4]
 801421a:	8288      	strh	r0, [r1, #20]
 801421c:	4413      	add	r3, r2
 801421e:	2200      	movs	r2, #0
 8014220:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	8a9b      	ldrh	r3, [r3, #20]
 8014228:	2b43      	cmp	r3, #67	; 0x43
 801422a:	d905      	bls.n	8014238 <dhcp_option_trailer+0x90>
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	8a9b      	ldrh	r3, [r3, #20]
 8014230:	f003 0303 	and.w	r3, r3, #3
 8014234:	2b00      	cmp	r3, #0
 8014236:	d003      	beq.n	8014240 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801423c:	2b43      	cmp	r3, #67	; 0x43
 801423e:	d9e5      	bls.n	801420c <dhcp_option_trailer+0x64>
  }
}
 8014240:	3708      	adds	r7, #8
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}
 8014246:	bf00      	nop
 8014248:	0801a244 	.word	0x0801a244
 801424c:	0801a6b4 	.word	0x0801a6b4
 8014250:	0801a2a4 	.word	0x0801a2a4
 8014254:	0801a6d8 	.word	0x0801a6d8
 8014258:	0801a704 	.word	0x0801a704

0801425c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801425c:	b480      	push	{r7}
 801425e:	b085      	sub	sp, #20
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d017      	beq.n	801429a <dhcp_supplied_address+0x3e>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	6a1b      	ldr	r3, [r3, #32]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d013      	beq.n	801429a <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	6a1b      	ldr	r3, [r3, #32]
 8014276:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	7a5b      	ldrb	r3, [r3, #9]
 801427c:	2b0a      	cmp	r3, #10
 801427e:	d007      	beq.n	8014290 <dhcp_supplied_address+0x34>
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	7a5b      	ldrb	r3, [r3, #9]
 8014284:	2b05      	cmp	r3, #5
 8014286:	d003      	beq.n	8014290 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801428c:	2b04      	cmp	r3, #4
 801428e:	d101      	bne.n	8014294 <dhcp_supplied_address+0x38>
 8014290:	2301      	movs	r3, #1
 8014292:	e000      	b.n	8014296 <dhcp_supplied_address+0x3a>
 8014294:	2300      	movs	r3, #0
 8014296:	b2db      	uxtb	r3, r3
 8014298:	e000      	b.n	801429c <dhcp_supplied_address+0x40>
  }
  return 0;
 801429a:	2300      	movs	r3, #0
}
 801429c:	4618      	mov	r0, r3
 801429e:	3714      	adds	r7, #20
 80142a0:	46bd      	mov	sp, r7
 80142a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a6:	4770      	bx	lr

080142a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80142b0:	4915      	ldr	r1, [pc, #84]	; (8014308 <etharp_free_entry+0x60>)
 80142b2:	687a      	ldr	r2, [r7, #4]
 80142b4:	4613      	mov	r3, r2
 80142b6:	005b      	lsls	r3, r3, #1
 80142b8:	4413      	add	r3, r2
 80142ba:	00db      	lsls	r3, r3, #3
 80142bc:	440b      	add	r3, r1
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d013      	beq.n	80142ec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80142c4:	4910      	ldr	r1, [pc, #64]	; (8014308 <etharp_free_entry+0x60>)
 80142c6:	687a      	ldr	r2, [r7, #4]
 80142c8:	4613      	mov	r3, r2
 80142ca:	005b      	lsls	r3, r3, #1
 80142cc:	4413      	add	r3, r2
 80142ce:	00db      	lsls	r3, r3, #3
 80142d0:	440b      	add	r3, r1
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7f7 ff3f 	bl	800c158 <pbuf_free>
    arp_table[i].q = NULL;
 80142da:	490b      	ldr	r1, [pc, #44]	; (8014308 <etharp_free_entry+0x60>)
 80142dc:	687a      	ldr	r2, [r7, #4]
 80142de:	4613      	mov	r3, r2
 80142e0:	005b      	lsls	r3, r3, #1
 80142e2:	4413      	add	r3, r2
 80142e4:	00db      	lsls	r3, r3, #3
 80142e6:	440b      	add	r3, r1
 80142e8:	2200      	movs	r2, #0
 80142ea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80142ec:	4906      	ldr	r1, [pc, #24]	; (8014308 <etharp_free_entry+0x60>)
 80142ee:	687a      	ldr	r2, [r7, #4]
 80142f0:	4613      	mov	r3, r2
 80142f2:	005b      	lsls	r3, r3, #1
 80142f4:	4413      	add	r3, r2
 80142f6:	00db      	lsls	r3, r3, #3
 80142f8:	440b      	add	r3, r1
 80142fa:	3314      	adds	r3, #20
 80142fc:	2200      	movs	r2, #0
 80142fe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014300:	bf00      	nop
 8014302:	3708      	adds	r7, #8
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}
 8014308:	20008c8c 	.word	0x20008c8c

0801430c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b082      	sub	sp, #8
 8014310:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014312:	2300      	movs	r3, #0
 8014314:	71fb      	strb	r3, [r7, #7]
 8014316:	e096      	b.n	8014446 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014318:	79fa      	ldrb	r2, [r7, #7]
 801431a:	494f      	ldr	r1, [pc, #316]	; (8014458 <etharp_tmr+0x14c>)
 801431c:	4613      	mov	r3, r2
 801431e:	005b      	lsls	r3, r3, #1
 8014320:	4413      	add	r3, r2
 8014322:	00db      	lsls	r3, r3, #3
 8014324:	440b      	add	r3, r1
 8014326:	3314      	adds	r3, #20
 8014328:	781b      	ldrb	r3, [r3, #0]
 801432a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 801432c:	79bb      	ldrb	r3, [r7, #6]
 801432e:	2b00      	cmp	r3, #0
 8014330:	f000 8086 	beq.w	8014440 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8014334:	79fa      	ldrb	r2, [r7, #7]
 8014336:	4948      	ldr	r1, [pc, #288]	; (8014458 <etharp_tmr+0x14c>)
 8014338:	4613      	mov	r3, r2
 801433a:	005b      	lsls	r3, r3, #1
 801433c:	4413      	add	r3, r2
 801433e:	00db      	lsls	r3, r3, #3
 8014340:	440b      	add	r3, r1
 8014342:	3312      	adds	r3, #18
 8014344:	881b      	ldrh	r3, [r3, #0]
 8014346:	3301      	adds	r3, #1
 8014348:	b298      	uxth	r0, r3
 801434a:	4943      	ldr	r1, [pc, #268]	; (8014458 <etharp_tmr+0x14c>)
 801434c:	4613      	mov	r3, r2
 801434e:	005b      	lsls	r3, r3, #1
 8014350:	4413      	add	r3, r2
 8014352:	00db      	lsls	r3, r3, #3
 8014354:	440b      	add	r3, r1
 8014356:	3312      	adds	r3, #18
 8014358:	4602      	mov	r2, r0
 801435a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801435c:	79fa      	ldrb	r2, [r7, #7]
 801435e:	493e      	ldr	r1, [pc, #248]	; (8014458 <etharp_tmr+0x14c>)
 8014360:	4613      	mov	r3, r2
 8014362:	005b      	lsls	r3, r3, #1
 8014364:	4413      	add	r3, r2
 8014366:	00db      	lsls	r3, r3, #3
 8014368:	440b      	add	r3, r1
 801436a:	3312      	adds	r3, #18
 801436c:	881b      	ldrh	r3, [r3, #0]
 801436e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014372:	d215      	bcs.n	80143a0 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014374:	79fa      	ldrb	r2, [r7, #7]
 8014376:	4938      	ldr	r1, [pc, #224]	; (8014458 <etharp_tmr+0x14c>)
 8014378:	4613      	mov	r3, r2
 801437a:	005b      	lsls	r3, r3, #1
 801437c:	4413      	add	r3, r2
 801437e:	00db      	lsls	r3, r3, #3
 8014380:	440b      	add	r3, r1
 8014382:	3314      	adds	r3, #20
 8014384:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014386:	2b01      	cmp	r3, #1
 8014388:	d10f      	bne.n	80143aa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801438a:	79fa      	ldrb	r2, [r7, #7]
 801438c:	4932      	ldr	r1, [pc, #200]	; (8014458 <etharp_tmr+0x14c>)
 801438e:	4613      	mov	r3, r2
 8014390:	005b      	lsls	r3, r3, #1
 8014392:	4413      	add	r3, r2
 8014394:	00db      	lsls	r3, r3, #3
 8014396:	440b      	add	r3, r1
 8014398:	3312      	adds	r3, #18
 801439a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801439c:	2b04      	cmp	r3, #4
 801439e:	d904      	bls.n	80143aa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80143a0:	79fb      	ldrb	r3, [r7, #7]
 80143a2:	4618      	mov	r0, r3
 80143a4:	f7ff ff80 	bl	80142a8 <etharp_free_entry>
 80143a8:	e04a      	b.n	8014440 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80143aa:	79fa      	ldrb	r2, [r7, #7]
 80143ac:	492a      	ldr	r1, [pc, #168]	; (8014458 <etharp_tmr+0x14c>)
 80143ae:	4613      	mov	r3, r2
 80143b0:	005b      	lsls	r3, r3, #1
 80143b2:	4413      	add	r3, r2
 80143b4:	00db      	lsls	r3, r3, #3
 80143b6:	440b      	add	r3, r1
 80143b8:	3314      	adds	r3, #20
 80143ba:	781b      	ldrb	r3, [r3, #0]
 80143bc:	2b03      	cmp	r3, #3
 80143be:	d10a      	bne.n	80143d6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80143c0:	79fa      	ldrb	r2, [r7, #7]
 80143c2:	4925      	ldr	r1, [pc, #148]	; (8014458 <etharp_tmr+0x14c>)
 80143c4:	4613      	mov	r3, r2
 80143c6:	005b      	lsls	r3, r3, #1
 80143c8:	4413      	add	r3, r2
 80143ca:	00db      	lsls	r3, r3, #3
 80143cc:	440b      	add	r3, r1
 80143ce:	3314      	adds	r3, #20
 80143d0:	2204      	movs	r2, #4
 80143d2:	701a      	strb	r2, [r3, #0]
 80143d4:	e034      	b.n	8014440 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80143d6:	79fa      	ldrb	r2, [r7, #7]
 80143d8:	491f      	ldr	r1, [pc, #124]	; (8014458 <etharp_tmr+0x14c>)
 80143da:	4613      	mov	r3, r2
 80143dc:	005b      	lsls	r3, r3, #1
 80143de:	4413      	add	r3, r2
 80143e0:	00db      	lsls	r3, r3, #3
 80143e2:	440b      	add	r3, r1
 80143e4:	3314      	adds	r3, #20
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	2b04      	cmp	r3, #4
 80143ea:	d10a      	bne.n	8014402 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80143ec:	79fa      	ldrb	r2, [r7, #7]
 80143ee:	491a      	ldr	r1, [pc, #104]	; (8014458 <etharp_tmr+0x14c>)
 80143f0:	4613      	mov	r3, r2
 80143f2:	005b      	lsls	r3, r3, #1
 80143f4:	4413      	add	r3, r2
 80143f6:	00db      	lsls	r3, r3, #3
 80143f8:	440b      	add	r3, r1
 80143fa:	3314      	adds	r3, #20
 80143fc:	2202      	movs	r2, #2
 80143fe:	701a      	strb	r2, [r3, #0]
 8014400:	e01e      	b.n	8014440 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014402:	79fa      	ldrb	r2, [r7, #7]
 8014404:	4914      	ldr	r1, [pc, #80]	; (8014458 <etharp_tmr+0x14c>)
 8014406:	4613      	mov	r3, r2
 8014408:	005b      	lsls	r3, r3, #1
 801440a:	4413      	add	r3, r2
 801440c:	00db      	lsls	r3, r3, #3
 801440e:	440b      	add	r3, r1
 8014410:	3314      	adds	r3, #20
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	2b01      	cmp	r3, #1
 8014416:	d113      	bne.n	8014440 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014418:	79fa      	ldrb	r2, [r7, #7]
 801441a:	490f      	ldr	r1, [pc, #60]	; (8014458 <etharp_tmr+0x14c>)
 801441c:	4613      	mov	r3, r2
 801441e:	005b      	lsls	r3, r3, #1
 8014420:	4413      	add	r3, r2
 8014422:	00db      	lsls	r3, r3, #3
 8014424:	440b      	add	r3, r1
 8014426:	3308      	adds	r3, #8
 8014428:	6818      	ldr	r0, [r3, #0]
 801442a:	79fa      	ldrb	r2, [r7, #7]
 801442c:	4613      	mov	r3, r2
 801442e:	005b      	lsls	r3, r3, #1
 8014430:	4413      	add	r3, r2
 8014432:	00db      	lsls	r3, r3, #3
 8014434:	4a08      	ldr	r2, [pc, #32]	; (8014458 <etharp_tmr+0x14c>)
 8014436:	4413      	add	r3, r2
 8014438:	3304      	adds	r3, #4
 801443a:	4619      	mov	r1, r3
 801443c:	f000 fe3c 	bl	80150b8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014440:	79fb      	ldrb	r3, [r7, #7]
 8014442:	3301      	adds	r3, #1
 8014444:	71fb      	strb	r3, [r7, #7]
 8014446:	79fb      	ldrb	r3, [r7, #7]
 8014448:	2b09      	cmp	r3, #9
 801444a:	f67f af65 	bls.w	8014318 <etharp_tmr+0xc>
      }
    }
  }
}
 801444e:	bf00      	nop
 8014450:	3708      	adds	r7, #8
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}
 8014456:	bf00      	nop
 8014458:	20008c8c 	.word	0x20008c8c

0801445c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b088      	sub	sp, #32
 8014460:	af00      	add	r7, sp, #0
 8014462:	60f8      	str	r0, [r7, #12]
 8014464:	460b      	mov	r3, r1
 8014466:	607a      	str	r2, [r7, #4]
 8014468:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801446a:	230a      	movs	r3, #10
 801446c:	77fb      	strb	r3, [r7, #31]
 801446e:	230a      	movs	r3, #10
 8014470:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8014472:	230a      	movs	r3, #10
 8014474:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8014476:	2300      	movs	r3, #0
 8014478:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801447a:	230a      	movs	r3, #10
 801447c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801447e:	2300      	movs	r3, #0
 8014480:	833b      	strh	r3, [r7, #24]
 8014482:	2300      	movs	r3, #0
 8014484:	82fb      	strh	r3, [r7, #22]
 8014486:	2300      	movs	r3, #0
 8014488:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801448a:	2300      	movs	r3, #0
 801448c:	773b      	strb	r3, [r7, #28]
 801448e:	e093      	b.n	80145b8 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8014490:	7f3a      	ldrb	r2, [r7, #28]
 8014492:	4990      	ldr	r1, [pc, #576]	; (80146d4 <etharp_find_entry+0x278>)
 8014494:	4613      	mov	r3, r2
 8014496:	005b      	lsls	r3, r3, #1
 8014498:	4413      	add	r3, r2
 801449a:	00db      	lsls	r3, r3, #3
 801449c:	440b      	add	r3, r1
 801449e:	3314      	adds	r3, #20
 80144a0:	781b      	ldrb	r3, [r3, #0]
 80144a2:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80144a4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80144a8:	2b0a      	cmp	r3, #10
 80144aa:	d105      	bne.n	80144b8 <etharp_find_entry+0x5c>
 80144ac:	7cfb      	ldrb	r3, [r7, #19]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d102      	bne.n	80144b8 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80144b2:	7f3b      	ldrb	r3, [r7, #28]
 80144b4:	777b      	strb	r3, [r7, #29]
 80144b6:	e07c      	b.n	80145b2 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80144b8:	7cfb      	ldrb	r3, [r7, #19]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d079      	beq.n	80145b2 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80144be:	7cfb      	ldrb	r3, [r7, #19]
 80144c0:	2b01      	cmp	r3, #1
 80144c2:	d009      	beq.n	80144d8 <etharp_find_entry+0x7c>
 80144c4:	7cfb      	ldrb	r3, [r7, #19]
 80144c6:	2b01      	cmp	r3, #1
 80144c8:	d806      	bhi.n	80144d8 <etharp_find_entry+0x7c>
 80144ca:	4b83      	ldr	r3, [pc, #524]	; (80146d8 <etharp_find_entry+0x27c>)
 80144cc:	f44f 7293 	mov.w	r2, #294	; 0x126
 80144d0:	4982      	ldr	r1, [pc, #520]	; (80146dc <etharp_find_entry+0x280>)
 80144d2:	4883      	ldr	r0, [pc, #524]	; (80146e0 <etharp_find_entry+0x284>)
 80144d4:	f002 fb50 	bl	8016b78 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d00f      	beq.n	80144fe <etharp_find_entry+0xa2>
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	6819      	ldr	r1, [r3, #0]
 80144e2:	7f3a      	ldrb	r2, [r7, #28]
 80144e4:	487b      	ldr	r0, [pc, #492]	; (80146d4 <etharp_find_entry+0x278>)
 80144e6:	4613      	mov	r3, r2
 80144e8:	005b      	lsls	r3, r3, #1
 80144ea:	4413      	add	r3, r2
 80144ec:	00db      	lsls	r3, r3, #3
 80144ee:	4403      	add	r3, r0
 80144f0:	3304      	adds	r3, #4
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	4299      	cmp	r1, r3
 80144f6:	d102      	bne.n	80144fe <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80144f8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80144fc:	e0e5      	b.n	80146ca <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80144fe:	7cfb      	ldrb	r3, [r7, #19]
 8014500:	2b01      	cmp	r3, #1
 8014502:	d13b      	bne.n	801457c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014504:	7f3a      	ldrb	r2, [r7, #28]
 8014506:	4973      	ldr	r1, [pc, #460]	; (80146d4 <etharp_find_entry+0x278>)
 8014508:	4613      	mov	r3, r2
 801450a:	005b      	lsls	r3, r3, #1
 801450c:	4413      	add	r3, r2
 801450e:	00db      	lsls	r3, r3, #3
 8014510:	440b      	add	r3, r1
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d018      	beq.n	801454a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8014518:	7f3a      	ldrb	r2, [r7, #28]
 801451a:	496e      	ldr	r1, [pc, #440]	; (80146d4 <etharp_find_entry+0x278>)
 801451c:	4613      	mov	r3, r2
 801451e:	005b      	lsls	r3, r3, #1
 8014520:	4413      	add	r3, r2
 8014522:	00db      	lsls	r3, r3, #3
 8014524:	440b      	add	r3, r1
 8014526:	3312      	adds	r3, #18
 8014528:	881b      	ldrh	r3, [r3, #0]
 801452a:	8b3a      	ldrh	r2, [r7, #24]
 801452c:	429a      	cmp	r2, r3
 801452e:	d840      	bhi.n	80145b2 <etharp_find_entry+0x156>
            old_queue = i;
 8014530:	7f3b      	ldrb	r3, [r7, #28]
 8014532:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8014534:	7f3a      	ldrb	r2, [r7, #28]
 8014536:	4967      	ldr	r1, [pc, #412]	; (80146d4 <etharp_find_entry+0x278>)
 8014538:	4613      	mov	r3, r2
 801453a:	005b      	lsls	r3, r3, #1
 801453c:	4413      	add	r3, r2
 801453e:	00db      	lsls	r3, r3, #3
 8014540:	440b      	add	r3, r1
 8014542:	3312      	adds	r3, #18
 8014544:	881b      	ldrh	r3, [r3, #0]
 8014546:	833b      	strh	r3, [r7, #24]
 8014548:	e033      	b.n	80145b2 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801454a:	7f3a      	ldrb	r2, [r7, #28]
 801454c:	4961      	ldr	r1, [pc, #388]	; (80146d4 <etharp_find_entry+0x278>)
 801454e:	4613      	mov	r3, r2
 8014550:	005b      	lsls	r3, r3, #1
 8014552:	4413      	add	r3, r2
 8014554:	00db      	lsls	r3, r3, #3
 8014556:	440b      	add	r3, r1
 8014558:	3312      	adds	r3, #18
 801455a:	881b      	ldrh	r3, [r3, #0]
 801455c:	8afa      	ldrh	r2, [r7, #22]
 801455e:	429a      	cmp	r2, r3
 8014560:	d827      	bhi.n	80145b2 <etharp_find_entry+0x156>
            old_pending = i;
 8014562:	7f3b      	ldrb	r3, [r7, #28]
 8014564:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8014566:	7f3a      	ldrb	r2, [r7, #28]
 8014568:	495a      	ldr	r1, [pc, #360]	; (80146d4 <etharp_find_entry+0x278>)
 801456a:	4613      	mov	r3, r2
 801456c:	005b      	lsls	r3, r3, #1
 801456e:	4413      	add	r3, r2
 8014570:	00db      	lsls	r3, r3, #3
 8014572:	440b      	add	r3, r1
 8014574:	3312      	adds	r3, #18
 8014576:	881b      	ldrh	r3, [r3, #0]
 8014578:	82fb      	strh	r3, [r7, #22]
 801457a:	e01a      	b.n	80145b2 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801457c:	7cfb      	ldrb	r3, [r7, #19]
 801457e:	2b01      	cmp	r3, #1
 8014580:	d917      	bls.n	80145b2 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014582:	7f3a      	ldrb	r2, [r7, #28]
 8014584:	4953      	ldr	r1, [pc, #332]	; (80146d4 <etharp_find_entry+0x278>)
 8014586:	4613      	mov	r3, r2
 8014588:	005b      	lsls	r3, r3, #1
 801458a:	4413      	add	r3, r2
 801458c:	00db      	lsls	r3, r3, #3
 801458e:	440b      	add	r3, r1
 8014590:	3312      	adds	r3, #18
 8014592:	881b      	ldrh	r3, [r3, #0]
 8014594:	8aba      	ldrh	r2, [r7, #20]
 8014596:	429a      	cmp	r2, r3
 8014598:	d80b      	bhi.n	80145b2 <etharp_find_entry+0x156>
            old_stable = i;
 801459a:	7f3b      	ldrb	r3, [r7, #28]
 801459c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801459e:	7f3a      	ldrb	r2, [r7, #28]
 80145a0:	494c      	ldr	r1, [pc, #304]	; (80146d4 <etharp_find_entry+0x278>)
 80145a2:	4613      	mov	r3, r2
 80145a4:	005b      	lsls	r3, r3, #1
 80145a6:	4413      	add	r3, r2
 80145a8:	00db      	lsls	r3, r3, #3
 80145aa:	440b      	add	r3, r1
 80145ac:	3312      	adds	r3, #18
 80145ae:	881b      	ldrh	r3, [r3, #0]
 80145b0:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80145b2:	7f3b      	ldrb	r3, [r7, #28]
 80145b4:	3301      	adds	r3, #1
 80145b6:	773b      	strb	r3, [r7, #28]
 80145b8:	7f3b      	ldrb	r3, [r7, #28]
 80145ba:	2b09      	cmp	r3, #9
 80145bc:	f67f af68 	bls.w	8014490 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80145c0:	7afb      	ldrb	r3, [r7, #11]
 80145c2:	f003 0302 	and.w	r3, r3, #2
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d108      	bne.n	80145dc <etharp_find_entry+0x180>
 80145ca:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80145ce:	2b0a      	cmp	r3, #10
 80145d0:	d107      	bne.n	80145e2 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80145d2:	7afb      	ldrb	r3, [r7, #11]
 80145d4:	f003 0301 	and.w	r3, r3, #1
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d102      	bne.n	80145e2 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80145dc:	f04f 33ff 	mov.w	r3, #4294967295
 80145e0:	e073      	b.n	80146ca <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80145e2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80145e6:	2b09      	cmp	r3, #9
 80145e8:	dc02      	bgt.n	80145f0 <etharp_find_entry+0x194>
    i = empty;
 80145ea:	7f7b      	ldrb	r3, [r7, #29]
 80145ec:	773b      	strb	r3, [r7, #28]
 80145ee:	e036      	b.n	801465e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80145f0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80145f4:	2b09      	cmp	r3, #9
 80145f6:	dc13      	bgt.n	8014620 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80145f8:	7fbb      	ldrb	r3, [r7, #30]
 80145fa:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80145fc:	7f3a      	ldrb	r2, [r7, #28]
 80145fe:	4935      	ldr	r1, [pc, #212]	; (80146d4 <etharp_find_entry+0x278>)
 8014600:	4613      	mov	r3, r2
 8014602:	005b      	lsls	r3, r3, #1
 8014604:	4413      	add	r3, r2
 8014606:	00db      	lsls	r3, r3, #3
 8014608:	440b      	add	r3, r1
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d018      	beq.n	8014642 <etharp_find_entry+0x1e6>
 8014610:	4b31      	ldr	r3, [pc, #196]	; (80146d8 <etharp_find_entry+0x27c>)
 8014612:	f240 126f 	movw	r2, #367	; 0x16f
 8014616:	4933      	ldr	r1, [pc, #204]	; (80146e4 <etharp_find_entry+0x288>)
 8014618:	4831      	ldr	r0, [pc, #196]	; (80146e0 <etharp_find_entry+0x284>)
 801461a:	f002 faad 	bl	8016b78 <iprintf>
 801461e:	e010      	b.n	8014642 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014620:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014624:	2b09      	cmp	r3, #9
 8014626:	dc02      	bgt.n	801462e <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8014628:	7ffb      	ldrb	r3, [r7, #31]
 801462a:	773b      	strb	r3, [r7, #28]
 801462c:	e009      	b.n	8014642 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801462e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014632:	2b09      	cmp	r3, #9
 8014634:	dc02      	bgt.n	801463c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014636:	7efb      	ldrb	r3, [r7, #27]
 8014638:	773b      	strb	r3, [r7, #28]
 801463a:	e002      	b.n	8014642 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 801463c:	f04f 33ff 	mov.w	r3, #4294967295
 8014640:	e043      	b.n	80146ca <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014642:	7f3b      	ldrb	r3, [r7, #28]
 8014644:	2b09      	cmp	r3, #9
 8014646:	d906      	bls.n	8014656 <etharp_find_entry+0x1fa>
 8014648:	4b23      	ldr	r3, [pc, #140]	; (80146d8 <etharp_find_entry+0x27c>)
 801464a:	f240 1281 	movw	r2, #385	; 0x181
 801464e:	4926      	ldr	r1, [pc, #152]	; (80146e8 <etharp_find_entry+0x28c>)
 8014650:	4823      	ldr	r0, [pc, #140]	; (80146e0 <etharp_find_entry+0x284>)
 8014652:	f002 fa91 	bl	8016b78 <iprintf>
    etharp_free_entry(i);
 8014656:	7f3b      	ldrb	r3, [r7, #28]
 8014658:	4618      	mov	r0, r3
 801465a:	f7ff fe25 	bl	80142a8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801465e:	7f3b      	ldrb	r3, [r7, #28]
 8014660:	2b09      	cmp	r3, #9
 8014662:	d906      	bls.n	8014672 <etharp_find_entry+0x216>
 8014664:	4b1c      	ldr	r3, [pc, #112]	; (80146d8 <etharp_find_entry+0x27c>)
 8014666:	f240 1285 	movw	r2, #389	; 0x185
 801466a:	491f      	ldr	r1, [pc, #124]	; (80146e8 <etharp_find_entry+0x28c>)
 801466c:	481c      	ldr	r0, [pc, #112]	; (80146e0 <etharp_find_entry+0x284>)
 801466e:	f002 fa83 	bl	8016b78 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014672:	7f3a      	ldrb	r2, [r7, #28]
 8014674:	4917      	ldr	r1, [pc, #92]	; (80146d4 <etharp_find_entry+0x278>)
 8014676:	4613      	mov	r3, r2
 8014678:	005b      	lsls	r3, r3, #1
 801467a:	4413      	add	r3, r2
 801467c:	00db      	lsls	r3, r3, #3
 801467e:	440b      	add	r3, r1
 8014680:	3314      	adds	r3, #20
 8014682:	781b      	ldrb	r3, [r3, #0]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d006      	beq.n	8014696 <etharp_find_entry+0x23a>
 8014688:	4b13      	ldr	r3, [pc, #76]	; (80146d8 <etharp_find_entry+0x27c>)
 801468a:	f240 1287 	movw	r2, #391	; 0x187
 801468e:	4917      	ldr	r1, [pc, #92]	; (80146ec <etharp_find_entry+0x290>)
 8014690:	4813      	ldr	r0, [pc, #76]	; (80146e0 <etharp_find_entry+0x284>)
 8014692:	f002 fa71 	bl	8016b78 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d00a      	beq.n	80146b2 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801469c:	7f3a      	ldrb	r2, [r7, #28]
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	6819      	ldr	r1, [r3, #0]
 80146a2:	480c      	ldr	r0, [pc, #48]	; (80146d4 <etharp_find_entry+0x278>)
 80146a4:	4613      	mov	r3, r2
 80146a6:	005b      	lsls	r3, r3, #1
 80146a8:	4413      	add	r3, r2
 80146aa:	00db      	lsls	r3, r3, #3
 80146ac:	4403      	add	r3, r0
 80146ae:	3304      	adds	r3, #4
 80146b0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80146b2:	7f3a      	ldrb	r2, [r7, #28]
 80146b4:	4907      	ldr	r1, [pc, #28]	; (80146d4 <etharp_find_entry+0x278>)
 80146b6:	4613      	mov	r3, r2
 80146b8:	005b      	lsls	r3, r3, #1
 80146ba:	4413      	add	r3, r2
 80146bc:	00db      	lsls	r3, r3, #3
 80146be:	440b      	add	r3, r1
 80146c0:	3312      	adds	r3, #18
 80146c2:	2200      	movs	r2, #0
 80146c4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80146c6:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80146ca:	4618      	mov	r0, r3
 80146cc:	3720      	adds	r7, #32
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bd80      	pop	{r7, pc}
 80146d2:	bf00      	nop
 80146d4:	20008c8c 	.word	0x20008c8c
 80146d8:	0801a744 	.word	0x0801a744
 80146dc:	0801a77c 	.word	0x0801a77c
 80146e0:	0801a7bc 	.word	0x0801a7bc
 80146e4:	0801a7e4 	.word	0x0801a7e4
 80146e8:	0801a7fc 	.word	0x0801a7fc
 80146ec:	0801a810 	.word	0x0801a810

080146f0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b088      	sub	sp, #32
 80146f4:	af02      	add	r7, sp, #8
 80146f6:	60f8      	str	r0, [r7, #12]
 80146f8:	60b9      	str	r1, [r7, #8]
 80146fa:	607a      	str	r2, [r7, #4]
 80146fc:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014704:	2b06      	cmp	r3, #6
 8014706:	d006      	beq.n	8014716 <etharp_update_arp_entry+0x26>
 8014708:	4b48      	ldr	r3, [pc, #288]	; (801482c <etharp_update_arp_entry+0x13c>)
 801470a:	f240 12ab 	movw	r2, #427	; 0x1ab
 801470e:	4948      	ldr	r1, [pc, #288]	; (8014830 <etharp_update_arp_entry+0x140>)
 8014710:	4848      	ldr	r0, [pc, #288]	; (8014834 <etharp_update_arp_entry+0x144>)
 8014712:	f002 fa31 	bl	8016b78 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d012      	beq.n	8014742 <etharp_update_arp_entry+0x52>
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d00e      	beq.n	8014742 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	68f9      	ldr	r1, [r7, #12]
 801472a:	4618      	mov	r0, r3
 801472c:	f001 f8fc 	bl	8015928 <ip4_addr_isbroadcast_u32>
 8014730:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014732:	2b00      	cmp	r3, #0
 8014734:	d105      	bne.n	8014742 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014736:	68bb      	ldr	r3, [r7, #8]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801473e:	2be0      	cmp	r3, #224	; 0xe0
 8014740:	d102      	bne.n	8014748 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014742:	f06f 030f 	mvn.w	r3, #15
 8014746:	e06c      	b.n	8014822 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014748:	78fb      	ldrb	r3, [r7, #3]
 801474a:	68fa      	ldr	r2, [r7, #12]
 801474c:	4619      	mov	r1, r3
 801474e:	68b8      	ldr	r0, [r7, #8]
 8014750:	f7ff fe84 	bl	801445c <etharp_find_entry>
 8014754:	4603      	mov	r3, r0
 8014756:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801475c:	2b00      	cmp	r3, #0
 801475e:	da02      	bge.n	8014766 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014760:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014764:	e05d      	b.n	8014822 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014766:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801476a:	4933      	ldr	r1, [pc, #204]	; (8014838 <etharp_update_arp_entry+0x148>)
 801476c:	4613      	mov	r3, r2
 801476e:	005b      	lsls	r3, r3, #1
 8014770:	4413      	add	r3, r2
 8014772:	00db      	lsls	r3, r3, #3
 8014774:	440b      	add	r3, r1
 8014776:	3314      	adds	r3, #20
 8014778:	2202      	movs	r2, #2
 801477a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801477c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014780:	492d      	ldr	r1, [pc, #180]	; (8014838 <etharp_update_arp_entry+0x148>)
 8014782:	4613      	mov	r3, r2
 8014784:	005b      	lsls	r3, r3, #1
 8014786:	4413      	add	r3, r2
 8014788:	00db      	lsls	r3, r3, #3
 801478a:	440b      	add	r3, r1
 801478c:	3308      	adds	r3, #8
 801478e:	68fa      	ldr	r2, [r7, #12]
 8014790:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8014792:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014796:	4613      	mov	r3, r2
 8014798:	005b      	lsls	r3, r3, #1
 801479a:	4413      	add	r3, r2
 801479c:	00db      	lsls	r3, r3, #3
 801479e:	3308      	adds	r3, #8
 80147a0:	4a25      	ldr	r2, [pc, #148]	; (8014838 <etharp_update_arp_entry+0x148>)
 80147a2:	4413      	add	r3, r2
 80147a4:	3304      	adds	r3, #4
 80147a6:	2206      	movs	r2, #6
 80147a8:	6879      	ldr	r1, [r7, #4]
 80147aa:	4618      	mov	r0, r3
 80147ac:	f002 f9d1 	bl	8016b52 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80147b0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80147b4:	4920      	ldr	r1, [pc, #128]	; (8014838 <etharp_update_arp_entry+0x148>)
 80147b6:	4613      	mov	r3, r2
 80147b8:	005b      	lsls	r3, r3, #1
 80147ba:	4413      	add	r3, r2
 80147bc:	00db      	lsls	r3, r3, #3
 80147be:	440b      	add	r3, r1
 80147c0:	3312      	adds	r3, #18
 80147c2:	2200      	movs	r2, #0
 80147c4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80147c6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80147ca:	491b      	ldr	r1, [pc, #108]	; (8014838 <etharp_update_arp_entry+0x148>)
 80147cc:	4613      	mov	r3, r2
 80147ce:	005b      	lsls	r3, r3, #1
 80147d0:	4413      	add	r3, r2
 80147d2:	00db      	lsls	r3, r3, #3
 80147d4:	440b      	add	r3, r1
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d021      	beq.n	8014820 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80147dc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80147e0:	4915      	ldr	r1, [pc, #84]	; (8014838 <etharp_update_arp_entry+0x148>)
 80147e2:	4613      	mov	r3, r2
 80147e4:	005b      	lsls	r3, r3, #1
 80147e6:	4413      	add	r3, r2
 80147e8:	00db      	lsls	r3, r3, #3
 80147ea:	440b      	add	r3, r1
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80147f0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80147f4:	4910      	ldr	r1, [pc, #64]	; (8014838 <etharp_update_arp_entry+0x148>)
 80147f6:	4613      	mov	r3, r2
 80147f8:	005b      	lsls	r3, r3, #1
 80147fa:	4413      	add	r3, r2
 80147fc:	00db      	lsls	r3, r3, #3
 80147fe:	440b      	add	r3, r1
 8014800:	2200      	movs	r2, #0
 8014802:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	f103 0229 	add.w	r2, r3, #41	; 0x29
 801480a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801480e:	9300      	str	r3, [sp, #0]
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6939      	ldr	r1, [r7, #16]
 8014814:	68f8      	ldr	r0, [r7, #12]
 8014816:	f001 ff29 	bl	801666c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801481a:	6938      	ldr	r0, [r7, #16]
 801481c:	f7f7 fc9c 	bl	800c158 <pbuf_free>
  }
  return ERR_OK;
 8014820:	2300      	movs	r3, #0
}
 8014822:	4618      	mov	r0, r3
 8014824:	3718      	adds	r7, #24
 8014826:	46bd      	mov	sp, r7
 8014828:	bd80      	pop	{r7, pc}
 801482a:	bf00      	nop
 801482c:	0801a744 	.word	0x0801a744
 8014830:	0801a83c 	.word	0x0801a83c
 8014834:	0801a7bc 	.word	0x0801a7bc
 8014838:	20008c8c 	.word	0x20008c8c

0801483c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b084      	sub	sp, #16
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014844:	2300      	movs	r3, #0
 8014846:	73fb      	strb	r3, [r7, #15]
 8014848:	e01f      	b.n	801488a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801484a:	7bfa      	ldrb	r2, [r7, #15]
 801484c:	4912      	ldr	r1, [pc, #72]	; (8014898 <etharp_cleanup_netif+0x5c>)
 801484e:	4613      	mov	r3, r2
 8014850:	005b      	lsls	r3, r3, #1
 8014852:	4413      	add	r3, r2
 8014854:	00db      	lsls	r3, r3, #3
 8014856:	440b      	add	r3, r1
 8014858:	3314      	adds	r3, #20
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801485e:	7bbb      	ldrb	r3, [r7, #14]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d00f      	beq.n	8014884 <etharp_cleanup_netif+0x48>
 8014864:	7bfa      	ldrb	r2, [r7, #15]
 8014866:	490c      	ldr	r1, [pc, #48]	; (8014898 <etharp_cleanup_netif+0x5c>)
 8014868:	4613      	mov	r3, r2
 801486a:	005b      	lsls	r3, r3, #1
 801486c:	4413      	add	r3, r2
 801486e:	00db      	lsls	r3, r3, #3
 8014870:	440b      	add	r3, r1
 8014872:	3308      	adds	r3, #8
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	429a      	cmp	r2, r3
 801487a:	d103      	bne.n	8014884 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 801487c:	7bfb      	ldrb	r3, [r7, #15]
 801487e:	4618      	mov	r0, r3
 8014880:	f7ff fd12 	bl	80142a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014884:	7bfb      	ldrb	r3, [r7, #15]
 8014886:	3301      	adds	r3, #1
 8014888:	73fb      	strb	r3, [r7, #15]
 801488a:	7bfb      	ldrb	r3, [r7, #15]
 801488c:	2b09      	cmp	r3, #9
 801488e:	d9dc      	bls.n	801484a <etharp_cleanup_netif+0xe>
    }
  }
}
 8014890:	bf00      	nop
 8014892:	3710      	adds	r7, #16
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}
 8014898:	20008c8c 	.word	0x20008c8c

0801489c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801489c:	b5b0      	push	{r4, r5, r7, lr}
 801489e:	b08a      	sub	sp, #40	; 0x28
 80148a0:	af04      	add	r7, sp, #16
 80148a2:	6078      	str	r0, [r7, #4]
 80148a4:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d107      	bne.n	80148bc <etharp_input+0x20>
 80148ac:	4b3f      	ldr	r3, [pc, #252]	; (80149ac <etharp_input+0x110>)
 80148ae:	f44f 7222 	mov.w	r2, #648	; 0x288
 80148b2:	493f      	ldr	r1, [pc, #252]	; (80149b0 <etharp_input+0x114>)
 80148b4:	483f      	ldr	r0, [pc, #252]	; (80149b4 <etharp_input+0x118>)
 80148b6:	f002 f95f 	bl	8016b78 <iprintf>
 80148ba:	e074      	b.n	80149a6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	685b      	ldr	r3, [r3, #4]
 80148c0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80148c2:	693b      	ldr	r3, [r7, #16]
 80148c4:	881b      	ldrh	r3, [r3, #0]
 80148c6:	b29b      	uxth	r3, r3
 80148c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80148cc:	d10c      	bne.n	80148e8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80148d2:	2b06      	cmp	r3, #6
 80148d4:	d108      	bne.n	80148e8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80148d6:	693b      	ldr	r3, [r7, #16]
 80148d8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80148da:	2b04      	cmp	r3, #4
 80148dc:	d104      	bne.n	80148e8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	885b      	ldrh	r3, [r3, #2]
 80148e2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80148e4:	2b08      	cmp	r3, #8
 80148e6:	d003      	beq.n	80148f0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f7f7 fc35 	bl	800c158 <pbuf_free>
    return;
 80148ee:	e05a      	b.n	80149a6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80148f0:	693b      	ldr	r3, [r7, #16]
 80148f2:	330e      	adds	r3, #14
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80148f8:	693b      	ldr	r3, [r7, #16]
 80148fa:	3318      	adds	r3, #24
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	3304      	adds	r3, #4
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d102      	bne.n	8014910 <etharp_input+0x74>
    for_us = 0;
 801490a:	2300      	movs	r3, #0
 801490c:	75fb      	strb	r3, [r7, #23]
 801490e:	e009      	b.n	8014924 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014910:	68ba      	ldr	r2, [r7, #8]
 8014912:	683b      	ldr	r3, [r7, #0]
 8014914:	3304      	adds	r3, #4
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	429a      	cmp	r2, r3
 801491a:	bf0c      	ite	eq
 801491c:	2301      	moveq	r3, #1
 801491e:	2300      	movne	r3, #0
 8014920:	b2db      	uxtb	r3, r3
 8014922:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014924:	693b      	ldr	r3, [r7, #16]
 8014926:	f103 0208 	add.w	r2, r3, #8
 801492a:	7dfb      	ldrb	r3, [r7, #23]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d001      	beq.n	8014934 <etharp_input+0x98>
 8014930:	2301      	movs	r3, #1
 8014932:	e000      	b.n	8014936 <etharp_input+0x9a>
 8014934:	2302      	movs	r3, #2
 8014936:	f107 010c 	add.w	r1, r7, #12
 801493a:	6838      	ldr	r0, [r7, #0]
 801493c:	f7ff fed8 	bl	80146f0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	88db      	ldrh	r3, [r3, #6]
 8014944:	b29b      	uxth	r3, r3
 8014946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801494a:	d003      	beq.n	8014954 <etharp_input+0xb8>
 801494c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014950:	d01e      	beq.n	8014990 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8014952:	e025      	b.n	80149a0 <etharp_input+0x104>
    if (for_us) {
 8014954:	7dfb      	ldrb	r3, [r7, #23]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d021      	beq.n	801499e <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8014960:	693b      	ldr	r3, [r7, #16]
 8014962:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	f103 0529 	add.w	r5, r3, #41	; 0x29
 801496c:	683b      	ldr	r3, [r7, #0]
 801496e:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8014970:	693a      	ldr	r2, [r7, #16]
 8014972:	3208      	adds	r2, #8
      etharp_raw(netif,
 8014974:	2102      	movs	r1, #2
 8014976:	9103      	str	r1, [sp, #12]
 8014978:	f107 010c 	add.w	r1, r7, #12
 801497c:	9102      	str	r1, [sp, #8]
 801497e:	9201      	str	r2, [sp, #4]
 8014980:	9300      	str	r3, [sp, #0]
 8014982:	462b      	mov	r3, r5
 8014984:	4622      	mov	r2, r4
 8014986:	4601      	mov	r1, r0
 8014988:	6838      	ldr	r0, [r7, #0]
 801498a:	f000 fae7 	bl	8014f5c <etharp_raw>
    break;
 801498e:	e006      	b.n	801499e <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 8014990:	f107 030c 	add.w	r3, r7, #12
 8014994:	4619      	mov	r1, r3
 8014996:	6838      	ldr	r0, [r7, #0]
 8014998:	f7fe f980 	bl	8012c9c <dhcp_arp_reply>
    break;
 801499c:	e000      	b.n	80149a0 <etharp_input+0x104>
    break;
 801499e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	f7f7 fbd9 	bl	800c158 <pbuf_free>
}
 80149a6:	3718      	adds	r7, #24
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bdb0      	pop	{r4, r5, r7, pc}
 80149ac:	0801a744 	.word	0x0801a744
 80149b0:	0801a894 	.word	0x0801a894
 80149b4:	0801a7bc 	.word	0x0801a7bc

080149b8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b086      	sub	sp, #24
 80149bc:	af02      	add	r7, sp, #8
 80149be:	60f8      	str	r0, [r7, #12]
 80149c0:	60b9      	str	r1, [r7, #8]
 80149c2:	4613      	mov	r3, r2
 80149c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80149c6:	79fa      	ldrb	r2, [r7, #7]
 80149c8:	4944      	ldr	r1, [pc, #272]	; (8014adc <etharp_output_to_arp_index+0x124>)
 80149ca:	4613      	mov	r3, r2
 80149cc:	005b      	lsls	r3, r3, #1
 80149ce:	4413      	add	r3, r2
 80149d0:	00db      	lsls	r3, r3, #3
 80149d2:	440b      	add	r3, r1
 80149d4:	3314      	adds	r3, #20
 80149d6:	781b      	ldrb	r3, [r3, #0]
 80149d8:	2b01      	cmp	r3, #1
 80149da:	d806      	bhi.n	80149ea <etharp_output_to_arp_index+0x32>
 80149dc:	4b40      	ldr	r3, [pc, #256]	; (8014ae0 <etharp_output_to_arp_index+0x128>)
 80149de:	f240 22ed 	movw	r2, #749	; 0x2ed
 80149e2:	4940      	ldr	r1, [pc, #256]	; (8014ae4 <etharp_output_to_arp_index+0x12c>)
 80149e4:	4840      	ldr	r0, [pc, #256]	; (8014ae8 <etharp_output_to_arp_index+0x130>)
 80149e6:	f002 f8c7 	bl	8016b78 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80149ea:	79fa      	ldrb	r2, [r7, #7]
 80149ec:	493b      	ldr	r1, [pc, #236]	; (8014adc <etharp_output_to_arp_index+0x124>)
 80149ee:	4613      	mov	r3, r2
 80149f0:	005b      	lsls	r3, r3, #1
 80149f2:	4413      	add	r3, r2
 80149f4:	00db      	lsls	r3, r3, #3
 80149f6:	440b      	add	r3, r1
 80149f8:	3314      	adds	r3, #20
 80149fa:	781b      	ldrb	r3, [r3, #0]
 80149fc:	2b02      	cmp	r3, #2
 80149fe:	d153      	bne.n	8014aa8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014a00:	79fa      	ldrb	r2, [r7, #7]
 8014a02:	4936      	ldr	r1, [pc, #216]	; (8014adc <etharp_output_to_arp_index+0x124>)
 8014a04:	4613      	mov	r3, r2
 8014a06:	005b      	lsls	r3, r3, #1
 8014a08:	4413      	add	r3, r2
 8014a0a:	00db      	lsls	r3, r3, #3
 8014a0c:	440b      	add	r3, r1
 8014a0e:	3312      	adds	r3, #18
 8014a10:	881b      	ldrh	r3, [r3, #0]
 8014a12:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014a16:	d919      	bls.n	8014a4c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014a18:	79fa      	ldrb	r2, [r7, #7]
 8014a1a:	4613      	mov	r3, r2
 8014a1c:	005b      	lsls	r3, r3, #1
 8014a1e:	4413      	add	r3, r2
 8014a20:	00db      	lsls	r3, r3, #3
 8014a22:	4a2e      	ldr	r2, [pc, #184]	; (8014adc <etharp_output_to_arp_index+0x124>)
 8014a24:	4413      	add	r3, r2
 8014a26:	3304      	adds	r3, #4
 8014a28:	4619      	mov	r1, r3
 8014a2a:	68f8      	ldr	r0, [r7, #12]
 8014a2c:	f000 fb44 	bl	80150b8 <etharp_request>
 8014a30:	4603      	mov	r3, r0
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d138      	bne.n	8014aa8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014a36:	79fa      	ldrb	r2, [r7, #7]
 8014a38:	4928      	ldr	r1, [pc, #160]	; (8014adc <etharp_output_to_arp_index+0x124>)
 8014a3a:	4613      	mov	r3, r2
 8014a3c:	005b      	lsls	r3, r3, #1
 8014a3e:	4413      	add	r3, r2
 8014a40:	00db      	lsls	r3, r3, #3
 8014a42:	440b      	add	r3, r1
 8014a44:	3314      	adds	r3, #20
 8014a46:	2203      	movs	r2, #3
 8014a48:	701a      	strb	r2, [r3, #0]
 8014a4a:	e02d      	b.n	8014aa8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014a4c:	79fa      	ldrb	r2, [r7, #7]
 8014a4e:	4923      	ldr	r1, [pc, #140]	; (8014adc <etharp_output_to_arp_index+0x124>)
 8014a50:	4613      	mov	r3, r2
 8014a52:	005b      	lsls	r3, r3, #1
 8014a54:	4413      	add	r3, r2
 8014a56:	00db      	lsls	r3, r3, #3
 8014a58:	440b      	add	r3, r1
 8014a5a:	3312      	adds	r3, #18
 8014a5c:	881b      	ldrh	r3, [r3, #0]
 8014a5e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014a62:	d321      	bcc.n	8014aa8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014a64:	79fa      	ldrb	r2, [r7, #7]
 8014a66:	4613      	mov	r3, r2
 8014a68:	005b      	lsls	r3, r3, #1
 8014a6a:	4413      	add	r3, r2
 8014a6c:	00db      	lsls	r3, r3, #3
 8014a6e:	4a1b      	ldr	r2, [pc, #108]	; (8014adc <etharp_output_to_arp_index+0x124>)
 8014a70:	4413      	add	r3, r2
 8014a72:	1d19      	adds	r1, r3, #4
 8014a74:	79fa      	ldrb	r2, [r7, #7]
 8014a76:	4613      	mov	r3, r2
 8014a78:	005b      	lsls	r3, r3, #1
 8014a7a:	4413      	add	r3, r2
 8014a7c:	00db      	lsls	r3, r3, #3
 8014a7e:	3308      	adds	r3, #8
 8014a80:	4a16      	ldr	r2, [pc, #88]	; (8014adc <etharp_output_to_arp_index+0x124>)
 8014a82:	4413      	add	r3, r2
 8014a84:	3304      	adds	r3, #4
 8014a86:	461a      	mov	r2, r3
 8014a88:	68f8      	ldr	r0, [r7, #12]
 8014a8a:	f000 faf3 	bl	8015074 <etharp_request_dst>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d109      	bne.n	8014aa8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014a94:	79fa      	ldrb	r2, [r7, #7]
 8014a96:	4911      	ldr	r1, [pc, #68]	; (8014adc <etharp_output_to_arp_index+0x124>)
 8014a98:	4613      	mov	r3, r2
 8014a9a:	005b      	lsls	r3, r3, #1
 8014a9c:	4413      	add	r3, r2
 8014a9e:	00db      	lsls	r3, r3, #3
 8014aa0:	440b      	add	r3, r1
 8014aa2:	3314      	adds	r3, #20
 8014aa4:	2203      	movs	r2, #3
 8014aa6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8014aae:	79fa      	ldrb	r2, [r7, #7]
 8014ab0:	4613      	mov	r3, r2
 8014ab2:	005b      	lsls	r3, r3, #1
 8014ab4:	4413      	add	r3, r2
 8014ab6:	00db      	lsls	r3, r3, #3
 8014ab8:	3308      	adds	r3, #8
 8014aba:	4a08      	ldr	r2, [pc, #32]	; (8014adc <etharp_output_to_arp_index+0x124>)
 8014abc:	4413      	add	r3, r2
 8014abe:	1d1a      	adds	r2, r3, #4
 8014ac0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014ac4:	9300      	str	r3, [sp, #0]
 8014ac6:	4613      	mov	r3, r2
 8014ac8:	460a      	mov	r2, r1
 8014aca:	68b9      	ldr	r1, [r7, #8]
 8014acc:	68f8      	ldr	r0, [r7, #12]
 8014ace:	f001 fdcd 	bl	801666c <ethernet_output>
 8014ad2:	4603      	mov	r3, r0
}
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	3710      	adds	r7, #16
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}
 8014adc:	20008c8c 	.word	0x20008c8c
 8014ae0:	0801a744 	.word	0x0801a744
 8014ae4:	0801a8b4 	.word	0x0801a8b4
 8014ae8:	0801a7bc 	.word	0x0801a7bc

08014aec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b08a      	sub	sp, #40	; 0x28
 8014af0:	af02      	add	r7, sp, #8
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d106      	bne.n	8014b10 <etharp_output+0x24>
 8014b02:	4b69      	ldr	r3, [pc, #420]	; (8014ca8 <etharp_output+0x1bc>)
 8014b04:	f240 321b 	movw	r2, #795	; 0x31b
 8014b08:	4968      	ldr	r1, [pc, #416]	; (8014cac <etharp_output+0x1c0>)
 8014b0a:	4869      	ldr	r0, [pc, #420]	; (8014cb0 <etharp_output+0x1c4>)
 8014b0c:	f002 f834 	bl	8016b78 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d106      	bne.n	8014b24 <etharp_output+0x38>
 8014b16:	4b64      	ldr	r3, [pc, #400]	; (8014ca8 <etharp_output+0x1bc>)
 8014b18:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014b1c:	4965      	ldr	r1, [pc, #404]	; (8014cb4 <etharp_output+0x1c8>)
 8014b1e:	4864      	ldr	r0, [pc, #400]	; (8014cb0 <etharp_output+0x1c4>)
 8014b20:	f002 f82a 	bl	8016b78 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d106      	bne.n	8014b38 <etharp_output+0x4c>
 8014b2a:	4b5f      	ldr	r3, [pc, #380]	; (8014ca8 <etharp_output+0x1bc>)
 8014b2c:	f240 321d 	movw	r2, #797	; 0x31d
 8014b30:	4961      	ldr	r1, [pc, #388]	; (8014cb8 <etharp_output+0x1cc>)
 8014b32:	485f      	ldr	r0, [pc, #380]	; (8014cb0 <etharp_output+0x1c4>)
 8014b34:	f002 f820 	bl	8016b78 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	68f9      	ldr	r1, [r7, #12]
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f000 fef2 	bl	8015928 <ip4_addr_isbroadcast_u32>
 8014b44:	4603      	mov	r3, r0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d002      	beq.n	8014b50 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014b4a:	4b5c      	ldr	r3, [pc, #368]	; (8014cbc <etharp_output+0x1d0>)
 8014b4c:	61fb      	str	r3, [r7, #28]
 8014b4e:	e09b      	b.n	8014c88 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014b58:	2be0      	cmp	r3, #224	; 0xe0
 8014b5a:	d118      	bne.n	8014b8e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014b5c:	2301      	movs	r3, #1
 8014b5e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014b60:	2300      	movs	r3, #0
 8014b62:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014b64:	235e      	movs	r3, #94	; 0x5e
 8014b66:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	3301      	adds	r3, #1
 8014b6c:	781b      	ldrb	r3, [r3, #0]
 8014b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b72:	b2db      	uxtb	r3, r3
 8014b74:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	3302      	adds	r3, #2
 8014b7a:	781b      	ldrb	r3, [r3, #0]
 8014b7c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	3303      	adds	r3, #3
 8014b82:	781b      	ldrb	r3, [r3, #0]
 8014b84:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014b86:	f107 0310 	add.w	r3, r7, #16
 8014b8a:	61fb      	str	r3, [r7, #28]
 8014b8c:	e07c      	b.n	8014c88 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	681a      	ldr	r2, [r3, #0]
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	3304      	adds	r3, #4
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	405a      	eors	r2, r3
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	3308      	adds	r3, #8
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	4013      	ands	r3, r2
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d012      	beq.n	8014bcc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014bac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014bb0:	4293      	cmp	r3, r2
 8014bb2:	d00b      	beq.n	8014bcc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	330c      	adds	r3, #12
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d003      	beq.n	8014bc6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	330c      	adds	r3, #12
 8014bc2:	61bb      	str	r3, [r7, #24]
 8014bc4:	e002      	b.n	8014bcc <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014bc6:	f06f 0303 	mvn.w	r3, #3
 8014bca:	e069      	b.n	8014ca0 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014bcc:	4b3c      	ldr	r3, [pc, #240]	; (8014cc0 <etharp_output+0x1d4>)
 8014bce:	781b      	ldrb	r3, [r3, #0]
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	4a3c      	ldr	r2, [pc, #240]	; (8014cc4 <etharp_output+0x1d8>)
 8014bd4:	460b      	mov	r3, r1
 8014bd6:	005b      	lsls	r3, r3, #1
 8014bd8:	440b      	add	r3, r1
 8014bda:	00db      	lsls	r3, r3, #3
 8014bdc:	4413      	add	r3, r2
 8014bde:	3314      	adds	r3, #20
 8014be0:	781b      	ldrb	r3, [r3, #0]
 8014be2:	2b01      	cmp	r3, #1
 8014be4:	d917      	bls.n	8014c16 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014be6:	69bb      	ldr	r3, [r7, #24]
 8014be8:	681a      	ldr	r2, [r3, #0]
 8014bea:	4b35      	ldr	r3, [pc, #212]	; (8014cc0 <etharp_output+0x1d4>)
 8014bec:	781b      	ldrb	r3, [r3, #0]
 8014bee:	4618      	mov	r0, r3
 8014bf0:	4934      	ldr	r1, [pc, #208]	; (8014cc4 <etharp_output+0x1d8>)
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	005b      	lsls	r3, r3, #1
 8014bf6:	4403      	add	r3, r0
 8014bf8:	00db      	lsls	r3, r3, #3
 8014bfa:	440b      	add	r3, r1
 8014bfc:	3304      	adds	r3, #4
 8014bfe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014c00:	429a      	cmp	r2, r3
 8014c02:	d108      	bne.n	8014c16 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014c04:	4b2e      	ldr	r3, [pc, #184]	; (8014cc0 <etharp_output+0x1d4>)
 8014c06:	781b      	ldrb	r3, [r3, #0]
 8014c08:	461a      	mov	r2, r3
 8014c0a:	68b9      	ldr	r1, [r7, #8]
 8014c0c:	68f8      	ldr	r0, [r7, #12]
 8014c0e:	f7ff fed3 	bl	80149b8 <etharp_output_to_arp_index>
 8014c12:	4603      	mov	r3, r0
 8014c14:	e044      	b.n	8014ca0 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014c16:	2300      	movs	r3, #0
 8014c18:	75fb      	strb	r3, [r7, #23]
 8014c1a:	e02a      	b.n	8014c72 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014c1c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014c20:	4928      	ldr	r1, [pc, #160]	; (8014cc4 <etharp_output+0x1d8>)
 8014c22:	4613      	mov	r3, r2
 8014c24:	005b      	lsls	r3, r3, #1
 8014c26:	4413      	add	r3, r2
 8014c28:	00db      	lsls	r3, r3, #3
 8014c2a:	440b      	add	r3, r1
 8014c2c:	3314      	adds	r3, #20
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	2b01      	cmp	r3, #1
 8014c32:	d918      	bls.n	8014c66 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014c34:	69bb      	ldr	r3, [r7, #24]
 8014c36:	6819      	ldr	r1, [r3, #0]
 8014c38:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014c3c:	4821      	ldr	r0, [pc, #132]	; (8014cc4 <etharp_output+0x1d8>)
 8014c3e:	4613      	mov	r3, r2
 8014c40:	005b      	lsls	r3, r3, #1
 8014c42:	4413      	add	r3, r2
 8014c44:	00db      	lsls	r3, r3, #3
 8014c46:	4403      	add	r3, r0
 8014c48:	3304      	adds	r3, #4
 8014c4a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014c4c:	4299      	cmp	r1, r3
 8014c4e:	d10a      	bne.n	8014c66 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8014c50:	7dfa      	ldrb	r2, [r7, #23]
 8014c52:	4b1b      	ldr	r3, [pc, #108]	; (8014cc0 <etharp_output+0x1d4>)
 8014c54:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014c56:	7dfb      	ldrb	r3, [r7, #23]
 8014c58:	461a      	mov	r2, r3
 8014c5a:	68b9      	ldr	r1, [r7, #8]
 8014c5c:	68f8      	ldr	r0, [r7, #12]
 8014c5e:	f7ff feab 	bl	80149b8 <etharp_output_to_arp_index>
 8014c62:	4603      	mov	r3, r0
 8014c64:	e01c      	b.n	8014ca0 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014c6a:	b2db      	uxtb	r3, r3
 8014c6c:	3301      	adds	r3, #1
 8014c6e:	b2db      	uxtb	r3, r3
 8014c70:	75fb      	strb	r3, [r7, #23]
 8014c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014c76:	2b09      	cmp	r3, #9
 8014c78:	ddd0      	ble.n	8014c1c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014c7a:	68ba      	ldr	r2, [r7, #8]
 8014c7c:	69b9      	ldr	r1, [r7, #24]
 8014c7e:	68f8      	ldr	r0, [r7, #12]
 8014c80:	f000 f822 	bl	8014cc8 <etharp_query>
 8014c84:	4603      	mov	r3, r0
 8014c86:	e00b      	b.n	8014ca0 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8014c8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c92:	9300      	str	r3, [sp, #0]
 8014c94:	69fb      	ldr	r3, [r7, #28]
 8014c96:	68b9      	ldr	r1, [r7, #8]
 8014c98:	68f8      	ldr	r0, [r7, #12]
 8014c9a:	f001 fce7 	bl	801666c <ethernet_output>
 8014c9e:	4603      	mov	r3, r0
}
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	3720      	adds	r7, #32
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bd80      	pop	{r7, pc}
 8014ca8:	0801a744 	.word	0x0801a744
 8014cac:	0801a894 	.word	0x0801a894
 8014cb0:	0801a7bc 	.word	0x0801a7bc
 8014cb4:	0801a8e4 	.word	0x0801a8e4
 8014cb8:	0801a884 	.word	0x0801a884
 8014cbc:	080262dc 	.word	0x080262dc
 8014cc0:	20008d7c 	.word	0x20008d7c
 8014cc4:	20008c8c 	.word	0x20008c8c

08014cc8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b08c      	sub	sp, #48	; 0x30
 8014ccc:	af02      	add	r7, sp, #8
 8014cce:	60f8      	str	r0, [r7, #12]
 8014cd0:	60b9      	str	r1, [r7, #8]
 8014cd2:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	3329      	adds	r3, #41	; 0x29
 8014cd8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014cda:	23ff      	movs	r3, #255	; 0xff
 8014cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	68f9      	ldr	r1, [r7, #12]
 8014cea:	4618      	mov	r0, r3
 8014cec:	f000 fe1c 	bl	8015928 <ip4_addr_isbroadcast_u32>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d10c      	bne.n	8014d10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014cf6:	68bb      	ldr	r3, [r7, #8]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014cfe:	2be0      	cmp	r3, #224	; 0xe0
 8014d00:	d006      	beq.n	8014d10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d003      	beq.n	8014d10 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014d08:	68bb      	ldr	r3, [r7, #8]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d102      	bne.n	8014d16 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014d10:	f06f 030f 	mvn.w	r3, #15
 8014d14:	e10f      	b.n	8014f36 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014d16:	68fa      	ldr	r2, [r7, #12]
 8014d18:	2101      	movs	r1, #1
 8014d1a:	68b8      	ldr	r0, [r7, #8]
 8014d1c:	f7ff fb9e 	bl	801445c <etharp_find_entry>
 8014d20:	4603      	mov	r3, r0
 8014d22:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8014d24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	da02      	bge.n	8014d32 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8014d2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014d30:	e101      	b.n	8014f36 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014d32:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014d36:	4982      	ldr	r1, [pc, #520]	; (8014f40 <etharp_query+0x278>)
 8014d38:	4613      	mov	r3, r2
 8014d3a:	005b      	lsls	r3, r3, #1
 8014d3c:	4413      	add	r3, r2
 8014d3e:	00db      	lsls	r3, r3, #3
 8014d40:	440b      	add	r3, r1
 8014d42:	3314      	adds	r3, #20
 8014d44:	781b      	ldrb	r3, [r3, #0]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d117      	bne.n	8014d7a <etharp_query+0xb2>
    is_new_entry = 1;
 8014d4a:	2301      	movs	r3, #1
 8014d4c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014d4e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014d52:	497b      	ldr	r1, [pc, #492]	; (8014f40 <etharp_query+0x278>)
 8014d54:	4613      	mov	r3, r2
 8014d56:	005b      	lsls	r3, r3, #1
 8014d58:	4413      	add	r3, r2
 8014d5a:	00db      	lsls	r3, r3, #3
 8014d5c:	440b      	add	r3, r1
 8014d5e:	3314      	adds	r3, #20
 8014d60:	2201      	movs	r2, #1
 8014d62:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014d64:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014d68:	4975      	ldr	r1, [pc, #468]	; (8014f40 <etharp_query+0x278>)
 8014d6a:	4613      	mov	r3, r2
 8014d6c:	005b      	lsls	r3, r3, #1
 8014d6e:	4413      	add	r3, r2
 8014d70:	00db      	lsls	r3, r3, #3
 8014d72:	440b      	add	r3, r1
 8014d74:	3308      	adds	r3, #8
 8014d76:	68fa      	ldr	r2, [r7, #12]
 8014d78:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014d7a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014d7e:	4970      	ldr	r1, [pc, #448]	; (8014f40 <etharp_query+0x278>)
 8014d80:	4613      	mov	r3, r2
 8014d82:	005b      	lsls	r3, r3, #1
 8014d84:	4413      	add	r3, r2
 8014d86:	00db      	lsls	r3, r3, #3
 8014d88:	440b      	add	r3, r1
 8014d8a:	3314      	adds	r3, #20
 8014d8c:	781b      	ldrb	r3, [r3, #0]
 8014d8e:	2b01      	cmp	r3, #1
 8014d90:	d012      	beq.n	8014db8 <etharp_query+0xf0>
 8014d92:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014d96:	496a      	ldr	r1, [pc, #424]	; (8014f40 <etharp_query+0x278>)
 8014d98:	4613      	mov	r3, r2
 8014d9a:	005b      	lsls	r3, r3, #1
 8014d9c:	4413      	add	r3, r2
 8014d9e:	00db      	lsls	r3, r3, #3
 8014da0:	440b      	add	r3, r1
 8014da2:	3314      	adds	r3, #20
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	2b01      	cmp	r3, #1
 8014da8:	d806      	bhi.n	8014db8 <etharp_query+0xf0>
 8014daa:	4b66      	ldr	r3, [pc, #408]	; (8014f44 <etharp_query+0x27c>)
 8014dac:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014db0:	4965      	ldr	r1, [pc, #404]	; (8014f48 <etharp_query+0x280>)
 8014db2:	4866      	ldr	r0, [pc, #408]	; (8014f4c <etharp_query+0x284>)
 8014db4:	f001 fee0 	bl	8016b78 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014db8:	6a3b      	ldr	r3, [r7, #32]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d102      	bne.n	8014dc4 <etharp_query+0xfc>
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d10c      	bne.n	8014dde <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014dc4:	68b9      	ldr	r1, [r7, #8]
 8014dc6:	68f8      	ldr	r0, [r7, #12]
 8014dc8:	f000 f976 	bl	80150b8 <etharp_request>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d102      	bne.n	8014dde <etharp_query+0x116>
      return result;
 8014dd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014ddc:	e0ab      	b.n	8014f36 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d106      	bne.n	8014df2 <etharp_query+0x12a>
 8014de4:	4b57      	ldr	r3, [pc, #348]	; (8014f44 <etharp_query+0x27c>)
 8014de6:	f240 32db 	movw	r2, #987	; 0x3db
 8014dea:	4959      	ldr	r1, [pc, #356]	; (8014f50 <etharp_query+0x288>)
 8014dec:	4857      	ldr	r0, [pc, #348]	; (8014f4c <etharp_query+0x284>)
 8014dee:	f001 fec3 	bl	8016b78 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014df2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014df6:	4952      	ldr	r1, [pc, #328]	; (8014f40 <etharp_query+0x278>)
 8014df8:	4613      	mov	r3, r2
 8014dfa:	005b      	lsls	r3, r3, #1
 8014dfc:	4413      	add	r3, r2
 8014dfe:	00db      	lsls	r3, r3, #3
 8014e00:	440b      	add	r3, r1
 8014e02:	3314      	adds	r3, #20
 8014e04:	781b      	ldrb	r3, [r3, #0]
 8014e06:	2b01      	cmp	r3, #1
 8014e08:	d919      	bls.n	8014e3e <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8014e0a:	7cfa      	ldrb	r2, [r7, #19]
 8014e0c:	4b51      	ldr	r3, [pc, #324]	; (8014f54 <etharp_query+0x28c>)
 8014e0e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014e10:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014e14:	4613      	mov	r3, r2
 8014e16:	005b      	lsls	r3, r3, #1
 8014e18:	4413      	add	r3, r2
 8014e1a:	00db      	lsls	r3, r3, #3
 8014e1c:	3308      	adds	r3, #8
 8014e1e:	4a48      	ldr	r2, [pc, #288]	; (8014f40 <etharp_query+0x278>)
 8014e20:	4413      	add	r3, r2
 8014e22:	1d1a      	adds	r2, r3, #4
 8014e24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014e28:	9300      	str	r3, [sp, #0]
 8014e2a:	4613      	mov	r3, r2
 8014e2c:	697a      	ldr	r2, [r7, #20]
 8014e2e:	6879      	ldr	r1, [r7, #4]
 8014e30:	68f8      	ldr	r0, [r7, #12]
 8014e32:	f001 fc1b 	bl	801666c <ethernet_output>
 8014e36:	4603      	mov	r3, r0
 8014e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e3c:	e079      	b.n	8014f32 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014e3e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014e42:	493f      	ldr	r1, [pc, #252]	; (8014f40 <etharp_query+0x278>)
 8014e44:	4613      	mov	r3, r2
 8014e46:	005b      	lsls	r3, r3, #1
 8014e48:	4413      	add	r3, r2
 8014e4a:	00db      	lsls	r3, r3, #3
 8014e4c:	440b      	add	r3, r1
 8014e4e:	3314      	adds	r3, #20
 8014e50:	781b      	ldrb	r3, [r3, #0]
 8014e52:	2b01      	cmp	r3, #1
 8014e54:	d16d      	bne.n	8014f32 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014e56:	2300      	movs	r3, #0
 8014e58:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014e5e:	e01a      	b.n	8014e96 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014e60:	69fb      	ldr	r3, [r7, #28]
 8014e62:	895a      	ldrh	r2, [r3, #10]
 8014e64:	69fb      	ldr	r3, [r7, #28]
 8014e66:	891b      	ldrh	r3, [r3, #8]
 8014e68:	429a      	cmp	r2, r3
 8014e6a:	d10a      	bne.n	8014e82 <etharp_query+0x1ba>
 8014e6c:	69fb      	ldr	r3, [r7, #28]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d006      	beq.n	8014e82 <etharp_query+0x1ba>
 8014e74:	4b33      	ldr	r3, [pc, #204]	; (8014f44 <etharp_query+0x27c>)
 8014e76:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8014e7a:	4937      	ldr	r1, [pc, #220]	; (8014f58 <etharp_query+0x290>)
 8014e7c:	4833      	ldr	r0, [pc, #204]	; (8014f4c <etharp_query+0x284>)
 8014e7e:	f001 fe7b 	bl	8016b78 <iprintf>
      if (p->type != PBUF_ROM) {
 8014e82:	69fb      	ldr	r3, [r7, #28]
 8014e84:	7b1b      	ldrb	r3, [r3, #12]
 8014e86:	2b01      	cmp	r3, #1
 8014e88:	d002      	beq.n	8014e90 <etharp_query+0x1c8>
        copy_needed = 1;
 8014e8a:	2301      	movs	r3, #1
 8014e8c:	61bb      	str	r3, [r7, #24]
        break;
 8014e8e:	e005      	b.n	8014e9c <etharp_query+0x1d4>
      }
      p = p->next;
 8014e90:	69fb      	ldr	r3, [r7, #28]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014e96:	69fb      	ldr	r3, [r7, #28]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d1e1      	bne.n	8014e60 <etharp_query+0x198>
    }
    if (copy_needed) {
 8014e9c:	69bb      	ldr	r3, [r7, #24]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d017      	beq.n	8014ed2 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8014ea2:	69fb      	ldr	r3, [r7, #28]
 8014ea4:	891b      	ldrh	r3, [r3, #8]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	4619      	mov	r1, r3
 8014eaa:	2002      	movs	r0, #2
 8014eac:	f7f6 fde2 	bl	800ba74 <pbuf_alloc>
 8014eb0:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8014eb2:	69fb      	ldr	r3, [r7, #28]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d011      	beq.n	8014edc <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8014eb8:	6879      	ldr	r1, [r7, #4]
 8014eba:	69f8      	ldr	r0, [r7, #28]
 8014ebc:	f7f7 fa8c 	bl	800c3d8 <pbuf_copy>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d00a      	beq.n	8014edc <etharp_query+0x214>
          pbuf_free(p);
 8014ec6:	69f8      	ldr	r0, [r7, #28]
 8014ec8:	f7f7 f946 	bl	800c158 <pbuf_free>
          p = NULL;
 8014ecc:	2300      	movs	r3, #0
 8014ece:	61fb      	str	r3, [r7, #28]
 8014ed0:	e004      	b.n	8014edc <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014ed6:	69f8      	ldr	r0, [r7, #28]
 8014ed8:	f7f7 f9f0 	bl	800c2bc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014edc:	69fb      	ldr	r3, [r7, #28]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d024      	beq.n	8014f2c <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014ee2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014ee6:	4916      	ldr	r1, [pc, #88]	; (8014f40 <etharp_query+0x278>)
 8014ee8:	4613      	mov	r3, r2
 8014eea:	005b      	lsls	r3, r3, #1
 8014eec:	4413      	add	r3, r2
 8014eee:	00db      	lsls	r3, r3, #3
 8014ef0:	440b      	add	r3, r1
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d00b      	beq.n	8014f10 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8014ef8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014efc:	4910      	ldr	r1, [pc, #64]	; (8014f40 <etharp_query+0x278>)
 8014efe:	4613      	mov	r3, r2
 8014f00:	005b      	lsls	r3, r3, #1
 8014f02:	4413      	add	r3, r2
 8014f04:	00db      	lsls	r3, r3, #3
 8014f06:	440b      	add	r3, r1
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7f7 f924 	bl	800c158 <pbuf_free>
      }
      arp_table[i].q = p;
 8014f10:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014f14:	490a      	ldr	r1, [pc, #40]	; (8014f40 <etharp_query+0x278>)
 8014f16:	4613      	mov	r3, r2
 8014f18:	005b      	lsls	r3, r3, #1
 8014f1a:	4413      	add	r3, r2
 8014f1c:	00db      	lsls	r3, r3, #3
 8014f1e:	440b      	add	r3, r1
 8014f20:	69fa      	ldr	r2, [r7, #28]
 8014f22:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014f24:	2300      	movs	r3, #0
 8014f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f2a:	e002      	b.n	8014f32 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014f2c:	23ff      	movs	r3, #255	; 0xff
 8014f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014f32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014f36:	4618      	mov	r0, r3
 8014f38:	3728      	adds	r7, #40	; 0x28
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd80      	pop	{r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	20008c8c 	.word	0x20008c8c
 8014f44:	0801a744 	.word	0x0801a744
 8014f48:	0801a8f0 	.word	0x0801a8f0
 8014f4c:	0801a7bc 	.word	0x0801a7bc
 8014f50:	0801a8e4 	.word	0x0801a8e4
 8014f54:	20008d7c 	.word	0x20008d7c
 8014f58:	0801a918 	.word	0x0801a918

08014f5c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b08a      	sub	sp, #40	; 0x28
 8014f60:	af02      	add	r7, sp, #8
 8014f62:	60f8      	str	r0, [r7, #12]
 8014f64:	60b9      	str	r1, [r7, #8]
 8014f66:	607a      	str	r2, [r7, #4]
 8014f68:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d106      	bne.n	8014f82 <etharp_raw+0x26>
 8014f74:	4b3a      	ldr	r3, [pc, #232]	; (8015060 <etharp_raw+0x104>)
 8014f76:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8014f7a:	493a      	ldr	r1, [pc, #232]	; (8015064 <etharp_raw+0x108>)
 8014f7c:	483a      	ldr	r0, [pc, #232]	; (8015068 <etharp_raw+0x10c>)
 8014f7e:	f001 fdfb 	bl	8016b78 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014f82:	2200      	movs	r2, #0
 8014f84:	211c      	movs	r1, #28
 8014f86:	2002      	movs	r0, #2
 8014f88:	f7f6 fd74 	bl	800ba74 <pbuf_alloc>
 8014f8c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014f8e:	69bb      	ldr	r3, [r7, #24]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d102      	bne.n	8014f9a <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014f94:	f04f 33ff 	mov.w	r3, #4294967295
 8014f98:	e05d      	b.n	8015056 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014f9a:	69bb      	ldr	r3, [r7, #24]
 8014f9c:	895b      	ldrh	r3, [r3, #10]
 8014f9e:	2b1b      	cmp	r3, #27
 8014fa0:	d806      	bhi.n	8014fb0 <etharp_raw+0x54>
 8014fa2:	4b2f      	ldr	r3, [pc, #188]	; (8015060 <etharp_raw+0x104>)
 8014fa4:	f240 4264 	movw	r2, #1124	; 0x464
 8014fa8:	4930      	ldr	r1, [pc, #192]	; (801506c <etharp_raw+0x110>)
 8014faa:	482f      	ldr	r0, [pc, #188]	; (8015068 <etharp_raw+0x10c>)
 8014fac:	f001 fde4 	bl	8016b78 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014fb0:	69bb      	ldr	r3, [r7, #24]
 8014fb2:	685b      	ldr	r3, [r3, #4]
 8014fb4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014fb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f7f5 fef5 	bl	800ada8 <lwip_htons>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	461a      	mov	r2, r3
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014fcc:	2b06      	cmp	r3, #6
 8014fce:	d006      	beq.n	8014fde <etharp_raw+0x82>
 8014fd0:	4b23      	ldr	r3, [pc, #140]	; (8015060 <etharp_raw+0x104>)
 8014fd2:	f240 426b 	movw	r2, #1131	; 0x46b
 8014fd6:	4926      	ldr	r1, [pc, #152]	; (8015070 <etharp_raw+0x114>)
 8014fd8:	4823      	ldr	r0, [pc, #140]	; (8015068 <etharp_raw+0x10c>)
 8014fda:	f001 fdcd 	bl	8016b78 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8014fde:	697b      	ldr	r3, [r7, #20]
 8014fe0:	3308      	adds	r3, #8
 8014fe2:	2206      	movs	r2, #6
 8014fe4:	6839      	ldr	r1, [r7, #0]
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f001 fdb3 	bl	8016b52 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	3312      	adds	r3, #18
 8014ff0:	2206      	movs	r2, #6
 8014ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f001 fdac 	bl	8016b52 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	330e      	adds	r3, #14
 8014ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015000:	6812      	ldr	r2, [r2, #0]
 8015002:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	3318      	adds	r3, #24
 8015008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801500a:	6812      	ldr	r2, [r2, #0]
 801500c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801500e:	697b      	ldr	r3, [r7, #20]
 8015010:	2200      	movs	r2, #0
 8015012:	701a      	strb	r2, [r3, #0]
 8015014:	2200      	movs	r2, #0
 8015016:	f042 0201 	orr.w	r2, r2, #1
 801501a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801501c:	697b      	ldr	r3, [r7, #20]
 801501e:	2200      	movs	r2, #0
 8015020:	f042 0208 	orr.w	r2, r2, #8
 8015024:	709a      	strb	r2, [r3, #2]
 8015026:	2200      	movs	r2, #0
 8015028:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	2206      	movs	r2, #6
 801502e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015030:	697b      	ldr	r3, [r7, #20]
 8015032:	2204      	movs	r2, #4
 8015034:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015036:	f640 0306 	movw	r3, #2054	; 0x806
 801503a:	9300      	str	r3, [sp, #0]
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	68ba      	ldr	r2, [r7, #8]
 8015040:	69b9      	ldr	r1, [r7, #24]
 8015042:	68f8      	ldr	r0, [r7, #12]
 8015044:	f001 fb12 	bl	801666c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015048:	69b8      	ldr	r0, [r7, #24]
 801504a:	f7f7 f885 	bl	800c158 <pbuf_free>
  p = NULL;
 801504e:	2300      	movs	r3, #0
 8015050:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015052:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015056:	4618      	mov	r0, r3
 8015058:	3720      	adds	r7, #32
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}
 801505e:	bf00      	nop
 8015060:	0801a744 	.word	0x0801a744
 8015064:	0801a894 	.word	0x0801a894
 8015068:	0801a7bc 	.word	0x0801a7bc
 801506c:	0801a934 	.word	0x0801a934
 8015070:	0801a968 	.word	0x0801a968

08015074 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b088      	sub	sp, #32
 8015078:	af04      	add	r7, sp, #16
 801507a:	60f8      	str	r0, [r7, #12]
 801507c:	60b9      	str	r1, [r7, #8]
 801507e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	f103 0029 	add.w	r0, r3, #41	; 0x29
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015090:	2201      	movs	r2, #1
 8015092:	9203      	str	r2, [sp, #12]
 8015094:	68ba      	ldr	r2, [r7, #8]
 8015096:	9202      	str	r2, [sp, #8]
 8015098:	4a06      	ldr	r2, [pc, #24]	; (80150b4 <etharp_request_dst+0x40>)
 801509a:	9201      	str	r2, [sp, #4]
 801509c:	9300      	str	r3, [sp, #0]
 801509e:	4603      	mov	r3, r0
 80150a0:	687a      	ldr	r2, [r7, #4]
 80150a2:	68f8      	ldr	r0, [r7, #12]
 80150a4:	f7ff ff5a 	bl	8014f5c <etharp_raw>
 80150a8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80150aa:	4618      	mov	r0, r3
 80150ac:	3710      	adds	r7, #16
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}
 80150b2:	bf00      	nop
 80150b4:	080262e4 	.word	0x080262e4

080150b8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b082      	sub	sp, #8
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
 80150c0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80150c2:	4a05      	ldr	r2, [pc, #20]	; (80150d8 <etharp_request+0x20>)
 80150c4:	6839      	ldr	r1, [r7, #0]
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f7ff ffd4 	bl	8015074 <etharp_request_dst>
 80150cc:	4603      	mov	r3, r0
}
 80150ce:	4618      	mov	r0, r3
 80150d0:	3708      	adds	r7, #8
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}
 80150d6:	bf00      	nop
 80150d8:	080262dc 	.word	0x080262dc

080150dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b08e      	sub	sp, #56	; 0x38
 80150e0:	af04      	add	r7, sp, #16
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80150e6:	4b7a      	ldr	r3, [pc, #488]	; (80152d0 <icmp_input+0x1f4>)
 80150e8:	689b      	ldr	r3, [r3, #8]
 80150ea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 80150ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ee:	781b      	ldrb	r3, [r3, #0]
 80150f0:	b29b      	uxth	r3, r3
 80150f2:	f003 030f 	and.w	r3, r3, #15
 80150f6:	b29b      	uxth	r3, r3
 80150f8:	009b      	lsls	r3, r3, #2
 80150fa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80150fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80150fe:	2b13      	cmp	r3, #19
 8015100:	f240 80d1 	bls.w	80152a6 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	895b      	ldrh	r3, [r3, #10]
 8015108:	2b03      	cmp	r3, #3
 801510a:	f240 80ce 	bls.w	80152aa <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	685b      	ldr	r3, [r3, #4]
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015118:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801511c:	2b00      	cmp	r3, #0
 801511e:	f000 80bb 	beq.w	8015298 <icmp_input+0x1bc>
 8015122:	2b08      	cmp	r3, #8
 8015124:	f040 80bb 	bne.w	801529e <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8015128:	4b6a      	ldr	r3, [pc, #424]	; (80152d4 <icmp_input+0x1f8>)
 801512a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801512c:	4b68      	ldr	r3, [pc, #416]	; (80152d0 <icmp_input+0x1f4>)
 801512e:	695b      	ldr	r3, [r3, #20]
 8015130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015134:	2be0      	cmp	r3, #224	; 0xe0
 8015136:	f000 80bf 	beq.w	80152b8 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801513a:	4b65      	ldr	r3, [pc, #404]	; (80152d0 <icmp_input+0x1f4>)
 801513c:	695a      	ldr	r2, [r3, #20]
 801513e:	4b64      	ldr	r3, [pc, #400]	; (80152d0 <icmp_input+0x1f4>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	4619      	mov	r1, r3
 8015144:	4610      	mov	r0, r2
 8015146:	f000 fbef 	bl	8015928 <ip4_addr_isbroadcast_u32>
 801514a:	4603      	mov	r3, r0
 801514c:	2b00      	cmp	r3, #0
 801514e:	f040 80b5 	bne.w	80152bc <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	891b      	ldrh	r3, [r3, #8]
 8015156:	2b07      	cmp	r3, #7
 8015158:	f240 80a9 	bls.w	80152ae <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801515c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801515e:	330e      	adds	r3, #14
 8015160:	b29b      	uxth	r3, r3
 8015162:	b21b      	sxth	r3, r3
 8015164:	4619      	mov	r1, r3
 8015166:	6878      	ldr	r0, [r7, #4]
 8015168:	f7f6 ffd2 	bl	800c110 <pbuf_header>
 801516c:	4603      	mov	r3, r0
 801516e:	2b00      	cmp	r3, #0
 8015170:	d046      	beq.n	8015200 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	891a      	ldrh	r2, [r3, #8]
 8015176:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015178:	4413      	add	r3, r2
 801517a:	b29b      	uxth	r3, r3
 801517c:	2200      	movs	r2, #0
 801517e:	4619      	mov	r1, r3
 8015180:	2002      	movs	r0, #2
 8015182:	f7f6 fc77 	bl	800ba74 <pbuf_alloc>
 8015186:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8015188:	69bb      	ldr	r3, [r7, #24]
 801518a:	2b00      	cmp	r3, #0
 801518c:	f000 8098 	beq.w	80152c0 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015190:	69bb      	ldr	r3, [r7, #24]
 8015192:	895b      	ldrh	r3, [r3, #10]
 8015194:	461a      	mov	r2, r3
 8015196:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015198:	3308      	adds	r3, #8
 801519a:	429a      	cmp	r2, r3
 801519c:	d203      	bcs.n	80151a6 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801519e:	69b8      	ldr	r0, [r7, #24]
 80151a0:	f7f6 ffda 	bl	800c158 <pbuf_free>
        goto icmperr;
 80151a4:	e08d      	b.n	80152c2 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80151a6:	69bb      	ldr	r3, [r7, #24]
 80151a8:	685b      	ldr	r3, [r3, #4]
 80151aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80151ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151ae:	4618      	mov	r0, r3
 80151b0:	f001 fccf 	bl	8016b52 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 80151b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151b6:	425b      	negs	r3, r3
 80151b8:	b29b      	uxth	r3, r3
 80151ba:	b21b      	sxth	r3, r3
 80151bc:	4619      	mov	r1, r3
 80151be:	69b8      	ldr	r0, [r7, #24]
 80151c0:	f7f6 ffa6 	bl	800c110 <pbuf_header>
 80151c4:	4603      	mov	r3, r0
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d009      	beq.n	80151de <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80151ca:	4b43      	ldr	r3, [pc, #268]	; (80152d8 <icmp_input+0x1fc>)
 80151cc:	22af      	movs	r2, #175	; 0xaf
 80151ce:	4943      	ldr	r1, [pc, #268]	; (80152dc <icmp_input+0x200>)
 80151d0:	4843      	ldr	r0, [pc, #268]	; (80152e0 <icmp_input+0x204>)
 80151d2:	f001 fcd1 	bl	8016b78 <iprintf>
        pbuf_free(r);
 80151d6:	69b8      	ldr	r0, [r7, #24]
 80151d8:	f7f6 ffbe 	bl	800c158 <pbuf_free>
        goto icmperr;
 80151dc:	e071      	b.n	80152c2 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 80151de:	6879      	ldr	r1, [r7, #4]
 80151e0:	69b8      	ldr	r0, [r7, #24]
 80151e2:	f7f7 f8f9 	bl	800c3d8 <pbuf_copy>
 80151e6:	4603      	mov	r3, r0
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d003      	beq.n	80151f4 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 80151ec:	69b8      	ldr	r0, [r7, #24]
 80151ee:	f7f6 ffb3 	bl	800c158 <pbuf_free>
        goto icmperr;
 80151f2:	e066      	b.n	80152c2 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f7f6 ffaf 	bl	800c158 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 80151fa:	69bb      	ldr	r3, [r7, #24]
 80151fc:	607b      	str	r3, [r7, #4]
 80151fe:	e015      	b.n	801522c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8015200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015202:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8015206:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801520a:	33f2      	adds	r3, #242	; 0xf2
 801520c:	b29b      	uxth	r3, r3
 801520e:	b21b      	sxth	r3, r3
 8015210:	4619      	mov	r1, r3
 8015212:	6878      	ldr	r0, [r7, #4]
 8015214:	f7f6 ff7c 	bl	800c110 <pbuf_header>
 8015218:	4603      	mov	r3, r0
 801521a:	2b00      	cmp	r3, #0
 801521c:	d006      	beq.n	801522c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801521e:	4b2e      	ldr	r3, [pc, #184]	; (80152d8 <icmp_input+0x1fc>)
 8015220:	22c0      	movs	r2, #192	; 0xc0
 8015222:	4930      	ldr	r1, [pc, #192]	; (80152e4 <icmp_input+0x208>)
 8015224:	482e      	ldr	r0, [pc, #184]	; (80152e0 <icmp_input+0x204>)
 8015226:	f001 fca7 	bl	8016b78 <iprintf>
        goto icmperr;
 801522a:	e04a      	b.n	80152c2 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	685b      	ldr	r3, [r3, #4]
 8015230:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8015232:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015236:	4619      	mov	r1, r3
 8015238:	6878      	ldr	r0, [r7, #4]
 801523a:	f7f6 ff69 	bl	800c110 <pbuf_header>
 801523e:	4603      	mov	r3, r0
 8015240:	2b00      	cmp	r3, #0
 8015242:	d12b      	bne.n	801529c <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	685b      	ldr	r3, [r3, #4]
 8015248:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801524a:	69fb      	ldr	r3, [r7, #28]
 801524c:	681a      	ldr	r2, [r3, #0]
 801524e:	693b      	ldr	r3, [r7, #16]
 8015250:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015252:	4b1f      	ldr	r3, [pc, #124]	; (80152d0 <icmp_input+0x1f4>)
 8015254:	691a      	ldr	r2, [r3, #16]
 8015256:	693b      	ldr	r3, [r7, #16]
 8015258:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801525a:	697b      	ldr	r3, [r7, #20]
 801525c:	2200      	movs	r2, #0
 801525e:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	2200      	movs	r2, #0
 8015264:	709a      	strb	r2, [r3, #2]
 8015266:	2200      	movs	r2, #0
 8015268:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801526a:	693b      	ldr	r3, [r7, #16]
 801526c:	22ff      	movs	r2, #255	; 0xff
 801526e:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8015270:	693b      	ldr	r3, [r7, #16]
 8015272:	2200      	movs	r2, #0
 8015274:	729a      	strb	r2, [r3, #10]
 8015276:	2200      	movs	r2, #0
 8015278:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801527a:	683b      	ldr	r3, [r7, #0]
 801527c:	9302      	str	r3, [sp, #8]
 801527e:	2301      	movs	r3, #1
 8015280:	9301      	str	r3, [sp, #4]
 8015282:	2300      	movs	r3, #0
 8015284:	9300      	str	r3, [sp, #0]
 8015286:	23ff      	movs	r3, #255	; 0xff
 8015288:	2200      	movs	r2, #0
 801528a:	69f9      	ldr	r1, [r7, #28]
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	f000 fa79 	bl	8015784 <ip4_output_if>
 8015292:	4603      	mov	r3, r0
 8015294:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8015296:	e001      	b.n	801529c <icmp_input+0x1c0>
    break;
 8015298:	bf00      	nop
 801529a:	e000      	b.n	801529e <icmp_input+0x1c2>
    break;
 801529c:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f7f6 ff5a 	bl	800c158 <pbuf_free>
  return;
 80152a4:	e011      	b.n	80152ca <icmp_input+0x1ee>
    goto lenerr;
 80152a6:	bf00      	nop
 80152a8:	e002      	b.n	80152b0 <icmp_input+0x1d4>
    goto lenerr;
 80152aa:	bf00      	nop
 80152ac:	e000      	b.n	80152b0 <icmp_input+0x1d4>
      goto lenerr;
 80152ae:	bf00      	nop
lenerr:
  pbuf_free(p);
 80152b0:	6878      	ldr	r0, [r7, #4]
 80152b2:	f7f6 ff51 	bl	800c158 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80152b6:	e008      	b.n	80152ca <icmp_input+0x1ee>
      goto icmperr;
 80152b8:	bf00      	nop
 80152ba:	e002      	b.n	80152c2 <icmp_input+0x1e6>
      goto icmperr;
 80152bc:	bf00      	nop
 80152be:	e000      	b.n	80152c2 <icmp_input+0x1e6>
        goto icmperr;
 80152c0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80152c2:	6878      	ldr	r0, [r7, #4]
 80152c4:	f7f6 ff48 	bl	800c158 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80152c8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80152ca:	3728      	adds	r7, #40	; 0x28
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd80      	pop	{r7, pc}
 80152d0:	2000c3a4 	.word	0x2000c3a4
 80152d4:	2000c3b8 	.word	0x2000c3b8
 80152d8:	0801a9ac 	.word	0x0801a9ac
 80152dc:	0801a9e4 	.word	0x0801a9e4
 80152e0:	0801aa1c 	.word	0x0801aa1c
 80152e4:	0801aa44 	.word	0x0801aa44

080152e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b082      	sub	sp, #8
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
 80152f0:	460b      	mov	r3, r1
 80152f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80152f4:	78fb      	ldrb	r3, [r7, #3]
 80152f6:	461a      	mov	r2, r3
 80152f8:	2103      	movs	r1, #3
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	f000 f814 	bl	8015328 <icmp_send_response>
}
 8015300:	bf00      	nop
 8015302:	3708      	adds	r7, #8
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}

08015308 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b082      	sub	sp, #8
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
 8015310:	460b      	mov	r3, r1
 8015312:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015314:	78fb      	ldrb	r3, [r7, #3]
 8015316:	461a      	mov	r2, r3
 8015318:	210b      	movs	r1, #11
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f000 f804 	bl	8015328 <icmp_send_response>
}
 8015320:	bf00      	nop
 8015322:	3708      	adds	r7, #8
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}

08015328 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b08c      	sub	sp, #48	; 0x30
 801532c:	af04      	add	r7, sp, #16
 801532e:	6078      	str	r0, [r7, #4]
 8015330:	460b      	mov	r3, r1
 8015332:	70fb      	strb	r3, [r7, #3]
 8015334:	4613      	mov	r3, r2
 8015336:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015338:	2200      	movs	r2, #0
 801533a:	2124      	movs	r1, #36	; 0x24
 801533c:	2001      	movs	r0, #1
 801533e:	f7f6 fb99 	bl	800ba74 <pbuf_alloc>
 8015342:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015344:	69fb      	ldr	r3, [r7, #28]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d04c      	beq.n	80153e4 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801534a:	69fb      	ldr	r3, [r7, #28]
 801534c:	895b      	ldrh	r3, [r3, #10]
 801534e:	2b23      	cmp	r3, #35	; 0x23
 8015350:	d806      	bhi.n	8015360 <icmp_send_response+0x38>
 8015352:	4b26      	ldr	r3, [pc, #152]	; (80153ec <icmp_send_response+0xc4>)
 8015354:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8015358:	4925      	ldr	r1, [pc, #148]	; (80153f0 <icmp_send_response+0xc8>)
 801535a:	4826      	ldr	r0, [pc, #152]	; (80153f4 <icmp_send_response+0xcc>)
 801535c:	f001 fc0c 	bl	8016b78 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	685b      	ldr	r3, [r3, #4]
 8015364:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015366:	69fb      	ldr	r3, [r7, #28]
 8015368:	685b      	ldr	r3, [r3, #4]
 801536a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801536c:	697b      	ldr	r3, [r7, #20]
 801536e:	78fa      	ldrb	r2, [r7, #3]
 8015370:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	78ba      	ldrb	r2, [r7, #2]
 8015376:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	2200      	movs	r2, #0
 801537c:	711a      	strb	r2, [r3, #4]
 801537e:	2200      	movs	r2, #0
 8015380:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015382:	697b      	ldr	r3, [r7, #20]
 8015384:	2200      	movs	r2, #0
 8015386:	719a      	strb	r2, [r3, #6]
 8015388:	2200      	movs	r2, #0
 801538a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801538c:	69fb      	ldr	r3, [r7, #28]
 801538e:	685b      	ldr	r3, [r3, #4]
 8015390:	f103 0008 	add.w	r0, r3, #8
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	685b      	ldr	r3, [r3, #4]
 8015398:	221c      	movs	r2, #28
 801539a:	4619      	mov	r1, r3
 801539c:	f001 fbd9 	bl	8016b52 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80153a0:	69bb      	ldr	r3, [r7, #24]
 80153a2:	68db      	ldr	r3, [r3, #12]
 80153a4:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80153a6:	f107 030c 	add.w	r3, r7, #12
 80153aa:	4618      	mov	r0, r3
 80153ac:	f000 f824 	bl	80153f8 <ip4_route>
 80153b0:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80153b2:	693b      	ldr	r3, [r7, #16]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d011      	beq.n	80153dc <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80153b8:	697b      	ldr	r3, [r7, #20]
 80153ba:	2200      	movs	r2, #0
 80153bc:	709a      	strb	r2, [r3, #2]
 80153be:	2200      	movs	r2, #0
 80153c0:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80153c2:	f107 020c 	add.w	r2, r7, #12
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	9302      	str	r3, [sp, #8]
 80153ca:	2301      	movs	r3, #1
 80153cc:	9301      	str	r3, [sp, #4]
 80153ce:	2300      	movs	r3, #0
 80153d0:	9300      	str	r3, [sp, #0]
 80153d2:	23ff      	movs	r3, #255	; 0xff
 80153d4:	2100      	movs	r1, #0
 80153d6:	69f8      	ldr	r0, [r7, #28]
 80153d8:	f000 f9d4 	bl	8015784 <ip4_output_if>
  }
  pbuf_free(q);
 80153dc:	69f8      	ldr	r0, [r7, #28]
 80153de:	f7f6 febb 	bl	800c158 <pbuf_free>
 80153e2:	e000      	b.n	80153e6 <icmp_send_response+0xbe>
    return;
 80153e4:	bf00      	nop
}
 80153e6:	3720      	adds	r7, #32
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}
 80153ec:	0801a9ac 	.word	0x0801a9ac
 80153f0:	0801aa78 	.word	0x0801aa78
 80153f4:	0801aa1c 	.word	0x0801aa1c

080153f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80153f8:	b480      	push	{r7}
 80153fa:	b085      	sub	sp, #20
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8015400:	4b30      	ldr	r3, [pc, #192]	; (80154c4 <ip4_route+0xcc>)
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	60fb      	str	r3, [r7, #12]
 8015406:	e036      	b.n	8015476 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801540e:	f003 0301 	and.w	r3, r3, #1
 8015412:	b2db      	uxtb	r3, r3
 8015414:	2b00      	cmp	r3, #0
 8015416:	d02b      	beq.n	8015470 <ip4_route+0x78>
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801541e:	089b      	lsrs	r3, r3, #2
 8015420:	f003 0301 	and.w	r3, r3, #1
 8015424:	b2db      	uxtb	r3, r3
 8015426:	2b00      	cmp	r3, #0
 8015428:	d022      	beq.n	8015470 <ip4_route+0x78>
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	3304      	adds	r3, #4
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d01d      	beq.n	8015470 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681a      	ldr	r2, [r3, #0]
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	3304      	adds	r3, #4
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	405a      	eors	r2, r3
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	3308      	adds	r3, #8
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	4013      	ands	r3, r2
 8015448:	2b00      	cmp	r3, #0
 801544a:	d101      	bne.n	8015450 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	e033      	b.n	80154b8 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015456:	f003 0302 	and.w	r3, r3, #2
 801545a:	2b00      	cmp	r3, #0
 801545c:	d108      	bne.n	8015470 <ip4_route+0x78>
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	681a      	ldr	r2, [r3, #0]
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	330c      	adds	r3, #12
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	429a      	cmp	r2, r3
 801546a:	d101      	bne.n	8015470 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	e023      	b.n	80154b8 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	60fb      	str	r3, [r7, #12]
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d1c5      	bne.n	8015408 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801547c:	4b12      	ldr	r3, [pc, #72]	; (80154c8 <ip4_route+0xd0>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d015      	beq.n	80154b0 <ip4_route+0xb8>
 8015484:	4b10      	ldr	r3, [pc, #64]	; (80154c8 <ip4_route+0xd0>)
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801548c:	f003 0301 	and.w	r3, r3, #1
 8015490:	2b00      	cmp	r3, #0
 8015492:	d00d      	beq.n	80154b0 <ip4_route+0xb8>
 8015494:	4b0c      	ldr	r3, [pc, #48]	; (80154c8 <ip4_route+0xd0>)
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801549c:	f003 0304 	and.w	r3, r3, #4
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d005      	beq.n	80154b0 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80154a4:	4b08      	ldr	r3, [pc, #32]	; (80154c8 <ip4_route+0xd0>)
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	3304      	adds	r3, #4
 80154aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d101      	bne.n	80154b4 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80154b0:	2300      	movs	r3, #0
 80154b2:	e001      	b.n	80154b8 <ip4_route+0xc0>
  }

  return netif_default;
 80154b4:	4b04      	ldr	r3, [pc, #16]	; (80154c8 <ip4_route+0xd0>)
 80154b6:	681b      	ldr	r3, [r3, #0]
}
 80154b8:	4618      	mov	r0, r3
 80154ba:	3714      	adds	r7, #20
 80154bc:	46bd      	mov	sp, r7
 80154be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c2:	4770      	bx	lr
 80154c4:	2000fac4 	.word	0x2000fac4
 80154c8:	2000fac8 	.word	0x2000fac8

080154cc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b088      	sub	sp, #32
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
 80154d4:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80154d6:	2301      	movs	r3, #1
 80154d8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80154e0:	69fb      	ldr	r3, [r7, #28]
 80154e2:	781b      	ldrb	r3, [r3, #0]
 80154e4:	091b      	lsrs	r3, r3, #4
 80154e6:	b2db      	uxtb	r3, r3
 80154e8:	2b04      	cmp	r3, #4
 80154ea:	d004      	beq.n	80154f6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f7f6 fe33 	bl	800c158 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80154f2:	2300      	movs	r3, #0
 80154f4:	e13e      	b.n	8015774 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 80154f6:	69fb      	ldr	r3, [r7, #28]
 80154f8:	781b      	ldrb	r3, [r3, #0]
 80154fa:	b29b      	uxth	r3, r3
 80154fc:	f003 030f 	and.w	r3, r3, #15
 8015500:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8015502:	89fb      	ldrh	r3, [r7, #14]
 8015504:	009b      	lsls	r3, r3, #2
 8015506:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015508:	69fb      	ldr	r3, [r7, #28]
 801550a:	885b      	ldrh	r3, [r3, #2]
 801550c:	b29b      	uxth	r3, r3
 801550e:	4618      	mov	r0, r3
 8015510:	f7f5 fc4a 	bl	800ada8 <lwip_htons>
 8015514:	4603      	mov	r3, r0
 8015516:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	891b      	ldrh	r3, [r3, #8]
 801551c:	89ba      	ldrh	r2, [r7, #12]
 801551e:	429a      	cmp	r2, r3
 8015520:	d204      	bcs.n	801552c <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 8015522:	89bb      	ldrh	r3, [r7, #12]
 8015524:	4619      	mov	r1, r3
 8015526:	6878      	ldr	r0, [r7, #4]
 8015528:	f7f6 fca2 	bl	800be70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	895b      	ldrh	r3, [r3, #10]
 8015530:	89fa      	ldrh	r2, [r7, #14]
 8015532:	429a      	cmp	r2, r3
 8015534:	d807      	bhi.n	8015546 <ip4_input+0x7a>
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	891b      	ldrh	r3, [r3, #8]
 801553a:	89ba      	ldrh	r2, [r7, #12]
 801553c:	429a      	cmp	r2, r3
 801553e:	d802      	bhi.n	8015546 <ip4_input+0x7a>
 8015540:	89fb      	ldrh	r3, [r7, #14]
 8015542:	2b13      	cmp	r3, #19
 8015544:	d804      	bhi.n	8015550 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f7f6 fe06 	bl	800c158 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801554c:	2300      	movs	r3, #0
 801554e:	e111      	b.n	8015774 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015550:	69fb      	ldr	r3, [r7, #28]
 8015552:	691b      	ldr	r3, [r3, #16]
 8015554:	4a89      	ldr	r2, [pc, #548]	; (801577c <ip4_input+0x2b0>)
 8015556:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015558:	69fb      	ldr	r3, [r7, #28]
 801555a:	68db      	ldr	r3, [r3, #12]
 801555c:	4a87      	ldr	r2, [pc, #540]	; (801577c <ip4_input+0x2b0>)
 801555e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015560:	4b86      	ldr	r3, [pc, #536]	; (801577c <ip4_input+0x2b0>)
 8015562:	695b      	ldr	r3, [r3, #20]
 8015564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015568:	2be0      	cmp	r3, #224	; 0xe0
 801556a:	d112      	bne.n	8015592 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015572:	f003 0301 	and.w	r3, r3, #1
 8015576:	b2db      	uxtb	r3, r3
 8015578:	2b00      	cmp	r3, #0
 801557a:	d007      	beq.n	801558c <ip4_input+0xc0>
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	3304      	adds	r3, #4
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d002      	beq.n	801558c <ip4_input+0xc0>
      netif = inp;
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	61bb      	str	r3, [r7, #24]
 801558a:	e041      	b.n	8015610 <ip4_input+0x144>
    } else {
      netif = NULL;
 801558c:	2300      	movs	r3, #0
 801558e:	61bb      	str	r3, [r7, #24]
 8015590:	e03e      	b.n	8015610 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8015592:	2301      	movs	r3, #1
 8015594:	613b      	str	r3, [r7, #16]
    netif = inp;
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801559a:	69bb      	ldr	r3, [r7, #24]
 801559c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80155a0:	f003 0301 	and.w	r3, r3, #1
 80155a4:	b2db      	uxtb	r3, r3
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d014      	beq.n	80155d4 <ip4_input+0x108>
 80155aa:	69bb      	ldr	r3, [r7, #24]
 80155ac:	3304      	adds	r3, #4
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d00f      	beq.n	80155d4 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80155b4:	4b71      	ldr	r3, [pc, #452]	; (801577c <ip4_input+0x2b0>)
 80155b6:	695a      	ldr	r2, [r3, #20]
 80155b8:	69bb      	ldr	r3, [r7, #24]
 80155ba:	3304      	adds	r3, #4
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	429a      	cmp	r2, r3
 80155c0:	d026      	beq.n	8015610 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80155c2:	4b6e      	ldr	r3, [pc, #440]	; (801577c <ip4_input+0x2b0>)
 80155c4:	695b      	ldr	r3, [r3, #20]
 80155c6:	69b9      	ldr	r1, [r7, #24]
 80155c8:	4618      	mov	r0, r3
 80155ca:	f000 f9ad 	bl	8015928 <ip4_addr_isbroadcast_u32>
 80155ce:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d11d      	bne.n	8015610 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 80155d4:	693b      	ldr	r3, [r7, #16]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d00d      	beq.n	80155f6 <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80155da:	4b68      	ldr	r3, [pc, #416]	; (801577c <ip4_input+0x2b0>)
 80155dc:	695b      	ldr	r3, [r3, #20]
 80155de:	b2db      	uxtb	r3, r3
 80155e0:	2b7f      	cmp	r3, #127	; 0x7f
 80155e2:	d102      	bne.n	80155ea <ip4_input+0x11e>
          netif = NULL;
 80155e4:	2300      	movs	r3, #0
 80155e6:	61bb      	str	r3, [r7, #24]
          break;
 80155e8:	e012      	b.n	8015610 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 80155ea:	2300      	movs	r3, #0
 80155ec:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 80155ee:	4b64      	ldr	r3, [pc, #400]	; (8015780 <ip4_input+0x2b4>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	61bb      	str	r3, [r7, #24]
 80155f4:	e002      	b.n	80155fc <ip4_input+0x130>
      } else {
        netif = netif->next;
 80155f6:	69bb      	ldr	r3, [r7, #24]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 80155fc:	69ba      	ldr	r2, [r7, #24]
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	429a      	cmp	r2, r3
 8015602:	d102      	bne.n	801560a <ip4_input+0x13e>
        netif = netif->next;
 8015604:	69bb      	ldr	r3, [r7, #24]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 801560a:	69bb      	ldr	r3, [r7, #24]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d1c4      	bne.n	801559a <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015610:	69bb      	ldr	r3, [r7, #24]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d111      	bne.n	801563a <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015616:	69fb      	ldr	r3, [r7, #28]
 8015618:	7a5b      	ldrb	r3, [r3, #9]
 801561a:	2b11      	cmp	r3, #17
 801561c:	d10d      	bne.n	801563a <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 801561e:	89fb      	ldrh	r3, [r7, #14]
 8015620:	69fa      	ldr	r2, [r7, #28]
 8015622:	4413      	add	r3, r2
 8015624:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	885b      	ldrh	r3, [r3, #2]
 801562a:	b29b      	uxth	r3, r3
 801562c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015630:	d103      	bne.n	801563a <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015636:	2300      	movs	r3, #0
 8015638:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d017      	beq.n	8015670 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015640:	4b4e      	ldr	r3, [pc, #312]	; (801577c <ip4_input+0x2b0>)
 8015642:	691b      	ldr	r3, [r3, #16]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d013      	beq.n	8015670 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015648:	4b4c      	ldr	r3, [pc, #304]	; (801577c <ip4_input+0x2b0>)
 801564a:	691b      	ldr	r3, [r3, #16]
 801564c:	6839      	ldr	r1, [r7, #0]
 801564e:	4618      	mov	r0, r3
 8015650:	f000 f96a 	bl	8015928 <ip4_addr_isbroadcast_u32>
 8015654:	4603      	mov	r3, r0
 8015656:	2b00      	cmp	r3, #0
 8015658:	d105      	bne.n	8015666 <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801565a:	4b48      	ldr	r3, [pc, #288]	; (801577c <ip4_input+0x2b0>)
 801565c:	691b      	ldr	r3, [r3, #16]
 801565e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015662:	2be0      	cmp	r3, #224	; 0xe0
 8015664:	d104      	bne.n	8015670 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015666:	6878      	ldr	r0, [r7, #4]
 8015668:	f7f6 fd76 	bl	800c158 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801566c:	2300      	movs	r3, #0
 801566e:	e081      	b.n	8015774 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015670:	69bb      	ldr	r3, [r7, #24]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d104      	bne.n	8015680 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015676:	6878      	ldr	r0, [r7, #4]
 8015678:	f7f6 fd6e 	bl	800c158 <pbuf_free>
    return ERR_OK;
 801567c:	2300      	movs	r3, #0
 801567e:	e079      	b.n	8015774 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015680:	69fb      	ldr	r3, [r7, #28]
 8015682:	88db      	ldrh	r3, [r3, #6]
 8015684:	b29b      	uxth	r3, r3
 8015686:	461a      	mov	r2, r3
 8015688:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801568c:	4013      	ands	r3, r2
 801568e:	2b00      	cmp	r3, #0
 8015690:	d00b      	beq.n	80156aa <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015692:	6878      	ldr	r0, [r7, #4]
 8015694:	f000 fc8e 	bl	8015fb4 <ip4_reass>
 8015698:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d101      	bne.n	80156a4 <ip4_input+0x1d8>
      return ERR_OK;
 80156a0:	2300      	movs	r3, #0
 80156a2:	e067      	b.n	8015774 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	685b      	ldr	r3, [r3, #4]
 80156a8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80156aa:	4a34      	ldr	r2, [pc, #208]	; (801577c <ip4_input+0x2b0>)
 80156ac:	69bb      	ldr	r3, [r7, #24]
 80156ae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80156b0:	4a32      	ldr	r2, [pc, #200]	; (801577c <ip4_input+0x2b0>)
 80156b2:	683b      	ldr	r3, [r7, #0]
 80156b4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80156b6:	4a31      	ldr	r2, [pc, #196]	; (801577c <ip4_input+0x2b0>)
 80156b8:	69fb      	ldr	r3, [r7, #28]
 80156ba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80156bc:	69fb      	ldr	r3, [r7, #28]
 80156be:	781b      	ldrb	r3, [r3, #0]
 80156c0:	b29b      	uxth	r3, r3
 80156c2:	f003 030f 	and.w	r3, r3, #15
 80156c6:	b29b      	uxth	r3, r3
 80156c8:	009b      	lsls	r3, r3, #2
 80156ca:	b29a      	uxth	r2, r3
 80156cc:	4b2b      	ldr	r3, [pc, #172]	; (801577c <ip4_input+0x2b0>)
 80156ce:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80156d0:	89fb      	ldrh	r3, [r7, #14]
 80156d2:	425b      	negs	r3, r3
 80156d4:	b29b      	uxth	r3, r3
 80156d6:	b21b      	sxth	r3, r3
 80156d8:	4619      	mov	r1, r3
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f7f6 fd18 	bl	800c110 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	7a5b      	ldrb	r3, [r3, #9]
 80156e4:	2b06      	cmp	r3, #6
 80156e6:	d009      	beq.n	80156fc <ip4_input+0x230>
 80156e8:	2b11      	cmp	r3, #17
 80156ea:	d002      	beq.n	80156f2 <ip4_input+0x226>
 80156ec:	2b01      	cmp	r3, #1
 80156ee:	d00a      	beq.n	8015706 <ip4_input+0x23a>
 80156f0:	e00e      	b.n	8015710 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 80156f2:	6839      	ldr	r1, [r7, #0]
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f7fc fc05 	bl	8011f04 <udp_input>
      break;
 80156fa:	e028      	b.n	801574e <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 80156fc:	6839      	ldr	r1, [r7, #0]
 80156fe:	6878      	ldr	r0, [r7, #4]
 8015700:	f7f8 fc24 	bl	800df4c <tcp_input>
      break;
 8015704:	e023      	b.n	801574e <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8015706:	6839      	ldr	r1, [r7, #0]
 8015708:	6878      	ldr	r0, [r7, #4]
 801570a:	f7ff fce7 	bl	80150dc <icmp_input>
      break;
 801570e:	e01e      	b.n	801574e <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015710:	4b1a      	ldr	r3, [pc, #104]	; (801577c <ip4_input+0x2b0>)
 8015712:	695b      	ldr	r3, [r3, #20]
 8015714:	69b9      	ldr	r1, [r7, #24]
 8015716:	4618      	mov	r0, r3
 8015718:	f000 f906 	bl	8015928 <ip4_addr_isbroadcast_u32>
 801571c:	4603      	mov	r3, r0
 801571e:	2b00      	cmp	r3, #0
 8015720:	d112      	bne.n	8015748 <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015722:	4b16      	ldr	r3, [pc, #88]	; (801577c <ip4_input+0x2b0>)
 8015724:	695b      	ldr	r3, [r3, #20]
 8015726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801572a:	2be0      	cmp	r3, #224	; 0xe0
 801572c:	d00c      	beq.n	8015748 <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801572e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015732:	4619      	mov	r1, r3
 8015734:	6878      	ldr	r0, [r7, #4]
 8015736:	f7f6 fcfd 	bl	800c134 <pbuf_header_force>
        p->payload = iphdr;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	69fa      	ldr	r2, [r7, #28]
 801573e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015740:	2102      	movs	r1, #2
 8015742:	6878      	ldr	r0, [r7, #4]
 8015744:	f7ff fdd0 	bl	80152e8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	f7f6 fd05 	bl	800c158 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801574e:	4b0b      	ldr	r3, [pc, #44]	; (801577c <ip4_input+0x2b0>)
 8015750:	2200      	movs	r2, #0
 8015752:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015754:	4b09      	ldr	r3, [pc, #36]	; (801577c <ip4_input+0x2b0>)
 8015756:	2200      	movs	r2, #0
 8015758:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801575a:	4b08      	ldr	r3, [pc, #32]	; (801577c <ip4_input+0x2b0>)
 801575c:	2200      	movs	r2, #0
 801575e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015760:	4b06      	ldr	r3, [pc, #24]	; (801577c <ip4_input+0x2b0>)
 8015762:	2200      	movs	r2, #0
 8015764:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015766:	4b05      	ldr	r3, [pc, #20]	; (801577c <ip4_input+0x2b0>)
 8015768:	2200      	movs	r2, #0
 801576a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801576c:	4b03      	ldr	r3, [pc, #12]	; (801577c <ip4_input+0x2b0>)
 801576e:	2200      	movs	r2, #0
 8015770:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015772:	2300      	movs	r3, #0
}
 8015774:	4618      	mov	r0, r3
 8015776:	3720      	adds	r7, #32
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}
 801577c:	2000c3a4 	.word	0x2000c3a4
 8015780:	2000fac4 	.word	0x2000fac4

08015784 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b08a      	sub	sp, #40	; 0x28
 8015788:	af04      	add	r7, sp, #16
 801578a:	60f8      	str	r0, [r7, #12]
 801578c:	60b9      	str	r1, [r7, #8]
 801578e:	607a      	str	r2, [r7, #4]
 8015790:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d009      	beq.n	80157b0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801579c:	68bb      	ldr	r3, [r7, #8]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d003      	beq.n	80157aa <ip4_output_if+0x26>
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d102      	bne.n	80157b0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80157aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ac:	3304      	adds	r3, #4
 80157ae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80157b0:	78fa      	ldrb	r2, [r7, #3]
 80157b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b4:	9302      	str	r3, [sp, #8]
 80157b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80157ba:	9301      	str	r3, [sp, #4]
 80157bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80157c0:	9300      	str	r3, [sp, #0]
 80157c2:	4613      	mov	r3, r2
 80157c4:	687a      	ldr	r2, [r7, #4]
 80157c6:	6979      	ldr	r1, [r7, #20]
 80157c8:	68f8      	ldr	r0, [r7, #12]
 80157ca:	f000 f805 	bl	80157d8 <ip4_output_if_src>
 80157ce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80157d0:	4618      	mov	r0, r3
 80157d2:	3718      	adds	r7, #24
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}

080157d8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b088      	sub	sp, #32
 80157dc:	af00      	add	r7, sp, #0
 80157de:	60f8      	str	r0, [r7, #12]
 80157e0:	60b9      	str	r1, [r7, #8]
 80157e2:	607a      	str	r2, [r7, #4]
 80157e4:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	89db      	ldrh	r3, [r3, #14]
 80157ea:	2b01      	cmp	r3, #1
 80157ec:	d006      	beq.n	80157fc <ip4_output_if_src+0x24>
 80157ee:	4b48      	ldr	r3, [pc, #288]	; (8015910 <ip4_output_if_src+0x138>)
 80157f0:	f240 3233 	movw	r2, #819	; 0x333
 80157f4:	4947      	ldr	r1, [pc, #284]	; (8015914 <ip4_output_if_src+0x13c>)
 80157f6:	4848      	ldr	r0, [pc, #288]	; (8015918 <ip4_output_if_src+0x140>)
 80157f8:	f001 f9be 	bl	8016b78 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d060      	beq.n	80158c4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015802:	2314      	movs	r3, #20
 8015804:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8015806:	2114      	movs	r1, #20
 8015808:	68f8      	ldr	r0, [r7, #12]
 801580a:	f7f6 fc81 	bl	800c110 <pbuf_header>
 801580e:	4603      	mov	r3, r0
 8015810:	2b00      	cmp	r3, #0
 8015812:	d002      	beq.n	801581a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015814:	f06f 0301 	mvn.w	r3, #1
 8015818:	e075      	b.n	8015906 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	685b      	ldr	r3, [r3, #4]
 801581e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	895b      	ldrh	r3, [r3, #10]
 8015824:	2b13      	cmp	r3, #19
 8015826:	d806      	bhi.n	8015836 <ip4_output_if_src+0x5e>
 8015828:	4b39      	ldr	r3, [pc, #228]	; (8015910 <ip4_output_if_src+0x138>)
 801582a:	f240 3261 	movw	r2, #865	; 0x361
 801582e:	493b      	ldr	r1, [pc, #236]	; (801591c <ip4_output_if_src+0x144>)
 8015830:	4839      	ldr	r0, [pc, #228]	; (8015918 <ip4_output_if_src+0x140>)
 8015832:	f001 f9a1 	bl	8016b78 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015836:	69fb      	ldr	r3, [r7, #28]
 8015838:	78fa      	ldrb	r2, [r7, #3]
 801583a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801583c:	69fb      	ldr	r3, [r7, #28]
 801583e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015842:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	681a      	ldr	r2, [r3, #0]
 8015848:	69fb      	ldr	r3, [r7, #28]
 801584a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801584c:	8b7b      	ldrh	r3, [r7, #26]
 801584e:	089b      	lsrs	r3, r3, #2
 8015850:	b29b      	uxth	r3, r3
 8015852:	b2db      	uxtb	r3, r3
 8015854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015858:	b2da      	uxtb	r2, r3
 801585a:	69fb      	ldr	r3, [r7, #28]
 801585c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801585e:	69fb      	ldr	r3, [r7, #28]
 8015860:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015864:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	891b      	ldrh	r3, [r3, #8]
 801586a:	4618      	mov	r0, r3
 801586c:	f7f5 fa9c 	bl	800ada8 <lwip_htons>
 8015870:	4603      	mov	r3, r0
 8015872:	461a      	mov	r2, r3
 8015874:	69fb      	ldr	r3, [r7, #28]
 8015876:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015878:	69fb      	ldr	r3, [r7, #28]
 801587a:	2200      	movs	r2, #0
 801587c:	719a      	strb	r2, [r3, #6]
 801587e:	2200      	movs	r2, #0
 8015880:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015882:	4b27      	ldr	r3, [pc, #156]	; (8015920 <ip4_output_if_src+0x148>)
 8015884:	881b      	ldrh	r3, [r3, #0]
 8015886:	4618      	mov	r0, r3
 8015888:	f7f5 fa8e 	bl	800ada8 <lwip_htons>
 801588c:	4603      	mov	r3, r0
 801588e:	461a      	mov	r2, r3
 8015890:	69fb      	ldr	r3, [r7, #28]
 8015892:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015894:	4b22      	ldr	r3, [pc, #136]	; (8015920 <ip4_output_if_src+0x148>)
 8015896:	881b      	ldrh	r3, [r3, #0]
 8015898:	3301      	adds	r3, #1
 801589a:	b29a      	uxth	r2, r3
 801589c:	4b20      	ldr	r3, [pc, #128]	; (8015920 <ip4_output_if_src+0x148>)
 801589e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80158a0:	68bb      	ldr	r3, [r7, #8]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d104      	bne.n	80158b0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80158a6:	4b1f      	ldr	r3, [pc, #124]	; (8015924 <ip4_output_if_src+0x14c>)
 80158a8:	681a      	ldr	r2, [r3, #0]
 80158aa:	69fb      	ldr	r3, [r7, #28]
 80158ac:	60da      	str	r2, [r3, #12]
 80158ae:	e003      	b.n	80158b8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	681a      	ldr	r2, [r3, #0]
 80158b4:	69fb      	ldr	r3, [r7, #28]
 80158b6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80158b8:	69fb      	ldr	r3, [r7, #28]
 80158ba:	2200      	movs	r2, #0
 80158bc:	729a      	strb	r2, [r3, #10]
 80158be:	2200      	movs	r2, #0
 80158c0:	72da      	strb	r2, [r3, #11]
 80158c2:	e008      	b.n	80158d6 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	685b      	ldr	r3, [r3, #4]
 80158c8:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80158ca:	69fb      	ldr	r3, [r7, #28]
 80158cc:	691b      	ldr	r3, [r3, #16]
 80158ce:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80158d0:	f107 0314 	add.w	r3, r7, #20
 80158d4:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80158d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d00c      	beq.n	80158f8 <ip4_output_if_src+0x120>
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	891a      	ldrh	r2, [r3, #8]
 80158e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80158e6:	429a      	cmp	r2, r3
 80158e8:	d906      	bls.n	80158f8 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 80158ea:	687a      	ldr	r2, [r7, #4]
 80158ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80158ee:	68f8      	ldr	r0, [r7, #12]
 80158f0:	f000 fd0a 	bl	8016308 <ip4_frag>
 80158f4:	4603      	mov	r3, r0
 80158f6:	e006      	b.n	8015906 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80158f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158fa:	695b      	ldr	r3, [r3, #20]
 80158fc:	687a      	ldr	r2, [r7, #4]
 80158fe:	68f9      	ldr	r1, [r7, #12]
 8015900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015902:	4798      	blx	r3
 8015904:	4603      	mov	r3, r0
}
 8015906:	4618      	mov	r0, r3
 8015908:	3720      	adds	r7, #32
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop
 8015910:	0801aaa4 	.word	0x0801aaa4
 8015914:	0801aad8 	.word	0x0801aad8
 8015918:	0801aae4 	.word	0x0801aae4
 801591c:	0801ab0c 	.word	0x0801ab0c
 8015920:	20008d7e 	.word	0x20008d7e
 8015924:	080262d4 	.word	0x080262d4

08015928 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015928:	b480      	push	{r7}
 801592a:	b085      	sub	sp, #20
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
 8015930:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	f1b3 3fff 	cmp.w	r3, #4294967295
 801593c:	d002      	beq.n	8015944 <ip4_addr_isbroadcast_u32+0x1c>
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d101      	bne.n	8015948 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015944:	2301      	movs	r3, #1
 8015946:	e02a      	b.n	801599e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801594e:	f003 0302 	and.w	r3, r3, #2
 8015952:	2b00      	cmp	r3, #0
 8015954:	d101      	bne.n	801595a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015956:	2300      	movs	r3, #0
 8015958:	e021      	b.n	801599e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	3304      	adds	r3, #4
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	687a      	ldr	r2, [r7, #4]
 8015962:	429a      	cmp	r2, r3
 8015964:	d101      	bne.n	801596a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015966:	2300      	movs	r3, #0
 8015968:	e019      	b.n	801599e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801596a:	68fa      	ldr	r2, [r7, #12]
 801596c:	683b      	ldr	r3, [r7, #0]
 801596e:	3304      	adds	r3, #4
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	405a      	eors	r2, r3
 8015974:	683b      	ldr	r3, [r7, #0]
 8015976:	3308      	adds	r3, #8
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	4013      	ands	r3, r2
 801597c:	2b00      	cmp	r3, #0
 801597e:	d10d      	bne.n	801599c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	3308      	adds	r3, #8
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	43da      	mvns	r2, r3
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	3308      	adds	r3, #8
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015994:	429a      	cmp	r2, r3
 8015996:	d101      	bne.n	801599c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015998:	2301      	movs	r3, #1
 801599a:	e000      	b.n	801599e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801599c:	2300      	movs	r3, #0
  }
}
 801599e:	4618      	mov	r0, r3
 80159a0:	3714      	adds	r7, #20
 80159a2:	46bd      	mov	sp, r7
 80159a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a8:	4770      	bx	lr
	...

080159ac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b084      	sub	sp, #16
 80159b0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80159b2:	2300      	movs	r3, #0
 80159b4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80159b6:	4b12      	ldr	r3, [pc, #72]	; (8015a00 <ip_reass_tmr+0x54>)
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80159bc:	e018      	b.n	80159f0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	7fdb      	ldrb	r3, [r3, #31]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d00b      	beq.n	80159de <ip_reass_tmr+0x32>
      r->timer--;
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	7fdb      	ldrb	r3, [r3, #31]
 80159ca:	3b01      	subs	r3, #1
 80159cc:	b2da      	uxtb	r2, r3
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	60fb      	str	r3, [r7, #12]
 80159dc:	e008      	b.n	80159f0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80159e8:	68b9      	ldr	r1, [r7, #8]
 80159ea:	6878      	ldr	r0, [r7, #4]
 80159ec:	f000 f80a 	bl	8015a04 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d1e3      	bne.n	80159be <ip_reass_tmr+0x12>
     }
   }
}
 80159f6:	bf00      	nop
 80159f8:	3710      	adds	r7, #16
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	bf00      	nop
 8015a00:	20008d80 	.word	0x20008d80

08015a04 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b088      	sub	sp, #32
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
 8015a0c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015a0e:	2300      	movs	r3, #0
 8015a10:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015a12:	683a      	ldr	r2, [r7, #0]
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d105      	bne.n	8015a26 <ip_reass_free_complete_datagram+0x22>
 8015a1a:	4b45      	ldr	r3, [pc, #276]	; (8015b30 <ip_reass_free_complete_datagram+0x12c>)
 8015a1c:	22ab      	movs	r2, #171	; 0xab
 8015a1e:	4945      	ldr	r1, [pc, #276]	; (8015b34 <ip_reass_free_complete_datagram+0x130>)
 8015a20:	4845      	ldr	r0, [pc, #276]	; (8015b38 <ip_reass_free_complete_datagram+0x134>)
 8015a22:	f001 f8a9 	bl	8016b78 <iprintf>
  if (prev != NULL) {
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d00a      	beq.n	8015a42 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	687a      	ldr	r2, [r7, #4]
 8015a32:	429a      	cmp	r2, r3
 8015a34:	d005      	beq.n	8015a42 <ip_reass_free_complete_datagram+0x3e>
 8015a36:	4b3e      	ldr	r3, [pc, #248]	; (8015b30 <ip_reass_free_complete_datagram+0x12c>)
 8015a38:	22ad      	movs	r2, #173	; 0xad
 8015a3a:	4940      	ldr	r1, [pc, #256]	; (8015b3c <ip_reass_free_complete_datagram+0x138>)
 8015a3c:	483e      	ldr	r0, [pc, #248]	; (8015b38 <ip_reass_free_complete_datagram+0x134>)
 8015a3e:	f001 f89b 	bl	8016b78 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	685b      	ldr	r3, [r3, #4]
 8015a46:	685b      	ldr	r3, [r3, #4]
 8015a48:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	889b      	ldrh	r3, [r3, #4]
 8015a4e:	b29b      	uxth	r3, r3
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d12a      	bne.n	8015aaa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	685b      	ldr	r3, [r3, #4]
 8015a58:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015a5a:	697b      	ldr	r3, [r7, #20]
 8015a5c:	681a      	ldr	r2, [r3, #0]
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015a62:	69bb      	ldr	r3, [r7, #24]
 8015a64:	6858      	ldr	r0, [r3, #4]
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	3308      	adds	r3, #8
 8015a6a:	2214      	movs	r2, #20
 8015a6c:	4619      	mov	r1, r3
 8015a6e:	f001 f870 	bl	8016b52 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015a72:	2101      	movs	r1, #1
 8015a74:	69b8      	ldr	r0, [r7, #24]
 8015a76:	f7ff fc47 	bl	8015308 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015a7a:	69b8      	ldr	r0, [r7, #24]
 8015a7c:	f7f6 fc06 	bl	800c28c <pbuf_clen>
 8015a80:	4603      	mov	r3, r0
 8015a82:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015a84:	8bfa      	ldrh	r2, [r7, #30]
 8015a86:	8a7b      	ldrh	r3, [r7, #18]
 8015a88:	4413      	add	r3, r2
 8015a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a8e:	db05      	blt.n	8015a9c <ip_reass_free_complete_datagram+0x98>
 8015a90:	4b27      	ldr	r3, [pc, #156]	; (8015b30 <ip_reass_free_complete_datagram+0x12c>)
 8015a92:	22bc      	movs	r2, #188	; 0xbc
 8015a94:	492a      	ldr	r1, [pc, #168]	; (8015b40 <ip_reass_free_complete_datagram+0x13c>)
 8015a96:	4828      	ldr	r0, [pc, #160]	; (8015b38 <ip_reass_free_complete_datagram+0x134>)
 8015a98:	f001 f86e 	bl	8016b78 <iprintf>
    pbufs_freed += clen;
 8015a9c:	8bfa      	ldrh	r2, [r7, #30]
 8015a9e:	8a7b      	ldrh	r3, [r7, #18]
 8015aa0:	4413      	add	r3, r2
 8015aa2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015aa4:	69b8      	ldr	r0, [r7, #24]
 8015aa6:	f7f6 fb57 	bl	800c158 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	685b      	ldr	r3, [r3, #4]
 8015aae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015ab0:	e01f      	b.n	8015af2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015ab2:	69bb      	ldr	r3, [r7, #24]
 8015ab4:	685b      	ldr	r3, [r3, #4]
 8015ab6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015ab8:	69bb      	ldr	r3, [r7, #24]
 8015aba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015abc:	697b      	ldr	r3, [r7, #20]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015ac2:	68f8      	ldr	r0, [r7, #12]
 8015ac4:	f7f6 fbe2 	bl	800c28c <pbuf_clen>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015acc:	8bfa      	ldrh	r2, [r7, #30]
 8015ace:	8a7b      	ldrh	r3, [r7, #18]
 8015ad0:	4413      	add	r3, r2
 8015ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015ad6:	db05      	blt.n	8015ae4 <ip_reass_free_complete_datagram+0xe0>
 8015ad8:	4b15      	ldr	r3, [pc, #84]	; (8015b30 <ip_reass_free_complete_datagram+0x12c>)
 8015ada:	22cc      	movs	r2, #204	; 0xcc
 8015adc:	4918      	ldr	r1, [pc, #96]	; (8015b40 <ip_reass_free_complete_datagram+0x13c>)
 8015ade:	4816      	ldr	r0, [pc, #88]	; (8015b38 <ip_reass_free_complete_datagram+0x134>)
 8015ae0:	f001 f84a 	bl	8016b78 <iprintf>
    pbufs_freed += clen;
 8015ae4:	8bfa      	ldrh	r2, [r7, #30]
 8015ae6:	8a7b      	ldrh	r3, [r7, #18]
 8015ae8:	4413      	add	r3, r2
 8015aea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015aec:	68f8      	ldr	r0, [r7, #12]
 8015aee:	f7f6 fb33 	bl	800c158 <pbuf_free>
  while (p != NULL) {
 8015af2:	69bb      	ldr	r3, [r7, #24]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d1dc      	bne.n	8015ab2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015af8:	6839      	ldr	r1, [r7, #0]
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f000 f8c2 	bl	8015c84 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8015b00:	4b10      	ldr	r3, [pc, #64]	; (8015b44 <ip_reass_free_complete_datagram+0x140>)
 8015b02:	881b      	ldrh	r3, [r3, #0]
 8015b04:	8bfa      	ldrh	r2, [r7, #30]
 8015b06:	429a      	cmp	r2, r3
 8015b08:	d905      	bls.n	8015b16 <ip_reass_free_complete_datagram+0x112>
 8015b0a:	4b09      	ldr	r3, [pc, #36]	; (8015b30 <ip_reass_free_complete_datagram+0x12c>)
 8015b0c:	22d2      	movs	r2, #210	; 0xd2
 8015b0e:	490e      	ldr	r1, [pc, #56]	; (8015b48 <ip_reass_free_complete_datagram+0x144>)
 8015b10:	4809      	ldr	r0, [pc, #36]	; (8015b38 <ip_reass_free_complete_datagram+0x134>)
 8015b12:	f001 f831 	bl	8016b78 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8015b16:	4b0b      	ldr	r3, [pc, #44]	; (8015b44 <ip_reass_free_complete_datagram+0x140>)
 8015b18:	881a      	ldrh	r2, [r3, #0]
 8015b1a:	8bfb      	ldrh	r3, [r7, #30]
 8015b1c:	1ad3      	subs	r3, r2, r3
 8015b1e:	b29a      	uxth	r2, r3
 8015b20:	4b08      	ldr	r3, [pc, #32]	; (8015b44 <ip_reass_free_complete_datagram+0x140>)
 8015b22:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015b24:	8bfb      	ldrh	r3, [r7, #30]
}
 8015b26:	4618      	mov	r0, r3
 8015b28:	3720      	adds	r7, #32
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bd80      	pop	{r7, pc}
 8015b2e:	bf00      	nop
 8015b30:	0801ab3c 	.word	0x0801ab3c
 8015b34:	0801ab78 	.word	0x0801ab78
 8015b38:	0801ab84 	.word	0x0801ab84
 8015b3c:	0801abac 	.word	0x0801abac
 8015b40:	0801abc0 	.word	0x0801abc0
 8015b44:	20008d84 	.word	0x20008d84
 8015b48:	0801abe0 	.word	0x0801abe0

08015b4c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b08a      	sub	sp, #40	; 0x28
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
 8015b54:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015b56:	2300      	movs	r3, #0
 8015b58:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015b5e:	2300      	movs	r3, #0
 8015b60:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015b62:	2300      	movs	r3, #0
 8015b64:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015b66:	2300      	movs	r3, #0
 8015b68:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015b6a:	4b28      	ldr	r3, [pc, #160]	; (8015c0c <ip_reass_remove_oldest_datagram+0xc0>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015b70:	e030      	b.n	8015bd4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b74:	695a      	ldr	r2, [r3, #20]
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	68db      	ldr	r3, [r3, #12]
 8015b7a:	429a      	cmp	r2, r3
 8015b7c:	d10c      	bne.n	8015b98 <ip_reass_remove_oldest_datagram+0x4c>
 8015b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b80:	699a      	ldr	r2, [r3, #24]
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	691b      	ldr	r3, [r3, #16]
 8015b86:	429a      	cmp	r2, r3
 8015b88:	d106      	bne.n	8015b98 <ip_reass_remove_oldest_datagram+0x4c>
 8015b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b8c:	899a      	ldrh	r2, [r3, #12]
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	889b      	ldrh	r3, [r3, #4]
 8015b92:	b29b      	uxth	r3, r3
 8015b94:	429a      	cmp	r2, r3
 8015b96:	d014      	beq.n	8015bc2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015b98:	693b      	ldr	r3, [r7, #16]
 8015b9a:	3301      	adds	r3, #1
 8015b9c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015b9e:	6a3b      	ldr	r3, [r7, #32]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d104      	bne.n	8015bae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ba6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015ba8:	69fb      	ldr	r3, [r7, #28]
 8015baa:	61bb      	str	r3, [r7, #24]
 8015bac:	e009      	b.n	8015bc2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bb0:	7fda      	ldrb	r2, [r3, #31]
 8015bb2:	6a3b      	ldr	r3, [r7, #32]
 8015bb4:	7fdb      	ldrb	r3, [r3, #31]
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	d803      	bhi.n	8015bc2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bbc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015bbe:	69fb      	ldr	r3, [r7, #28]
 8015bc0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d001      	beq.n	8015bce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bcc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d1cb      	bne.n	8015b72 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015bda:	6a3b      	ldr	r3, [r7, #32]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d008      	beq.n	8015bf2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015be0:	69b9      	ldr	r1, [r7, #24]
 8015be2:	6a38      	ldr	r0, [r7, #32]
 8015be4:	f7ff ff0e 	bl	8015a04 <ip_reass_free_complete_datagram>
 8015be8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015bea:	697a      	ldr	r2, [r7, #20]
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	4413      	add	r3, r2
 8015bf0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015bf2:	697a      	ldr	r2, [r7, #20]
 8015bf4:	683b      	ldr	r3, [r7, #0]
 8015bf6:	429a      	cmp	r2, r3
 8015bf8:	da02      	bge.n	8015c00 <ip_reass_remove_oldest_datagram+0xb4>
 8015bfa:	693b      	ldr	r3, [r7, #16]
 8015bfc:	2b01      	cmp	r3, #1
 8015bfe:	dcac      	bgt.n	8015b5a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015c00:	697b      	ldr	r3, [r7, #20]
}
 8015c02:	4618      	mov	r0, r3
 8015c04:	3728      	adds	r7, #40	; 0x28
 8015c06:	46bd      	mov	sp, r7
 8015c08:	bd80      	pop	{r7, pc}
 8015c0a:	bf00      	nop
 8015c0c:	20008d80 	.word	0x20008d80

08015c10 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b084      	sub	sp, #16
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
 8015c18:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015c1a:	2004      	movs	r0, #4
 8015c1c:	f7f5 fce8 	bl	800b5f0 <memp_malloc>
 8015c20:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d110      	bne.n	8015c4a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015c28:	6839      	ldr	r1, [r7, #0]
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f7ff ff8e 	bl	8015b4c <ip_reass_remove_oldest_datagram>
 8015c30:	4602      	mov	r2, r0
 8015c32:	683b      	ldr	r3, [r7, #0]
 8015c34:	4293      	cmp	r3, r2
 8015c36:	dc03      	bgt.n	8015c40 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015c38:	2004      	movs	r0, #4
 8015c3a:	f7f5 fcd9 	bl	800b5f0 <memp_malloc>
 8015c3e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d101      	bne.n	8015c4a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8015c46:	2300      	movs	r3, #0
 8015c48:	e016      	b.n	8015c78 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015c4a:	2220      	movs	r2, #32
 8015c4c:	2100      	movs	r1, #0
 8015c4e:	68f8      	ldr	r0, [r7, #12]
 8015c50:	f000 ff8a 	bl	8016b68 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	2203      	movs	r2, #3
 8015c58:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015c5a:	4b09      	ldr	r3, [pc, #36]	; (8015c80 <ip_reass_enqueue_new_datagram+0x70>)
 8015c5c:	681a      	ldr	r2, [r3, #0]
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015c62:	4a07      	ldr	r2, [pc, #28]	; (8015c80 <ip_reass_enqueue_new_datagram+0x70>)
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	3308      	adds	r3, #8
 8015c6c:	2214      	movs	r2, #20
 8015c6e:	6879      	ldr	r1, [r7, #4]
 8015c70:	4618      	mov	r0, r3
 8015c72:	f000 ff6e 	bl	8016b52 <memcpy>
  return ipr;
 8015c76:	68fb      	ldr	r3, [r7, #12]
}
 8015c78:	4618      	mov	r0, r3
 8015c7a:	3710      	adds	r7, #16
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bd80      	pop	{r7, pc}
 8015c80:	20008d80 	.word	0x20008d80

08015c84 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b082      	sub	sp, #8
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
 8015c8c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015c8e:	4b10      	ldr	r3, [pc, #64]	; (8015cd0 <ip_reass_dequeue_datagram+0x4c>)
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	687a      	ldr	r2, [r7, #4]
 8015c94:	429a      	cmp	r2, r3
 8015c96:	d104      	bne.n	8015ca2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	4a0c      	ldr	r2, [pc, #48]	; (8015cd0 <ip_reass_dequeue_datagram+0x4c>)
 8015c9e:	6013      	str	r3, [r2, #0]
 8015ca0:	e00d      	b.n	8015cbe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d106      	bne.n	8015cb6 <ip_reass_dequeue_datagram+0x32>
 8015ca8:	4b0a      	ldr	r3, [pc, #40]	; (8015cd4 <ip_reass_dequeue_datagram+0x50>)
 8015caa:	f240 1245 	movw	r2, #325	; 0x145
 8015cae:	490a      	ldr	r1, [pc, #40]	; (8015cd8 <ip_reass_dequeue_datagram+0x54>)
 8015cb0:	480a      	ldr	r0, [pc, #40]	; (8015cdc <ip_reass_dequeue_datagram+0x58>)
 8015cb2:	f000 ff61 	bl	8016b78 <iprintf>
    prev->next = ipr->next;
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	681a      	ldr	r2, [r3, #0]
 8015cba:	683b      	ldr	r3, [r7, #0]
 8015cbc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015cbe:	6879      	ldr	r1, [r7, #4]
 8015cc0:	2004      	movs	r0, #4
 8015cc2:	f7f5 fce7 	bl	800b694 <memp_free>
}
 8015cc6:	bf00      	nop
 8015cc8:	3708      	adds	r7, #8
 8015cca:	46bd      	mov	sp, r7
 8015ccc:	bd80      	pop	{r7, pc}
 8015cce:	bf00      	nop
 8015cd0:	20008d80 	.word	0x20008d80
 8015cd4:	0801ab3c 	.word	0x0801ab3c
 8015cd8:	0801abfc 	.word	0x0801abfc
 8015cdc:	0801ab84 	.word	0x0801ab84

08015ce0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b08c      	sub	sp, #48	; 0x30
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	60f8      	str	r0, [r7, #12]
 8015ce8:	60b9      	str	r1, [r7, #8]
 8015cea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8015cec:	2300      	movs	r3, #0
 8015cee:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015cf0:	2301      	movs	r3, #1
 8015cf2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8015cf4:	68bb      	ldr	r3, [r7, #8]
 8015cf6:	685b      	ldr	r3, [r3, #4]
 8015cf8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8015cfa:	69fb      	ldr	r3, [r7, #28]
 8015cfc:	885b      	ldrh	r3, [r3, #2]
 8015cfe:	b29b      	uxth	r3, r3
 8015d00:	4618      	mov	r0, r3
 8015d02:	f7f5 f851 	bl	800ada8 <lwip_htons>
 8015d06:	4603      	mov	r3, r0
 8015d08:	461a      	mov	r2, r3
 8015d0a:	69fb      	ldr	r3, [r7, #28]
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	b29b      	uxth	r3, r3
 8015d10:	f003 030f 	and.w	r3, r3, #15
 8015d14:	b29b      	uxth	r3, r3
 8015d16:	009b      	lsls	r3, r3, #2
 8015d18:	b29b      	uxth	r3, r3
 8015d1a:	1ad3      	subs	r3, r2, r3
 8015d1c:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8015d1e:	69fb      	ldr	r3, [r7, #28]
 8015d20:	88db      	ldrh	r3, [r3, #6]
 8015d22:	b29b      	uxth	r3, r3
 8015d24:	4618      	mov	r0, r3
 8015d26:	f7f5 f83f 	bl	800ada8 <lwip_htons>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d30:	b29b      	uxth	r3, r3
 8015d32:	00db      	lsls	r3, r3, #3
 8015d34:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	685b      	ldr	r3, [r3, #4]
 8015d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d3e:	2200      	movs	r2, #0
 8015d40:	701a      	strb	r2, [r3, #0]
 8015d42:	2200      	movs	r2, #0
 8015d44:	705a      	strb	r2, [r3, #1]
 8015d46:	2200      	movs	r2, #0
 8015d48:	709a      	strb	r2, [r3, #2]
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d50:	8b3a      	ldrh	r2, [r7, #24]
 8015d52:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8015d54:	8b3a      	ldrh	r2, [r7, #24]
 8015d56:	8b7b      	ldrh	r3, [r7, #26]
 8015d58:	4413      	add	r3, r2
 8015d5a:	b29a      	uxth	r2, r3
 8015d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d5e:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	685b      	ldr	r3, [r3, #4]
 8015d64:	627b      	str	r3, [r7, #36]	; 0x24
 8015d66:	e061      	b.n	8015e2c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8015d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d6a:	685b      	ldr	r3, [r3, #4]
 8015d6c:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8015d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d70:	889b      	ldrh	r3, [r3, #4]
 8015d72:	b29a      	uxth	r2, r3
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	889b      	ldrh	r3, [r3, #4]
 8015d78:	b29b      	uxth	r3, r3
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	d232      	bcs.n	8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d82:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d01f      	beq.n	8015dca <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d8c:	889b      	ldrh	r3, [r3, #4]
 8015d8e:	b29a      	uxth	r2, r3
 8015d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d92:	88db      	ldrh	r3, [r3, #6]
 8015d94:	b29b      	uxth	r3, r3
 8015d96:	429a      	cmp	r2, r3
 8015d98:	f0c0 80e3 	bcc.w	8015f62 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8015d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d9e:	88db      	ldrh	r3, [r3, #6]
 8015da0:	b29a      	uxth	r2, r3
 8015da2:	697b      	ldr	r3, [r7, #20]
 8015da4:	889b      	ldrh	r3, [r3, #4]
 8015da6:	b29b      	uxth	r3, r3
 8015da8:	429a      	cmp	r2, r3
 8015daa:	f200 80da 	bhi.w	8015f62 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db0:	68ba      	ldr	r2, [r7, #8]
 8015db2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db6:	88db      	ldrh	r3, [r3, #6]
 8015db8:	b29a      	uxth	r2, r3
 8015dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dbc:	889b      	ldrh	r3, [r3, #4]
 8015dbe:	b29b      	uxth	r3, r3
 8015dc0:	429a      	cmp	r2, r3
 8015dc2:	d037      	beq.n	8015e34 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015dc8:	e034      	b.n	8015e34 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8015dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dcc:	88db      	ldrh	r3, [r3, #6]
 8015dce:	b29a      	uxth	r2, r3
 8015dd0:	697b      	ldr	r3, [r7, #20]
 8015dd2:	889b      	ldrh	r3, [r3, #4]
 8015dd4:	b29b      	uxth	r3, r3
 8015dd6:	429a      	cmp	r2, r3
 8015dd8:	f200 80c5 	bhi.w	8015f66 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	68ba      	ldr	r2, [r7, #8]
 8015de0:	605a      	str	r2, [r3, #4]
      break;
 8015de2:	e027      	b.n	8015e34 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8015de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015de6:	889b      	ldrh	r3, [r3, #4]
 8015de8:	b29a      	uxth	r2, r3
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	889b      	ldrh	r3, [r3, #4]
 8015dee:	b29b      	uxth	r3, r3
 8015df0:	429a      	cmp	r2, r3
 8015df2:	f000 80ba 	beq.w	8015f6a <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df8:	889b      	ldrh	r3, [r3, #4]
 8015dfa:	b29a      	uxth	r2, r3
 8015dfc:	697b      	ldr	r3, [r7, #20]
 8015dfe:	88db      	ldrh	r3, [r3, #6]
 8015e00:	b29b      	uxth	r3, r3
 8015e02:	429a      	cmp	r2, r3
 8015e04:	f0c0 80b3 	bcc.w	8015f6e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d009      	beq.n	8015e22 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8015e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e10:	88db      	ldrh	r3, [r3, #6]
 8015e12:	b29a      	uxth	r2, r3
 8015e14:	697b      	ldr	r3, [r7, #20]
 8015e16:	889b      	ldrh	r3, [r3, #4]
 8015e18:	b29b      	uxth	r3, r3
 8015e1a:	429a      	cmp	r2, r3
 8015e1c:	d001      	beq.n	8015e22 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015e1e:	2300      	movs	r3, #0
 8015e20:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015e28:	697b      	ldr	r3, [r7, #20]
 8015e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d19a      	bne.n	8015d68 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8015e32:	e000      	b.n	8015e36 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8015e34:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d12d      	bne.n	8015e98 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8015e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d01c      	beq.n	8015e7c <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e44:	88db      	ldrh	r3, [r3, #6]
 8015e46:	b29a      	uxth	r2, r3
 8015e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e4a:	889b      	ldrh	r3, [r3, #4]
 8015e4c:	b29b      	uxth	r3, r3
 8015e4e:	429a      	cmp	r2, r3
 8015e50:	d906      	bls.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8015e52:	4b51      	ldr	r3, [pc, #324]	; (8015f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015e54:	f240 12ab 	movw	r2, #427	; 0x1ab
 8015e58:	4950      	ldr	r1, [pc, #320]	; (8015f9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e5a:	4851      	ldr	r0, [pc, #324]	; (8015fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015e5c:	f000 fe8c 	bl	8016b78 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e62:	68ba      	ldr	r2, [r7, #8]
 8015e64:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e68:	88db      	ldrh	r3, [r3, #6]
 8015e6a:	b29a      	uxth	r2, r3
 8015e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e6e:	889b      	ldrh	r3, [r3, #4]
 8015e70:	b29b      	uxth	r3, r3
 8015e72:	429a      	cmp	r2, r3
 8015e74:	d010      	beq.n	8015e98 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8015e76:	2300      	movs	r3, #0
 8015e78:	623b      	str	r3, [r7, #32]
 8015e7a:	e00d      	b.n	8015e98 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	685b      	ldr	r3, [r3, #4]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d006      	beq.n	8015e92 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8015e84:	4b44      	ldr	r3, [pc, #272]	; (8015f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015e86:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8015e8a:	4946      	ldr	r1, [pc, #280]	; (8015fa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e8c:	4844      	ldr	r0, [pc, #272]	; (8015fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015e8e:	f000 fe73 	bl	8016b78 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	68ba      	ldr	r2, [r7, #8]
 8015e96:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d105      	bne.n	8015eaa <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	7f9b      	ldrb	r3, [r3, #30]
 8015ea2:	f003 0301 	and.w	r3, r3, #1
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d059      	beq.n	8015f5e <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8015eaa:	6a3b      	ldr	r3, [r7, #32]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d04f      	beq.n	8015f50 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	685b      	ldr	r3, [r3, #4]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d006      	beq.n	8015ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	685b      	ldr	r3, [r3, #4]
 8015ebc:	685b      	ldr	r3, [r3, #4]
 8015ebe:	889b      	ldrh	r3, [r3, #4]
 8015ec0:	b29b      	uxth	r3, r3
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d002      	beq.n	8015ecc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	623b      	str	r3, [r7, #32]
 8015eca:	e041      	b.n	8015f50 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ece:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015ed6:	e012      	b.n	8015efe <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8015ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eda:	685b      	ldr	r3, [r3, #4]
 8015edc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee0:	88db      	ldrh	r3, [r3, #6]
 8015ee2:	b29a      	uxth	r2, r3
 8015ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ee6:	889b      	ldrh	r3, [r3, #4]
 8015ee8:	b29b      	uxth	r3, r3
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d002      	beq.n	8015ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8015eee:	2300      	movs	r3, #0
 8015ef0:	623b      	str	r3, [r7, #32]
            break;
 8015ef2:	e007      	b.n	8015f04 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8015ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d1e9      	bne.n	8015ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015f04:	6a3b      	ldr	r3, [r7, #32]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d022      	beq.n	8015f50 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	685b      	ldr	r3, [r3, #4]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d106      	bne.n	8015f20 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8015f12:	4b21      	ldr	r3, [pc, #132]	; (8015f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015f14:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8015f18:	4923      	ldr	r1, [pc, #140]	; (8015fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015f1a:	4821      	ldr	r0, [pc, #132]	; (8015fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015f1c:	f000 fe2c 	bl	8016b78 <iprintf>
          LWIP_ASSERT("sanity check",
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	685b      	ldr	r3, [r3, #4]
 8015f24:	685b      	ldr	r3, [r3, #4]
 8015f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015f28:	429a      	cmp	r2, r3
 8015f2a:	d106      	bne.n	8015f3a <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8015f2c:	4b1a      	ldr	r3, [pc, #104]	; (8015f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015f2e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015f32:	491d      	ldr	r1, [pc, #116]	; (8015fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015f34:	481a      	ldr	r0, [pc, #104]	; (8015fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015f36:	f000 fe1f 	bl	8016b78 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d006      	beq.n	8015f50 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8015f42:	4b15      	ldr	r3, [pc, #84]	; (8015f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015f44:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8015f48:	4918      	ldr	r1, [pc, #96]	; (8015fac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015f4a:	4815      	ldr	r0, [pc, #84]	; (8015fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015f4c:	f000 fe14 	bl	8016b78 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015f50:	6a3b      	ldr	r3, [r7, #32]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	bf14      	ite	ne
 8015f56:	2301      	movne	r3, #1
 8015f58:	2300      	moveq	r3, #0
 8015f5a:	b2db      	uxtb	r3, r3
 8015f5c:	e018      	b.n	8015f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015f5e:	2300      	movs	r3, #0
 8015f60:	e016      	b.n	8015f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8015f62:	bf00      	nop
 8015f64:	e004      	b.n	8015f70 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8015f66:	bf00      	nop
 8015f68:	e002      	b.n	8015f70 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8015f6a:	bf00      	nop
 8015f6c:	e000      	b.n	8015f70 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8015f6e:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8015f70:	68b8      	ldr	r0, [r7, #8]
 8015f72:	f7f6 f98b 	bl	800c28c <pbuf_clen>
 8015f76:	4603      	mov	r3, r0
 8015f78:	461a      	mov	r2, r3
 8015f7a:	4b0d      	ldr	r3, [pc, #52]	; (8015fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015f7c:	881b      	ldrh	r3, [r3, #0]
 8015f7e:	1a9b      	subs	r3, r3, r2
 8015f80:	b29a      	uxth	r2, r3
 8015f82:	4b0b      	ldr	r3, [pc, #44]	; (8015fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015f84:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8015f86:	68b8      	ldr	r0, [r7, #8]
 8015f88:	f7f6 f8e6 	bl	800c158 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f8c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8015f90:	4618      	mov	r0, r3
 8015f92:	3730      	adds	r7, #48	; 0x30
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd80      	pop	{r7, pc}
 8015f98:	0801ab3c 	.word	0x0801ab3c
 8015f9c:	0801ac18 	.word	0x0801ac18
 8015fa0:	0801ab84 	.word	0x0801ab84
 8015fa4:	0801ac38 	.word	0x0801ac38
 8015fa8:	0801ac70 	.word	0x0801ac70
 8015fac:	0801ac80 	.word	0x0801ac80
 8015fb0:	20008d84 	.word	0x20008d84

08015fb4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b08e      	sub	sp, #56	; 0x38
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	685b      	ldr	r3, [r3, #4]
 8015fc0:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8015fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fc4:	781b      	ldrb	r3, [r3, #0]
 8015fc6:	f003 030f 	and.w	r3, r3, #15
 8015fca:	009b      	lsls	r3, r3, #2
 8015fcc:	2b14      	cmp	r3, #20
 8015fce:	f040 8131 	bne.w	8016234 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8015fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fd4:	88db      	ldrh	r3, [r3, #6]
 8015fd6:	b29b      	uxth	r3, r3
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f7f4 fee5 	bl	800ada8 <lwip_htons>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015fe4:	b29b      	uxth	r3, r3
 8015fe6:	00db      	lsls	r3, r3, #3
 8015fe8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8015fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fec:	885b      	ldrh	r3, [r3, #2]
 8015fee:	b29b      	uxth	r3, r3
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	f7f4 fed9 	bl	800ada8 <lwip_htons>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	461a      	mov	r2, r3
 8015ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ffc:	781b      	ldrb	r3, [r3, #0]
 8015ffe:	b29b      	uxth	r3, r3
 8016000:	f003 030f 	and.w	r3, r3, #15
 8016004:	b29b      	uxth	r3, r3
 8016006:	009b      	lsls	r3, r3, #2
 8016008:	b29b      	uxth	r3, r3
 801600a:	1ad3      	subs	r3, r2, r3
 801600c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f7f6 f93c 	bl	800c28c <pbuf_clen>
 8016014:	4603      	mov	r3, r0
 8016016:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016018:	4b8d      	ldr	r3, [pc, #564]	; (8016250 <ip4_reass+0x29c>)
 801601a:	881b      	ldrh	r3, [r3, #0]
 801601c:	461a      	mov	r2, r3
 801601e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016020:	4413      	add	r3, r2
 8016022:	2b0a      	cmp	r3, #10
 8016024:	dd10      	ble.n	8016048 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016026:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016028:	4619      	mov	r1, r3
 801602a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801602c:	f7ff fd8e 	bl	8015b4c <ip_reass_remove_oldest_datagram>
 8016030:	4603      	mov	r3, r0
 8016032:	2b00      	cmp	r3, #0
 8016034:	f000 8100 	beq.w	8016238 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016038:	4b85      	ldr	r3, [pc, #532]	; (8016250 <ip4_reass+0x29c>)
 801603a:	881b      	ldrh	r3, [r3, #0]
 801603c:	461a      	mov	r2, r3
 801603e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016040:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016042:	2b0a      	cmp	r3, #10
 8016044:	f300 80f8 	bgt.w	8016238 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016048:	4b82      	ldr	r3, [pc, #520]	; (8016254 <ip4_reass+0x2a0>)
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	633b      	str	r3, [r7, #48]	; 0x30
 801604e:	e015      	b.n	801607c <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016052:	695a      	ldr	r2, [r3, #20]
 8016054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016056:	68db      	ldr	r3, [r3, #12]
 8016058:	429a      	cmp	r2, r3
 801605a:	d10c      	bne.n	8016076 <ip4_reass+0xc2>
 801605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801605e:	699a      	ldr	r2, [r3, #24]
 8016060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016062:	691b      	ldr	r3, [r3, #16]
 8016064:	429a      	cmp	r2, r3
 8016066:	d106      	bne.n	8016076 <ip4_reass+0xc2>
 8016068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801606a:	899a      	ldrh	r2, [r3, #12]
 801606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801606e:	889b      	ldrh	r3, [r3, #4]
 8016070:	b29b      	uxth	r3, r3
 8016072:	429a      	cmp	r2, r3
 8016074:	d006      	beq.n	8016084 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	633b      	str	r3, [r7, #48]	; 0x30
 801607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801607e:	2b00      	cmp	r3, #0
 8016080:	d1e6      	bne.n	8016050 <ip4_reass+0x9c>
 8016082:	e000      	b.n	8016086 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016084:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016088:	2b00      	cmp	r3, #0
 801608a:	d109      	bne.n	80160a0 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801608c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801608e:	4619      	mov	r1, r3
 8016090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016092:	f7ff fdbd 	bl	8015c10 <ip_reass_enqueue_new_datagram>
 8016096:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801609a:	2b00      	cmp	r3, #0
 801609c:	d11c      	bne.n	80160d8 <ip4_reass+0x124>
      goto nullreturn;
 801609e:	e0ce      	b.n	801623e <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80160a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a2:	88db      	ldrh	r3, [r3, #6]
 80160a4:	b29b      	uxth	r3, r3
 80160a6:	4618      	mov	r0, r3
 80160a8:	f7f4 fe7e 	bl	800ada8 <lwip_htons>
 80160ac:	4603      	mov	r3, r0
 80160ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d110      	bne.n	80160d8 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80160b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160b8:	89db      	ldrh	r3, [r3, #14]
 80160ba:	4618      	mov	r0, r3
 80160bc:	f7f4 fe74 	bl	800ada8 <lwip_htons>
 80160c0:	4603      	mov	r3, r0
 80160c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d006      	beq.n	80160d8 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80160ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160cc:	3308      	adds	r3, #8
 80160ce:	2214      	movs	r2, #20
 80160d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80160d2:	4618      	mov	r0, r3
 80160d4:	f000 fd3d 	bl	8016b52 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80160d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160da:	88db      	ldrh	r3, [r3, #6]
 80160dc:	b29b      	uxth	r3, r3
 80160de:	f003 0320 	and.w	r3, r3, #32
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	bf0c      	ite	eq
 80160e6:	2301      	moveq	r3, #1
 80160e8:	2300      	movne	r3, #0
 80160ea:	b2db      	uxtb	r3, r3
 80160ec:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80160ee:	69fb      	ldr	r3, [r7, #28]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d00e      	beq.n	8016112 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 80160f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80160f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160f8:	4413      	add	r3, r2
 80160fa:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80160fc:	8b7a      	ldrh	r2, [r7, #26]
 80160fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016100:	429a      	cmp	r2, r3
 8016102:	f0c0 8099 	bcc.w	8016238 <ip4_reass+0x284>
 8016106:	8b7b      	ldrh	r3, [r7, #26]
 8016108:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801610c:	4293      	cmp	r3, r2
 801610e:	f200 8093 	bhi.w	8016238 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016112:	69fa      	ldr	r2, [r7, #28]
 8016114:	6879      	ldr	r1, [r7, #4]
 8016116:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016118:	f7ff fde2 	bl	8015ce0 <ip_reass_chain_frag_into_datagram_and_validate>
 801611c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801611e:	697b      	ldr	r3, [r7, #20]
 8016120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016124:	f000 808a 	beq.w	801623c <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016128:	4b49      	ldr	r3, [pc, #292]	; (8016250 <ip4_reass+0x29c>)
 801612a:	881a      	ldrh	r2, [r3, #0]
 801612c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801612e:	4413      	add	r3, r2
 8016130:	b29a      	uxth	r2, r3
 8016132:	4b47      	ldr	r3, [pc, #284]	; (8016250 <ip4_reass+0x29c>)
 8016134:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016136:	69fb      	ldr	r3, [r7, #28]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d00d      	beq.n	8016158 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 801613c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801613e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016140:	4413      	add	r3, r2
 8016142:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016146:	8a7a      	ldrh	r2, [r7, #18]
 8016148:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801614c:	7f9b      	ldrb	r3, [r3, #30]
 801614e:	f043 0301 	orr.w	r3, r3, #1
 8016152:	b2da      	uxtb	r2, r3
 8016154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016156:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016158:	697b      	ldr	r3, [r7, #20]
 801615a:	2b01      	cmp	r3, #1
 801615c:	d168      	bne.n	8016230 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 801615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016160:	8b9b      	ldrh	r3, [r3, #28]
 8016162:	3314      	adds	r3, #20
 8016164:	b29a      	uxth	r2, r3
 8016166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016168:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801616c:	685b      	ldr	r3, [r3, #4]
 801616e:	685b      	ldr	r3, [r3, #4]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8016174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016176:	685b      	ldr	r3, [r3, #4]
 8016178:	685b      	ldr	r3, [r3, #4]
 801617a:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801617e:	3308      	adds	r3, #8
 8016180:	2214      	movs	r2, #20
 8016182:	4619      	mov	r1, r3
 8016184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016186:	f000 fce4 	bl	8016b52 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801618c:	8b9b      	ldrh	r3, [r3, #28]
 801618e:	4618      	mov	r0, r3
 8016190:	f7f4 fe0a 	bl	800ada8 <lwip_htons>
 8016194:	4603      	mov	r3, r0
 8016196:	461a      	mov	r2, r3
 8016198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801619a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801619e:	2200      	movs	r2, #0
 80161a0:	719a      	strb	r2, [r3, #6]
 80161a2:	2200      	movs	r2, #0
 80161a4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80161a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161a8:	2200      	movs	r2, #0
 80161aa:	729a      	strb	r2, [r3, #10]
 80161ac:	2200      	movs	r2, #0
 80161ae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80161b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b2:	685b      	ldr	r3, [r3, #4]
 80161b4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80161b6:	e00e      	b.n	80161d6 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80161b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ba:	685b      	ldr	r3, [r3, #4]
 80161bc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80161be:	f06f 0113 	mvn.w	r1, #19
 80161c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80161c4:	f7f5 ffa4 	bl	800c110 <pbuf_header>
      pbuf_cat(p, r);
 80161c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80161ca:	6878      	ldr	r0, [r7, #4]
 80161cc:	f7f6 f89e 	bl	800c30c <pbuf_cat>
      r = iprh->next_pbuf;
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80161d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d1ed      	bne.n	80161b8 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80161dc:	4b1d      	ldr	r3, [pc, #116]	; (8016254 <ip4_reass+0x2a0>)
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d102      	bne.n	80161ec <ip4_reass+0x238>
      ipr_prev = NULL;
 80161e6:	2300      	movs	r3, #0
 80161e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80161ea:	e010      	b.n	801620e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80161ec:	4b19      	ldr	r3, [pc, #100]	; (8016254 <ip4_reass+0x2a0>)
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80161f2:	e007      	b.n	8016204 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 80161f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161fa:	429a      	cmp	r2, r3
 80161fc:	d006      	beq.n	801620c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80161fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016206:	2b00      	cmp	r3, #0
 8016208:	d1f4      	bne.n	80161f4 <ip4_reass+0x240>
 801620a:	e000      	b.n	801620e <ip4_reass+0x25a>
          break;
 801620c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801620e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016212:	f7ff fd37 	bl	8015c84 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8016216:	6878      	ldr	r0, [r7, #4]
 8016218:	f7f6 f838 	bl	800c28c <pbuf_clen>
 801621c:	4603      	mov	r3, r0
 801621e:	461a      	mov	r2, r3
 8016220:	4b0b      	ldr	r3, [pc, #44]	; (8016250 <ip4_reass+0x29c>)
 8016222:	881b      	ldrh	r3, [r3, #0]
 8016224:	1a9b      	subs	r3, r3, r2
 8016226:	b29a      	uxth	r2, r3
 8016228:	4b09      	ldr	r3, [pc, #36]	; (8016250 <ip4_reass+0x29c>)
 801622a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	e00a      	b.n	8016246 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016230:	2300      	movs	r3, #0
 8016232:	e008      	b.n	8016246 <ip4_reass+0x292>
    goto nullreturn;
 8016234:	bf00      	nop
 8016236:	e002      	b.n	801623e <ip4_reass+0x28a>

nullreturn:
 8016238:	bf00      	nop
 801623a:	e000      	b.n	801623e <ip4_reass+0x28a>
    goto nullreturn;
 801623c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f7f5 ff8a 	bl	800c158 <pbuf_free>
  return NULL;
 8016244:	2300      	movs	r3, #0
}
 8016246:	4618      	mov	r0, r3
 8016248:	3738      	adds	r7, #56	; 0x38
 801624a:	46bd      	mov	sp, r7
 801624c:	bd80      	pop	{r7, pc}
 801624e:	bf00      	nop
 8016250:	20008d84 	.word	0x20008d84
 8016254:	20008d80 	.word	0x20008d80

08016258 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801625c:	2005      	movs	r0, #5
 801625e:	f7f5 f9c7 	bl	800b5f0 <memp_malloc>
 8016262:	4603      	mov	r3, r0
}
 8016264:	4618      	mov	r0, r3
 8016266:	bd80      	pop	{r7, pc}

08016268 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b082      	sub	sp, #8
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d106      	bne.n	8016284 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016276:	4b07      	ldr	r3, [pc, #28]	; (8016294 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016278:	f240 22ae 	movw	r2, #686	; 0x2ae
 801627c:	4906      	ldr	r1, [pc, #24]	; (8016298 <ip_frag_free_pbuf_custom_ref+0x30>)
 801627e:	4807      	ldr	r0, [pc, #28]	; (801629c <ip_frag_free_pbuf_custom_ref+0x34>)
 8016280:	f000 fc7a 	bl	8016b78 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016284:	6879      	ldr	r1, [r7, #4]
 8016286:	2005      	movs	r0, #5
 8016288:	f7f5 fa04 	bl	800b694 <memp_free>
}
 801628c:	bf00      	nop
 801628e:	3708      	adds	r7, #8
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}
 8016294:	0801ab3c 	.word	0x0801ab3c
 8016298:	0801aca4 	.word	0x0801aca4
 801629c:	0801ab84 	.word	0x0801ab84

080162a0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b084      	sub	sp, #16
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d106      	bne.n	80162c0 <ipfrag_free_pbuf_custom+0x20>
 80162b2:	4b11      	ldr	r3, [pc, #68]	; (80162f8 <ipfrag_free_pbuf_custom+0x58>)
 80162b4:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80162b8:	4910      	ldr	r1, [pc, #64]	; (80162fc <ipfrag_free_pbuf_custom+0x5c>)
 80162ba:	4811      	ldr	r0, [pc, #68]	; (8016300 <ipfrag_free_pbuf_custom+0x60>)
 80162bc:	f000 fc5c 	bl	8016b78 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80162c0:	68fa      	ldr	r2, [r7, #12]
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	429a      	cmp	r2, r3
 80162c6:	d006      	beq.n	80162d6 <ipfrag_free_pbuf_custom+0x36>
 80162c8:	4b0b      	ldr	r3, [pc, #44]	; (80162f8 <ipfrag_free_pbuf_custom+0x58>)
 80162ca:	f240 22b9 	movw	r2, #697	; 0x2b9
 80162ce:	490d      	ldr	r1, [pc, #52]	; (8016304 <ipfrag_free_pbuf_custom+0x64>)
 80162d0:	480b      	ldr	r0, [pc, #44]	; (8016300 <ipfrag_free_pbuf_custom+0x60>)
 80162d2:	f000 fc51 	bl	8016b78 <iprintf>
  if (pcr->original != NULL) {
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	695b      	ldr	r3, [r3, #20]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d004      	beq.n	80162e8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	695b      	ldr	r3, [r3, #20]
 80162e2:	4618      	mov	r0, r3
 80162e4:	f7f5 ff38 	bl	800c158 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80162e8:	68f8      	ldr	r0, [r7, #12]
 80162ea:	f7ff ffbd 	bl	8016268 <ip_frag_free_pbuf_custom_ref>
}
 80162ee:	bf00      	nop
 80162f0:	3710      	adds	r7, #16
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bd80      	pop	{r7, pc}
 80162f6:	bf00      	nop
 80162f8:	0801ab3c 	.word	0x0801ab3c
 80162fc:	0801acb0 	.word	0x0801acb0
 8016300:	0801ab84 	.word	0x0801ab84
 8016304:	0801acbc 	.word	0x0801acbc

08016308 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b092      	sub	sp, #72	; 0x48
 801630c:	af02      	add	r7, sp, #8
 801630e:	60f8      	str	r0, [r7, #12]
 8016310:	60b9      	str	r1, [r7, #8]
 8016312:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016314:	2300      	movs	r3, #0
 8016316:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801631c:	3b14      	subs	r3, #20
 801631e:	2b00      	cmp	r3, #0
 8016320:	da00      	bge.n	8016324 <ip4_frag+0x1c>
 8016322:	3307      	adds	r3, #7
 8016324:	10db      	asrs	r3, r3, #3
 8016326:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016328:	2314      	movs	r3, #20
 801632a:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	685b      	ldr	r3, [r3, #4]
 8016330:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8016332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016334:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8016336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	f003 030f 	and.w	r3, r3, #15
 801633e:	009b      	lsls	r3, r3, #2
 8016340:	2b14      	cmp	r3, #20
 8016342:	d009      	beq.n	8016358 <ip4_frag+0x50>
 8016344:	4b79      	ldr	r3, [pc, #484]	; (801652c <ip4_frag+0x224>)
 8016346:	f240 22e1 	movw	r2, #737	; 0x2e1
 801634a:	4979      	ldr	r1, [pc, #484]	; (8016530 <ip4_frag+0x228>)
 801634c:	4879      	ldr	r0, [pc, #484]	; (8016534 <ip4_frag+0x22c>)
 801634e:	f000 fc13 	bl	8016b78 <iprintf>
 8016352:	f06f 0305 	mvn.w	r3, #5
 8016356:	e0e5      	b.n	8016524 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801635a:	88db      	ldrh	r3, [r3, #6]
 801635c:	b29b      	uxth	r3, r3
 801635e:	4618      	mov	r0, r3
 8016360:	f7f4 fd22 	bl	800ada8 <lwip_htons>
 8016364:	4603      	mov	r3, r0
 8016366:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8016368:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801636a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801636e:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8016370:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016376:	2b00      	cmp	r3, #0
 8016378:	d009      	beq.n	801638e <ip4_frag+0x86>
 801637a:	4b6c      	ldr	r3, [pc, #432]	; (801652c <ip4_frag+0x224>)
 801637c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016380:	496d      	ldr	r1, [pc, #436]	; (8016538 <ip4_frag+0x230>)
 8016382:	486c      	ldr	r0, [pc, #432]	; (8016534 <ip4_frag+0x22c>)
 8016384:	f000 fbf8 	bl	8016b78 <iprintf>
 8016388:	f06f 0305 	mvn.w	r3, #5
 801638c:	e0ca      	b.n	8016524 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	891b      	ldrh	r3, [r3, #8]
 8016392:	3b14      	subs	r3, #20
 8016394:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8016396:	e0bc      	b.n	8016512 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8016398:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801639a:	00da      	lsls	r2, r3, #3
 801639c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801639e:	4293      	cmp	r3, r2
 80163a0:	bfa8      	it	ge
 80163a2:	4613      	movge	r3, r2
 80163a4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80163a6:	2200      	movs	r2, #0
 80163a8:	2114      	movs	r1, #20
 80163aa:	2002      	movs	r0, #2
 80163ac:	f7f5 fb62 	bl	800ba74 <pbuf_alloc>
 80163b0:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80163b2:	6a3b      	ldr	r3, [r7, #32]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	f000 80b2 	beq.w	801651e <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	895b      	ldrh	r3, [r3, #10]
 80163be:	2b13      	cmp	r3, #19
 80163c0:	d806      	bhi.n	80163d0 <ip4_frag+0xc8>
 80163c2:	4b5a      	ldr	r3, [pc, #360]	; (801652c <ip4_frag+0x224>)
 80163c4:	f240 3209 	movw	r2, #777	; 0x309
 80163c8:	495c      	ldr	r1, [pc, #368]	; (801653c <ip4_frag+0x234>)
 80163ca:	485a      	ldr	r0, [pc, #360]	; (8016534 <ip4_frag+0x22c>)
 80163cc:	f000 fbd4 	bl	8016b78 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80163d0:	6a3b      	ldr	r3, [r7, #32]
 80163d2:	685b      	ldr	r3, [r3, #4]
 80163d4:	2214      	movs	r2, #20
 80163d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80163d8:	4618      	mov	r0, r3
 80163da:	f000 fbba 	bl	8016b52 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80163de:	6a3b      	ldr	r3, [r7, #32]
 80163e0:	685b      	ldr	r3, [r3, #4]
 80163e2:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 80163e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80163e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 80163e8:	e04f      	b.n	801648a <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	895a      	ldrh	r2, [r3, #10]
 80163ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80163f0:	1ad3      	subs	r3, r2, r3
 80163f2:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80163f4:	8b7a      	ldrh	r2, [r7, #26]
 80163f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163f8:	4293      	cmp	r3, r2
 80163fa:	bf28      	it	cs
 80163fc:	4613      	movcs	r3, r2
 80163fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016400:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016402:	2b00      	cmp	r3, #0
 8016404:	d105      	bne.n	8016412 <ip4_frag+0x10a>
        poff = 0;
 8016406:	2300      	movs	r3, #0
 8016408:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	60fb      	str	r3, [r7, #12]
        continue;
 8016410:	e03b      	b.n	801648a <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016412:	f7ff ff21 	bl	8016258 <ip_frag_alloc_pbuf_custom_ref>
 8016416:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8016418:	697b      	ldr	r3, [r7, #20]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d103      	bne.n	8016426 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 801641e:	6a38      	ldr	r0, [r7, #32]
 8016420:	f7f5 fe9a 	bl	800c158 <pbuf_free>
        goto memerr;
 8016424:	e07c      	b.n	8016520 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016426:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801642c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801642e:	4413      	add	r3, r2
 8016430:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8016432:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016434:	9201      	str	r2, [sp, #4]
 8016436:	9300      	str	r3, [sp, #0]
 8016438:	4603      	mov	r3, r0
 801643a:	2202      	movs	r2, #2
 801643c:	2004      	movs	r0, #4
 801643e:	f7f5 fcad 	bl	800bd9c <pbuf_alloced_custom>
 8016442:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8016444:	693b      	ldr	r3, [r7, #16]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d106      	bne.n	8016458 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801644a:	6978      	ldr	r0, [r7, #20]
 801644c:	f7ff ff0c 	bl	8016268 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016450:	6a38      	ldr	r0, [r7, #32]
 8016452:	f7f5 fe81 	bl	800c158 <pbuf_free>
        goto memerr;
 8016456:	e063      	b.n	8016520 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8016458:	68f8      	ldr	r0, [r7, #12]
 801645a:	f7f5 ff2f 	bl	800c2bc <pbuf_ref>
      pcr->original = p;
 801645e:	697b      	ldr	r3, [r7, #20]
 8016460:	68fa      	ldr	r2, [r7, #12]
 8016462:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016464:	697b      	ldr	r3, [r7, #20]
 8016466:	4a36      	ldr	r2, [pc, #216]	; (8016540 <ip4_frag+0x238>)
 8016468:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801646a:	6939      	ldr	r1, [r7, #16]
 801646c:	6a38      	ldr	r0, [r7, #32]
 801646e:	f7f5 ff4d 	bl	800c30c <pbuf_cat>
      left_to_copy -= newpbuflen;
 8016472:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8016474:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016476:	1ad3      	subs	r3, r2, r3
 8016478:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801647a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801647c:	2b00      	cmp	r3, #0
 801647e:	d004      	beq.n	801648a <ip4_frag+0x182>
        poff = 0;
 8016480:	2300      	movs	r3, #0
 8016482:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801648a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801648c:	2b00      	cmp	r3, #0
 801648e:	d1ac      	bne.n	80163ea <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8016490:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016492:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016494:	4413      	add	r3, r2
 8016496:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016498:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801649a:	68bb      	ldr	r3, [r7, #8]
 801649c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801649e:	3b14      	subs	r3, #20
 80164a0:	429a      	cmp	r2, r3
 80164a2:	bfd4      	ite	le
 80164a4:	2301      	movle	r3, #1
 80164a6:	2300      	movgt	r3, #0
 80164a8:	b2db      	uxtb	r3, r3
 80164aa:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80164ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80164ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164b2:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80164b4:	69fb      	ldr	r3, [r7, #28]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d103      	bne.n	80164c2 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80164ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80164bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80164c0:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80164c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80164c4:	4618      	mov	r0, r3
 80164c6:	f7f4 fc6f 	bl	800ada8 <lwip_htons>
 80164ca:	4603      	mov	r3, r0
 80164cc:	461a      	mov	r2, r3
 80164ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164d0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80164d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80164d4:	3314      	adds	r3, #20
 80164d6:	b29b      	uxth	r3, r3
 80164d8:	4618      	mov	r0, r3
 80164da:	f7f4 fc65 	bl	800ada8 <lwip_htons>
 80164de:	4603      	mov	r3, r0
 80164e0:	461a      	mov	r2, r3
 80164e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164e4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80164e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164e8:	2200      	movs	r2, #0
 80164ea:	729a      	strb	r2, [r3, #10]
 80164ec:	2200      	movs	r2, #0
 80164ee:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80164f0:	68bb      	ldr	r3, [r7, #8]
 80164f2:	695b      	ldr	r3, [r3, #20]
 80164f4:	687a      	ldr	r2, [r7, #4]
 80164f6:	6a39      	ldr	r1, [r7, #32]
 80164f8:	68b8      	ldr	r0, [r7, #8]
 80164fa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80164fc:	6a38      	ldr	r0, [r7, #32]
 80164fe:	f7f5 fe2b 	bl	800c158 <pbuf_free>
    left -= fragsize;
 8016502:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016504:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016506:	1ad3      	subs	r3, r2, r3
 8016508:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801650a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801650c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801650e:	4413      	add	r3, r2
 8016510:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8016512:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016514:	2b00      	cmp	r3, #0
 8016516:	f47f af3f 	bne.w	8016398 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801651a:	2300      	movs	r3, #0
 801651c:	e002      	b.n	8016524 <ip4_frag+0x21c>
      goto memerr;
 801651e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016524:	4618      	mov	r0, r3
 8016526:	3740      	adds	r7, #64	; 0x40
 8016528:	46bd      	mov	sp, r7
 801652a:	bd80      	pop	{r7, pc}
 801652c:	0801ab3c 	.word	0x0801ab3c
 8016530:	0801acc8 	.word	0x0801acc8
 8016534:	0801ab84 	.word	0x0801ab84
 8016538:	0801acf0 	.word	0x0801acf0
 801653c:	0801ad0c 	.word	0x0801ad0c
 8016540:	080162a1 	.word	0x080162a1

08016544 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b086      	sub	sp, #24
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
 801654c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 801654e:	230e      	movs	r3, #14
 8016550:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	895b      	ldrh	r3, [r3, #10]
 8016556:	2b0e      	cmp	r3, #14
 8016558:	d977      	bls.n	801664a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	685b      	ldr	r3, [r3, #4]
 801655e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016560:	693b      	ldr	r3, [r7, #16]
 8016562:	7b1a      	ldrb	r2, [r3, #12]
 8016564:	7b5b      	ldrb	r3, [r3, #13]
 8016566:	021b      	lsls	r3, r3, #8
 8016568:	4313      	orrs	r3, r2
 801656a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801656c:	693b      	ldr	r3, [r7, #16]
 801656e:	781b      	ldrb	r3, [r3, #0]
 8016570:	f003 0301 	and.w	r3, r3, #1
 8016574:	2b00      	cmp	r3, #0
 8016576:	d023      	beq.n	80165c0 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016578:	693b      	ldr	r3, [r7, #16]
 801657a:	781b      	ldrb	r3, [r3, #0]
 801657c:	2b01      	cmp	r3, #1
 801657e:	d10f      	bne.n	80165a0 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016580:	693b      	ldr	r3, [r7, #16]
 8016582:	785b      	ldrb	r3, [r3, #1]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d11b      	bne.n	80165c0 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016588:	693b      	ldr	r3, [r7, #16]
 801658a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801658c:	2b5e      	cmp	r3, #94	; 0x5e
 801658e:	d117      	bne.n	80165c0 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	7b5b      	ldrb	r3, [r3, #13]
 8016594:	f043 0310 	orr.w	r3, r3, #16
 8016598:	b2da      	uxtb	r2, r3
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	735a      	strb	r2, [r3, #13]
 801659e:	e00f      	b.n	80165c0 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80165a0:	693b      	ldr	r3, [r7, #16]
 80165a2:	2206      	movs	r2, #6
 80165a4:	4930      	ldr	r1, [pc, #192]	; (8016668 <ethernet_input+0x124>)
 80165a6:	4618      	mov	r0, r3
 80165a8:	f000 fac4 	bl	8016b34 <memcmp>
 80165ac:	4603      	mov	r3, r0
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d106      	bne.n	80165c0 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	7b5b      	ldrb	r3, [r3, #13]
 80165b6:	f043 0308 	orr.w	r3, r3, #8
 80165ba:	b2da      	uxtb	r2, r3
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80165c0:	89fb      	ldrh	r3, [r7, #14]
 80165c2:	2b08      	cmp	r3, #8
 80165c4:	d003      	beq.n	80165ce <ethernet_input+0x8a>
 80165c6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80165ca:	d01e      	beq.n	801660a <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80165cc:	e044      	b.n	8016658 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80165ce:	683b      	ldr	r3, [r7, #0]
 80165d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80165d4:	f003 0308 	and.w	r3, r3, #8
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d038      	beq.n	801664e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	895b      	ldrh	r3, [r3, #10]
 80165e0:	461a      	mov	r2, r3
 80165e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80165e6:	429a      	cmp	r2, r3
 80165e8:	db33      	blt.n	8016652 <ethernet_input+0x10e>
 80165ea:	8afb      	ldrh	r3, [r7, #22]
 80165ec:	425b      	negs	r3, r3
 80165ee:	b29b      	uxth	r3, r3
 80165f0:	b21b      	sxth	r3, r3
 80165f2:	4619      	mov	r1, r3
 80165f4:	6878      	ldr	r0, [r7, #4]
 80165f6:	f7f5 fd8b 	bl	800c110 <pbuf_header>
 80165fa:	4603      	mov	r3, r0
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d128      	bne.n	8016652 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8016600:	6839      	ldr	r1, [r7, #0]
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f7fe ff62 	bl	80154cc <ip4_input>
      break;
 8016608:	e01d      	b.n	8016646 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801660a:	683b      	ldr	r3, [r7, #0]
 801660c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016610:	f003 0308 	and.w	r3, r3, #8
 8016614:	2b00      	cmp	r3, #0
 8016616:	d01e      	beq.n	8016656 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	895b      	ldrh	r3, [r3, #10]
 801661c:	461a      	mov	r2, r3
 801661e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016622:	429a      	cmp	r2, r3
 8016624:	db15      	blt.n	8016652 <ethernet_input+0x10e>
 8016626:	8afb      	ldrh	r3, [r7, #22]
 8016628:	425b      	negs	r3, r3
 801662a:	b29b      	uxth	r3, r3
 801662c:	b21b      	sxth	r3, r3
 801662e:	4619      	mov	r1, r3
 8016630:	6878      	ldr	r0, [r7, #4]
 8016632:	f7f5 fd6d 	bl	800c110 <pbuf_header>
 8016636:	4603      	mov	r3, r0
 8016638:	2b00      	cmp	r3, #0
 801663a:	d10a      	bne.n	8016652 <ethernet_input+0x10e>
        etharp_input(p, netif);
 801663c:	6839      	ldr	r1, [r7, #0]
 801663e:	6878      	ldr	r0, [r7, #4]
 8016640:	f7fe f92c 	bl	801489c <etharp_input>
      break;
 8016644:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016646:	2300      	movs	r3, #0
 8016648:	e00a      	b.n	8016660 <ethernet_input+0x11c>
    goto free_and_return;
 801664a:	bf00      	nop
 801664c:	e004      	b.n	8016658 <ethernet_input+0x114>
        goto free_and_return;
 801664e:	bf00      	nop
 8016650:	e002      	b.n	8016658 <ethernet_input+0x114>

free_and_return:
 8016652:	bf00      	nop
 8016654:	e000      	b.n	8016658 <ethernet_input+0x114>
        goto free_and_return;
 8016656:	bf00      	nop
  pbuf_free(p);
 8016658:	6878      	ldr	r0, [r7, #4]
 801665a:	f7f5 fd7d 	bl	800c158 <pbuf_free>
  return ERR_OK;
 801665e:	2300      	movs	r3, #0
}
 8016660:	4618      	mov	r0, r3
 8016662:	3718      	adds	r7, #24
 8016664:	46bd      	mov	sp, r7
 8016666:	bd80      	pop	{r7, pc}
 8016668:	080262dc 	.word	0x080262dc

0801666c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b086      	sub	sp, #24
 8016670:	af00      	add	r7, sp, #0
 8016672:	60f8      	str	r0, [r7, #12]
 8016674:	60b9      	str	r1, [r7, #8]
 8016676:	607a      	str	r2, [r7, #4]
 8016678:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801667a:	8c3b      	ldrh	r3, [r7, #32]
 801667c:	4618      	mov	r0, r3
 801667e:	f7f4 fb93 	bl	800ada8 <lwip_htons>
 8016682:	4603      	mov	r3, r0
 8016684:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8016686:	210e      	movs	r1, #14
 8016688:	68b8      	ldr	r0, [r7, #8]
 801668a:	f7f5 fd41 	bl	800c110 <pbuf_header>
 801668e:	4603      	mov	r3, r0
 8016690:	2b00      	cmp	r3, #0
 8016692:	d125      	bne.n	80166e0 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	685b      	ldr	r3, [r3, #4]
 8016698:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801669a:	693b      	ldr	r3, [r7, #16]
 801669c:	8afa      	ldrh	r2, [r7, #22]
 801669e:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80166a0:	693b      	ldr	r3, [r7, #16]
 80166a2:	2206      	movs	r2, #6
 80166a4:	6839      	ldr	r1, [r7, #0]
 80166a6:	4618      	mov	r0, r3
 80166a8:	f000 fa53 	bl	8016b52 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80166ac:	693b      	ldr	r3, [r7, #16]
 80166ae:	3306      	adds	r3, #6
 80166b0:	2206      	movs	r2, #6
 80166b2:	6879      	ldr	r1, [r7, #4]
 80166b4:	4618      	mov	r0, r3
 80166b6:	f000 fa4c 	bl	8016b52 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80166c0:	2b06      	cmp	r3, #6
 80166c2:	d006      	beq.n	80166d2 <ethernet_output+0x66>
 80166c4:	4b0a      	ldr	r3, [pc, #40]	; (80166f0 <ethernet_output+0x84>)
 80166c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80166ca:	490a      	ldr	r1, [pc, #40]	; (80166f4 <ethernet_output+0x88>)
 80166cc:	480a      	ldr	r0, [pc, #40]	; (80166f8 <ethernet_output+0x8c>)
 80166ce:	f000 fa53 	bl	8016b78 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	699b      	ldr	r3, [r3, #24]
 80166d6:	68b9      	ldr	r1, [r7, #8]
 80166d8:	68f8      	ldr	r0, [r7, #12]
 80166da:	4798      	blx	r3
 80166dc:	4603      	mov	r3, r0
 80166de:	e002      	b.n	80166e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80166e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80166e2:	f06f 0301 	mvn.w	r3, #1
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	3718      	adds	r7, #24
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}
 80166ee:	bf00      	nop
 80166f0:	0801ad2c 	.word	0x0801ad2c
 80166f4:	0801ad64 	.word	0x0801ad64
 80166f8:	0801ad98 	.word	0x0801ad98

080166fc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b086      	sub	sp, #24
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
 8016704:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016706:	683b      	ldr	r3, [r7, #0]
 8016708:	60bb      	str	r3, [r7, #8]
 801670a:	2304      	movs	r3, #4
 801670c:	60fb      	str	r3, [r7, #12]
 801670e:	2300      	movs	r3, #0
 8016710:	613b      	str	r3, [r7, #16]
 8016712:	2300      	movs	r3, #0
 8016714:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016716:	f107 0308 	add.w	r3, r7, #8
 801671a:	2100      	movs	r1, #0
 801671c:	4618      	mov	r0, r3
 801671e:	f7ee fcf0 	bl	8005102 <osMessageCreate>
 8016722:	4602      	mov	r2, r0
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d102      	bne.n	8016736 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016730:	f04f 33ff 	mov.w	r3, #4294967295
 8016734:	e000      	b.n	8016738 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016736:	2300      	movs	r3, #0
}
 8016738:	4618      	mov	r0, r3
 801673a:	3718      	adds	r7, #24
 801673c:	46bd      	mov	sp, r7
 801673e:	bd80      	pop	{r7, pc}

08016740 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b082      	sub	sp, #8
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	4618      	mov	r0, r3
 801674e:	f7ee fdb5 	bl	80052bc <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	4618      	mov	r0, r3
 8016758:	f7ee fdc6 	bl	80052e8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801675c:	bf00      	nop
 801675e:	3708      	adds	r7, #8
 8016760:	46bd      	mov	sp, r7
 8016762:	bd80      	pop	{r7, pc}

08016764 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b082      	sub	sp, #8
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
 801676c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801676e:	bf00      	nop
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	6839      	ldr	r1, [r7, #0]
 8016776:	f04f 32ff 	mov.w	r2, #4294967295
 801677a:	4618      	mov	r0, r3
 801677c:	f7ee fcea 	bl	8005154 <osMessagePut>
 8016780:	4603      	mov	r3, r0
 8016782:	2b00      	cmp	r3, #0
 8016784:	d1f4      	bne.n	8016770 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8016786:	bf00      	nop
 8016788:	3708      	adds	r7, #8
 801678a:	46bd      	mov	sp, r7
 801678c:	bd80      	pop	{r7, pc}

0801678e <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801678e:	b580      	push	{r7, lr}
 8016790:	b084      	sub	sp, #16
 8016792:	af00      	add	r7, sp, #0
 8016794:	6078      	str	r0, [r7, #4]
 8016796:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	6839      	ldr	r1, [r7, #0]
 801679e:	2200      	movs	r2, #0
 80167a0:	4618      	mov	r0, r3
 80167a2:	f7ee fcd7 	bl	8005154 <osMessagePut>
 80167a6:	4603      	mov	r3, r0
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d102      	bne.n	80167b2 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80167ac:	2300      	movs	r3, #0
 80167ae:	73fb      	strb	r3, [r7, #15]
 80167b0:	e001      	b.n	80167b6 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80167b2:	23ff      	movs	r3, #255	; 0xff
 80167b4:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80167b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3710      	adds	r7, #16
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}

080167c2 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80167c2:	b580      	push	{r7, lr}
 80167c4:	b08c      	sub	sp, #48	; 0x30
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	61f8      	str	r0, [r7, #28]
 80167ca:	61b9      	str	r1, [r7, #24]
 80167cc:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80167ce:	f7ee fac1 	bl	8004d54 <osKernelSysTick>
 80167d2:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80167d4:	697b      	ldr	r3, [r7, #20]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d017      	beq.n	801680a <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80167da:	69fb      	ldr	r3, [r7, #28]
 80167dc:	6819      	ldr	r1, [r3, #0]
 80167de:	f107 0320 	add.w	r3, r7, #32
 80167e2:	697a      	ldr	r2, [r7, #20]
 80167e4:	4618      	mov	r0, r3
 80167e6:	f7ee fcf5 	bl	80051d4 <osMessageGet>

    if(event.status == osEventMessage)
 80167ea:	6a3b      	ldr	r3, [r7, #32]
 80167ec:	2b10      	cmp	r3, #16
 80167ee:	d109      	bne.n	8016804 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80167f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f2:	461a      	mov	r2, r3
 80167f4:	69bb      	ldr	r3, [r7, #24]
 80167f6:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80167f8:	f7ee faac 	bl	8004d54 <osKernelSysTick>
 80167fc:	4602      	mov	r2, r0
 80167fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016800:	1ad3      	subs	r3, r2, r3
 8016802:	e019      	b.n	8016838 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016804:	f04f 33ff 	mov.w	r3, #4294967295
 8016808:	e016      	b.n	8016838 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801680a:	69fb      	ldr	r3, [r7, #28]
 801680c:	6819      	ldr	r1, [r3, #0]
 801680e:	463b      	mov	r3, r7
 8016810:	f04f 32ff 	mov.w	r2, #4294967295
 8016814:	4618      	mov	r0, r3
 8016816:	f7ee fcdd 	bl	80051d4 <osMessageGet>
 801681a:	f107 0320 	add.w	r3, r7, #32
 801681e:	463a      	mov	r2, r7
 8016820:	ca07      	ldmia	r2, {r0, r1, r2}
 8016822:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016828:	461a      	mov	r2, r3
 801682a:	69bb      	ldr	r3, [r7, #24]
 801682c:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801682e:	f7ee fa91 	bl	8004d54 <osKernelSysTick>
 8016832:	4602      	mov	r2, r0
 8016834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016836:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016838:	4618      	mov	r0, r3
 801683a:	3730      	adds	r7, #48	; 0x30
 801683c:	46bd      	mov	sp, r7
 801683e:	bd80      	pop	{r7, pc}

08016840 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016840:	b580      	push	{r7, lr}
 8016842:	b086      	sub	sp, #24
 8016844:	af00      	add	r7, sp, #0
 8016846:	6078      	str	r0, [r7, #4]
 8016848:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	6819      	ldr	r1, [r3, #0]
 801684e:	f107 030c 	add.w	r3, r7, #12
 8016852:	2200      	movs	r2, #0
 8016854:	4618      	mov	r0, r3
 8016856:	f7ee fcbd 	bl	80051d4 <osMessageGet>

  if(event.status == osEventMessage)
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	2b10      	cmp	r3, #16
 801685e:	d105      	bne.n	801686c <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016860:	693b      	ldr	r3, [r7, #16]
 8016862:	461a      	mov	r2, r3
 8016864:	683b      	ldr	r3, [r7, #0]
 8016866:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8016868:	2300      	movs	r3, #0
 801686a:	e001      	b.n	8016870 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801686c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8016870:	4618      	mov	r0, r3
 8016872:	3718      	adds	r7, #24
 8016874:	46bd      	mov	sp, r7
 8016876:	bd80      	pop	{r7, pc}

08016878 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016878:	b480      	push	{r7}
 801687a:	b083      	sub	sp, #12
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d101      	bne.n	801688c <sys_mbox_valid+0x14>
    return 0;
 8016888:	2300      	movs	r3, #0
 801688a:	e000      	b.n	801688e <sys_mbox_valid+0x16>
  else
    return 1;
 801688c:	2301      	movs	r3, #1
}
 801688e:	4618      	mov	r0, r3
 8016890:	370c      	adds	r7, #12
 8016892:	46bd      	mov	sp, r7
 8016894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016898:	4770      	bx	lr

0801689a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801689a:	b480      	push	{r7}
 801689c:	b083      	sub	sp, #12
 801689e:	af00      	add	r7, sp, #0
 80168a0:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	2200      	movs	r2, #0
 80168a6:	601a      	str	r2, [r3, #0]
}
 80168a8:	bf00      	nop
 80168aa:	370c      	adds	r7, #12
 80168ac:	46bd      	mov	sp, r7
 80168ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b2:	4770      	bx	lr

080168b4 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b084      	sub	sp, #16
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
 80168bc:	460b      	mov	r3, r1
 80168be:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80168c0:	2300      	movs	r3, #0
 80168c2:	60bb      	str	r3, [r7, #8]
 80168c4:	2300      	movs	r3, #0
 80168c6:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80168c8:	f107 0308 	add.w	r3, r7, #8
 80168cc:	2101      	movs	r1, #1
 80168ce:	4618      	mov	r0, r3
 80168d0:	f7ee fb4c 	bl	8004f6c <osSemaphoreCreate>
 80168d4:	4602      	mov	r2, r0
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d102      	bne.n	80168e8 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80168e2:	f04f 33ff 	mov.w	r3, #4294967295
 80168e6:	e009      	b.n	80168fc <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80168e8:	78fb      	ldrb	r3, [r7, #3]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d105      	bne.n	80168fa <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	2100      	movs	r1, #0
 80168f4:	4618      	mov	r0, r3
 80168f6:	f7ee fb6d 	bl	8004fd4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80168fa:	2300      	movs	r3, #0
}
 80168fc:	4618      	mov	r0, r3
 80168fe:	3710      	adds	r7, #16
 8016900:	46bd      	mov	sp, r7
 8016902:	bd80      	pop	{r7, pc}

08016904 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b084      	sub	sp, #16
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]
 801690c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801690e:	f7ee fa21 	bl	8004d54 <osKernelSysTick>
 8016912:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d011      	beq.n	801693e <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	6839      	ldr	r1, [r7, #0]
 8016920:	4618      	mov	r0, r3
 8016922:	f7ee fb57 	bl	8004fd4 <osSemaphoreWait>
 8016926:	4603      	mov	r3, r0
 8016928:	2b00      	cmp	r3, #0
 801692a:	d105      	bne.n	8016938 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801692c:	f7ee fa12 	bl	8004d54 <osKernelSysTick>
 8016930:	4602      	mov	r2, r0
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	1ad3      	subs	r3, r2, r3
 8016936:	e012      	b.n	801695e <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016938:	f04f 33ff 	mov.w	r3, #4294967295
 801693c:	e00f      	b.n	801695e <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801693e:	bf00      	nop
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	f04f 31ff 	mov.w	r1, #4294967295
 8016948:	4618      	mov	r0, r3
 801694a:	f7ee fb43 	bl	8004fd4 <osSemaphoreWait>
 801694e:	4603      	mov	r3, r0
 8016950:	2b00      	cmp	r3, #0
 8016952:	d1f5      	bne.n	8016940 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016954:	f7ee f9fe 	bl	8004d54 <osKernelSysTick>
 8016958:	4602      	mov	r2, r0
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801695e:	4618      	mov	r0, r3
 8016960:	3710      	adds	r7, #16
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}

08016966 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016966:	b580      	push	{r7, lr}
 8016968:	b082      	sub	sp, #8
 801696a:	af00      	add	r7, sp, #0
 801696c:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	4618      	mov	r0, r3
 8016974:	f7ee fb7c 	bl	8005070 <osSemaphoreRelease>
}
 8016978:	bf00      	nop
 801697a:	3708      	adds	r7, #8
 801697c:	46bd      	mov	sp, r7
 801697e:	bd80      	pop	{r7, pc}

08016980 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	4618      	mov	r0, r3
 801698e:	f7ee fba5 	bl	80050dc <osSemaphoreDelete>
}
 8016992:	bf00      	nop
 8016994:	3708      	adds	r7, #8
 8016996:	46bd      	mov	sp, r7
 8016998:	bd80      	pop	{r7, pc}

0801699a <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801699a:	b480      	push	{r7}
 801699c:	b083      	sub	sp, #12
 801699e:	af00      	add	r7, sp, #0
 80169a0:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d101      	bne.n	80169ae <sys_sem_valid+0x14>
    return 0;
 80169aa:	2300      	movs	r3, #0
 80169ac:	e000      	b.n	80169b0 <sys_sem_valid+0x16>
  else
    return 1;
 80169ae:	2301      	movs	r3, #1
}
 80169b0:	4618      	mov	r0, r3
 80169b2:	370c      	adds	r7, #12
 80169b4:	46bd      	mov	sp, r7
 80169b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ba:	4770      	bx	lr

080169bc <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80169bc:	b480      	push	{r7}
 80169be:	b083      	sub	sp, #12
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	2200      	movs	r2, #0
 80169c8:	601a      	str	r2, [r3, #0]
}
 80169ca:	bf00      	nop
 80169cc:	370c      	adds	r7, #12
 80169ce:	46bd      	mov	sp, r7
 80169d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d4:	4770      	bx	lr
	...

080169d8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80169dc:	4803      	ldr	r0, [pc, #12]	; (80169ec <sys_init+0x14>)
 80169de:	f7ee fa29 	bl	8004e34 <osMutexCreate>
 80169e2:	4602      	mov	r2, r0
 80169e4:	4b02      	ldr	r3, [pc, #8]	; (80169f0 <sys_init+0x18>)
 80169e6:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80169e8:	bf00      	nop
 80169ea:	bd80      	pop	{r7, pc}
 80169ec:	080262ec 	.word	0x080262ec
 80169f0:	2000fb1c 	.word	0x2000fb1c

080169f4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b084      	sub	sp, #16
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80169fc:	2300      	movs	r3, #0
 80169fe:	60bb      	str	r3, [r7, #8]
 8016a00:	2300      	movs	r3, #0
 8016a02:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016a04:	f107 0308 	add.w	r3, r7, #8
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7ee fa13 	bl	8004e34 <osMutexCreate>
 8016a0e:	4602      	mov	r2, r0
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d102      	bne.n	8016a22 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8016a20:	e000      	b.n	8016a24 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016a22:	2300      	movs	r3, #0
}
 8016a24:	4618      	mov	r0, r3
 8016a26:	3710      	adds	r7, #16
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bd80      	pop	{r7, pc}

08016a2c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b082      	sub	sp, #8
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	f04f 31ff 	mov.w	r1, #4294967295
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	f7ee fa11 	bl	8004e64 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016a42:	bf00      	nop
 8016a44:	3708      	adds	r7, #8
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}

08016a4a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016a4a:	b580      	push	{r7, lr}
 8016a4c:	b082      	sub	sp, #8
 8016a4e:	af00      	add	r7, sp, #0
 8016a50:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	4618      	mov	r0, r3
 8016a58:	f7ee fa52 	bl	8004f00 <osMutexRelease>
}
 8016a5c:	bf00      	nop
 8016a5e:	3708      	adds	r7, #8
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}

08016a64 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b08c      	sub	sp, #48	; 0x30
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	60f8      	str	r0, [r7, #12]
 8016a6c:	60b9      	str	r1, [r7, #8]
 8016a6e:	607a      	str	r2, [r7, #4]
 8016a70:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016a72:	f107 0314 	add.w	r3, r7, #20
 8016a76:	2200      	movs	r2, #0
 8016a78:	601a      	str	r2, [r3, #0]
 8016a7a:	605a      	str	r2, [r3, #4]
 8016a7c:	609a      	str	r2, [r3, #8]
 8016a7e:	60da      	str	r2, [r3, #12]
 8016a80:	611a      	str	r2, [r3, #16]
 8016a82:	615a      	str	r2, [r3, #20]
 8016a84:	619a      	str	r2, [r3, #24]
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	617b      	str	r3, [r7, #20]
 8016a8a:	68bb      	ldr	r3, [r7, #8]
 8016a8c:	61bb      	str	r3, [r7, #24]
 8016a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a90:	b21b      	sxth	r3, r3
 8016a92:	83bb      	strh	r3, [r7, #28]
 8016a94:	683b      	ldr	r3, [r7, #0]
 8016a96:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016a98:	f107 0314 	add.w	r3, r7, #20
 8016a9c:	6879      	ldr	r1, [r7, #4]
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	f7ee f968 	bl	8004d74 <osThreadCreate>
 8016aa4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	3730      	adds	r7, #48	; 0x30
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bd80      	pop	{r7, pc}
	...

08016ab0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016ab4:	4b04      	ldr	r3, [pc, #16]	; (8016ac8 <sys_arch_protect+0x18>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8016abc:	4618      	mov	r0, r3
 8016abe:	f7ee f9d1 	bl	8004e64 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016ac2:	2301      	movs	r3, #1
}
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	bd80      	pop	{r7, pc}
 8016ac8:	2000fb1c 	.word	0x2000fb1c

08016acc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b082      	sub	sp, #8
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016ad4:	4b04      	ldr	r3, [pc, #16]	; (8016ae8 <sys_arch_unprotect+0x1c>)
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f7ee fa11 	bl	8004f00 <osMutexRelease>
}
 8016ade:	bf00      	nop
 8016ae0:	3708      	adds	r7, #8
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	bd80      	pop	{r7, pc}
 8016ae6:	bf00      	nop
 8016ae8:	2000fb1c 	.word	0x2000fb1c

08016aec <__libc_init_array>:
 8016aec:	b570      	push	{r4, r5, r6, lr}
 8016aee:	4e0d      	ldr	r6, [pc, #52]	; (8016b24 <__libc_init_array+0x38>)
 8016af0:	4c0d      	ldr	r4, [pc, #52]	; (8016b28 <__libc_init_array+0x3c>)
 8016af2:	1ba4      	subs	r4, r4, r6
 8016af4:	10a4      	asrs	r4, r4, #2
 8016af6:	2500      	movs	r5, #0
 8016af8:	42a5      	cmp	r5, r4
 8016afa:	d109      	bne.n	8016b10 <__libc_init_array+0x24>
 8016afc:	4e0b      	ldr	r6, [pc, #44]	; (8016b2c <__libc_init_array+0x40>)
 8016afe:	4c0c      	ldr	r4, [pc, #48]	; (8016b30 <__libc_init_array+0x44>)
 8016b00:	f001 f9ac 	bl	8017e5c <_init>
 8016b04:	1ba4      	subs	r4, r4, r6
 8016b06:	10a4      	asrs	r4, r4, #2
 8016b08:	2500      	movs	r5, #0
 8016b0a:	42a5      	cmp	r5, r4
 8016b0c:	d105      	bne.n	8016b1a <__libc_init_array+0x2e>
 8016b0e:	bd70      	pop	{r4, r5, r6, pc}
 8016b10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016b14:	4798      	blx	r3
 8016b16:	3501      	adds	r5, #1
 8016b18:	e7ee      	b.n	8016af8 <__libc_init_array+0xc>
 8016b1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016b1e:	4798      	blx	r3
 8016b20:	3501      	adds	r5, #1
 8016b22:	e7f2      	b.n	8016b0a <__libc_init_array+0x1e>
 8016b24:	080264a0 	.word	0x080264a0
 8016b28:	080264a0 	.word	0x080264a0
 8016b2c:	080264a0 	.word	0x080264a0
 8016b30:	080264a4 	.word	0x080264a4

08016b34 <memcmp>:
 8016b34:	b530      	push	{r4, r5, lr}
 8016b36:	2400      	movs	r4, #0
 8016b38:	42a2      	cmp	r2, r4
 8016b3a:	d101      	bne.n	8016b40 <memcmp+0xc>
 8016b3c:	2000      	movs	r0, #0
 8016b3e:	e007      	b.n	8016b50 <memcmp+0x1c>
 8016b40:	5d03      	ldrb	r3, [r0, r4]
 8016b42:	3401      	adds	r4, #1
 8016b44:	190d      	adds	r5, r1, r4
 8016b46:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8016b4a:	42ab      	cmp	r3, r5
 8016b4c:	d0f4      	beq.n	8016b38 <memcmp+0x4>
 8016b4e:	1b58      	subs	r0, r3, r5
 8016b50:	bd30      	pop	{r4, r5, pc}

08016b52 <memcpy>:
 8016b52:	b510      	push	{r4, lr}
 8016b54:	1e43      	subs	r3, r0, #1
 8016b56:	440a      	add	r2, r1
 8016b58:	4291      	cmp	r1, r2
 8016b5a:	d100      	bne.n	8016b5e <memcpy+0xc>
 8016b5c:	bd10      	pop	{r4, pc}
 8016b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016b66:	e7f7      	b.n	8016b58 <memcpy+0x6>

08016b68 <memset>:
 8016b68:	4402      	add	r2, r0
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	4293      	cmp	r3, r2
 8016b6e:	d100      	bne.n	8016b72 <memset+0xa>
 8016b70:	4770      	bx	lr
 8016b72:	f803 1b01 	strb.w	r1, [r3], #1
 8016b76:	e7f9      	b.n	8016b6c <memset+0x4>

08016b78 <iprintf>:
 8016b78:	b40f      	push	{r0, r1, r2, r3}
 8016b7a:	4b0a      	ldr	r3, [pc, #40]	; (8016ba4 <iprintf+0x2c>)
 8016b7c:	b513      	push	{r0, r1, r4, lr}
 8016b7e:	681c      	ldr	r4, [r3, #0]
 8016b80:	b124      	cbz	r4, 8016b8c <iprintf+0x14>
 8016b82:	69a3      	ldr	r3, [r4, #24]
 8016b84:	b913      	cbnz	r3, 8016b8c <iprintf+0x14>
 8016b86:	4620      	mov	r0, r4
 8016b88:	f000 f90c 	bl	8016da4 <__sinit>
 8016b8c:	ab05      	add	r3, sp, #20
 8016b8e:	9a04      	ldr	r2, [sp, #16]
 8016b90:	68a1      	ldr	r1, [r4, #8]
 8016b92:	9301      	str	r3, [sp, #4]
 8016b94:	4620      	mov	r0, r4
 8016b96:	f000 fbdb 	bl	8017350 <_vfiprintf_r>
 8016b9a:	b002      	add	sp, #8
 8016b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ba0:	b004      	add	sp, #16
 8016ba2:	4770      	bx	lr
 8016ba4:	20000020 	.word	0x20000020

08016ba8 <rand>:
 8016ba8:	b538      	push	{r3, r4, r5, lr}
 8016baa:	4b13      	ldr	r3, [pc, #76]	; (8016bf8 <rand+0x50>)
 8016bac:	681c      	ldr	r4, [r3, #0]
 8016bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016bb0:	b97b      	cbnz	r3, 8016bd2 <rand+0x2a>
 8016bb2:	2018      	movs	r0, #24
 8016bb4:	f000 f98e 	bl	8016ed4 <malloc>
 8016bb8:	4a10      	ldr	r2, [pc, #64]	; (8016bfc <rand+0x54>)
 8016bba:	4b11      	ldr	r3, [pc, #68]	; (8016c00 <rand+0x58>)
 8016bbc:	63a0      	str	r0, [r4, #56]	; 0x38
 8016bbe:	e9c0 2300 	strd	r2, r3, [r0]
 8016bc2:	4b10      	ldr	r3, [pc, #64]	; (8016c04 <rand+0x5c>)
 8016bc4:	6083      	str	r3, [r0, #8]
 8016bc6:	230b      	movs	r3, #11
 8016bc8:	8183      	strh	r3, [r0, #12]
 8016bca:	2201      	movs	r2, #1
 8016bcc:	2300      	movs	r3, #0
 8016bce:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016bd2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016bd4:	480c      	ldr	r0, [pc, #48]	; (8016c08 <rand+0x60>)
 8016bd6:	690a      	ldr	r2, [r1, #16]
 8016bd8:	694b      	ldr	r3, [r1, #20]
 8016bda:	4c0c      	ldr	r4, [pc, #48]	; (8016c0c <rand+0x64>)
 8016bdc:	4350      	muls	r0, r2
 8016bde:	fb04 0003 	mla	r0, r4, r3, r0
 8016be2:	fba2 2304 	umull	r2, r3, r2, r4
 8016be6:	4403      	add	r3, r0
 8016be8:	1c54      	adds	r4, r2, #1
 8016bea:	f143 0500 	adc.w	r5, r3, #0
 8016bee:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8016bf2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8016bf6:	bd38      	pop	{r3, r4, r5, pc}
 8016bf8:	20000020 	.word	0x20000020
 8016bfc:	abcd330e 	.word	0xabcd330e
 8016c00:	e66d1234 	.word	0xe66d1234
 8016c04:	0005deec 	.word	0x0005deec
 8016c08:	5851f42d 	.word	0x5851f42d
 8016c0c:	4c957f2d 	.word	0x4c957f2d

08016c10 <siprintf>:
 8016c10:	b40e      	push	{r1, r2, r3}
 8016c12:	b500      	push	{lr}
 8016c14:	b09c      	sub	sp, #112	; 0x70
 8016c16:	ab1d      	add	r3, sp, #116	; 0x74
 8016c18:	9002      	str	r0, [sp, #8]
 8016c1a:	9006      	str	r0, [sp, #24]
 8016c1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016c20:	4809      	ldr	r0, [pc, #36]	; (8016c48 <siprintf+0x38>)
 8016c22:	9107      	str	r1, [sp, #28]
 8016c24:	9104      	str	r1, [sp, #16]
 8016c26:	4909      	ldr	r1, [pc, #36]	; (8016c4c <siprintf+0x3c>)
 8016c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c2c:	9105      	str	r1, [sp, #20]
 8016c2e:	6800      	ldr	r0, [r0, #0]
 8016c30:	9301      	str	r3, [sp, #4]
 8016c32:	a902      	add	r1, sp, #8
 8016c34:	f000 fa6a 	bl	801710c <_svfiprintf_r>
 8016c38:	9b02      	ldr	r3, [sp, #8]
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	701a      	strb	r2, [r3, #0]
 8016c3e:	b01c      	add	sp, #112	; 0x70
 8016c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c44:	b003      	add	sp, #12
 8016c46:	4770      	bx	lr
 8016c48:	20000020 	.word	0x20000020
 8016c4c:	ffff0208 	.word	0xffff0208

08016c50 <strcasecmp>:
 8016c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c52:	4606      	mov	r6, r0
 8016c54:	460f      	mov	r7, r1
 8016c56:	f816 4b01 	ldrb.w	r4, [r6], #1
 8016c5a:	f000 f92d 	bl	8016eb8 <__locale_ctype_ptr>
 8016c5e:	4420      	add	r0, r4
 8016c60:	f817 5b01 	ldrb.w	r5, [r7], #1
 8016c64:	7843      	ldrb	r3, [r0, #1]
 8016c66:	f003 0303 	and.w	r3, r3, #3
 8016c6a:	2b01      	cmp	r3, #1
 8016c6c:	bf08      	it	eq
 8016c6e:	3420      	addeq	r4, #32
 8016c70:	f000 f922 	bl	8016eb8 <__locale_ctype_ptr>
 8016c74:	4428      	add	r0, r5
 8016c76:	7842      	ldrb	r2, [r0, #1]
 8016c78:	f002 0203 	and.w	r2, r2, #3
 8016c7c:	2a01      	cmp	r2, #1
 8016c7e:	bf08      	it	eq
 8016c80:	3520      	addeq	r5, #32
 8016c82:	1b60      	subs	r0, r4, r5
 8016c84:	d101      	bne.n	8016c8a <strcasecmp+0x3a>
 8016c86:	2d00      	cmp	r5, #0
 8016c88:	d1e5      	bne.n	8016c56 <strcasecmp+0x6>
 8016c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016c8c <strchr>:
 8016c8c:	b2c9      	uxtb	r1, r1
 8016c8e:	4603      	mov	r3, r0
 8016c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c94:	b11a      	cbz	r2, 8016c9e <strchr+0x12>
 8016c96:	428a      	cmp	r2, r1
 8016c98:	d1f9      	bne.n	8016c8e <strchr+0x2>
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	4770      	bx	lr
 8016c9e:	2900      	cmp	r1, #0
 8016ca0:	bf18      	it	ne
 8016ca2:	2300      	movne	r3, #0
 8016ca4:	e7f9      	b.n	8016c9a <strchr+0xe>

08016ca6 <strncmp>:
 8016ca6:	b510      	push	{r4, lr}
 8016ca8:	b16a      	cbz	r2, 8016cc6 <strncmp+0x20>
 8016caa:	3901      	subs	r1, #1
 8016cac:	1884      	adds	r4, r0, r2
 8016cae:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016cb2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016cb6:	4293      	cmp	r3, r2
 8016cb8:	d103      	bne.n	8016cc2 <strncmp+0x1c>
 8016cba:	42a0      	cmp	r0, r4
 8016cbc:	d001      	beq.n	8016cc2 <strncmp+0x1c>
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d1f5      	bne.n	8016cae <strncmp+0x8>
 8016cc2:	1a98      	subs	r0, r3, r2
 8016cc4:	bd10      	pop	{r4, pc}
 8016cc6:	4610      	mov	r0, r2
 8016cc8:	e7fc      	b.n	8016cc4 <strncmp+0x1e>

08016cca <__strtok_r>:
 8016cca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ccc:	b918      	cbnz	r0, 8016cd6 <__strtok_r+0xc>
 8016cce:	6810      	ldr	r0, [r2, #0]
 8016cd0:	b908      	cbnz	r0, 8016cd6 <__strtok_r+0xc>
 8016cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cd4:	4620      	mov	r0, r4
 8016cd6:	4604      	mov	r4, r0
 8016cd8:	460f      	mov	r7, r1
 8016cda:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016cde:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016ce2:	b91e      	cbnz	r6, 8016cec <__strtok_r+0x22>
 8016ce4:	b96d      	cbnz	r5, 8016d02 <__strtok_r+0x38>
 8016ce6:	6015      	str	r5, [r2, #0]
 8016ce8:	4628      	mov	r0, r5
 8016cea:	e7f2      	b.n	8016cd2 <__strtok_r+0x8>
 8016cec:	42b5      	cmp	r5, r6
 8016cee:	d1f6      	bne.n	8016cde <__strtok_r+0x14>
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d1ef      	bne.n	8016cd4 <__strtok_r+0xa>
 8016cf4:	6014      	str	r4, [r2, #0]
 8016cf6:	7003      	strb	r3, [r0, #0]
 8016cf8:	e7eb      	b.n	8016cd2 <__strtok_r+0x8>
 8016cfa:	462b      	mov	r3, r5
 8016cfc:	e00d      	b.n	8016d1a <__strtok_r+0x50>
 8016cfe:	b926      	cbnz	r6, 8016d0a <__strtok_r+0x40>
 8016d00:	461c      	mov	r4, r3
 8016d02:	4623      	mov	r3, r4
 8016d04:	460f      	mov	r7, r1
 8016d06:	f813 5b01 	ldrb.w	r5, [r3], #1
 8016d0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016d0e:	42b5      	cmp	r5, r6
 8016d10:	d1f5      	bne.n	8016cfe <__strtok_r+0x34>
 8016d12:	2d00      	cmp	r5, #0
 8016d14:	d0f1      	beq.n	8016cfa <__strtok_r+0x30>
 8016d16:	2100      	movs	r1, #0
 8016d18:	7021      	strb	r1, [r4, #0]
 8016d1a:	6013      	str	r3, [r2, #0]
 8016d1c:	e7d9      	b.n	8016cd2 <__strtok_r+0x8>

08016d1e <strtok_r>:
 8016d1e:	2301      	movs	r3, #1
 8016d20:	f7ff bfd3 	b.w	8016cca <__strtok_r>

08016d24 <std>:
 8016d24:	2300      	movs	r3, #0
 8016d26:	b510      	push	{r4, lr}
 8016d28:	4604      	mov	r4, r0
 8016d2a:	e9c0 3300 	strd	r3, r3, [r0]
 8016d2e:	6083      	str	r3, [r0, #8]
 8016d30:	8181      	strh	r1, [r0, #12]
 8016d32:	6643      	str	r3, [r0, #100]	; 0x64
 8016d34:	81c2      	strh	r2, [r0, #14]
 8016d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d3a:	6183      	str	r3, [r0, #24]
 8016d3c:	4619      	mov	r1, r3
 8016d3e:	2208      	movs	r2, #8
 8016d40:	305c      	adds	r0, #92	; 0x5c
 8016d42:	f7ff ff11 	bl	8016b68 <memset>
 8016d46:	4b05      	ldr	r3, [pc, #20]	; (8016d5c <std+0x38>)
 8016d48:	6263      	str	r3, [r4, #36]	; 0x24
 8016d4a:	4b05      	ldr	r3, [pc, #20]	; (8016d60 <std+0x3c>)
 8016d4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016d4e:	4b05      	ldr	r3, [pc, #20]	; (8016d64 <std+0x40>)
 8016d50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016d52:	4b05      	ldr	r3, [pc, #20]	; (8016d68 <std+0x44>)
 8016d54:	6224      	str	r4, [r4, #32]
 8016d56:	6323      	str	r3, [r4, #48]	; 0x30
 8016d58:	bd10      	pop	{r4, pc}
 8016d5a:	bf00      	nop
 8016d5c:	080178ad 	.word	0x080178ad
 8016d60:	080178cf 	.word	0x080178cf
 8016d64:	08017907 	.word	0x08017907
 8016d68:	0801792b 	.word	0x0801792b

08016d6c <_cleanup_r>:
 8016d6c:	4901      	ldr	r1, [pc, #4]	; (8016d74 <_cleanup_r+0x8>)
 8016d6e:	f000 b885 	b.w	8016e7c <_fwalk_reent>
 8016d72:	bf00      	nop
 8016d74:	08017c21 	.word	0x08017c21

08016d78 <__sfmoreglue>:
 8016d78:	b570      	push	{r4, r5, r6, lr}
 8016d7a:	1e4a      	subs	r2, r1, #1
 8016d7c:	2568      	movs	r5, #104	; 0x68
 8016d7e:	4355      	muls	r5, r2
 8016d80:	460e      	mov	r6, r1
 8016d82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016d86:	f000 f90d 	bl	8016fa4 <_malloc_r>
 8016d8a:	4604      	mov	r4, r0
 8016d8c:	b140      	cbz	r0, 8016da0 <__sfmoreglue+0x28>
 8016d8e:	2100      	movs	r1, #0
 8016d90:	e9c0 1600 	strd	r1, r6, [r0]
 8016d94:	300c      	adds	r0, #12
 8016d96:	60a0      	str	r0, [r4, #8]
 8016d98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016d9c:	f7ff fee4 	bl	8016b68 <memset>
 8016da0:	4620      	mov	r0, r4
 8016da2:	bd70      	pop	{r4, r5, r6, pc}

08016da4 <__sinit>:
 8016da4:	6983      	ldr	r3, [r0, #24]
 8016da6:	b510      	push	{r4, lr}
 8016da8:	4604      	mov	r4, r0
 8016daa:	bb33      	cbnz	r3, 8016dfa <__sinit+0x56>
 8016dac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016db0:	6503      	str	r3, [r0, #80]	; 0x50
 8016db2:	4b12      	ldr	r3, [pc, #72]	; (8016dfc <__sinit+0x58>)
 8016db4:	4a12      	ldr	r2, [pc, #72]	; (8016e00 <__sinit+0x5c>)
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	6282      	str	r2, [r0, #40]	; 0x28
 8016dba:	4298      	cmp	r0, r3
 8016dbc:	bf04      	itt	eq
 8016dbe:	2301      	moveq	r3, #1
 8016dc0:	6183      	streq	r3, [r0, #24]
 8016dc2:	f000 f81f 	bl	8016e04 <__sfp>
 8016dc6:	6060      	str	r0, [r4, #4]
 8016dc8:	4620      	mov	r0, r4
 8016dca:	f000 f81b 	bl	8016e04 <__sfp>
 8016dce:	60a0      	str	r0, [r4, #8]
 8016dd0:	4620      	mov	r0, r4
 8016dd2:	f000 f817 	bl	8016e04 <__sfp>
 8016dd6:	2200      	movs	r2, #0
 8016dd8:	60e0      	str	r0, [r4, #12]
 8016dda:	2104      	movs	r1, #4
 8016ddc:	6860      	ldr	r0, [r4, #4]
 8016dde:	f7ff ffa1 	bl	8016d24 <std>
 8016de2:	2201      	movs	r2, #1
 8016de4:	2109      	movs	r1, #9
 8016de6:	68a0      	ldr	r0, [r4, #8]
 8016de8:	f7ff ff9c 	bl	8016d24 <std>
 8016dec:	2202      	movs	r2, #2
 8016dee:	2112      	movs	r1, #18
 8016df0:	68e0      	ldr	r0, [r4, #12]
 8016df2:	f7ff ff97 	bl	8016d24 <std>
 8016df6:	2301      	movs	r3, #1
 8016df8:	61a3      	str	r3, [r4, #24]
 8016dfa:	bd10      	pop	{r4, pc}
 8016dfc:	080262f4 	.word	0x080262f4
 8016e00:	08016d6d 	.word	0x08016d6d

08016e04 <__sfp>:
 8016e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e06:	4b1b      	ldr	r3, [pc, #108]	; (8016e74 <__sfp+0x70>)
 8016e08:	681e      	ldr	r6, [r3, #0]
 8016e0a:	69b3      	ldr	r3, [r6, #24]
 8016e0c:	4607      	mov	r7, r0
 8016e0e:	b913      	cbnz	r3, 8016e16 <__sfp+0x12>
 8016e10:	4630      	mov	r0, r6
 8016e12:	f7ff ffc7 	bl	8016da4 <__sinit>
 8016e16:	3648      	adds	r6, #72	; 0x48
 8016e18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016e1c:	3b01      	subs	r3, #1
 8016e1e:	d503      	bpl.n	8016e28 <__sfp+0x24>
 8016e20:	6833      	ldr	r3, [r6, #0]
 8016e22:	b133      	cbz	r3, 8016e32 <__sfp+0x2e>
 8016e24:	6836      	ldr	r6, [r6, #0]
 8016e26:	e7f7      	b.n	8016e18 <__sfp+0x14>
 8016e28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016e2c:	b16d      	cbz	r5, 8016e4a <__sfp+0x46>
 8016e2e:	3468      	adds	r4, #104	; 0x68
 8016e30:	e7f4      	b.n	8016e1c <__sfp+0x18>
 8016e32:	2104      	movs	r1, #4
 8016e34:	4638      	mov	r0, r7
 8016e36:	f7ff ff9f 	bl	8016d78 <__sfmoreglue>
 8016e3a:	6030      	str	r0, [r6, #0]
 8016e3c:	2800      	cmp	r0, #0
 8016e3e:	d1f1      	bne.n	8016e24 <__sfp+0x20>
 8016e40:	230c      	movs	r3, #12
 8016e42:	603b      	str	r3, [r7, #0]
 8016e44:	4604      	mov	r4, r0
 8016e46:	4620      	mov	r0, r4
 8016e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e4a:	4b0b      	ldr	r3, [pc, #44]	; (8016e78 <__sfp+0x74>)
 8016e4c:	6665      	str	r5, [r4, #100]	; 0x64
 8016e4e:	e9c4 5500 	strd	r5, r5, [r4]
 8016e52:	60a5      	str	r5, [r4, #8]
 8016e54:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8016e58:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016e5c:	2208      	movs	r2, #8
 8016e5e:	4629      	mov	r1, r5
 8016e60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016e64:	f7ff fe80 	bl	8016b68 <memset>
 8016e68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016e6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016e70:	e7e9      	b.n	8016e46 <__sfp+0x42>
 8016e72:	bf00      	nop
 8016e74:	080262f4 	.word	0x080262f4
 8016e78:	ffff0001 	.word	0xffff0001

08016e7c <_fwalk_reent>:
 8016e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e80:	4680      	mov	r8, r0
 8016e82:	4689      	mov	r9, r1
 8016e84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016e88:	2600      	movs	r6, #0
 8016e8a:	b914      	cbnz	r4, 8016e92 <_fwalk_reent+0x16>
 8016e8c:	4630      	mov	r0, r6
 8016e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e92:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016e96:	3f01      	subs	r7, #1
 8016e98:	d501      	bpl.n	8016e9e <_fwalk_reent+0x22>
 8016e9a:	6824      	ldr	r4, [r4, #0]
 8016e9c:	e7f5      	b.n	8016e8a <_fwalk_reent+0xe>
 8016e9e:	89ab      	ldrh	r3, [r5, #12]
 8016ea0:	2b01      	cmp	r3, #1
 8016ea2:	d907      	bls.n	8016eb4 <_fwalk_reent+0x38>
 8016ea4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016ea8:	3301      	adds	r3, #1
 8016eaa:	d003      	beq.n	8016eb4 <_fwalk_reent+0x38>
 8016eac:	4629      	mov	r1, r5
 8016eae:	4640      	mov	r0, r8
 8016eb0:	47c8      	blx	r9
 8016eb2:	4306      	orrs	r6, r0
 8016eb4:	3568      	adds	r5, #104	; 0x68
 8016eb6:	e7ee      	b.n	8016e96 <_fwalk_reent+0x1a>

08016eb8 <__locale_ctype_ptr>:
 8016eb8:	4b04      	ldr	r3, [pc, #16]	; (8016ecc <__locale_ctype_ptr+0x14>)
 8016eba:	4a05      	ldr	r2, [pc, #20]	; (8016ed0 <__locale_ctype_ptr+0x18>)
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	6a1b      	ldr	r3, [r3, #32]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	bf08      	it	eq
 8016ec4:	4613      	moveq	r3, r2
 8016ec6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016eca:	4770      	bx	lr
 8016ecc:	20000020 	.word	0x20000020
 8016ed0:	20000084 	.word	0x20000084

08016ed4 <malloc>:
 8016ed4:	4b02      	ldr	r3, [pc, #8]	; (8016ee0 <malloc+0xc>)
 8016ed6:	4601      	mov	r1, r0
 8016ed8:	6818      	ldr	r0, [r3, #0]
 8016eda:	f000 b863 	b.w	8016fa4 <_malloc_r>
 8016ede:	bf00      	nop
 8016ee0:	20000020 	.word	0x20000020

08016ee4 <__ascii_mbtowc>:
 8016ee4:	b082      	sub	sp, #8
 8016ee6:	b901      	cbnz	r1, 8016eea <__ascii_mbtowc+0x6>
 8016ee8:	a901      	add	r1, sp, #4
 8016eea:	b142      	cbz	r2, 8016efe <__ascii_mbtowc+0x1a>
 8016eec:	b14b      	cbz	r3, 8016f02 <__ascii_mbtowc+0x1e>
 8016eee:	7813      	ldrb	r3, [r2, #0]
 8016ef0:	600b      	str	r3, [r1, #0]
 8016ef2:	7812      	ldrb	r2, [r2, #0]
 8016ef4:	1c10      	adds	r0, r2, #0
 8016ef6:	bf18      	it	ne
 8016ef8:	2001      	movne	r0, #1
 8016efa:	b002      	add	sp, #8
 8016efc:	4770      	bx	lr
 8016efe:	4610      	mov	r0, r2
 8016f00:	e7fb      	b.n	8016efa <__ascii_mbtowc+0x16>
 8016f02:	f06f 0001 	mvn.w	r0, #1
 8016f06:	e7f8      	b.n	8016efa <__ascii_mbtowc+0x16>

08016f08 <_free_r>:
 8016f08:	b538      	push	{r3, r4, r5, lr}
 8016f0a:	4605      	mov	r5, r0
 8016f0c:	2900      	cmp	r1, #0
 8016f0e:	d045      	beq.n	8016f9c <_free_r+0x94>
 8016f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f14:	1f0c      	subs	r4, r1, #4
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	bfb8      	it	lt
 8016f1a:	18e4      	addlt	r4, r4, r3
 8016f1c:	f000 ff39 	bl	8017d92 <__malloc_lock>
 8016f20:	4a1f      	ldr	r2, [pc, #124]	; (8016fa0 <_free_r+0x98>)
 8016f22:	6813      	ldr	r3, [r2, #0]
 8016f24:	4610      	mov	r0, r2
 8016f26:	b933      	cbnz	r3, 8016f36 <_free_r+0x2e>
 8016f28:	6063      	str	r3, [r4, #4]
 8016f2a:	6014      	str	r4, [r2, #0]
 8016f2c:	4628      	mov	r0, r5
 8016f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f32:	f000 bf2f 	b.w	8017d94 <__malloc_unlock>
 8016f36:	42a3      	cmp	r3, r4
 8016f38:	d90c      	bls.n	8016f54 <_free_r+0x4c>
 8016f3a:	6821      	ldr	r1, [r4, #0]
 8016f3c:	1862      	adds	r2, r4, r1
 8016f3e:	4293      	cmp	r3, r2
 8016f40:	bf04      	itt	eq
 8016f42:	681a      	ldreq	r2, [r3, #0]
 8016f44:	685b      	ldreq	r3, [r3, #4]
 8016f46:	6063      	str	r3, [r4, #4]
 8016f48:	bf04      	itt	eq
 8016f4a:	1852      	addeq	r2, r2, r1
 8016f4c:	6022      	streq	r2, [r4, #0]
 8016f4e:	6004      	str	r4, [r0, #0]
 8016f50:	e7ec      	b.n	8016f2c <_free_r+0x24>
 8016f52:	4613      	mov	r3, r2
 8016f54:	685a      	ldr	r2, [r3, #4]
 8016f56:	b10a      	cbz	r2, 8016f5c <_free_r+0x54>
 8016f58:	42a2      	cmp	r2, r4
 8016f5a:	d9fa      	bls.n	8016f52 <_free_r+0x4a>
 8016f5c:	6819      	ldr	r1, [r3, #0]
 8016f5e:	1858      	adds	r0, r3, r1
 8016f60:	42a0      	cmp	r0, r4
 8016f62:	d10b      	bne.n	8016f7c <_free_r+0x74>
 8016f64:	6820      	ldr	r0, [r4, #0]
 8016f66:	4401      	add	r1, r0
 8016f68:	1858      	adds	r0, r3, r1
 8016f6a:	4282      	cmp	r2, r0
 8016f6c:	6019      	str	r1, [r3, #0]
 8016f6e:	d1dd      	bne.n	8016f2c <_free_r+0x24>
 8016f70:	6810      	ldr	r0, [r2, #0]
 8016f72:	6852      	ldr	r2, [r2, #4]
 8016f74:	605a      	str	r2, [r3, #4]
 8016f76:	4401      	add	r1, r0
 8016f78:	6019      	str	r1, [r3, #0]
 8016f7a:	e7d7      	b.n	8016f2c <_free_r+0x24>
 8016f7c:	d902      	bls.n	8016f84 <_free_r+0x7c>
 8016f7e:	230c      	movs	r3, #12
 8016f80:	602b      	str	r3, [r5, #0]
 8016f82:	e7d3      	b.n	8016f2c <_free_r+0x24>
 8016f84:	6820      	ldr	r0, [r4, #0]
 8016f86:	1821      	adds	r1, r4, r0
 8016f88:	428a      	cmp	r2, r1
 8016f8a:	bf04      	itt	eq
 8016f8c:	6811      	ldreq	r1, [r2, #0]
 8016f8e:	6852      	ldreq	r2, [r2, #4]
 8016f90:	6062      	str	r2, [r4, #4]
 8016f92:	bf04      	itt	eq
 8016f94:	1809      	addeq	r1, r1, r0
 8016f96:	6021      	streq	r1, [r4, #0]
 8016f98:	605c      	str	r4, [r3, #4]
 8016f9a:	e7c7      	b.n	8016f2c <_free_r+0x24>
 8016f9c:	bd38      	pop	{r3, r4, r5, pc}
 8016f9e:	bf00      	nop
 8016fa0:	20008d88 	.word	0x20008d88

08016fa4 <_malloc_r>:
 8016fa4:	b570      	push	{r4, r5, r6, lr}
 8016fa6:	1ccd      	adds	r5, r1, #3
 8016fa8:	f025 0503 	bic.w	r5, r5, #3
 8016fac:	3508      	adds	r5, #8
 8016fae:	2d0c      	cmp	r5, #12
 8016fb0:	bf38      	it	cc
 8016fb2:	250c      	movcc	r5, #12
 8016fb4:	2d00      	cmp	r5, #0
 8016fb6:	4606      	mov	r6, r0
 8016fb8:	db01      	blt.n	8016fbe <_malloc_r+0x1a>
 8016fba:	42a9      	cmp	r1, r5
 8016fbc:	d903      	bls.n	8016fc6 <_malloc_r+0x22>
 8016fbe:	230c      	movs	r3, #12
 8016fc0:	6033      	str	r3, [r6, #0]
 8016fc2:	2000      	movs	r0, #0
 8016fc4:	bd70      	pop	{r4, r5, r6, pc}
 8016fc6:	f000 fee4 	bl	8017d92 <__malloc_lock>
 8016fca:	4a21      	ldr	r2, [pc, #132]	; (8017050 <_malloc_r+0xac>)
 8016fcc:	6814      	ldr	r4, [r2, #0]
 8016fce:	4621      	mov	r1, r4
 8016fd0:	b991      	cbnz	r1, 8016ff8 <_malloc_r+0x54>
 8016fd2:	4c20      	ldr	r4, [pc, #128]	; (8017054 <_malloc_r+0xb0>)
 8016fd4:	6823      	ldr	r3, [r4, #0]
 8016fd6:	b91b      	cbnz	r3, 8016fe0 <_malloc_r+0x3c>
 8016fd8:	4630      	mov	r0, r6
 8016fda:	f000 fc57 	bl	801788c <_sbrk_r>
 8016fde:	6020      	str	r0, [r4, #0]
 8016fe0:	4629      	mov	r1, r5
 8016fe2:	4630      	mov	r0, r6
 8016fe4:	f000 fc52 	bl	801788c <_sbrk_r>
 8016fe8:	1c43      	adds	r3, r0, #1
 8016fea:	d124      	bne.n	8017036 <_malloc_r+0x92>
 8016fec:	230c      	movs	r3, #12
 8016fee:	6033      	str	r3, [r6, #0]
 8016ff0:	4630      	mov	r0, r6
 8016ff2:	f000 fecf 	bl	8017d94 <__malloc_unlock>
 8016ff6:	e7e4      	b.n	8016fc2 <_malloc_r+0x1e>
 8016ff8:	680b      	ldr	r3, [r1, #0]
 8016ffa:	1b5b      	subs	r3, r3, r5
 8016ffc:	d418      	bmi.n	8017030 <_malloc_r+0x8c>
 8016ffe:	2b0b      	cmp	r3, #11
 8017000:	d90f      	bls.n	8017022 <_malloc_r+0x7e>
 8017002:	600b      	str	r3, [r1, #0]
 8017004:	50cd      	str	r5, [r1, r3]
 8017006:	18cc      	adds	r4, r1, r3
 8017008:	4630      	mov	r0, r6
 801700a:	f000 fec3 	bl	8017d94 <__malloc_unlock>
 801700e:	f104 000b 	add.w	r0, r4, #11
 8017012:	1d23      	adds	r3, r4, #4
 8017014:	f020 0007 	bic.w	r0, r0, #7
 8017018:	1ac3      	subs	r3, r0, r3
 801701a:	d0d3      	beq.n	8016fc4 <_malloc_r+0x20>
 801701c:	425a      	negs	r2, r3
 801701e:	50e2      	str	r2, [r4, r3]
 8017020:	e7d0      	b.n	8016fc4 <_malloc_r+0x20>
 8017022:	428c      	cmp	r4, r1
 8017024:	684b      	ldr	r3, [r1, #4]
 8017026:	bf16      	itet	ne
 8017028:	6063      	strne	r3, [r4, #4]
 801702a:	6013      	streq	r3, [r2, #0]
 801702c:	460c      	movne	r4, r1
 801702e:	e7eb      	b.n	8017008 <_malloc_r+0x64>
 8017030:	460c      	mov	r4, r1
 8017032:	6849      	ldr	r1, [r1, #4]
 8017034:	e7cc      	b.n	8016fd0 <_malloc_r+0x2c>
 8017036:	1cc4      	adds	r4, r0, #3
 8017038:	f024 0403 	bic.w	r4, r4, #3
 801703c:	42a0      	cmp	r0, r4
 801703e:	d005      	beq.n	801704c <_malloc_r+0xa8>
 8017040:	1a21      	subs	r1, r4, r0
 8017042:	4630      	mov	r0, r6
 8017044:	f000 fc22 	bl	801788c <_sbrk_r>
 8017048:	3001      	adds	r0, #1
 801704a:	d0cf      	beq.n	8016fec <_malloc_r+0x48>
 801704c:	6025      	str	r5, [r4, #0]
 801704e:	e7db      	b.n	8017008 <_malloc_r+0x64>
 8017050:	20008d88 	.word	0x20008d88
 8017054:	20008d8c 	.word	0x20008d8c

08017058 <__ssputs_r>:
 8017058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801705c:	688e      	ldr	r6, [r1, #8]
 801705e:	429e      	cmp	r6, r3
 8017060:	4682      	mov	sl, r0
 8017062:	460c      	mov	r4, r1
 8017064:	4690      	mov	r8, r2
 8017066:	4699      	mov	r9, r3
 8017068:	d837      	bhi.n	80170da <__ssputs_r+0x82>
 801706a:	898a      	ldrh	r2, [r1, #12]
 801706c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017070:	d031      	beq.n	80170d6 <__ssputs_r+0x7e>
 8017072:	6825      	ldr	r5, [r4, #0]
 8017074:	6909      	ldr	r1, [r1, #16]
 8017076:	1a6f      	subs	r7, r5, r1
 8017078:	6965      	ldr	r5, [r4, #20]
 801707a:	2302      	movs	r3, #2
 801707c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017080:	fb95 f5f3 	sdiv	r5, r5, r3
 8017084:	f109 0301 	add.w	r3, r9, #1
 8017088:	443b      	add	r3, r7
 801708a:	429d      	cmp	r5, r3
 801708c:	bf38      	it	cc
 801708e:	461d      	movcc	r5, r3
 8017090:	0553      	lsls	r3, r2, #21
 8017092:	d530      	bpl.n	80170f6 <__ssputs_r+0x9e>
 8017094:	4629      	mov	r1, r5
 8017096:	f7ff ff85 	bl	8016fa4 <_malloc_r>
 801709a:	4606      	mov	r6, r0
 801709c:	b950      	cbnz	r0, 80170b4 <__ssputs_r+0x5c>
 801709e:	230c      	movs	r3, #12
 80170a0:	f8ca 3000 	str.w	r3, [sl]
 80170a4:	89a3      	ldrh	r3, [r4, #12]
 80170a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170aa:	81a3      	strh	r3, [r4, #12]
 80170ac:	f04f 30ff 	mov.w	r0, #4294967295
 80170b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170b4:	463a      	mov	r2, r7
 80170b6:	6921      	ldr	r1, [r4, #16]
 80170b8:	f7ff fd4b 	bl	8016b52 <memcpy>
 80170bc:	89a3      	ldrh	r3, [r4, #12]
 80170be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80170c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80170c6:	81a3      	strh	r3, [r4, #12]
 80170c8:	6126      	str	r6, [r4, #16]
 80170ca:	6165      	str	r5, [r4, #20]
 80170cc:	443e      	add	r6, r7
 80170ce:	1bed      	subs	r5, r5, r7
 80170d0:	6026      	str	r6, [r4, #0]
 80170d2:	60a5      	str	r5, [r4, #8]
 80170d4:	464e      	mov	r6, r9
 80170d6:	454e      	cmp	r6, r9
 80170d8:	d900      	bls.n	80170dc <__ssputs_r+0x84>
 80170da:	464e      	mov	r6, r9
 80170dc:	4632      	mov	r2, r6
 80170de:	4641      	mov	r1, r8
 80170e0:	6820      	ldr	r0, [r4, #0]
 80170e2:	f000 fe3d 	bl	8017d60 <memmove>
 80170e6:	68a3      	ldr	r3, [r4, #8]
 80170e8:	1b9b      	subs	r3, r3, r6
 80170ea:	60a3      	str	r3, [r4, #8]
 80170ec:	6823      	ldr	r3, [r4, #0]
 80170ee:	441e      	add	r6, r3
 80170f0:	6026      	str	r6, [r4, #0]
 80170f2:	2000      	movs	r0, #0
 80170f4:	e7dc      	b.n	80170b0 <__ssputs_r+0x58>
 80170f6:	462a      	mov	r2, r5
 80170f8:	f000 fe4d 	bl	8017d96 <_realloc_r>
 80170fc:	4606      	mov	r6, r0
 80170fe:	2800      	cmp	r0, #0
 8017100:	d1e2      	bne.n	80170c8 <__ssputs_r+0x70>
 8017102:	6921      	ldr	r1, [r4, #16]
 8017104:	4650      	mov	r0, sl
 8017106:	f7ff feff 	bl	8016f08 <_free_r>
 801710a:	e7c8      	b.n	801709e <__ssputs_r+0x46>

0801710c <_svfiprintf_r>:
 801710c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017110:	461d      	mov	r5, r3
 8017112:	898b      	ldrh	r3, [r1, #12]
 8017114:	061f      	lsls	r7, r3, #24
 8017116:	b09d      	sub	sp, #116	; 0x74
 8017118:	4680      	mov	r8, r0
 801711a:	460c      	mov	r4, r1
 801711c:	4616      	mov	r6, r2
 801711e:	d50f      	bpl.n	8017140 <_svfiprintf_r+0x34>
 8017120:	690b      	ldr	r3, [r1, #16]
 8017122:	b96b      	cbnz	r3, 8017140 <_svfiprintf_r+0x34>
 8017124:	2140      	movs	r1, #64	; 0x40
 8017126:	f7ff ff3d 	bl	8016fa4 <_malloc_r>
 801712a:	6020      	str	r0, [r4, #0]
 801712c:	6120      	str	r0, [r4, #16]
 801712e:	b928      	cbnz	r0, 801713c <_svfiprintf_r+0x30>
 8017130:	230c      	movs	r3, #12
 8017132:	f8c8 3000 	str.w	r3, [r8]
 8017136:	f04f 30ff 	mov.w	r0, #4294967295
 801713a:	e0c8      	b.n	80172ce <_svfiprintf_r+0x1c2>
 801713c:	2340      	movs	r3, #64	; 0x40
 801713e:	6163      	str	r3, [r4, #20]
 8017140:	2300      	movs	r3, #0
 8017142:	9309      	str	r3, [sp, #36]	; 0x24
 8017144:	2320      	movs	r3, #32
 8017146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801714a:	2330      	movs	r3, #48	; 0x30
 801714c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017150:	9503      	str	r5, [sp, #12]
 8017152:	f04f 0b01 	mov.w	fp, #1
 8017156:	4637      	mov	r7, r6
 8017158:	463d      	mov	r5, r7
 801715a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801715e:	b10b      	cbz	r3, 8017164 <_svfiprintf_r+0x58>
 8017160:	2b25      	cmp	r3, #37	; 0x25
 8017162:	d13e      	bne.n	80171e2 <_svfiprintf_r+0xd6>
 8017164:	ebb7 0a06 	subs.w	sl, r7, r6
 8017168:	d00b      	beq.n	8017182 <_svfiprintf_r+0x76>
 801716a:	4653      	mov	r3, sl
 801716c:	4632      	mov	r2, r6
 801716e:	4621      	mov	r1, r4
 8017170:	4640      	mov	r0, r8
 8017172:	f7ff ff71 	bl	8017058 <__ssputs_r>
 8017176:	3001      	adds	r0, #1
 8017178:	f000 80a4 	beq.w	80172c4 <_svfiprintf_r+0x1b8>
 801717c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801717e:	4453      	add	r3, sl
 8017180:	9309      	str	r3, [sp, #36]	; 0x24
 8017182:	783b      	ldrb	r3, [r7, #0]
 8017184:	2b00      	cmp	r3, #0
 8017186:	f000 809d 	beq.w	80172c4 <_svfiprintf_r+0x1b8>
 801718a:	2300      	movs	r3, #0
 801718c:	f04f 32ff 	mov.w	r2, #4294967295
 8017190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017194:	9304      	str	r3, [sp, #16]
 8017196:	9307      	str	r3, [sp, #28]
 8017198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801719c:	931a      	str	r3, [sp, #104]	; 0x68
 801719e:	462f      	mov	r7, r5
 80171a0:	2205      	movs	r2, #5
 80171a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80171a6:	4850      	ldr	r0, [pc, #320]	; (80172e8 <_svfiprintf_r+0x1dc>)
 80171a8:	f7e9 f83a 	bl	8000220 <memchr>
 80171ac:	9b04      	ldr	r3, [sp, #16]
 80171ae:	b9d0      	cbnz	r0, 80171e6 <_svfiprintf_r+0xda>
 80171b0:	06d9      	lsls	r1, r3, #27
 80171b2:	bf44      	itt	mi
 80171b4:	2220      	movmi	r2, #32
 80171b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80171ba:	071a      	lsls	r2, r3, #28
 80171bc:	bf44      	itt	mi
 80171be:	222b      	movmi	r2, #43	; 0x2b
 80171c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80171c4:	782a      	ldrb	r2, [r5, #0]
 80171c6:	2a2a      	cmp	r2, #42	; 0x2a
 80171c8:	d015      	beq.n	80171f6 <_svfiprintf_r+0xea>
 80171ca:	9a07      	ldr	r2, [sp, #28]
 80171cc:	462f      	mov	r7, r5
 80171ce:	2000      	movs	r0, #0
 80171d0:	250a      	movs	r5, #10
 80171d2:	4639      	mov	r1, r7
 80171d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80171d8:	3b30      	subs	r3, #48	; 0x30
 80171da:	2b09      	cmp	r3, #9
 80171dc:	d94d      	bls.n	801727a <_svfiprintf_r+0x16e>
 80171de:	b1b8      	cbz	r0, 8017210 <_svfiprintf_r+0x104>
 80171e0:	e00f      	b.n	8017202 <_svfiprintf_r+0xf6>
 80171e2:	462f      	mov	r7, r5
 80171e4:	e7b8      	b.n	8017158 <_svfiprintf_r+0x4c>
 80171e6:	4a40      	ldr	r2, [pc, #256]	; (80172e8 <_svfiprintf_r+0x1dc>)
 80171e8:	1a80      	subs	r0, r0, r2
 80171ea:	fa0b f000 	lsl.w	r0, fp, r0
 80171ee:	4318      	orrs	r0, r3
 80171f0:	9004      	str	r0, [sp, #16]
 80171f2:	463d      	mov	r5, r7
 80171f4:	e7d3      	b.n	801719e <_svfiprintf_r+0x92>
 80171f6:	9a03      	ldr	r2, [sp, #12]
 80171f8:	1d11      	adds	r1, r2, #4
 80171fa:	6812      	ldr	r2, [r2, #0]
 80171fc:	9103      	str	r1, [sp, #12]
 80171fe:	2a00      	cmp	r2, #0
 8017200:	db01      	blt.n	8017206 <_svfiprintf_r+0xfa>
 8017202:	9207      	str	r2, [sp, #28]
 8017204:	e004      	b.n	8017210 <_svfiprintf_r+0x104>
 8017206:	4252      	negs	r2, r2
 8017208:	f043 0302 	orr.w	r3, r3, #2
 801720c:	9207      	str	r2, [sp, #28]
 801720e:	9304      	str	r3, [sp, #16]
 8017210:	783b      	ldrb	r3, [r7, #0]
 8017212:	2b2e      	cmp	r3, #46	; 0x2e
 8017214:	d10c      	bne.n	8017230 <_svfiprintf_r+0x124>
 8017216:	787b      	ldrb	r3, [r7, #1]
 8017218:	2b2a      	cmp	r3, #42	; 0x2a
 801721a:	d133      	bne.n	8017284 <_svfiprintf_r+0x178>
 801721c:	9b03      	ldr	r3, [sp, #12]
 801721e:	1d1a      	adds	r2, r3, #4
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	9203      	str	r2, [sp, #12]
 8017224:	2b00      	cmp	r3, #0
 8017226:	bfb8      	it	lt
 8017228:	f04f 33ff 	movlt.w	r3, #4294967295
 801722c:	3702      	adds	r7, #2
 801722e:	9305      	str	r3, [sp, #20]
 8017230:	4d2e      	ldr	r5, [pc, #184]	; (80172ec <_svfiprintf_r+0x1e0>)
 8017232:	7839      	ldrb	r1, [r7, #0]
 8017234:	2203      	movs	r2, #3
 8017236:	4628      	mov	r0, r5
 8017238:	f7e8 fff2 	bl	8000220 <memchr>
 801723c:	b138      	cbz	r0, 801724e <_svfiprintf_r+0x142>
 801723e:	2340      	movs	r3, #64	; 0x40
 8017240:	1b40      	subs	r0, r0, r5
 8017242:	fa03 f000 	lsl.w	r0, r3, r0
 8017246:	9b04      	ldr	r3, [sp, #16]
 8017248:	4303      	orrs	r3, r0
 801724a:	3701      	adds	r7, #1
 801724c:	9304      	str	r3, [sp, #16]
 801724e:	7839      	ldrb	r1, [r7, #0]
 8017250:	4827      	ldr	r0, [pc, #156]	; (80172f0 <_svfiprintf_r+0x1e4>)
 8017252:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017256:	2206      	movs	r2, #6
 8017258:	1c7e      	adds	r6, r7, #1
 801725a:	f7e8 ffe1 	bl	8000220 <memchr>
 801725e:	2800      	cmp	r0, #0
 8017260:	d038      	beq.n	80172d4 <_svfiprintf_r+0x1c8>
 8017262:	4b24      	ldr	r3, [pc, #144]	; (80172f4 <_svfiprintf_r+0x1e8>)
 8017264:	bb13      	cbnz	r3, 80172ac <_svfiprintf_r+0x1a0>
 8017266:	9b03      	ldr	r3, [sp, #12]
 8017268:	3307      	adds	r3, #7
 801726a:	f023 0307 	bic.w	r3, r3, #7
 801726e:	3308      	adds	r3, #8
 8017270:	9303      	str	r3, [sp, #12]
 8017272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017274:	444b      	add	r3, r9
 8017276:	9309      	str	r3, [sp, #36]	; 0x24
 8017278:	e76d      	b.n	8017156 <_svfiprintf_r+0x4a>
 801727a:	fb05 3202 	mla	r2, r5, r2, r3
 801727e:	2001      	movs	r0, #1
 8017280:	460f      	mov	r7, r1
 8017282:	e7a6      	b.n	80171d2 <_svfiprintf_r+0xc6>
 8017284:	2300      	movs	r3, #0
 8017286:	3701      	adds	r7, #1
 8017288:	9305      	str	r3, [sp, #20]
 801728a:	4619      	mov	r1, r3
 801728c:	250a      	movs	r5, #10
 801728e:	4638      	mov	r0, r7
 8017290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017294:	3a30      	subs	r2, #48	; 0x30
 8017296:	2a09      	cmp	r2, #9
 8017298:	d903      	bls.n	80172a2 <_svfiprintf_r+0x196>
 801729a:	2b00      	cmp	r3, #0
 801729c:	d0c8      	beq.n	8017230 <_svfiprintf_r+0x124>
 801729e:	9105      	str	r1, [sp, #20]
 80172a0:	e7c6      	b.n	8017230 <_svfiprintf_r+0x124>
 80172a2:	fb05 2101 	mla	r1, r5, r1, r2
 80172a6:	2301      	movs	r3, #1
 80172a8:	4607      	mov	r7, r0
 80172aa:	e7f0      	b.n	801728e <_svfiprintf_r+0x182>
 80172ac:	ab03      	add	r3, sp, #12
 80172ae:	9300      	str	r3, [sp, #0]
 80172b0:	4622      	mov	r2, r4
 80172b2:	4b11      	ldr	r3, [pc, #68]	; (80172f8 <_svfiprintf_r+0x1ec>)
 80172b4:	a904      	add	r1, sp, #16
 80172b6:	4640      	mov	r0, r8
 80172b8:	f3af 8000 	nop.w
 80172bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80172c0:	4681      	mov	r9, r0
 80172c2:	d1d6      	bne.n	8017272 <_svfiprintf_r+0x166>
 80172c4:	89a3      	ldrh	r3, [r4, #12]
 80172c6:	065b      	lsls	r3, r3, #25
 80172c8:	f53f af35 	bmi.w	8017136 <_svfiprintf_r+0x2a>
 80172cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80172ce:	b01d      	add	sp, #116	; 0x74
 80172d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172d4:	ab03      	add	r3, sp, #12
 80172d6:	9300      	str	r3, [sp, #0]
 80172d8:	4622      	mov	r2, r4
 80172da:	4b07      	ldr	r3, [pc, #28]	; (80172f8 <_svfiprintf_r+0x1ec>)
 80172dc:	a904      	add	r1, sp, #16
 80172de:	4640      	mov	r0, r8
 80172e0:	f000 f9c2 	bl	8017668 <_printf_i>
 80172e4:	e7ea      	b.n	80172bc <_svfiprintf_r+0x1b0>
 80172e6:	bf00      	nop
 80172e8:	08026362 	.word	0x08026362
 80172ec:	08026368 	.word	0x08026368
 80172f0:	0802636c 	.word	0x0802636c
 80172f4:	00000000 	.word	0x00000000
 80172f8:	08017059 	.word	0x08017059

080172fc <__sfputc_r>:
 80172fc:	6893      	ldr	r3, [r2, #8]
 80172fe:	3b01      	subs	r3, #1
 8017300:	2b00      	cmp	r3, #0
 8017302:	b410      	push	{r4}
 8017304:	6093      	str	r3, [r2, #8]
 8017306:	da08      	bge.n	801731a <__sfputc_r+0x1e>
 8017308:	6994      	ldr	r4, [r2, #24]
 801730a:	42a3      	cmp	r3, r4
 801730c:	db01      	blt.n	8017312 <__sfputc_r+0x16>
 801730e:	290a      	cmp	r1, #10
 8017310:	d103      	bne.n	801731a <__sfputc_r+0x1e>
 8017312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017316:	f000 bb0d 	b.w	8017934 <__swbuf_r>
 801731a:	6813      	ldr	r3, [r2, #0]
 801731c:	1c58      	adds	r0, r3, #1
 801731e:	6010      	str	r0, [r2, #0]
 8017320:	7019      	strb	r1, [r3, #0]
 8017322:	4608      	mov	r0, r1
 8017324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017328:	4770      	bx	lr

0801732a <__sfputs_r>:
 801732a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801732c:	4606      	mov	r6, r0
 801732e:	460f      	mov	r7, r1
 8017330:	4614      	mov	r4, r2
 8017332:	18d5      	adds	r5, r2, r3
 8017334:	42ac      	cmp	r4, r5
 8017336:	d101      	bne.n	801733c <__sfputs_r+0x12>
 8017338:	2000      	movs	r0, #0
 801733a:	e007      	b.n	801734c <__sfputs_r+0x22>
 801733c:	463a      	mov	r2, r7
 801733e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017342:	4630      	mov	r0, r6
 8017344:	f7ff ffda 	bl	80172fc <__sfputc_r>
 8017348:	1c43      	adds	r3, r0, #1
 801734a:	d1f3      	bne.n	8017334 <__sfputs_r+0xa>
 801734c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017350 <_vfiprintf_r>:
 8017350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017354:	460c      	mov	r4, r1
 8017356:	b09d      	sub	sp, #116	; 0x74
 8017358:	4617      	mov	r7, r2
 801735a:	461d      	mov	r5, r3
 801735c:	4606      	mov	r6, r0
 801735e:	b118      	cbz	r0, 8017368 <_vfiprintf_r+0x18>
 8017360:	6983      	ldr	r3, [r0, #24]
 8017362:	b90b      	cbnz	r3, 8017368 <_vfiprintf_r+0x18>
 8017364:	f7ff fd1e 	bl	8016da4 <__sinit>
 8017368:	4b7c      	ldr	r3, [pc, #496]	; (801755c <_vfiprintf_r+0x20c>)
 801736a:	429c      	cmp	r4, r3
 801736c:	d158      	bne.n	8017420 <_vfiprintf_r+0xd0>
 801736e:	6874      	ldr	r4, [r6, #4]
 8017370:	89a3      	ldrh	r3, [r4, #12]
 8017372:	0718      	lsls	r0, r3, #28
 8017374:	d55e      	bpl.n	8017434 <_vfiprintf_r+0xe4>
 8017376:	6923      	ldr	r3, [r4, #16]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d05b      	beq.n	8017434 <_vfiprintf_r+0xe4>
 801737c:	2300      	movs	r3, #0
 801737e:	9309      	str	r3, [sp, #36]	; 0x24
 8017380:	2320      	movs	r3, #32
 8017382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017386:	2330      	movs	r3, #48	; 0x30
 8017388:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801738c:	9503      	str	r5, [sp, #12]
 801738e:	f04f 0b01 	mov.w	fp, #1
 8017392:	46b8      	mov	r8, r7
 8017394:	4645      	mov	r5, r8
 8017396:	f815 3b01 	ldrb.w	r3, [r5], #1
 801739a:	b10b      	cbz	r3, 80173a0 <_vfiprintf_r+0x50>
 801739c:	2b25      	cmp	r3, #37	; 0x25
 801739e:	d154      	bne.n	801744a <_vfiprintf_r+0xfa>
 80173a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80173a4:	d00b      	beq.n	80173be <_vfiprintf_r+0x6e>
 80173a6:	4653      	mov	r3, sl
 80173a8:	463a      	mov	r2, r7
 80173aa:	4621      	mov	r1, r4
 80173ac:	4630      	mov	r0, r6
 80173ae:	f7ff ffbc 	bl	801732a <__sfputs_r>
 80173b2:	3001      	adds	r0, #1
 80173b4:	f000 80c2 	beq.w	801753c <_vfiprintf_r+0x1ec>
 80173b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173ba:	4453      	add	r3, sl
 80173bc:	9309      	str	r3, [sp, #36]	; 0x24
 80173be:	f898 3000 	ldrb.w	r3, [r8]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	f000 80ba 	beq.w	801753c <_vfiprintf_r+0x1ec>
 80173c8:	2300      	movs	r3, #0
 80173ca:	f04f 32ff 	mov.w	r2, #4294967295
 80173ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173d2:	9304      	str	r3, [sp, #16]
 80173d4:	9307      	str	r3, [sp, #28]
 80173d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80173da:	931a      	str	r3, [sp, #104]	; 0x68
 80173dc:	46a8      	mov	r8, r5
 80173de:	2205      	movs	r2, #5
 80173e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80173e4:	485e      	ldr	r0, [pc, #376]	; (8017560 <_vfiprintf_r+0x210>)
 80173e6:	f7e8 ff1b 	bl	8000220 <memchr>
 80173ea:	9b04      	ldr	r3, [sp, #16]
 80173ec:	bb78      	cbnz	r0, 801744e <_vfiprintf_r+0xfe>
 80173ee:	06d9      	lsls	r1, r3, #27
 80173f0:	bf44      	itt	mi
 80173f2:	2220      	movmi	r2, #32
 80173f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80173f8:	071a      	lsls	r2, r3, #28
 80173fa:	bf44      	itt	mi
 80173fc:	222b      	movmi	r2, #43	; 0x2b
 80173fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017402:	782a      	ldrb	r2, [r5, #0]
 8017404:	2a2a      	cmp	r2, #42	; 0x2a
 8017406:	d02a      	beq.n	801745e <_vfiprintf_r+0x10e>
 8017408:	9a07      	ldr	r2, [sp, #28]
 801740a:	46a8      	mov	r8, r5
 801740c:	2000      	movs	r0, #0
 801740e:	250a      	movs	r5, #10
 8017410:	4641      	mov	r1, r8
 8017412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017416:	3b30      	subs	r3, #48	; 0x30
 8017418:	2b09      	cmp	r3, #9
 801741a:	d969      	bls.n	80174f0 <_vfiprintf_r+0x1a0>
 801741c:	b360      	cbz	r0, 8017478 <_vfiprintf_r+0x128>
 801741e:	e024      	b.n	801746a <_vfiprintf_r+0x11a>
 8017420:	4b50      	ldr	r3, [pc, #320]	; (8017564 <_vfiprintf_r+0x214>)
 8017422:	429c      	cmp	r4, r3
 8017424:	d101      	bne.n	801742a <_vfiprintf_r+0xda>
 8017426:	68b4      	ldr	r4, [r6, #8]
 8017428:	e7a2      	b.n	8017370 <_vfiprintf_r+0x20>
 801742a:	4b4f      	ldr	r3, [pc, #316]	; (8017568 <_vfiprintf_r+0x218>)
 801742c:	429c      	cmp	r4, r3
 801742e:	bf08      	it	eq
 8017430:	68f4      	ldreq	r4, [r6, #12]
 8017432:	e79d      	b.n	8017370 <_vfiprintf_r+0x20>
 8017434:	4621      	mov	r1, r4
 8017436:	4630      	mov	r0, r6
 8017438:	f000 faee 	bl	8017a18 <__swsetup_r>
 801743c:	2800      	cmp	r0, #0
 801743e:	d09d      	beq.n	801737c <_vfiprintf_r+0x2c>
 8017440:	f04f 30ff 	mov.w	r0, #4294967295
 8017444:	b01d      	add	sp, #116	; 0x74
 8017446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801744a:	46a8      	mov	r8, r5
 801744c:	e7a2      	b.n	8017394 <_vfiprintf_r+0x44>
 801744e:	4a44      	ldr	r2, [pc, #272]	; (8017560 <_vfiprintf_r+0x210>)
 8017450:	1a80      	subs	r0, r0, r2
 8017452:	fa0b f000 	lsl.w	r0, fp, r0
 8017456:	4318      	orrs	r0, r3
 8017458:	9004      	str	r0, [sp, #16]
 801745a:	4645      	mov	r5, r8
 801745c:	e7be      	b.n	80173dc <_vfiprintf_r+0x8c>
 801745e:	9a03      	ldr	r2, [sp, #12]
 8017460:	1d11      	adds	r1, r2, #4
 8017462:	6812      	ldr	r2, [r2, #0]
 8017464:	9103      	str	r1, [sp, #12]
 8017466:	2a00      	cmp	r2, #0
 8017468:	db01      	blt.n	801746e <_vfiprintf_r+0x11e>
 801746a:	9207      	str	r2, [sp, #28]
 801746c:	e004      	b.n	8017478 <_vfiprintf_r+0x128>
 801746e:	4252      	negs	r2, r2
 8017470:	f043 0302 	orr.w	r3, r3, #2
 8017474:	9207      	str	r2, [sp, #28]
 8017476:	9304      	str	r3, [sp, #16]
 8017478:	f898 3000 	ldrb.w	r3, [r8]
 801747c:	2b2e      	cmp	r3, #46	; 0x2e
 801747e:	d10e      	bne.n	801749e <_vfiprintf_r+0x14e>
 8017480:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017484:	2b2a      	cmp	r3, #42	; 0x2a
 8017486:	d138      	bne.n	80174fa <_vfiprintf_r+0x1aa>
 8017488:	9b03      	ldr	r3, [sp, #12]
 801748a:	1d1a      	adds	r2, r3, #4
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	9203      	str	r2, [sp, #12]
 8017490:	2b00      	cmp	r3, #0
 8017492:	bfb8      	it	lt
 8017494:	f04f 33ff 	movlt.w	r3, #4294967295
 8017498:	f108 0802 	add.w	r8, r8, #2
 801749c:	9305      	str	r3, [sp, #20]
 801749e:	4d33      	ldr	r5, [pc, #204]	; (801756c <_vfiprintf_r+0x21c>)
 80174a0:	f898 1000 	ldrb.w	r1, [r8]
 80174a4:	2203      	movs	r2, #3
 80174a6:	4628      	mov	r0, r5
 80174a8:	f7e8 feba 	bl	8000220 <memchr>
 80174ac:	b140      	cbz	r0, 80174c0 <_vfiprintf_r+0x170>
 80174ae:	2340      	movs	r3, #64	; 0x40
 80174b0:	1b40      	subs	r0, r0, r5
 80174b2:	fa03 f000 	lsl.w	r0, r3, r0
 80174b6:	9b04      	ldr	r3, [sp, #16]
 80174b8:	4303      	orrs	r3, r0
 80174ba:	f108 0801 	add.w	r8, r8, #1
 80174be:	9304      	str	r3, [sp, #16]
 80174c0:	f898 1000 	ldrb.w	r1, [r8]
 80174c4:	482a      	ldr	r0, [pc, #168]	; (8017570 <_vfiprintf_r+0x220>)
 80174c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80174ca:	2206      	movs	r2, #6
 80174cc:	f108 0701 	add.w	r7, r8, #1
 80174d0:	f7e8 fea6 	bl	8000220 <memchr>
 80174d4:	2800      	cmp	r0, #0
 80174d6:	d037      	beq.n	8017548 <_vfiprintf_r+0x1f8>
 80174d8:	4b26      	ldr	r3, [pc, #152]	; (8017574 <_vfiprintf_r+0x224>)
 80174da:	bb1b      	cbnz	r3, 8017524 <_vfiprintf_r+0x1d4>
 80174dc:	9b03      	ldr	r3, [sp, #12]
 80174de:	3307      	adds	r3, #7
 80174e0:	f023 0307 	bic.w	r3, r3, #7
 80174e4:	3308      	adds	r3, #8
 80174e6:	9303      	str	r3, [sp, #12]
 80174e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174ea:	444b      	add	r3, r9
 80174ec:	9309      	str	r3, [sp, #36]	; 0x24
 80174ee:	e750      	b.n	8017392 <_vfiprintf_r+0x42>
 80174f0:	fb05 3202 	mla	r2, r5, r2, r3
 80174f4:	2001      	movs	r0, #1
 80174f6:	4688      	mov	r8, r1
 80174f8:	e78a      	b.n	8017410 <_vfiprintf_r+0xc0>
 80174fa:	2300      	movs	r3, #0
 80174fc:	f108 0801 	add.w	r8, r8, #1
 8017500:	9305      	str	r3, [sp, #20]
 8017502:	4619      	mov	r1, r3
 8017504:	250a      	movs	r5, #10
 8017506:	4640      	mov	r0, r8
 8017508:	f810 2b01 	ldrb.w	r2, [r0], #1
 801750c:	3a30      	subs	r2, #48	; 0x30
 801750e:	2a09      	cmp	r2, #9
 8017510:	d903      	bls.n	801751a <_vfiprintf_r+0x1ca>
 8017512:	2b00      	cmp	r3, #0
 8017514:	d0c3      	beq.n	801749e <_vfiprintf_r+0x14e>
 8017516:	9105      	str	r1, [sp, #20]
 8017518:	e7c1      	b.n	801749e <_vfiprintf_r+0x14e>
 801751a:	fb05 2101 	mla	r1, r5, r1, r2
 801751e:	2301      	movs	r3, #1
 8017520:	4680      	mov	r8, r0
 8017522:	e7f0      	b.n	8017506 <_vfiprintf_r+0x1b6>
 8017524:	ab03      	add	r3, sp, #12
 8017526:	9300      	str	r3, [sp, #0]
 8017528:	4622      	mov	r2, r4
 801752a:	4b13      	ldr	r3, [pc, #76]	; (8017578 <_vfiprintf_r+0x228>)
 801752c:	a904      	add	r1, sp, #16
 801752e:	4630      	mov	r0, r6
 8017530:	f3af 8000 	nop.w
 8017534:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017538:	4681      	mov	r9, r0
 801753a:	d1d5      	bne.n	80174e8 <_vfiprintf_r+0x198>
 801753c:	89a3      	ldrh	r3, [r4, #12]
 801753e:	065b      	lsls	r3, r3, #25
 8017540:	f53f af7e 	bmi.w	8017440 <_vfiprintf_r+0xf0>
 8017544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017546:	e77d      	b.n	8017444 <_vfiprintf_r+0xf4>
 8017548:	ab03      	add	r3, sp, #12
 801754a:	9300      	str	r3, [sp, #0]
 801754c:	4622      	mov	r2, r4
 801754e:	4b0a      	ldr	r3, [pc, #40]	; (8017578 <_vfiprintf_r+0x228>)
 8017550:	a904      	add	r1, sp, #16
 8017552:	4630      	mov	r0, r6
 8017554:	f000 f888 	bl	8017668 <_printf_i>
 8017558:	e7ec      	b.n	8017534 <_vfiprintf_r+0x1e4>
 801755a:	bf00      	nop
 801755c:	08026318 	.word	0x08026318
 8017560:	08026362 	.word	0x08026362
 8017564:	08026338 	.word	0x08026338
 8017568:	080262f8 	.word	0x080262f8
 801756c:	08026368 	.word	0x08026368
 8017570:	0802636c 	.word	0x0802636c
 8017574:	00000000 	.word	0x00000000
 8017578:	0801732b 	.word	0x0801732b

0801757c <_printf_common>:
 801757c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017580:	4691      	mov	r9, r2
 8017582:	461f      	mov	r7, r3
 8017584:	688a      	ldr	r2, [r1, #8]
 8017586:	690b      	ldr	r3, [r1, #16]
 8017588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801758c:	4293      	cmp	r3, r2
 801758e:	bfb8      	it	lt
 8017590:	4613      	movlt	r3, r2
 8017592:	f8c9 3000 	str.w	r3, [r9]
 8017596:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801759a:	4606      	mov	r6, r0
 801759c:	460c      	mov	r4, r1
 801759e:	b112      	cbz	r2, 80175a6 <_printf_common+0x2a>
 80175a0:	3301      	adds	r3, #1
 80175a2:	f8c9 3000 	str.w	r3, [r9]
 80175a6:	6823      	ldr	r3, [r4, #0]
 80175a8:	0699      	lsls	r1, r3, #26
 80175aa:	bf42      	ittt	mi
 80175ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80175b0:	3302      	addmi	r3, #2
 80175b2:	f8c9 3000 	strmi.w	r3, [r9]
 80175b6:	6825      	ldr	r5, [r4, #0]
 80175b8:	f015 0506 	ands.w	r5, r5, #6
 80175bc:	d107      	bne.n	80175ce <_printf_common+0x52>
 80175be:	f104 0a19 	add.w	sl, r4, #25
 80175c2:	68e3      	ldr	r3, [r4, #12]
 80175c4:	f8d9 2000 	ldr.w	r2, [r9]
 80175c8:	1a9b      	subs	r3, r3, r2
 80175ca:	42ab      	cmp	r3, r5
 80175cc:	dc28      	bgt.n	8017620 <_printf_common+0xa4>
 80175ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80175d2:	6822      	ldr	r2, [r4, #0]
 80175d4:	3300      	adds	r3, #0
 80175d6:	bf18      	it	ne
 80175d8:	2301      	movne	r3, #1
 80175da:	0692      	lsls	r2, r2, #26
 80175dc:	d42d      	bmi.n	801763a <_printf_common+0xbe>
 80175de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80175e2:	4639      	mov	r1, r7
 80175e4:	4630      	mov	r0, r6
 80175e6:	47c0      	blx	r8
 80175e8:	3001      	adds	r0, #1
 80175ea:	d020      	beq.n	801762e <_printf_common+0xb2>
 80175ec:	6823      	ldr	r3, [r4, #0]
 80175ee:	68e5      	ldr	r5, [r4, #12]
 80175f0:	f8d9 2000 	ldr.w	r2, [r9]
 80175f4:	f003 0306 	and.w	r3, r3, #6
 80175f8:	2b04      	cmp	r3, #4
 80175fa:	bf08      	it	eq
 80175fc:	1aad      	subeq	r5, r5, r2
 80175fe:	68a3      	ldr	r3, [r4, #8]
 8017600:	6922      	ldr	r2, [r4, #16]
 8017602:	bf0c      	ite	eq
 8017604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017608:	2500      	movne	r5, #0
 801760a:	4293      	cmp	r3, r2
 801760c:	bfc4      	itt	gt
 801760e:	1a9b      	subgt	r3, r3, r2
 8017610:	18ed      	addgt	r5, r5, r3
 8017612:	f04f 0900 	mov.w	r9, #0
 8017616:	341a      	adds	r4, #26
 8017618:	454d      	cmp	r5, r9
 801761a:	d11a      	bne.n	8017652 <_printf_common+0xd6>
 801761c:	2000      	movs	r0, #0
 801761e:	e008      	b.n	8017632 <_printf_common+0xb6>
 8017620:	2301      	movs	r3, #1
 8017622:	4652      	mov	r2, sl
 8017624:	4639      	mov	r1, r7
 8017626:	4630      	mov	r0, r6
 8017628:	47c0      	blx	r8
 801762a:	3001      	adds	r0, #1
 801762c:	d103      	bne.n	8017636 <_printf_common+0xba>
 801762e:	f04f 30ff 	mov.w	r0, #4294967295
 8017632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017636:	3501      	adds	r5, #1
 8017638:	e7c3      	b.n	80175c2 <_printf_common+0x46>
 801763a:	18e1      	adds	r1, r4, r3
 801763c:	1c5a      	adds	r2, r3, #1
 801763e:	2030      	movs	r0, #48	; 0x30
 8017640:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017644:	4422      	add	r2, r4
 8017646:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801764a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801764e:	3302      	adds	r3, #2
 8017650:	e7c5      	b.n	80175de <_printf_common+0x62>
 8017652:	2301      	movs	r3, #1
 8017654:	4622      	mov	r2, r4
 8017656:	4639      	mov	r1, r7
 8017658:	4630      	mov	r0, r6
 801765a:	47c0      	blx	r8
 801765c:	3001      	adds	r0, #1
 801765e:	d0e6      	beq.n	801762e <_printf_common+0xb2>
 8017660:	f109 0901 	add.w	r9, r9, #1
 8017664:	e7d8      	b.n	8017618 <_printf_common+0x9c>
	...

08017668 <_printf_i>:
 8017668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801766c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017670:	460c      	mov	r4, r1
 8017672:	7e09      	ldrb	r1, [r1, #24]
 8017674:	b085      	sub	sp, #20
 8017676:	296e      	cmp	r1, #110	; 0x6e
 8017678:	4617      	mov	r7, r2
 801767a:	4606      	mov	r6, r0
 801767c:	4698      	mov	r8, r3
 801767e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017680:	f000 80b3 	beq.w	80177ea <_printf_i+0x182>
 8017684:	d822      	bhi.n	80176cc <_printf_i+0x64>
 8017686:	2963      	cmp	r1, #99	; 0x63
 8017688:	d036      	beq.n	80176f8 <_printf_i+0x90>
 801768a:	d80a      	bhi.n	80176a2 <_printf_i+0x3a>
 801768c:	2900      	cmp	r1, #0
 801768e:	f000 80b9 	beq.w	8017804 <_printf_i+0x19c>
 8017692:	2958      	cmp	r1, #88	; 0x58
 8017694:	f000 8083 	beq.w	801779e <_printf_i+0x136>
 8017698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801769c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80176a0:	e032      	b.n	8017708 <_printf_i+0xa0>
 80176a2:	2964      	cmp	r1, #100	; 0x64
 80176a4:	d001      	beq.n	80176aa <_printf_i+0x42>
 80176a6:	2969      	cmp	r1, #105	; 0x69
 80176a8:	d1f6      	bne.n	8017698 <_printf_i+0x30>
 80176aa:	6820      	ldr	r0, [r4, #0]
 80176ac:	6813      	ldr	r3, [r2, #0]
 80176ae:	0605      	lsls	r5, r0, #24
 80176b0:	f103 0104 	add.w	r1, r3, #4
 80176b4:	d52a      	bpl.n	801770c <_printf_i+0xa4>
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	6011      	str	r1, [r2, #0]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	da03      	bge.n	80176c6 <_printf_i+0x5e>
 80176be:	222d      	movs	r2, #45	; 0x2d
 80176c0:	425b      	negs	r3, r3
 80176c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80176c6:	486f      	ldr	r0, [pc, #444]	; (8017884 <_printf_i+0x21c>)
 80176c8:	220a      	movs	r2, #10
 80176ca:	e039      	b.n	8017740 <_printf_i+0xd8>
 80176cc:	2973      	cmp	r1, #115	; 0x73
 80176ce:	f000 809d 	beq.w	801780c <_printf_i+0x1a4>
 80176d2:	d808      	bhi.n	80176e6 <_printf_i+0x7e>
 80176d4:	296f      	cmp	r1, #111	; 0x6f
 80176d6:	d020      	beq.n	801771a <_printf_i+0xb2>
 80176d8:	2970      	cmp	r1, #112	; 0x70
 80176da:	d1dd      	bne.n	8017698 <_printf_i+0x30>
 80176dc:	6823      	ldr	r3, [r4, #0]
 80176de:	f043 0320 	orr.w	r3, r3, #32
 80176e2:	6023      	str	r3, [r4, #0]
 80176e4:	e003      	b.n	80176ee <_printf_i+0x86>
 80176e6:	2975      	cmp	r1, #117	; 0x75
 80176e8:	d017      	beq.n	801771a <_printf_i+0xb2>
 80176ea:	2978      	cmp	r1, #120	; 0x78
 80176ec:	d1d4      	bne.n	8017698 <_printf_i+0x30>
 80176ee:	2378      	movs	r3, #120	; 0x78
 80176f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80176f4:	4864      	ldr	r0, [pc, #400]	; (8017888 <_printf_i+0x220>)
 80176f6:	e055      	b.n	80177a4 <_printf_i+0x13c>
 80176f8:	6813      	ldr	r3, [r2, #0]
 80176fa:	1d19      	adds	r1, r3, #4
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	6011      	str	r1, [r2, #0]
 8017700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017708:	2301      	movs	r3, #1
 801770a:	e08c      	b.n	8017826 <_printf_i+0x1be>
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	6011      	str	r1, [r2, #0]
 8017710:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017714:	bf18      	it	ne
 8017716:	b21b      	sxthne	r3, r3
 8017718:	e7cf      	b.n	80176ba <_printf_i+0x52>
 801771a:	6813      	ldr	r3, [r2, #0]
 801771c:	6825      	ldr	r5, [r4, #0]
 801771e:	1d18      	adds	r0, r3, #4
 8017720:	6010      	str	r0, [r2, #0]
 8017722:	0628      	lsls	r0, r5, #24
 8017724:	d501      	bpl.n	801772a <_printf_i+0xc2>
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	e002      	b.n	8017730 <_printf_i+0xc8>
 801772a:	0668      	lsls	r0, r5, #25
 801772c:	d5fb      	bpl.n	8017726 <_printf_i+0xbe>
 801772e:	881b      	ldrh	r3, [r3, #0]
 8017730:	4854      	ldr	r0, [pc, #336]	; (8017884 <_printf_i+0x21c>)
 8017732:	296f      	cmp	r1, #111	; 0x6f
 8017734:	bf14      	ite	ne
 8017736:	220a      	movne	r2, #10
 8017738:	2208      	moveq	r2, #8
 801773a:	2100      	movs	r1, #0
 801773c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017740:	6865      	ldr	r5, [r4, #4]
 8017742:	60a5      	str	r5, [r4, #8]
 8017744:	2d00      	cmp	r5, #0
 8017746:	f2c0 8095 	blt.w	8017874 <_printf_i+0x20c>
 801774a:	6821      	ldr	r1, [r4, #0]
 801774c:	f021 0104 	bic.w	r1, r1, #4
 8017750:	6021      	str	r1, [r4, #0]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d13d      	bne.n	80177d2 <_printf_i+0x16a>
 8017756:	2d00      	cmp	r5, #0
 8017758:	f040 808e 	bne.w	8017878 <_printf_i+0x210>
 801775c:	4665      	mov	r5, ip
 801775e:	2a08      	cmp	r2, #8
 8017760:	d10b      	bne.n	801777a <_printf_i+0x112>
 8017762:	6823      	ldr	r3, [r4, #0]
 8017764:	07db      	lsls	r3, r3, #31
 8017766:	d508      	bpl.n	801777a <_printf_i+0x112>
 8017768:	6923      	ldr	r3, [r4, #16]
 801776a:	6862      	ldr	r2, [r4, #4]
 801776c:	429a      	cmp	r2, r3
 801776e:	bfde      	ittt	le
 8017770:	2330      	movle	r3, #48	; 0x30
 8017772:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017776:	f105 35ff 	addle.w	r5, r5, #4294967295
 801777a:	ebac 0305 	sub.w	r3, ip, r5
 801777e:	6123      	str	r3, [r4, #16]
 8017780:	f8cd 8000 	str.w	r8, [sp]
 8017784:	463b      	mov	r3, r7
 8017786:	aa03      	add	r2, sp, #12
 8017788:	4621      	mov	r1, r4
 801778a:	4630      	mov	r0, r6
 801778c:	f7ff fef6 	bl	801757c <_printf_common>
 8017790:	3001      	adds	r0, #1
 8017792:	d14d      	bne.n	8017830 <_printf_i+0x1c8>
 8017794:	f04f 30ff 	mov.w	r0, #4294967295
 8017798:	b005      	add	sp, #20
 801779a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801779e:	4839      	ldr	r0, [pc, #228]	; (8017884 <_printf_i+0x21c>)
 80177a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80177a4:	6813      	ldr	r3, [r2, #0]
 80177a6:	6821      	ldr	r1, [r4, #0]
 80177a8:	1d1d      	adds	r5, r3, #4
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	6015      	str	r5, [r2, #0]
 80177ae:	060a      	lsls	r2, r1, #24
 80177b0:	d50b      	bpl.n	80177ca <_printf_i+0x162>
 80177b2:	07ca      	lsls	r2, r1, #31
 80177b4:	bf44      	itt	mi
 80177b6:	f041 0120 	orrmi.w	r1, r1, #32
 80177ba:	6021      	strmi	r1, [r4, #0]
 80177bc:	b91b      	cbnz	r3, 80177c6 <_printf_i+0x15e>
 80177be:	6822      	ldr	r2, [r4, #0]
 80177c0:	f022 0220 	bic.w	r2, r2, #32
 80177c4:	6022      	str	r2, [r4, #0]
 80177c6:	2210      	movs	r2, #16
 80177c8:	e7b7      	b.n	801773a <_printf_i+0xd2>
 80177ca:	064d      	lsls	r5, r1, #25
 80177cc:	bf48      	it	mi
 80177ce:	b29b      	uxthmi	r3, r3
 80177d0:	e7ef      	b.n	80177b2 <_printf_i+0x14a>
 80177d2:	4665      	mov	r5, ip
 80177d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80177d8:	fb02 3311 	mls	r3, r2, r1, r3
 80177dc:	5cc3      	ldrb	r3, [r0, r3]
 80177de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80177e2:	460b      	mov	r3, r1
 80177e4:	2900      	cmp	r1, #0
 80177e6:	d1f5      	bne.n	80177d4 <_printf_i+0x16c>
 80177e8:	e7b9      	b.n	801775e <_printf_i+0xf6>
 80177ea:	6813      	ldr	r3, [r2, #0]
 80177ec:	6825      	ldr	r5, [r4, #0]
 80177ee:	6961      	ldr	r1, [r4, #20]
 80177f0:	1d18      	adds	r0, r3, #4
 80177f2:	6010      	str	r0, [r2, #0]
 80177f4:	0628      	lsls	r0, r5, #24
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	d501      	bpl.n	80177fe <_printf_i+0x196>
 80177fa:	6019      	str	r1, [r3, #0]
 80177fc:	e002      	b.n	8017804 <_printf_i+0x19c>
 80177fe:	066a      	lsls	r2, r5, #25
 8017800:	d5fb      	bpl.n	80177fa <_printf_i+0x192>
 8017802:	8019      	strh	r1, [r3, #0]
 8017804:	2300      	movs	r3, #0
 8017806:	6123      	str	r3, [r4, #16]
 8017808:	4665      	mov	r5, ip
 801780a:	e7b9      	b.n	8017780 <_printf_i+0x118>
 801780c:	6813      	ldr	r3, [r2, #0]
 801780e:	1d19      	adds	r1, r3, #4
 8017810:	6011      	str	r1, [r2, #0]
 8017812:	681d      	ldr	r5, [r3, #0]
 8017814:	6862      	ldr	r2, [r4, #4]
 8017816:	2100      	movs	r1, #0
 8017818:	4628      	mov	r0, r5
 801781a:	f7e8 fd01 	bl	8000220 <memchr>
 801781e:	b108      	cbz	r0, 8017824 <_printf_i+0x1bc>
 8017820:	1b40      	subs	r0, r0, r5
 8017822:	6060      	str	r0, [r4, #4]
 8017824:	6863      	ldr	r3, [r4, #4]
 8017826:	6123      	str	r3, [r4, #16]
 8017828:	2300      	movs	r3, #0
 801782a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801782e:	e7a7      	b.n	8017780 <_printf_i+0x118>
 8017830:	6923      	ldr	r3, [r4, #16]
 8017832:	462a      	mov	r2, r5
 8017834:	4639      	mov	r1, r7
 8017836:	4630      	mov	r0, r6
 8017838:	47c0      	blx	r8
 801783a:	3001      	adds	r0, #1
 801783c:	d0aa      	beq.n	8017794 <_printf_i+0x12c>
 801783e:	6823      	ldr	r3, [r4, #0]
 8017840:	079b      	lsls	r3, r3, #30
 8017842:	d413      	bmi.n	801786c <_printf_i+0x204>
 8017844:	68e0      	ldr	r0, [r4, #12]
 8017846:	9b03      	ldr	r3, [sp, #12]
 8017848:	4298      	cmp	r0, r3
 801784a:	bfb8      	it	lt
 801784c:	4618      	movlt	r0, r3
 801784e:	e7a3      	b.n	8017798 <_printf_i+0x130>
 8017850:	2301      	movs	r3, #1
 8017852:	464a      	mov	r2, r9
 8017854:	4639      	mov	r1, r7
 8017856:	4630      	mov	r0, r6
 8017858:	47c0      	blx	r8
 801785a:	3001      	adds	r0, #1
 801785c:	d09a      	beq.n	8017794 <_printf_i+0x12c>
 801785e:	3501      	adds	r5, #1
 8017860:	68e3      	ldr	r3, [r4, #12]
 8017862:	9a03      	ldr	r2, [sp, #12]
 8017864:	1a9b      	subs	r3, r3, r2
 8017866:	42ab      	cmp	r3, r5
 8017868:	dcf2      	bgt.n	8017850 <_printf_i+0x1e8>
 801786a:	e7eb      	b.n	8017844 <_printf_i+0x1dc>
 801786c:	2500      	movs	r5, #0
 801786e:	f104 0919 	add.w	r9, r4, #25
 8017872:	e7f5      	b.n	8017860 <_printf_i+0x1f8>
 8017874:	2b00      	cmp	r3, #0
 8017876:	d1ac      	bne.n	80177d2 <_printf_i+0x16a>
 8017878:	7803      	ldrb	r3, [r0, #0]
 801787a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801787e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017882:	e76c      	b.n	801775e <_printf_i+0xf6>
 8017884:	08026373 	.word	0x08026373
 8017888:	08026384 	.word	0x08026384

0801788c <_sbrk_r>:
 801788c:	b538      	push	{r3, r4, r5, lr}
 801788e:	4c06      	ldr	r4, [pc, #24]	; (80178a8 <_sbrk_r+0x1c>)
 8017890:	2300      	movs	r3, #0
 8017892:	4605      	mov	r5, r0
 8017894:	4608      	mov	r0, r1
 8017896:	6023      	str	r3, [r4, #0]
 8017898:	f7e9 fab6 	bl	8000e08 <_sbrk>
 801789c:	1c43      	adds	r3, r0, #1
 801789e:	d102      	bne.n	80178a6 <_sbrk_r+0x1a>
 80178a0:	6823      	ldr	r3, [r4, #0]
 80178a2:	b103      	cbz	r3, 80178a6 <_sbrk_r+0x1a>
 80178a4:	602b      	str	r3, [r5, #0]
 80178a6:	bd38      	pop	{r3, r4, r5, pc}
 80178a8:	2000fb18 	.word	0x2000fb18

080178ac <__sread>:
 80178ac:	b510      	push	{r4, lr}
 80178ae:	460c      	mov	r4, r1
 80178b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178b4:	f000 fa96 	bl	8017de4 <_read_r>
 80178b8:	2800      	cmp	r0, #0
 80178ba:	bfab      	itete	ge
 80178bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80178be:	89a3      	ldrhlt	r3, [r4, #12]
 80178c0:	181b      	addge	r3, r3, r0
 80178c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80178c6:	bfac      	ite	ge
 80178c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80178ca:	81a3      	strhlt	r3, [r4, #12]
 80178cc:	bd10      	pop	{r4, pc}

080178ce <__swrite>:
 80178ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178d2:	461f      	mov	r7, r3
 80178d4:	898b      	ldrh	r3, [r1, #12]
 80178d6:	05db      	lsls	r3, r3, #23
 80178d8:	4605      	mov	r5, r0
 80178da:	460c      	mov	r4, r1
 80178dc:	4616      	mov	r6, r2
 80178de:	d505      	bpl.n	80178ec <__swrite+0x1e>
 80178e0:	2302      	movs	r3, #2
 80178e2:	2200      	movs	r2, #0
 80178e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178e8:	f000 f9c4 	bl	8017c74 <_lseek_r>
 80178ec:	89a3      	ldrh	r3, [r4, #12]
 80178ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80178f6:	81a3      	strh	r3, [r4, #12]
 80178f8:	4632      	mov	r2, r6
 80178fa:	463b      	mov	r3, r7
 80178fc:	4628      	mov	r0, r5
 80178fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017902:	f000 b877 	b.w	80179f4 <_write_r>

08017906 <__sseek>:
 8017906:	b510      	push	{r4, lr}
 8017908:	460c      	mov	r4, r1
 801790a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801790e:	f000 f9b1 	bl	8017c74 <_lseek_r>
 8017912:	1c43      	adds	r3, r0, #1
 8017914:	89a3      	ldrh	r3, [r4, #12]
 8017916:	bf15      	itete	ne
 8017918:	6560      	strne	r0, [r4, #84]	; 0x54
 801791a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801791e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017922:	81a3      	strheq	r3, [r4, #12]
 8017924:	bf18      	it	ne
 8017926:	81a3      	strhne	r3, [r4, #12]
 8017928:	bd10      	pop	{r4, pc}

0801792a <__sclose>:
 801792a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801792e:	f000 b8e1 	b.w	8017af4 <_close_r>
	...

08017934 <__swbuf_r>:
 8017934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017936:	460e      	mov	r6, r1
 8017938:	4614      	mov	r4, r2
 801793a:	4605      	mov	r5, r0
 801793c:	b118      	cbz	r0, 8017946 <__swbuf_r+0x12>
 801793e:	6983      	ldr	r3, [r0, #24]
 8017940:	b90b      	cbnz	r3, 8017946 <__swbuf_r+0x12>
 8017942:	f7ff fa2f 	bl	8016da4 <__sinit>
 8017946:	4b21      	ldr	r3, [pc, #132]	; (80179cc <__swbuf_r+0x98>)
 8017948:	429c      	cmp	r4, r3
 801794a:	d12a      	bne.n	80179a2 <__swbuf_r+0x6e>
 801794c:	686c      	ldr	r4, [r5, #4]
 801794e:	69a3      	ldr	r3, [r4, #24]
 8017950:	60a3      	str	r3, [r4, #8]
 8017952:	89a3      	ldrh	r3, [r4, #12]
 8017954:	071a      	lsls	r2, r3, #28
 8017956:	d52e      	bpl.n	80179b6 <__swbuf_r+0x82>
 8017958:	6923      	ldr	r3, [r4, #16]
 801795a:	b363      	cbz	r3, 80179b6 <__swbuf_r+0x82>
 801795c:	6923      	ldr	r3, [r4, #16]
 801795e:	6820      	ldr	r0, [r4, #0]
 8017960:	1ac0      	subs	r0, r0, r3
 8017962:	6963      	ldr	r3, [r4, #20]
 8017964:	b2f6      	uxtb	r6, r6
 8017966:	4283      	cmp	r3, r0
 8017968:	4637      	mov	r7, r6
 801796a:	dc04      	bgt.n	8017976 <__swbuf_r+0x42>
 801796c:	4621      	mov	r1, r4
 801796e:	4628      	mov	r0, r5
 8017970:	f000 f956 	bl	8017c20 <_fflush_r>
 8017974:	bb28      	cbnz	r0, 80179c2 <__swbuf_r+0x8e>
 8017976:	68a3      	ldr	r3, [r4, #8]
 8017978:	3b01      	subs	r3, #1
 801797a:	60a3      	str	r3, [r4, #8]
 801797c:	6823      	ldr	r3, [r4, #0]
 801797e:	1c5a      	adds	r2, r3, #1
 8017980:	6022      	str	r2, [r4, #0]
 8017982:	701e      	strb	r6, [r3, #0]
 8017984:	6963      	ldr	r3, [r4, #20]
 8017986:	3001      	adds	r0, #1
 8017988:	4283      	cmp	r3, r0
 801798a:	d004      	beq.n	8017996 <__swbuf_r+0x62>
 801798c:	89a3      	ldrh	r3, [r4, #12]
 801798e:	07db      	lsls	r3, r3, #31
 8017990:	d519      	bpl.n	80179c6 <__swbuf_r+0x92>
 8017992:	2e0a      	cmp	r6, #10
 8017994:	d117      	bne.n	80179c6 <__swbuf_r+0x92>
 8017996:	4621      	mov	r1, r4
 8017998:	4628      	mov	r0, r5
 801799a:	f000 f941 	bl	8017c20 <_fflush_r>
 801799e:	b190      	cbz	r0, 80179c6 <__swbuf_r+0x92>
 80179a0:	e00f      	b.n	80179c2 <__swbuf_r+0x8e>
 80179a2:	4b0b      	ldr	r3, [pc, #44]	; (80179d0 <__swbuf_r+0x9c>)
 80179a4:	429c      	cmp	r4, r3
 80179a6:	d101      	bne.n	80179ac <__swbuf_r+0x78>
 80179a8:	68ac      	ldr	r4, [r5, #8]
 80179aa:	e7d0      	b.n	801794e <__swbuf_r+0x1a>
 80179ac:	4b09      	ldr	r3, [pc, #36]	; (80179d4 <__swbuf_r+0xa0>)
 80179ae:	429c      	cmp	r4, r3
 80179b0:	bf08      	it	eq
 80179b2:	68ec      	ldreq	r4, [r5, #12]
 80179b4:	e7cb      	b.n	801794e <__swbuf_r+0x1a>
 80179b6:	4621      	mov	r1, r4
 80179b8:	4628      	mov	r0, r5
 80179ba:	f000 f82d 	bl	8017a18 <__swsetup_r>
 80179be:	2800      	cmp	r0, #0
 80179c0:	d0cc      	beq.n	801795c <__swbuf_r+0x28>
 80179c2:	f04f 37ff 	mov.w	r7, #4294967295
 80179c6:	4638      	mov	r0, r7
 80179c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179ca:	bf00      	nop
 80179cc:	08026318 	.word	0x08026318
 80179d0:	08026338 	.word	0x08026338
 80179d4:	080262f8 	.word	0x080262f8

080179d8 <__ascii_wctomb>:
 80179d8:	b149      	cbz	r1, 80179ee <__ascii_wctomb+0x16>
 80179da:	2aff      	cmp	r2, #255	; 0xff
 80179dc:	bf85      	ittet	hi
 80179de:	238a      	movhi	r3, #138	; 0x8a
 80179e0:	6003      	strhi	r3, [r0, #0]
 80179e2:	700a      	strbls	r2, [r1, #0]
 80179e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80179e8:	bf98      	it	ls
 80179ea:	2001      	movls	r0, #1
 80179ec:	4770      	bx	lr
 80179ee:	4608      	mov	r0, r1
 80179f0:	4770      	bx	lr
	...

080179f4 <_write_r>:
 80179f4:	b538      	push	{r3, r4, r5, lr}
 80179f6:	4c07      	ldr	r4, [pc, #28]	; (8017a14 <_write_r+0x20>)
 80179f8:	4605      	mov	r5, r0
 80179fa:	4608      	mov	r0, r1
 80179fc:	4611      	mov	r1, r2
 80179fe:	2200      	movs	r2, #0
 8017a00:	6022      	str	r2, [r4, #0]
 8017a02:	461a      	mov	r2, r3
 8017a04:	f7e9 f9af 	bl	8000d66 <_write>
 8017a08:	1c43      	adds	r3, r0, #1
 8017a0a:	d102      	bne.n	8017a12 <_write_r+0x1e>
 8017a0c:	6823      	ldr	r3, [r4, #0]
 8017a0e:	b103      	cbz	r3, 8017a12 <_write_r+0x1e>
 8017a10:	602b      	str	r3, [r5, #0]
 8017a12:	bd38      	pop	{r3, r4, r5, pc}
 8017a14:	2000fb18 	.word	0x2000fb18

08017a18 <__swsetup_r>:
 8017a18:	4b32      	ldr	r3, [pc, #200]	; (8017ae4 <__swsetup_r+0xcc>)
 8017a1a:	b570      	push	{r4, r5, r6, lr}
 8017a1c:	681d      	ldr	r5, [r3, #0]
 8017a1e:	4606      	mov	r6, r0
 8017a20:	460c      	mov	r4, r1
 8017a22:	b125      	cbz	r5, 8017a2e <__swsetup_r+0x16>
 8017a24:	69ab      	ldr	r3, [r5, #24]
 8017a26:	b913      	cbnz	r3, 8017a2e <__swsetup_r+0x16>
 8017a28:	4628      	mov	r0, r5
 8017a2a:	f7ff f9bb 	bl	8016da4 <__sinit>
 8017a2e:	4b2e      	ldr	r3, [pc, #184]	; (8017ae8 <__swsetup_r+0xd0>)
 8017a30:	429c      	cmp	r4, r3
 8017a32:	d10f      	bne.n	8017a54 <__swsetup_r+0x3c>
 8017a34:	686c      	ldr	r4, [r5, #4]
 8017a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a3a:	b29a      	uxth	r2, r3
 8017a3c:	0715      	lsls	r5, r2, #28
 8017a3e:	d42c      	bmi.n	8017a9a <__swsetup_r+0x82>
 8017a40:	06d0      	lsls	r0, r2, #27
 8017a42:	d411      	bmi.n	8017a68 <__swsetup_r+0x50>
 8017a44:	2209      	movs	r2, #9
 8017a46:	6032      	str	r2, [r6, #0]
 8017a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a4c:	81a3      	strh	r3, [r4, #12]
 8017a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8017a52:	e03e      	b.n	8017ad2 <__swsetup_r+0xba>
 8017a54:	4b25      	ldr	r3, [pc, #148]	; (8017aec <__swsetup_r+0xd4>)
 8017a56:	429c      	cmp	r4, r3
 8017a58:	d101      	bne.n	8017a5e <__swsetup_r+0x46>
 8017a5a:	68ac      	ldr	r4, [r5, #8]
 8017a5c:	e7eb      	b.n	8017a36 <__swsetup_r+0x1e>
 8017a5e:	4b24      	ldr	r3, [pc, #144]	; (8017af0 <__swsetup_r+0xd8>)
 8017a60:	429c      	cmp	r4, r3
 8017a62:	bf08      	it	eq
 8017a64:	68ec      	ldreq	r4, [r5, #12]
 8017a66:	e7e6      	b.n	8017a36 <__swsetup_r+0x1e>
 8017a68:	0751      	lsls	r1, r2, #29
 8017a6a:	d512      	bpl.n	8017a92 <__swsetup_r+0x7a>
 8017a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a6e:	b141      	cbz	r1, 8017a82 <__swsetup_r+0x6a>
 8017a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a74:	4299      	cmp	r1, r3
 8017a76:	d002      	beq.n	8017a7e <__swsetup_r+0x66>
 8017a78:	4630      	mov	r0, r6
 8017a7a:	f7ff fa45 	bl	8016f08 <_free_r>
 8017a7e:	2300      	movs	r3, #0
 8017a80:	6363      	str	r3, [r4, #52]	; 0x34
 8017a82:	89a3      	ldrh	r3, [r4, #12]
 8017a84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017a88:	81a3      	strh	r3, [r4, #12]
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	6063      	str	r3, [r4, #4]
 8017a8e:	6923      	ldr	r3, [r4, #16]
 8017a90:	6023      	str	r3, [r4, #0]
 8017a92:	89a3      	ldrh	r3, [r4, #12]
 8017a94:	f043 0308 	orr.w	r3, r3, #8
 8017a98:	81a3      	strh	r3, [r4, #12]
 8017a9a:	6923      	ldr	r3, [r4, #16]
 8017a9c:	b94b      	cbnz	r3, 8017ab2 <__swsetup_r+0x9a>
 8017a9e:	89a3      	ldrh	r3, [r4, #12]
 8017aa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017aa8:	d003      	beq.n	8017ab2 <__swsetup_r+0x9a>
 8017aaa:	4621      	mov	r1, r4
 8017aac:	4630      	mov	r0, r6
 8017aae:	f000 f917 	bl	8017ce0 <__smakebuf_r>
 8017ab2:	89a2      	ldrh	r2, [r4, #12]
 8017ab4:	f012 0301 	ands.w	r3, r2, #1
 8017ab8:	d00c      	beq.n	8017ad4 <__swsetup_r+0xbc>
 8017aba:	2300      	movs	r3, #0
 8017abc:	60a3      	str	r3, [r4, #8]
 8017abe:	6963      	ldr	r3, [r4, #20]
 8017ac0:	425b      	negs	r3, r3
 8017ac2:	61a3      	str	r3, [r4, #24]
 8017ac4:	6923      	ldr	r3, [r4, #16]
 8017ac6:	b953      	cbnz	r3, 8017ade <__swsetup_r+0xc6>
 8017ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017acc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017ad0:	d1ba      	bne.n	8017a48 <__swsetup_r+0x30>
 8017ad2:	bd70      	pop	{r4, r5, r6, pc}
 8017ad4:	0792      	lsls	r2, r2, #30
 8017ad6:	bf58      	it	pl
 8017ad8:	6963      	ldrpl	r3, [r4, #20]
 8017ada:	60a3      	str	r3, [r4, #8]
 8017adc:	e7f2      	b.n	8017ac4 <__swsetup_r+0xac>
 8017ade:	2000      	movs	r0, #0
 8017ae0:	e7f7      	b.n	8017ad2 <__swsetup_r+0xba>
 8017ae2:	bf00      	nop
 8017ae4:	20000020 	.word	0x20000020
 8017ae8:	08026318 	.word	0x08026318
 8017aec:	08026338 	.word	0x08026338
 8017af0:	080262f8 	.word	0x080262f8

08017af4 <_close_r>:
 8017af4:	b538      	push	{r3, r4, r5, lr}
 8017af6:	4c06      	ldr	r4, [pc, #24]	; (8017b10 <_close_r+0x1c>)
 8017af8:	2300      	movs	r3, #0
 8017afa:	4605      	mov	r5, r0
 8017afc:	4608      	mov	r0, r1
 8017afe:	6023      	str	r3, [r4, #0]
 8017b00:	f7e9 f94d 	bl	8000d9e <_close>
 8017b04:	1c43      	adds	r3, r0, #1
 8017b06:	d102      	bne.n	8017b0e <_close_r+0x1a>
 8017b08:	6823      	ldr	r3, [r4, #0]
 8017b0a:	b103      	cbz	r3, 8017b0e <_close_r+0x1a>
 8017b0c:	602b      	str	r3, [r5, #0]
 8017b0e:	bd38      	pop	{r3, r4, r5, pc}
 8017b10:	2000fb18 	.word	0x2000fb18

08017b14 <__sflush_r>:
 8017b14:	898a      	ldrh	r2, [r1, #12]
 8017b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b1a:	4605      	mov	r5, r0
 8017b1c:	0710      	lsls	r0, r2, #28
 8017b1e:	460c      	mov	r4, r1
 8017b20:	d458      	bmi.n	8017bd4 <__sflush_r+0xc0>
 8017b22:	684b      	ldr	r3, [r1, #4]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	dc05      	bgt.n	8017b34 <__sflush_r+0x20>
 8017b28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	dc02      	bgt.n	8017b34 <__sflush_r+0x20>
 8017b2e:	2000      	movs	r0, #0
 8017b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b36:	2e00      	cmp	r6, #0
 8017b38:	d0f9      	beq.n	8017b2e <__sflush_r+0x1a>
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017b40:	682f      	ldr	r7, [r5, #0]
 8017b42:	6a21      	ldr	r1, [r4, #32]
 8017b44:	602b      	str	r3, [r5, #0]
 8017b46:	d032      	beq.n	8017bae <__sflush_r+0x9a>
 8017b48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017b4a:	89a3      	ldrh	r3, [r4, #12]
 8017b4c:	075a      	lsls	r2, r3, #29
 8017b4e:	d505      	bpl.n	8017b5c <__sflush_r+0x48>
 8017b50:	6863      	ldr	r3, [r4, #4]
 8017b52:	1ac0      	subs	r0, r0, r3
 8017b54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b56:	b10b      	cbz	r3, 8017b5c <__sflush_r+0x48>
 8017b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017b5a:	1ac0      	subs	r0, r0, r3
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	4602      	mov	r2, r0
 8017b60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b62:	6a21      	ldr	r1, [r4, #32]
 8017b64:	4628      	mov	r0, r5
 8017b66:	47b0      	blx	r6
 8017b68:	1c43      	adds	r3, r0, #1
 8017b6a:	89a3      	ldrh	r3, [r4, #12]
 8017b6c:	d106      	bne.n	8017b7c <__sflush_r+0x68>
 8017b6e:	6829      	ldr	r1, [r5, #0]
 8017b70:	291d      	cmp	r1, #29
 8017b72:	d848      	bhi.n	8017c06 <__sflush_r+0xf2>
 8017b74:	4a29      	ldr	r2, [pc, #164]	; (8017c1c <__sflush_r+0x108>)
 8017b76:	40ca      	lsrs	r2, r1
 8017b78:	07d6      	lsls	r6, r2, #31
 8017b7a:	d544      	bpl.n	8017c06 <__sflush_r+0xf2>
 8017b7c:	2200      	movs	r2, #0
 8017b7e:	6062      	str	r2, [r4, #4]
 8017b80:	04d9      	lsls	r1, r3, #19
 8017b82:	6922      	ldr	r2, [r4, #16]
 8017b84:	6022      	str	r2, [r4, #0]
 8017b86:	d504      	bpl.n	8017b92 <__sflush_r+0x7e>
 8017b88:	1c42      	adds	r2, r0, #1
 8017b8a:	d101      	bne.n	8017b90 <__sflush_r+0x7c>
 8017b8c:	682b      	ldr	r3, [r5, #0]
 8017b8e:	b903      	cbnz	r3, 8017b92 <__sflush_r+0x7e>
 8017b90:	6560      	str	r0, [r4, #84]	; 0x54
 8017b92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b94:	602f      	str	r7, [r5, #0]
 8017b96:	2900      	cmp	r1, #0
 8017b98:	d0c9      	beq.n	8017b2e <__sflush_r+0x1a>
 8017b9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b9e:	4299      	cmp	r1, r3
 8017ba0:	d002      	beq.n	8017ba8 <__sflush_r+0x94>
 8017ba2:	4628      	mov	r0, r5
 8017ba4:	f7ff f9b0 	bl	8016f08 <_free_r>
 8017ba8:	2000      	movs	r0, #0
 8017baa:	6360      	str	r0, [r4, #52]	; 0x34
 8017bac:	e7c0      	b.n	8017b30 <__sflush_r+0x1c>
 8017bae:	2301      	movs	r3, #1
 8017bb0:	4628      	mov	r0, r5
 8017bb2:	47b0      	blx	r6
 8017bb4:	1c41      	adds	r1, r0, #1
 8017bb6:	d1c8      	bne.n	8017b4a <__sflush_r+0x36>
 8017bb8:	682b      	ldr	r3, [r5, #0]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d0c5      	beq.n	8017b4a <__sflush_r+0x36>
 8017bbe:	2b1d      	cmp	r3, #29
 8017bc0:	d001      	beq.n	8017bc6 <__sflush_r+0xb2>
 8017bc2:	2b16      	cmp	r3, #22
 8017bc4:	d101      	bne.n	8017bca <__sflush_r+0xb6>
 8017bc6:	602f      	str	r7, [r5, #0]
 8017bc8:	e7b1      	b.n	8017b2e <__sflush_r+0x1a>
 8017bca:	89a3      	ldrh	r3, [r4, #12]
 8017bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bd0:	81a3      	strh	r3, [r4, #12]
 8017bd2:	e7ad      	b.n	8017b30 <__sflush_r+0x1c>
 8017bd4:	690f      	ldr	r7, [r1, #16]
 8017bd6:	2f00      	cmp	r7, #0
 8017bd8:	d0a9      	beq.n	8017b2e <__sflush_r+0x1a>
 8017bda:	0793      	lsls	r3, r2, #30
 8017bdc:	680e      	ldr	r6, [r1, #0]
 8017bde:	bf08      	it	eq
 8017be0:	694b      	ldreq	r3, [r1, #20]
 8017be2:	600f      	str	r7, [r1, #0]
 8017be4:	bf18      	it	ne
 8017be6:	2300      	movne	r3, #0
 8017be8:	eba6 0807 	sub.w	r8, r6, r7
 8017bec:	608b      	str	r3, [r1, #8]
 8017bee:	f1b8 0f00 	cmp.w	r8, #0
 8017bf2:	dd9c      	ble.n	8017b2e <__sflush_r+0x1a>
 8017bf4:	4643      	mov	r3, r8
 8017bf6:	463a      	mov	r2, r7
 8017bf8:	6a21      	ldr	r1, [r4, #32]
 8017bfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017bfc:	4628      	mov	r0, r5
 8017bfe:	47b0      	blx	r6
 8017c00:	2800      	cmp	r0, #0
 8017c02:	dc06      	bgt.n	8017c12 <__sflush_r+0xfe>
 8017c04:	89a3      	ldrh	r3, [r4, #12]
 8017c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c0a:	81a3      	strh	r3, [r4, #12]
 8017c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c10:	e78e      	b.n	8017b30 <__sflush_r+0x1c>
 8017c12:	4407      	add	r7, r0
 8017c14:	eba8 0800 	sub.w	r8, r8, r0
 8017c18:	e7e9      	b.n	8017bee <__sflush_r+0xda>
 8017c1a:	bf00      	nop
 8017c1c:	20400001 	.word	0x20400001

08017c20 <_fflush_r>:
 8017c20:	b538      	push	{r3, r4, r5, lr}
 8017c22:	690b      	ldr	r3, [r1, #16]
 8017c24:	4605      	mov	r5, r0
 8017c26:	460c      	mov	r4, r1
 8017c28:	b1db      	cbz	r3, 8017c62 <_fflush_r+0x42>
 8017c2a:	b118      	cbz	r0, 8017c34 <_fflush_r+0x14>
 8017c2c:	6983      	ldr	r3, [r0, #24]
 8017c2e:	b90b      	cbnz	r3, 8017c34 <_fflush_r+0x14>
 8017c30:	f7ff f8b8 	bl	8016da4 <__sinit>
 8017c34:	4b0c      	ldr	r3, [pc, #48]	; (8017c68 <_fflush_r+0x48>)
 8017c36:	429c      	cmp	r4, r3
 8017c38:	d109      	bne.n	8017c4e <_fflush_r+0x2e>
 8017c3a:	686c      	ldr	r4, [r5, #4]
 8017c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c40:	b17b      	cbz	r3, 8017c62 <_fflush_r+0x42>
 8017c42:	4621      	mov	r1, r4
 8017c44:	4628      	mov	r0, r5
 8017c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c4a:	f7ff bf63 	b.w	8017b14 <__sflush_r>
 8017c4e:	4b07      	ldr	r3, [pc, #28]	; (8017c6c <_fflush_r+0x4c>)
 8017c50:	429c      	cmp	r4, r3
 8017c52:	d101      	bne.n	8017c58 <_fflush_r+0x38>
 8017c54:	68ac      	ldr	r4, [r5, #8]
 8017c56:	e7f1      	b.n	8017c3c <_fflush_r+0x1c>
 8017c58:	4b05      	ldr	r3, [pc, #20]	; (8017c70 <_fflush_r+0x50>)
 8017c5a:	429c      	cmp	r4, r3
 8017c5c:	bf08      	it	eq
 8017c5e:	68ec      	ldreq	r4, [r5, #12]
 8017c60:	e7ec      	b.n	8017c3c <_fflush_r+0x1c>
 8017c62:	2000      	movs	r0, #0
 8017c64:	bd38      	pop	{r3, r4, r5, pc}
 8017c66:	bf00      	nop
 8017c68:	08026318 	.word	0x08026318
 8017c6c:	08026338 	.word	0x08026338
 8017c70:	080262f8 	.word	0x080262f8

08017c74 <_lseek_r>:
 8017c74:	b538      	push	{r3, r4, r5, lr}
 8017c76:	4c07      	ldr	r4, [pc, #28]	; (8017c94 <_lseek_r+0x20>)
 8017c78:	4605      	mov	r5, r0
 8017c7a:	4608      	mov	r0, r1
 8017c7c:	4611      	mov	r1, r2
 8017c7e:	2200      	movs	r2, #0
 8017c80:	6022      	str	r2, [r4, #0]
 8017c82:	461a      	mov	r2, r3
 8017c84:	f7e9 f8b2 	bl	8000dec <_lseek>
 8017c88:	1c43      	adds	r3, r0, #1
 8017c8a:	d102      	bne.n	8017c92 <_lseek_r+0x1e>
 8017c8c:	6823      	ldr	r3, [r4, #0]
 8017c8e:	b103      	cbz	r3, 8017c92 <_lseek_r+0x1e>
 8017c90:	602b      	str	r3, [r5, #0]
 8017c92:	bd38      	pop	{r3, r4, r5, pc}
 8017c94:	2000fb18 	.word	0x2000fb18

08017c98 <__swhatbuf_r>:
 8017c98:	b570      	push	{r4, r5, r6, lr}
 8017c9a:	460e      	mov	r6, r1
 8017c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ca0:	2900      	cmp	r1, #0
 8017ca2:	b096      	sub	sp, #88	; 0x58
 8017ca4:	4614      	mov	r4, r2
 8017ca6:	461d      	mov	r5, r3
 8017ca8:	da07      	bge.n	8017cba <__swhatbuf_r+0x22>
 8017caa:	2300      	movs	r3, #0
 8017cac:	602b      	str	r3, [r5, #0]
 8017cae:	89b3      	ldrh	r3, [r6, #12]
 8017cb0:	061a      	lsls	r2, r3, #24
 8017cb2:	d410      	bmi.n	8017cd6 <__swhatbuf_r+0x3e>
 8017cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017cb8:	e00e      	b.n	8017cd8 <__swhatbuf_r+0x40>
 8017cba:	466a      	mov	r2, sp
 8017cbc:	f000 f8a4 	bl	8017e08 <_fstat_r>
 8017cc0:	2800      	cmp	r0, #0
 8017cc2:	dbf2      	blt.n	8017caa <__swhatbuf_r+0x12>
 8017cc4:	9a01      	ldr	r2, [sp, #4]
 8017cc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017cca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017cce:	425a      	negs	r2, r3
 8017cd0:	415a      	adcs	r2, r3
 8017cd2:	602a      	str	r2, [r5, #0]
 8017cd4:	e7ee      	b.n	8017cb4 <__swhatbuf_r+0x1c>
 8017cd6:	2340      	movs	r3, #64	; 0x40
 8017cd8:	2000      	movs	r0, #0
 8017cda:	6023      	str	r3, [r4, #0]
 8017cdc:	b016      	add	sp, #88	; 0x58
 8017cde:	bd70      	pop	{r4, r5, r6, pc}

08017ce0 <__smakebuf_r>:
 8017ce0:	898b      	ldrh	r3, [r1, #12]
 8017ce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017ce4:	079d      	lsls	r5, r3, #30
 8017ce6:	4606      	mov	r6, r0
 8017ce8:	460c      	mov	r4, r1
 8017cea:	d507      	bpl.n	8017cfc <__smakebuf_r+0x1c>
 8017cec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017cf0:	6023      	str	r3, [r4, #0]
 8017cf2:	6123      	str	r3, [r4, #16]
 8017cf4:	2301      	movs	r3, #1
 8017cf6:	6163      	str	r3, [r4, #20]
 8017cf8:	b002      	add	sp, #8
 8017cfa:	bd70      	pop	{r4, r5, r6, pc}
 8017cfc:	ab01      	add	r3, sp, #4
 8017cfe:	466a      	mov	r2, sp
 8017d00:	f7ff ffca 	bl	8017c98 <__swhatbuf_r>
 8017d04:	9900      	ldr	r1, [sp, #0]
 8017d06:	4605      	mov	r5, r0
 8017d08:	4630      	mov	r0, r6
 8017d0a:	f7ff f94b 	bl	8016fa4 <_malloc_r>
 8017d0e:	b948      	cbnz	r0, 8017d24 <__smakebuf_r+0x44>
 8017d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d14:	059a      	lsls	r2, r3, #22
 8017d16:	d4ef      	bmi.n	8017cf8 <__smakebuf_r+0x18>
 8017d18:	f023 0303 	bic.w	r3, r3, #3
 8017d1c:	f043 0302 	orr.w	r3, r3, #2
 8017d20:	81a3      	strh	r3, [r4, #12]
 8017d22:	e7e3      	b.n	8017cec <__smakebuf_r+0xc>
 8017d24:	4b0d      	ldr	r3, [pc, #52]	; (8017d5c <__smakebuf_r+0x7c>)
 8017d26:	62b3      	str	r3, [r6, #40]	; 0x28
 8017d28:	89a3      	ldrh	r3, [r4, #12]
 8017d2a:	6020      	str	r0, [r4, #0]
 8017d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d30:	81a3      	strh	r3, [r4, #12]
 8017d32:	9b00      	ldr	r3, [sp, #0]
 8017d34:	6163      	str	r3, [r4, #20]
 8017d36:	9b01      	ldr	r3, [sp, #4]
 8017d38:	6120      	str	r0, [r4, #16]
 8017d3a:	b15b      	cbz	r3, 8017d54 <__smakebuf_r+0x74>
 8017d3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d40:	4630      	mov	r0, r6
 8017d42:	f000 f873 	bl	8017e2c <_isatty_r>
 8017d46:	b128      	cbz	r0, 8017d54 <__smakebuf_r+0x74>
 8017d48:	89a3      	ldrh	r3, [r4, #12]
 8017d4a:	f023 0303 	bic.w	r3, r3, #3
 8017d4e:	f043 0301 	orr.w	r3, r3, #1
 8017d52:	81a3      	strh	r3, [r4, #12]
 8017d54:	89a3      	ldrh	r3, [r4, #12]
 8017d56:	431d      	orrs	r5, r3
 8017d58:	81a5      	strh	r5, [r4, #12]
 8017d5a:	e7cd      	b.n	8017cf8 <__smakebuf_r+0x18>
 8017d5c:	08016d6d 	.word	0x08016d6d

08017d60 <memmove>:
 8017d60:	4288      	cmp	r0, r1
 8017d62:	b510      	push	{r4, lr}
 8017d64:	eb01 0302 	add.w	r3, r1, r2
 8017d68:	d807      	bhi.n	8017d7a <memmove+0x1a>
 8017d6a:	1e42      	subs	r2, r0, #1
 8017d6c:	4299      	cmp	r1, r3
 8017d6e:	d00a      	beq.n	8017d86 <memmove+0x26>
 8017d70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d74:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017d78:	e7f8      	b.n	8017d6c <memmove+0xc>
 8017d7a:	4283      	cmp	r3, r0
 8017d7c:	d9f5      	bls.n	8017d6a <memmove+0xa>
 8017d7e:	1881      	adds	r1, r0, r2
 8017d80:	1ad2      	subs	r2, r2, r3
 8017d82:	42d3      	cmn	r3, r2
 8017d84:	d100      	bne.n	8017d88 <memmove+0x28>
 8017d86:	bd10      	pop	{r4, pc}
 8017d88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d8c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017d90:	e7f7      	b.n	8017d82 <memmove+0x22>

08017d92 <__malloc_lock>:
 8017d92:	4770      	bx	lr

08017d94 <__malloc_unlock>:
 8017d94:	4770      	bx	lr

08017d96 <_realloc_r>:
 8017d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d98:	4607      	mov	r7, r0
 8017d9a:	4614      	mov	r4, r2
 8017d9c:	460e      	mov	r6, r1
 8017d9e:	b921      	cbnz	r1, 8017daa <_realloc_r+0x14>
 8017da0:	4611      	mov	r1, r2
 8017da2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017da6:	f7ff b8fd 	b.w	8016fa4 <_malloc_r>
 8017daa:	b922      	cbnz	r2, 8017db6 <_realloc_r+0x20>
 8017dac:	f7ff f8ac 	bl	8016f08 <_free_r>
 8017db0:	4625      	mov	r5, r4
 8017db2:	4628      	mov	r0, r5
 8017db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017db6:	f000 f849 	bl	8017e4c <_malloc_usable_size_r>
 8017dba:	42a0      	cmp	r0, r4
 8017dbc:	d20f      	bcs.n	8017dde <_realloc_r+0x48>
 8017dbe:	4621      	mov	r1, r4
 8017dc0:	4638      	mov	r0, r7
 8017dc2:	f7ff f8ef 	bl	8016fa4 <_malloc_r>
 8017dc6:	4605      	mov	r5, r0
 8017dc8:	2800      	cmp	r0, #0
 8017dca:	d0f2      	beq.n	8017db2 <_realloc_r+0x1c>
 8017dcc:	4631      	mov	r1, r6
 8017dce:	4622      	mov	r2, r4
 8017dd0:	f7fe febf 	bl	8016b52 <memcpy>
 8017dd4:	4631      	mov	r1, r6
 8017dd6:	4638      	mov	r0, r7
 8017dd8:	f7ff f896 	bl	8016f08 <_free_r>
 8017ddc:	e7e9      	b.n	8017db2 <_realloc_r+0x1c>
 8017dde:	4635      	mov	r5, r6
 8017de0:	e7e7      	b.n	8017db2 <_realloc_r+0x1c>
	...

08017de4 <_read_r>:
 8017de4:	b538      	push	{r3, r4, r5, lr}
 8017de6:	4c07      	ldr	r4, [pc, #28]	; (8017e04 <_read_r+0x20>)
 8017de8:	4605      	mov	r5, r0
 8017dea:	4608      	mov	r0, r1
 8017dec:	4611      	mov	r1, r2
 8017dee:	2200      	movs	r2, #0
 8017df0:	6022      	str	r2, [r4, #0]
 8017df2:	461a      	mov	r2, r3
 8017df4:	f7e8 ff9a 	bl	8000d2c <_read>
 8017df8:	1c43      	adds	r3, r0, #1
 8017dfa:	d102      	bne.n	8017e02 <_read_r+0x1e>
 8017dfc:	6823      	ldr	r3, [r4, #0]
 8017dfe:	b103      	cbz	r3, 8017e02 <_read_r+0x1e>
 8017e00:	602b      	str	r3, [r5, #0]
 8017e02:	bd38      	pop	{r3, r4, r5, pc}
 8017e04:	2000fb18 	.word	0x2000fb18

08017e08 <_fstat_r>:
 8017e08:	b538      	push	{r3, r4, r5, lr}
 8017e0a:	4c07      	ldr	r4, [pc, #28]	; (8017e28 <_fstat_r+0x20>)
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	4605      	mov	r5, r0
 8017e10:	4608      	mov	r0, r1
 8017e12:	4611      	mov	r1, r2
 8017e14:	6023      	str	r3, [r4, #0]
 8017e16:	f7e8 ffce 	bl	8000db6 <_fstat>
 8017e1a:	1c43      	adds	r3, r0, #1
 8017e1c:	d102      	bne.n	8017e24 <_fstat_r+0x1c>
 8017e1e:	6823      	ldr	r3, [r4, #0]
 8017e20:	b103      	cbz	r3, 8017e24 <_fstat_r+0x1c>
 8017e22:	602b      	str	r3, [r5, #0]
 8017e24:	bd38      	pop	{r3, r4, r5, pc}
 8017e26:	bf00      	nop
 8017e28:	2000fb18 	.word	0x2000fb18

08017e2c <_isatty_r>:
 8017e2c:	b538      	push	{r3, r4, r5, lr}
 8017e2e:	4c06      	ldr	r4, [pc, #24]	; (8017e48 <_isatty_r+0x1c>)
 8017e30:	2300      	movs	r3, #0
 8017e32:	4605      	mov	r5, r0
 8017e34:	4608      	mov	r0, r1
 8017e36:	6023      	str	r3, [r4, #0]
 8017e38:	f7e8 ffcd 	bl	8000dd6 <_isatty>
 8017e3c:	1c43      	adds	r3, r0, #1
 8017e3e:	d102      	bne.n	8017e46 <_isatty_r+0x1a>
 8017e40:	6823      	ldr	r3, [r4, #0]
 8017e42:	b103      	cbz	r3, 8017e46 <_isatty_r+0x1a>
 8017e44:	602b      	str	r3, [r5, #0]
 8017e46:	bd38      	pop	{r3, r4, r5, pc}
 8017e48:	2000fb18 	.word	0x2000fb18

08017e4c <_malloc_usable_size_r>:
 8017e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e50:	1f18      	subs	r0, r3, #4
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	bfbc      	itt	lt
 8017e56:	580b      	ldrlt	r3, [r1, r0]
 8017e58:	18c0      	addlt	r0, r0, r3
 8017e5a:	4770      	bx	lr

08017e5c <_init>:
 8017e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e5e:	bf00      	nop
 8017e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e62:	bc08      	pop	{r3}
 8017e64:	469e      	mov	lr, r3
 8017e66:	4770      	bx	lr

08017e68 <_fini>:
 8017e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e6a:	bf00      	nop
 8017e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e6e:	bc08      	pop	{r3}
 8017e70:	469e      	mov	lr, r3
 8017e72:	4770      	bx	lr
