
cv09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000847c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008630  08008630  00018630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008868  08008868  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08008868  08008868  00018868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008870  08008870  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008874  08008874  00018874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08008878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  200001c8  08008a40  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  08008a40  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001255c  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002af3  00000000  00000000  00032754  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  00035248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  00035ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025770  00000000  00000000  00036a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db5a  00000000  00000000  0005c1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5093  00000000  00000000  00069d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ed9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000389c  00000000  00000000  0013ee18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001c8 	.word	0x200001c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008614 	.word	0x08008614

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	08008614 	.word	0x08008614

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b972 	b.w	8000ec8 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9e08      	ldr	r6, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	4688      	mov	r8, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d14b      	bne.n	8000ca2 <__udivmoddi4+0xa6>
 8000c0a:	428a      	cmp	r2, r1
 8000c0c:	4615      	mov	r5, r2
 8000c0e:	d967      	bls.n	8000ce0 <__udivmoddi4+0xe4>
 8000c10:	fab2 f282 	clz	r2, r2
 8000c14:	b14a      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c16:	f1c2 0720 	rsb	r7, r2, #32
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c22:	4095      	lsls	r5, r2
 8000c24:	ea47 0803 	orr.w	r8, r7, r3
 8000c28:	4094      	lsls	r4, r2
 8000c2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c34:	fa1f fc85 	uxth.w	ip, r5
 8000c38:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c40:	fb07 f10c 	mul.w	r1, r7, ip
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x60>
 8000c48:	18eb      	adds	r3, r5, r3
 8000c4a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4e:	f080 811b 	bcs.w	8000e88 <__udivmoddi4+0x28c>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 8118 	bls.w	8000e88 <__udivmoddi4+0x28c>
 8000c58:	3f02      	subs	r7, #2
 8000c5a:	442b      	add	r3, r5
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c70:	45a4      	cmp	ip, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x8c>
 8000c74:	192c      	adds	r4, r5, r4
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x290>
 8000c7e:	45a4      	cmp	ip, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x290>
 8000c84:	3802      	subs	r0, #2
 8000c86:	442c      	add	r4, r5
 8000c88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c8c:	eba4 040c 	sub.w	r4, r4, ip
 8000c90:	2700      	movs	r7, #0
 8000c92:	b11e      	cbz	r6, 8000c9c <__udivmoddi4+0xa0>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9c:	4639      	mov	r1, r7
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xbe>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80eb 	beq.w	8000e82 <__udivmoddi4+0x286>
 8000cac:	2700      	movs	r7, #0
 8000cae:	e9c6 0100 	strd	r0, r1, [r6]
 8000cb2:	4638      	mov	r0, r7
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f783 	clz	r7, r3
 8000cbe:	2f00      	cmp	r7, #0
 8000cc0:	d147      	bne.n	8000d52 <__udivmoddi4+0x156>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd0>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80fa 	bhi.w	8000ec0 <__udivmoddi4+0x2c4>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	4698      	mov	r8, r3
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa0>
 8000cda:	e9c6 4800 	strd	r4, r8, [r6]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xe8>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 808f 	bne.w	8000e0c <__udivmoddi4+0x210>
 8000cee:	1b49      	subs	r1, r1, r5
 8000cf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf4:	fa1f f885 	uxth.w	r8, r5
 8000cf8:	2701      	movs	r7, #1
 8000cfa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfe:	0c23      	lsrs	r3, r4, #16
 8000d00:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d08:	fb08 f10c 	mul.w	r1, r8, ip
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x124>
 8000d10:	18eb      	adds	r3, r5, r3
 8000d12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x122>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	f200 80cd 	bhi.w	8000eb8 <__udivmoddi4+0x2bc>
 8000d1e:	4684      	mov	ip, r0
 8000d20:	1a59      	subs	r1, r3, r1
 8000d22:	b2a3      	uxth	r3, r4
 8000d24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d28:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d30:	fb08 f800 	mul.w	r8, r8, r0
 8000d34:	45a0      	cmp	r8, r4
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0x14c>
 8000d38:	192c      	adds	r4, r5, r4
 8000d3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x14a>
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	f200 80b6 	bhi.w	8000eb2 <__udivmoddi4+0x2b6>
 8000d46:	4618      	mov	r0, r3
 8000d48:	eba4 0408 	sub.w	r4, r4, r8
 8000d4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d50:	e79f      	b.n	8000c92 <__udivmoddi4+0x96>
 8000d52:	f1c7 0c20 	rsb	ip, r7, #32
 8000d56:	40bb      	lsls	r3, r7
 8000d58:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d5c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d60:	fa01 f407 	lsl.w	r4, r1, r7
 8000d64:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d68:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d70:	4325      	orrs	r5, r4
 8000d72:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d76:	0c2c      	lsrs	r4, r5, #16
 8000d78:	fb08 3319 	mls	r3, r8, r9, r3
 8000d7c:	fa1f fa8e 	uxth.w	sl, lr
 8000d80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d84:	fb09 f40a 	mul.w	r4, r9, sl
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d92:	d90b      	bls.n	8000dac <__udivmoddi4+0x1b0>
 8000d94:	eb1e 0303 	adds.w	r3, lr, r3
 8000d98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9c:	f080 8087 	bcs.w	8000eae <__udivmoddi4+0x2b2>
 8000da0:	429c      	cmp	r4, r3
 8000da2:	f240 8084 	bls.w	8000eae <__udivmoddi4+0x2b2>
 8000da6:	f1a9 0902 	sub.w	r9, r9, #2
 8000daa:	4473      	add	r3, lr
 8000dac:	1b1b      	subs	r3, r3, r4
 8000dae:	b2ad      	uxth	r5, r5
 8000db0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db4:	fb08 3310 	mls	r3, r8, r0, r3
 8000db8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dbc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dc0:	45a2      	cmp	sl, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1da>
 8000dc4:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dcc:	d26b      	bcs.n	8000ea6 <__udivmoddi4+0x2aa>
 8000dce:	45a2      	cmp	sl, r4
 8000dd0:	d969      	bls.n	8000ea6 <__udivmoddi4+0x2aa>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	4474      	add	r4, lr
 8000dd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dda:	fba0 8902 	umull	r8, r9, r0, r2
 8000dde:	eba4 040a 	sub.w	r4, r4, sl
 8000de2:	454c      	cmp	r4, r9
 8000de4:	46c2      	mov	sl, r8
 8000de6:	464b      	mov	r3, r9
 8000de8:	d354      	bcc.n	8000e94 <__udivmoddi4+0x298>
 8000dea:	d051      	beq.n	8000e90 <__udivmoddi4+0x294>
 8000dec:	2e00      	cmp	r6, #0
 8000dee:	d069      	beq.n	8000ec4 <__udivmoddi4+0x2c8>
 8000df0:	ebb1 050a 	subs.w	r5, r1, sl
 8000df4:	eb64 0403 	sbc.w	r4, r4, r3
 8000df8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dfc:	40fd      	lsrs	r5, r7
 8000dfe:	40fc      	lsrs	r4, r7
 8000e00:	ea4c 0505 	orr.w	r5, ip, r5
 8000e04:	e9c6 5400 	strd	r5, r4, [r6]
 8000e08:	2700      	movs	r7, #0
 8000e0a:	e747      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f703 	lsr.w	r7, r0, r3
 8000e14:	4095      	lsls	r5, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e22:	4338      	orrs	r0, r7
 8000e24:	0c01      	lsrs	r1, r0, #16
 8000e26:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e2a:	fa1f f885 	uxth.w	r8, r5
 8000e2e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb07 f308 	mul.w	r3, r7, r8
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x256>
 8000e42:	1869      	adds	r1, r5, r1
 8000e44:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e48:	d22f      	bcs.n	8000eaa <__udivmoddi4+0x2ae>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d92d      	bls.n	8000eaa <__udivmoddi4+0x2ae>
 8000e4e:	3f02      	subs	r7, #2
 8000e50:	4429      	add	r1, r5
 8000e52:	1acb      	subs	r3, r1, r3
 8000e54:	b281      	uxth	r1, r0
 8000e56:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb00 f308 	mul.w	r3, r0, r8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x27e>
 8000e6a:	1869      	adds	r1, r5, r1
 8000e6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e70:	d217      	bcs.n	8000ea2 <__udivmoddi4+0x2a6>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d915      	bls.n	8000ea2 <__udivmoddi4+0x2a6>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4429      	add	r1, r5
 8000e7a:	1ac9      	subs	r1, r1, r3
 8000e7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e80:	e73b      	b.n	8000cfa <__udivmoddi4+0xfe>
 8000e82:	4637      	mov	r7, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e709      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000e88:	4607      	mov	r7, r0
 8000e8a:	e6e7      	b.n	8000c5c <__udivmoddi4+0x60>
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x8c>
 8000e90:	4541      	cmp	r1, r8
 8000e92:	d2ab      	bcs.n	8000dec <__udivmoddi4+0x1f0>
 8000e94:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e98:	eb69 020e 	sbc.w	r2, r9, lr
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	e7a4      	b.n	8000dec <__udivmoddi4+0x1f0>
 8000ea2:	4660      	mov	r0, ip
 8000ea4:	e7e9      	b.n	8000e7a <__udivmoddi4+0x27e>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	e795      	b.n	8000dd6 <__udivmoddi4+0x1da>
 8000eaa:	4667      	mov	r7, ip
 8000eac:	e7d1      	b.n	8000e52 <__udivmoddi4+0x256>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	e77c      	b.n	8000dac <__udivmoddi4+0x1b0>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	442c      	add	r4, r5
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0x14c>
 8000eb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ebc:	442b      	add	r3, r5
 8000ebe:	e72f      	b.n	8000d20 <__udivmoddi4+0x124>
 8000ec0:	4638      	mov	r0, r7
 8000ec2:	e708      	b.n	8000cd6 <__udivmoddi4+0xda>
 8000ec4:	4637      	mov	r7, r6
 8000ec6:	e6e9      	b.n	8000c9c <__udivmoddi4+0xa0>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <step>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void step(int8_t x, int8_t y, _Bool btn)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	71bb      	strb	r3, [r7, #6]
 8000eda:	4613      	mov	r3, r2
 8000edc:	717b      	strb	r3, [r7, #5]
	uint8_t buff[4];
	buff[0] = 0x01;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	733b      	strb	r3, [r7, #12]
	if (btn) buff[0] = 0x01;
 8000ee2:	797b      	ldrb	r3, [r7, #5]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <step+0x20>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	733b      	strb	r3, [r7, #12]
	buff[1] = x;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	737b      	strb	r3, [r7, #13]
	buff[2] = y;
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	73bb      	strb	r3, [r7, #14]
	buff[3] = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2204      	movs	r2, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <step+0x50>)
 8000f02:	f004 fc59 	bl	80057b8 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <step+0x50>)
 8000f08:	f004 fc78 	bl	80057fc <USBD_HID_GetPollingInterval>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fb6c 	bl	80015ec <HAL_Delay>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000238 	.word	0x20000238

08000f20 <circle>:

void circle(uint16_t radius)
{
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	80fb      	strh	r3, [r7, #6]

	float x = 0, y = 0, sx = 0, sy = 0;
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
	uint8_t param_x, param_y,i;

	for(i = 0; i < ANGLE_STEP; i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	75fb      	strb	r3, [r7, #23]
 8000f46:	e09e      	b.n	8001086 <circle+0x166>
	{
		x = radius * cos((2 * M_PI * i) / (ANGLE_STEP));
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff faa2 	bl	8000494 <__aeabi_i2d>
 8000f50:	4604      	mov	r4, r0
 8000f52:	460d      	mov	r5, r1
 8000f54:	7dfb      	ldrb	r3, [r7, #23]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa9c 	bl	8000494 <__aeabi_i2d>
 8000f5c:	a34e      	add	r3, pc, #312	; (adr r3, 8001098 <circle+0x178>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff fb01 	bl	8000568 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	4b4b      	ldr	r3, [pc, #300]	; (80010a0 <circle+0x180>)
 8000f74:	f7ff fc22 	bl	80007bc <__aeabi_ddiv>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	ec43 2b17 	vmov	d7, r2, r3
 8000f80:	eeb0 0a47 	vmov.f32	s0, s14
 8000f84:	eef0 0a67 	vmov.f32	s1, s15
 8000f88:	f006 faa2 	bl	80074d0 <cos>
 8000f8c:	ec53 2b10 	vmov	r2, r3, d0
 8000f90:	4620      	mov	r0, r4
 8000f92:	4629      	mov	r1, r5
 8000f94:	f7ff fae8 	bl	8000568 <__aeabi_dmul>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	460c      	mov	r4, r1
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	4621      	mov	r1, r4
 8000fa0:	f7ff fdc4 	bl	8000b2c <__aeabi_d2f>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	613b      	str	r3, [r7, #16]
		y = radius * sin((2 * M_PI * i) / (ANGLE_STEP));
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fa72 	bl	8000494 <__aeabi_i2d>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fa6c 	bl	8000494 <__aeabi_i2d>
 8000fbc:	a336      	add	r3, pc, #216	; (adr r3, 8001098 <circle+0x178>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f7ff fad1 	bl	8000568 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <circle+0x180>)
 8000fd4:	f7ff fbf2 	bl	80007bc <__aeabi_ddiv>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	ec43 2b17 	vmov	d7, r2, r3
 8000fe0:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe4:	eef0 0a67 	vmov.f32	s1, s15
 8000fe8:	f006 fb02 	bl	80075f0 <sin>
 8000fec:	ec53 2b10 	vmov	r2, r3, d0
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	f7ff fab8 	bl	8000568 <__aeabi_dmul>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	4621      	mov	r1, r4
 8001000:	f7ff fd94 	bl	8000b2c <__aeabi_d2f>
 8001004:	4603      	mov	r3, r0
 8001006:	60fb      	str	r3, [r7, #12]
		param_x = round (x - sx);
 8001008:	ed97 7a04 	vldr	s14, [r7, #16]
 800100c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001014:	ee17 0a90 	vmov	r0, s15
 8001018:	f7ff fa4e 	bl	80004b8 <__aeabi_f2d>
 800101c:	4603      	mov	r3, r0
 800101e:	460c      	mov	r4, r1
 8001020:	ec44 3b10 	vmov	d0, r3, r4
 8001024:	f006 fa98 	bl	8007558 <round>
 8001028:	ec54 3b10 	vmov	r3, r4, d0
 800102c:	4618      	mov	r0, r3
 800102e:	4621      	mov	r1, r4
 8001030:	f7ff fd5c 	bl	8000aec <__aeabi_d2uiz>
 8001034:	4603      	mov	r3, r0
 8001036:	72fb      	strb	r3, [r7, #11]
		param_y = round (y - sy);
 8001038:	ed97 7a03 	vldr	s14, [r7, #12]
 800103c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001044:	ee17 0a90 	vmov	r0, s15
 8001048:	f7ff fa36 	bl	80004b8 <__aeabi_f2d>
 800104c:	4603      	mov	r3, r0
 800104e:	460c      	mov	r4, r1
 8001050:	ec44 3b10 	vmov	d0, r3, r4
 8001054:	f006 fa80 	bl	8007558 <round>
 8001058:	ec54 3b10 	vmov	r3, r4, d0
 800105c:	4618      	mov	r0, r3
 800105e:	4621      	mov	r1, r4
 8001060:	f7ff fd44 	bl	8000aec <__aeabi_d2uiz>
 8001064:	4603      	mov	r3, r0
 8001066:	72bb      	strb	r3, [r7, #10]

		sx = x;
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	61fb      	str	r3, [r7, #28]
		sy = y;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	61bb      	str	r3, [r7, #24]

		step(param_x, param_y, true);
 8001070:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001074:	f997 100a 	ldrsb.w	r1, [r7, #10]
 8001078:	2201      	movs	r2, #1
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff26 	bl	8000ecc <step>
	for(i = 0; i < ANGLE_STEP; i++)
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	3301      	adds	r3, #1
 8001084:	75fb      	strb	r3, [r7, #23]
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	2b31      	cmp	r3, #49	; 0x31
 800108a:	f67f af5d 	bls.w	8000f48 <circle+0x28>
	}


}
 800108e:	bf00      	nop
 8001090:	3720      	adds	r7, #32
 8001092:	46bd      	mov	sp, r7
 8001094:	bdb0      	pop	{r4, r5, r7, pc}
 8001096:	bf00      	nop
 8001098:	54442d18 	.word	0x54442d18
 800109c:	401921fb 	.word	0x401921fb
 80010a0:	40490000 	.word	0x40490000

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a8:	f000 fa2e 	bl	8001508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ac:	f000 f814 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b0:	f000 f8a6 	bl	8001200 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80010b4:	f005 fcf0 	bl	8006a98 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 80010b8:	f000 f878 	bl	80011ac <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == 1)
 80010bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <main+0x30>)
 80010c2:	f000 fd71 	bl	8001ba8 <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d1f7      	bne.n	80010bc <main+0x18>
	  		{
	  			circle(60);
 80010cc:	203c      	movs	r0, #60	; 0x3c
 80010ce:	f7ff ff27 	bl	8000f20 <circle>
	  if(HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == 1)
 80010d2:	e7f3      	b.n	80010bc <main+0x18>
 80010d4:	40020800 	.word	0x40020800

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	; 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f006 f92e 	bl	8007348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <SystemClock_Config+0xcc>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <SystemClock_Config+0xcc>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <SystemClock_Config+0xcc>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <SystemClock_Config+0xd0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001124:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <SystemClock_Config+0xd0>)
 8001126:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <SystemClock_Config+0xd0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001140:	2310      	movs	r3, #16
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001144:	2302      	movs	r3, #2
 8001146:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001148:	2300      	movs	r3, #0
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800114c:	2310      	movs	r3, #16
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001150:	23c0      	movs	r3, #192	; 0xc0
 8001152:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001154:	2302      	movs	r3, #2
 8001156:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001158:	2304      	movs	r3, #4
 800115a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 0320 	add.w	r3, r7, #32
 8001160:	4618      	mov	r0, r3
 8001162:	f001 febd 	bl	8002ee0 <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800116c:	f000 f8b0 	bl	80012d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	230f      	movs	r3, #15
 8001172:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f002 f918 	bl	80033c0 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001196:	f000 f89b 	bl	80012d0 <Error_Handler>
  }
}
 800119a:	bf00      	nop
 800119c:	3750      	adds	r7, #80	; 0x50
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40007000 	.word	0x40007000

080011ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <MX_USART3_UART_Init+0x50>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011e4:	f002 fab8 	bl	8003758 <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011ee:	f000 f86f 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001f4 	.word	0x200001f4
 80011fc:	40004800 	.word	0x40004800

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <MX_GPIO_Init+0xc4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a29      	ldr	r2, [pc, #164]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <MX_GPIO_Init+0xc4>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN1_GPIO_Port, BTN1_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001270:	4815      	ldr	r0, [pc, #84]	; (80012c8 <MX_GPIO_Init+0xc8>)
 8001272:	f000 fcb1 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2101      	movs	r1, #1
 800127a:	4814      	ldr	r0, [pc, #80]	; (80012cc <MX_GPIO_Init+0xcc>)
 800127c:	f000 fcac 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001284:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4619      	mov	r1, r3
 8001298:	480b      	ldr	r0, [pc, #44]	; (80012c8 <MX_GPIO_Init+0xc8>)
 800129a:	f000 fadb 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800129e:	2301      	movs	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_GPIO_Init+0xcc>)
 80012b6:	f000 facd 	bl	8001854 <HAL_GPIO_Init>

}
 80012ba:	bf00      	nop
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020400 	.word	0x40020400

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_MspInit+0x4c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a0f      	ldr	r2, [pc, #60]	; (800132c <HAL_MspInit+0x4c>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_MspInit+0x4c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_MspInit+0x4c>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800

08001330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <HAL_UART_MspInit+0x84>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12c      	bne.n	80013ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_UART_MspInit+0x88>)
 800135c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800138a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800139c:	2307      	movs	r3, #7
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_UART_MspInit+0x8c>)
 80013a8:	f000 fa54 	bl	8001854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	; 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40004800 	.word	0x40004800
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020400 	.word	0x40020400

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <MemManage_Handler+0x4>

080013da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001414:	f000 f8ca 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <OTG_FS_IRQHandler+0x10>)
 8001422:	f000 fd42 	bl	8001eaa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000708 	.word	0x20000708

08001430 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <_sbrk+0x50>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x16>
		heap_end = &end;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <_sbrk+0x50>)
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <_sbrk+0x54>)
 8001444:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <_sbrk+0x50>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <_sbrk+0x50>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	466a      	mov	r2, sp
 8001456:	4293      	cmp	r3, r2
 8001458:	d907      	bls.n	800146a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800145a:	f005 ff3b 	bl	80072d4 <__errno>
 800145e:	4602      	mov	r2, r0
 8001460:	230c      	movs	r3, #12
 8001462:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
 8001468:	e006      	b.n	8001478 <_sbrk+0x48>
	}

	heap_end += incr;
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <_sbrk+0x50>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a03      	ldr	r2, [pc, #12]	; (8001480 <_sbrk+0x50>)
 8001474:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200001e4 	.word	0x200001e4
 8001484:	20000b18 	.word	0x20000b18

08001488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <SystemInit+0x28>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <SystemInit+0x28>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SystemInit+0x28>)
 800149e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014a2:	609a      	str	r2, [r3, #8]
#endif
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ec <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ba:	e003      	b.n	80014c4 <LoopCopyDataInit>

080014bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014c2:	3104      	adds	r1, #4

080014c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014c4:	480b      	ldr	r0, [pc, #44]	; (80014f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014cc:	d3f6      	bcc.n	80014bc <CopyDataInit>
  ldr  r2, =_sbss
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014d0:	e002      	b.n	80014d8 <LoopFillZerobss>

080014d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014d4:	f842 3b04 	str.w	r3, [r2], #4

080014d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014dc:	d3f9      	bcc.n	80014d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014de:	f7ff ffd3 	bl	8001488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e2:	f005 fefd 	bl	80072e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e6:	f7ff fddd 	bl	80010a4 <main>
  bx  lr    
 80014ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014ec:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80014f0:	08008878 	.word	0x08008878
  ldr  r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014f8:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 80014fc:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8001500:	20000b14 	.word	0x20000b14

08001504 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC_IRQHandler>
	...

08001508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <HAL_Init+0x40>)
 8001512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001516:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_Init+0x40>)
 800151e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001522:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_Init+0x40>)
 800152a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 f94d 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001536:	2000      	movs	r0, #0
 8001538:	f000 f808 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800153c:	f7ff fed0 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023c00 	.word	0x40023c00

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x54>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x58>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f965 	bl	800183a <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f000 f92d 	bl	80017e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_InitTick+0x5c>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000234 	.word	0x20000234

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000234 	.word	0x20000234

080015ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff ffee 	bl	80015d4 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_Delay+0x40>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffde 	bl	80015d4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000008 	.word	0x20000008

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4907      	ldr	r1, [pc, #28]	; (80016cc <__NVIC_EnableIRQ+0x38>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	; (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800179c:	d301      	bcc.n	80017a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179e:	2301      	movs	r3, #1
 80017a0:	e00f      	b.n	80017c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <SysTick_Config+0x40>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017aa:	210f      	movs	r1, #15
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f7ff ff8e 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <SysTick_Config+0x40>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <SysTick_Config+0x40>)
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	e000e010 	.word	0xe000e010

080017d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff29 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f8:	f7ff ff3e 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff ff8e 	bl	8001724 <NVIC_EncodePriority>
 8001808:	4602      	mov	r2, r0
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff5d 	bl	80016d0 <__NVIC_SetPriority>
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff31 	bl	8001694 <__NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffa2 	bl	800178c <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	e177      	b.n	8001b60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001870:	2201      	movs	r2, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	429a      	cmp	r2, r3
 800188a:	f040 8166 	bne.w	8001b5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d00b      	beq.n	80018ae <HAL_GPIO_Init+0x5a>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d007      	beq.n	80018ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018a2:	2b11      	cmp	r3, #17
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d130      	bne.n	8001910 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e4:	2201      	movs	r2, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 0201 	and.w	r2, r3, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0xfc>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b12      	cmp	r3, #18
 800194e:	d123      	bne.n	8001998 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	08da      	lsrs	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3208      	adds	r2, #8
 8001958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	08da      	lsrs	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	69b9      	ldr	r1, [r7, #24]
 8001994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0203 	and.w	r2, r3, #3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80c0 	beq.w	8001b5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <HAL_GPIO_Init+0x320>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a64      	ldr	r2, [pc, #400]	; (8001b74 <HAL_GPIO_Init+0x320>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b62      	ldr	r3, [pc, #392]	; (8001b74 <HAL_GPIO_Init+0x320>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019f6:	4a60      	ldr	r2, [pc, #384]	; (8001b78 <HAL_GPIO_Init+0x324>)
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a57      	ldr	r2, [pc, #348]	; (8001b7c <HAL_GPIO_Init+0x328>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d037      	beq.n	8001a92 <HAL_GPIO_Init+0x23e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a56      	ldr	r2, [pc, #344]	; (8001b80 <HAL_GPIO_Init+0x32c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d031      	beq.n	8001a8e <HAL_GPIO_Init+0x23a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a55      	ldr	r2, [pc, #340]	; (8001b84 <HAL_GPIO_Init+0x330>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d02b      	beq.n	8001a8a <HAL_GPIO_Init+0x236>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a54      	ldr	r2, [pc, #336]	; (8001b88 <HAL_GPIO_Init+0x334>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_Init+0x232>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a53      	ldr	r2, [pc, #332]	; (8001b8c <HAL_GPIO_Init+0x338>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_Init+0x22e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a52      	ldr	r2, [pc, #328]	; (8001b90 <HAL_GPIO_Init+0x33c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x22a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a51      	ldr	r2, [pc, #324]	; (8001b94 <HAL_GPIO_Init+0x340>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x226>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a50      	ldr	r2, [pc, #320]	; (8001b98 <HAL_GPIO_Init+0x344>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x222>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4f      	ldr	r2, [pc, #316]	; (8001b9c <HAL_GPIO_Init+0x348>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x21e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4e      	ldr	r2, [pc, #312]	; (8001ba0 <HAL_GPIO_Init+0x34c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x21a>
 8001a6a:	2309      	movs	r3, #9
 8001a6c:	e012      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a6e:	230a      	movs	r3, #10
 8001a70:	e010      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a72:	2308      	movs	r3, #8
 8001a74:	e00e      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a76:	2307      	movs	r3, #7
 8001a78:	e00c      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a7a:	2306      	movs	r3, #6
 8001a7c:	e00a      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a7e:	2305      	movs	r3, #5
 8001a80:	e008      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a82:	2304      	movs	r3, #4
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a86:	2303      	movs	r3, #3
 8001a88:	e004      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e002      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a92:	2300      	movs	r3, #0
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	f002 0203 	and.w	r2, r2, #3
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa4:	4934      	ldr	r1, [pc, #208]	; (8001b78 <HAL_GPIO_Init+0x324>)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab2:	4b3c      	ldr	r3, [pc, #240]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad6:	4a33      	ldr	r2, [pc, #204]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b00:	4a28      	ldr	r2, [pc, #160]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b06:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b54:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	f67f ae84 	bls.w	8001870 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b68:	bf00      	nop
 8001b6a:	3724      	adds	r7, #36	; 0x24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40021400 	.word	0x40021400
 8001b94:	40021800 	.word	0x40021800
 8001b98:	40021c00 	.word	0x40021c00
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	40022400 	.word	0x40022400
 8001ba4:	40013c00 	.word	0x40013c00

08001ba8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	e001      	b.n	8001bca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be8:	787b      	ldrb	r3, [r7, #1]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf4:	e003      	b.n	8001bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	041a      	lsls	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	619a      	str	r2, [r3, #24]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0c:	b08f      	sub	sp, #60	; 0x3c
 8001c0e:	af0a      	add	r7, sp, #40	; 0x28
 8001c10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e10f      	b.n	8001e3c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f005 f862 	bl	8006d00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2203      	movs	r2, #3
 8001c40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 fa5b 	bl	8004116 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	687e      	ldr	r6, [r7, #4]
 8001c68:	466d      	mov	r5, sp
 8001c6a:	f106 0410 	add.w	r4, r6, #16
 8001c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c7e:	1d33      	adds	r3, r6, #4
 8001c80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c82:	6838      	ldr	r0, [r7, #0]
 8001c84:	f002 f932 	bl	8003eec <USB_CoreInit>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2202      	movs	r2, #2
 8001c92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e0d0      	b.n	8001e3c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f002 fa49 	bl	8004138 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	73fb      	strb	r3, [r7, #15]
 8001caa:	e04a      	b.n	8001d42 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	333d      	adds	r3, #61	; 0x3d
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cc0:	7bfa      	ldrb	r2, [r7, #15]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	333c      	adds	r3, #60	; 0x3c
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	b298      	uxth	r0, r3
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3342      	adds	r3, #66	; 0x42
 8001ce8:	4602      	mov	r2, r0
 8001cea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cec:	7bfa      	ldrb	r2, [r7, #15]
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	333f      	adds	r3, #63	; 0x3f
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d00:	7bfa      	ldrb	r2, [r7, #15]
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3344      	adds	r3, #68	; 0x44
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	3348      	adds	r3, #72	; 0x48
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	3350      	adds	r3, #80	; 0x50
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	73fb      	strb	r3, [r7, #15]
 8001d42:	7bfa      	ldrb	r2, [r7, #15]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d3af      	bcc.n	8001cac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	e044      	b.n	8001ddc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	1a9b      	subs	r3, r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d3b5      	bcc.n	8001d52 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	687e      	ldr	r6, [r7, #4]
 8001dee:	466d      	mov	r5, sp
 8001df0:	f106 0410 	add.w	r4, r6, #16
 8001df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e00:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e04:	1d33      	adds	r3, r6, #4
 8001e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e08:	6838      	ldr	r0, [r7, #0]
 8001e0a:	f002 f9bf 	bl	800418c <USB_DevInit>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e00d      	b.n	8001e3c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 f9fe 	bl	8005236 <USB_DevDisconnect>

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_PCD_Start+0x1c>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e020      	b.n	8001ea2 <HAL_PCD_Start+0x5e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d109      	bne.n	8001e84 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d005      	beq.n	8001e84 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 f9bc 	bl	8005206 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 f92e 	bl	80040f4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001eaa:	b590      	push	{r4, r7, lr}
 8001eac:	b08d      	sub	sp, #52	; 0x34
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 fa63 	bl	800538c <USB_GetMode>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f040 839d 	bne.w	8002608 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 f9c7 	bl	8005266 <USB_ReadInterrupts>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8393 	beq.w	8002606 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 f9be 	bl	8005266 <USB_ReadInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d107      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f002 0202 	and.w	r2, r2, #2
 8001f02:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 f9ac 	bl	8005266 <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d161      	bne.n	8001fdc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0210 	bic.w	r2, r2, #16
 8001f26:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f003 020f 	and.w	r2, r3, #15
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	3304      	adds	r3, #4
 8001f46:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	0c5b      	lsrs	r3, r3, #17
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d124      	bne.n	8001f9e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d035      	beq.n	8001fcc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	6a38      	ldr	r0, [r7, #32]
 8001f74:	f003 f824 	bl	8004fc0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f84:	441a      	add	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f96:	441a      	add	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	619a      	str	r2, [r3, #24]
 8001f9c:	e016      	b.n	8001fcc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	0c5b      	lsrs	r3, r3, #17
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d110      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6a38      	ldr	r0, [r7, #32]
 8001fb6:	f003 f803 	bl	8004fc0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fc6:	441a      	add	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0210 	orr.w	r2, r2, #16
 8001fda:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 f940 	bl	8005266 <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ff0:	d16e      	bne.n	80020d0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 f946 	bl	800528c <USB_ReadDevAllOutEpInterrupt>
 8002000:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002002:	e062      	b.n	80020ca <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d057      	beq.n	80020be <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f003 f96b 	bl	80052f4 <USB_ReadDevOutEPInterrupt>
 800201e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00c      	beq.n	8002044 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4413      	add	r3, r2
 8002032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002036:	461a      	mov	r2, r3
 8002038:	2301      	movs	r3, #1
 800203a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800203c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fd98 	bl	8002b74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00c      	beq.n	8002068 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800205a:	461a      	mov	r2, r3
 800205c:	2308      	movs	r3, #8
 800205e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fe92 	bl	8002d8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b00      	cmp	r3, #0
 8002070:	d008      	beq.n	8002084 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207e:	461a      	mov	r2, r3
 8002080:	2310      	movs	r3, #16
 8002082:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	d008      	beq.n	80020a0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	4413      	add	r3, r2
 8002096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209a:	461a      	mov	r2, r3
 800209c:	2320      	movs	r3, #32
 800209e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b6:	461a      	mov	r2, r3
 80020b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	3301      	adds	r3, #1
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d199      	bne.n	8002004 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 f8c6 	bl	8005266 <USB_ReadInterrupts>
 80020da:	4603      	mov	r3, r0
 80020dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020e4:	f040 80c0 	bne.w	8002268 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f003 f8e7 	bl	80052c0 <USB_ReadDevAllInEpInterrupt>
 80020f2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80020f8:	e0b2      	b.n	8002260 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a7 	beq.w	8002254 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f003 f90d 	bl	8005330 <USB_ReadDevInEPInterrupt>
 8002116:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d057      	beq.n	80021d2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	2201      	movs	r2, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	43db      	mvns	r3, r3
 800213c:	69f9      	ldr	r1, [r7, #28]
 800213e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002142:	4013      	ands	r3, r2
 8002144:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002152:	461a      	mov	r2, r3
 8002154:	2301      	movs	r3, #1
 8002156:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d132      	bne.n	80021c6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3348      	adds	r3, #72	; 0x48
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4403      	add	r3, r0
 8002180:	3344      	adds	r3, #68	; 0x44
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4419      	add	r1, r3
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	1a9b      	subs	r3, r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4403      	add	r3, r0
 8002194:	3348      	adds	r3, #72	; 0x48
 8002196:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	2b00      	cmp	r3, #0
 800219c:	d113      	bne.n	80021c6 <HAL_PCD_IRQHandler+0x31c>
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	3350      	adds	r3, #80	; 0x50
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d108      	bne.n	80021c6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021be:	461a      	mov	r2, r3
 80021c0:	2101      	movs	r1, #1
 80021c2:	f003 f915 	bl	80053f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f004 fe18 	bl	8006e02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021e8:	461a      	mov	r2, r3
 80021ea:	2308      	movs	r3, #8
 80021ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002204:	461a      	mov	r2, r3
 8002206:	2310      	movs	r3, #16
 8002208:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002220:	461a      	mov	r2, r3
 8002222:	2340      	movs	r3, #64	; 0x40
 8002224:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	4413      	add	r3, r2
 8002238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800223c:	461a      	mov	r2, r3
 800223e:	2302      	movs	r3, #2
 8002240:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800224c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fc03 	bl	8002a5a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	3301      	adds	r3, #1
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	085b      	lsrs	r3, r3, #1
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002262:	2b00      	cmp	r3, #0
 8002264:	f47f af49 	bne.w	80020fa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f002 fffa 	bl	8005266 <USB_ReadInterrupts>
 8002272:	4603      	mov	r3, r0
 8002274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800227c:	d122      	bne.n	80022c4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002298:	2b01      	cmp	r3, #1
 800229a:	d108      	bne.n	80022ae <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022a4:	2100      	movs	r1, #0
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fe0e 	bl	8002ec8 <HAL_PCDEx_LPM_Callback>
 80022ac:	e002      	b.n	80022b4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f004 fe1e 	bl	8006ef0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f002 ffcc 	bl	8005266 <USB_ReadInterrupts>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022d8:	d112      	bne.n	8002300 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d102      	bne.n	80022f0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f004 fdda 	bl	8006ea4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022fe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f002 ffae 	bl	8005266 <USB_ReadInterrupts>
 800230a:	4603      	mov	r3, r0
 800230c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002314:	f040 80c7 	bne.w	80024a6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2110      	movs	r1, #16
 8002332:	4618      	mov	r0, r3
 8002334:	f002 f88e 	bl	8004454 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002338:	2300      	movs	r3, #0
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800233c:	e056      	b.n	80023ec <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800234a:	461a      	mov	r2, r3
 800234c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002350:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4413      	add	r3, r2
 800235a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002362:	0151      	lsls	r1, r2, #5
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	440a      	add	r2, r1
 8002368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800236c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002370:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002382:	0151      	lsls	r1, r2, #5
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	440a      	add	r2, r1
 8002388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800238c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002390:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239e:	461a      	mov	r2, r3
 80023a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b6:	0151      	lsls	r1, r2, #5
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	440a      	add	r2, r1
 80023bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d6:	0151      	lsls	r1, r2, #5
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	440a      	add	r2, r1
 80023dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e8:	3301      	adds	r3, #1
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d3a3      	bcc.n	800233e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002404:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002408:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002422:	f043 030b 	orr.w	r3, r3, #11
 8002426:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002438:	f043 030b 	orr.w	r3, r3, #11
 800243c:	6453      	str	r3, [r2, #68]	; 0x44
 800243e:	e015      	b.n	800246c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800244e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002452:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002456:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002466:	f043 030b 	orr.w	r3, r3, #11
 800246a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800247a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800247e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002490:	461a      	mov	r2, r3
 8002492:	f002 ffad 	bl	80053f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80024a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 fedb 	bl	8005266 <USB_ReadInterrupts>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ba:	d124      	bne.n	8002506 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f002 ff71 	bl	80053a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f002 f823 	bl	8004516 <USB_GetDevSpeed>
 80024d0:	4603      	mov	r3, r0
 80024d2:	461a      	mov	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681c      	ldr	r4, [r3, #0]
 80024dc:	f001 f908 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 80024e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	4620      	mov	r0, r4
 80024ec:	f001 fd60 	bl	8003fb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f004 fcae 	bl	8006e52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002504:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f002 feab 	bl	8005266 <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b08      	cmp	r3, #8
 8002518:	d10a      	bne.n	8002530 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f004 fc8b 	bl	8006e36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f002 0208 	and.w	r2, r2, #8
 800252e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f002 fe96 	bl	8005266 <USB_ReadInterrupts>
 800253a:	4603      	mov	r3, r0
 800253c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002544:	d10f      	bne.n	8002566 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4619      	mov	r1, r3
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f004 fced 	bl	8006f30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f002 fe7b 	bl	8005266 <USB_ReadInterrupts>
 8002570:	4603      	mov	r3, r0
 8002572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800257a:	d10f      	bne.n	800259c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	b2db      	uxtb	r3, r3
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f004 fcc0 	bl	8006f0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800259a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f002 fe60 	bl	8005266 <USB_ReadInterrupts>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b0:	d10a      	bne.n	80025c8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f004 fcce 	bl	8006f54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80025c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f002 fe4a 	bl	8005266 <USB_ReadInterrupts>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d115      	bne.n	8002608 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f004 fcbe 	bl	8006f70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	430a      	orrs	r2, r1
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	e000      	b.n	8002608 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002606:	bf00      	nop
    }
  }
}
 8002608:	3734      	adds	r7, #52	; 0x34
 800260a:	46bd      	mov	sp, r7
 800260c:	bd90      	pop	{r4, r7, pc}

0800260e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_PCD_SetAddress+0x1a>
 8002624:	2302      	movs	r3, #2
 8002626:	e013      	b.n	8002650 <HAL_PCD_SetAddress+0x42>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f002 fdba 	bl	80051ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	4608      	mov	r0, r1
 8002662:	4611      	mov	r1, r2
 8002664:	461a      	mov	r2, r3
 8002666:	4603      	mov	r3, r0
 8002668:	70fb      	strb	r3, [r7, #3]
 800266a:	460b      	mov	r3, r1
 800266c:	803b      	strh	r3, [r7, #0]
 800266e:	4613      	mov	r3, r2
 8002670:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002676:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800267a:	2b00      	cmp	r3, #0
 800267c:	da0f      	bge.n	800269e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	f003 020f 	and.w	r2, r3, #15
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	3338      	adds	r3, #56	; 0x38
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	3304      	adds	r3, #4
 8002694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	705a      	strb	r2, [r3, #1]
 800269c:	e00f      	b.n	80026be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	f003 020f 	and.w	r2, r3, #15
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	3304      	adds	r3, #4
 80026b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026ca:	883a      	ldrh	r2, [r7, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	78ba      	ldrb	r2, [r7, #2]
 80026d4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	785b      	ldrb	r3, [r3, #1]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d004      	beq.n	80026e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026e8:	78bb      	ldrb	r3, [r7, #2]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d102      	bne.n	80026f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_PCD_EP_Open+0xaa>
 80026fe:	2302      	movs	r3, #2
 8002700:	e00e      	b.n	8002720 <HAL_PCD_EP_Open+0xc8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68f9      	ldr	r1, [r7, #12]
 8002710:	4618      	mov	r0, r3
 8002712:	f001 ff25 	bl	8004560 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800271e:	7afb      	ldrb	r3, [r7, #11]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002734:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002738:	2b00      	cmp	r3, #0
 800273a:	da0f      	bge.n	800275c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	f003 020f 	and.w	r2, r3, #15
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	3338      	adds	r3, #56	; 0x38
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	4413      	add	r3, r2
 8002750:	3304      	adds	r3, #4
 8002752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	705a      	strb	r2, [r3, #1]
 800275a:	e00f      	b.n	800277c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	f003 020f 	and.w	r2, r3, #15
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	3304      	adds	r3, #4
 8002774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	b2da      	uxtb	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_PCD_EP_Close+0x6e>
 8002792:	2302      	movs	r3, #2
 8002794:	e00e      	b.n	80027b4 <HAL_PCD_EP_Close+0x8c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68f9      	ldr	r1, [r7, #12]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 ff63 	bl	8004670 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	460b      	mov	r3, r1
 80027ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027cc:	7afb      	ldrb	r3, [r7, #11]
 80027ce:	f003 020f 	and.w	r2, r3, #15
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4413      	add	r3, r2
 80027e2:	3304      	adds	r3, #4
 80027e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2200      	movs	r2, #0
 80027fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027fe:	7afb      	ldrb	r3, [r7, #11]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	b2da      	uxtb	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d102      	bne.n	8002818 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002818:	7afb      	ldrb	r3, [r7, #11]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	6979      	ldr	r1, [r7, #20]
 8002830:	f002 fa3e 	bl	8004cb0 <USB_EP0StartXfer>
 8002834:	e008      	b.n	8002848 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	6979      	ldr	r1, [r7, #20]
 8002844:	f001 fff0 	bl	8004828 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	460b      	mov	r3, r1
 8002860:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002862:	7afb      	ldrb	r3, [r7, #11]
 8002864:	f003 020f 	and.w	r2, r3, #15
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	3338      	adds	r3, #56	; 0x38
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4413      	add	r3, r2
 8002876:	3304      	adds	r3, #4
 8002878:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2200      	movs	r2, #0
 800288a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2201      	movs	r2, #1
 8002890:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002892:	7afb      	ldrb	r3, [r7, #11]
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	b2da      	uxtb	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d102      	bne.n	80028ac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028ac:	7afb      	ldrb	r3, [r7, #11]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	6979      	ldr	r1, [r7, #20]
 80028c4:	f002 f9f4 	bl	8004cb0 <USB_EP0StartXfer>
 80028c8:	e008      	b.n	80028dc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	6979      	ldr	r1, [r7, #20]
 80028d8:	f001 ffa6 	bl	8004828 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	f003 020f 	and.w	r2, r3, #15
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d901      	bls.n	8002904 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e050      	b.n	80029a6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002908:	2b00      	cmp	r3, #0
 800290a:	da0f      	bge.n	800292c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	f003 020f 	and.w	r2, r3, #15
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	3338      	adds	r3, #56	; 0x38
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	3304      	adds	r3, #4
 8002922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	705a      	strb	r2, [r3, #1]
 800292a:	e00d      	b.n	8002948 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	3304      	adds	r3, #4
 8002940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_PCD_EP_SetStall+0x82>
 8002964:	2302      	movs	r3, #2
 8002966:	e01e      	b.n	80029a6 <HAL_PCD_EP_SetStall+0xc0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68f9      	ldr	r1, [r7, #12]
 8002976:	4618      	mov	r0, r3
 8002978:	f002 fb4b 	bl	8005012 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	b2d9      	uxtb	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002996:	461a      	mov	r2, r3
 8002998:	f002 fd2a 	bl	80053f0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 020f 	and.w	r2, r3, #15
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d901      	bls.n	80029cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e042      	b.n	8002a52 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	da0f      	bge.n	80029f4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	f003 020f 	and.w	r2, r3, #15
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	3338      	adds	r3, #56	; 0x38
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	3304      	adds	r3, #4
 80029ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	705a      	strb	r2, [r3, #1]
 80029f2:	e00f      	b.n	8002a14 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	f003 020f 	and.w	r2, r3, #15
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_PCD_EP_ClrStall+0x86>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e00e      	b.n	8002a52 <HAL_PCD_EP_ClrStall+0xa4>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f002 fb53 	bl	80050ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b08a      	sub	sp, #40	; 0x28
 8002a5e:	af02      	add	r7, sp, #8
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	3338      	adds	r3, #56	; 0x38
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3304      	adds	r3, #4
 8002a80:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d901      	bls.n	8002a92 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e06c      	b.n	8002b6c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d902      	bls.n	8002aae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3303      	adds	r3, #3
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ab6:	e02b      	b.n	8002b10 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d902      	bls.n	8002ad4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	3303      	adds	r3, #3
 8002ad8:	089b      	lsrs	r3, r3, #2
 8002ada:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	68d9      	ldr	r1, [r3, #12]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	4603      	mov	r3, r0
 8002af2:	6978      	ldr	r0, [r7, #20]
 8002af4:	f002 fa2f 	bl	8004f56 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	441a      	add	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	699a      	ldr	r2, [r3, #24]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	441a      	add	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d809      	bhi.n	8002b3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d203      	bcs.n	8002b3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1be      	bne.n	8002ab8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d811      	bhi.n	8002b6a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	6939      	ldr	r1, [r7, #16]
 8002b62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b66:	4013      	ands	r3, r2
 8002b68:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	333c      	adds	r3, #60	; 0x3c
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	f040 80a0 	bne.w	8002cec <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d015      	beq.n	8002be2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4a72      	ldr	r2, [pc, #456]	; (8002d84 <PCD_EP_OutXfrComplete_int+0x210>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	f240 80dd 	bls.w	8002d7a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80d7 	beq.w	8002d7a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd8:	461a      	mov	r2, r3
 8002bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bde:	6093      	str	r3, [r2, #8]
 8002be0:	e0cb      	b.n	8002d7a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d009      	beq.n	8002c00 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	6093      	str	r3, [r2, #8]
 8002bfe:	e0bc      	b.n	8002d7a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 80b7 	bne.w	8002d7a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a5d      	ldr	r2, [pc, #372]	; (8002d84 <PCD_EP_OutXfrComplete_int+0x210>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d90f      	bls.n	8002c34 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c30:	6093      	str	r3, [r2, #8]
 8002c32:	e0a2      	b.n	8002d7a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c46:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	0159      	lsls	r1, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	440b      	add	r3, r1
 8002c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002c5a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4403      	add	r3, r0
 8002c6a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c6e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c82:	6819      	ldr	r1, [r3, #0]
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4403      	add	r3, r0
 8002c92:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4419      	add	r1, r3
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4403      	add	r3, r0
 8002ca8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cac:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d114      	bne.n	8002cde <PCD_EP_OutXfrComplete_int+0x16a>
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d108      	bne.n	8002cde <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2101      	movs	r1, #1
 8002cda:	f002 fb89 	bl	80053f0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f004 f871 	bl	8006dcc <HAL_PCD_DataOutStageCallback>
 8002cea:	e046      	b.n	8002d7a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a26      	ldr	r2, [pc, #152]	; (8002d88 <PCD_EP_OutXfrComplete_int+0x214>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d124      	bne.n	8002d3e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d10:	6093      	str	r3, [r2, #8]
 8002d12:	e032      	b.n	8002d7a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d008      	beq.n	8002d30 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	4619      	mov	r1, r3
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f004 f848 	bl	8006dcc <HAL_PCD_DataOutStageCallback>
 8002d3c:	e01d      	b.n	8002d7a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d114      	bne.n	8002d6e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d108      	bne.n	8002d6e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d66:	461a      	mov	r2, r3
 8002d68:	2100      	movs	r1, #0
 8002d6a:	f002 fb41 	bl	80053f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	4619      	mov	r1, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f004 f829 	bl	8006dcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	4f54300a 	.word	0x4f54300a
 8002d88:	4f54310a 	.word	0x4f54310a

08002d8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	333c      	adds	r3, #60	; 0x3c
 8002da4:	3304      	adds	r3, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d90e      	bls.n	8002de0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f003 ffe1 	bl	8006da8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d90c      	bls.n	8002e08 <PCD_EP_OutSetupPacket_int+0x7c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d108      	bne.n	8002e08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e00:	461a      	mov	r2, r3
 8002e02:	2101      	movs	r1, #1
 8002e04:	f002 faf4 	bl	80053f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	4f54300a 	.word	0x4f54300a

08002e18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	70fb      	strb	r3, [r7, #3]
 8002e24:	4613      	mov	r3, r2
 8002e26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d107      	bne.n	8002e46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e36:	883b      	ldrh	r3, [r7, #0]
 8002e38:	0419      	lsls	r1, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28
 8002e44:	e028      	b.n	8002e98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	4413      	add	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
 8002e58:	e00d      	b.n	8002e76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	3340      	adds	r3, #64	; 0x40
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	0c1b      	lsrs	r3, r3, #16
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	3301      	adds	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
 8002e76:	7bfa      	ldrb	r2, [r7, #15]
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d3ec      	bcc.n	8002e5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e80:	883b      	ldrh	r3, [r7, #0]
 8002e82:	0418      	lsls	r0, r3, #16
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6819      	ldr	r1, [r3, #0]
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	4302      	orrs	r2, r0
 8002e90:	3340      	adds	r3, #64	; 0x40
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e25b      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d075      	beq.n	8002fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002efe:	4ba3      	ldr	r3, [pc, #652]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d00c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f0a:	4ba0      	ldr	r3, [pc, #640]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d112      	bne.n	8002f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f16:	4b9d      	ldr	r3, [pc, #628]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f22:	d10b      	bne.n	8002f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	4b99      	ldr	r3, [pc, #612]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d05b      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x108>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d157      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e236      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d106      	bne.n	8002f54 <HAL_RCC_OscConfig+0x74>
 8002f46:	4b91      	ldr	r3, [pc, #580]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a90      	ldr	r2, [pc, #576]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e01d      	b.n	8002f90 <HAL_RCC_OscConfig+0xb0>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x98>
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a8a      	ldr	r2, [pc, #552]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4b88      	ldr	r3, [pc, #544]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a87      	ldr	r2, [pc, #540]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_OscConfig+0xb0>
 8002f78:	4b84      	ldr	r3, [pc, #528]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a83      	ldr	r2, [pc, #524]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b81      	ldr	r3, [pc, #516]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a80      	ldr	r2, [pc, #512]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d013      	beq.n	8002fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe fb1c 	bl	80015d4 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fb18 	bl	80015d4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1fb      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xc0>
 8002fbe:	e014      	b.n	8002fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fb08 	bl	80015d4 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe fb04 	bl	80015d4 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e1e7      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fda:	4b6c      	ldr	r3, [pc, #432]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0xe8>
 8002fe6:	e000      	b.n	8002fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d063      	beq.n	80030be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ff6:	4b65      	ldr	r3, [pc, #404]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003002:	4b62      	ldr	r3, [pc, #392]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800300a:	2b08      	cmp	r3, #8
 800300c:	d11c      	bne.n	8003048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300e:	4b5f      	ldr	r3, [pc, #380]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d116      	bne.n	8003048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	4b5c      	ldr	r3, [pc, #368]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_RCC_OscConfig+0x152>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e1bb      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003032:	4b56      	ldr	r3, [pc, #344]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4952      	ldr	r1, [pc, #328]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	e03a      	b.n	80030be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003050:	4b4f      	ldr	r3, [pc, #316]	; (8003190 <HAL_RCC_OscConfig+0x2b0>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fe fabd 	bl	80015d4 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305e:	f7fe fab9 	bl	80015d4 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e19c      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	4b46      	ldr	r3, [pc, #280]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307c:	4b43      	ldr	r3, [pc, #268]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4940      	ldr	r1, [pc, #256]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
 8003090:	e015      	b.n	80030be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <HAL_RCC_OscConfig+0x2b0>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fa9c 	bl	80015d4 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fe fa98 	bl	80015d4 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e17b      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d030      	beq.n	800312c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d2:	4b30      	ldr	r3, [pc, #192]	; (8003194 <HAL_RCC_OscConfig+0x2b4>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fe fa7c 	bl	80015d4 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e0:	f7fe fa78 	bl	80015d4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e15b      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f2:	4b26      	ldr	r3, [pc, #152]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x200>
 80030fe:	e015      	b.n	800312c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003100:	4b24      	ldr	r3, [pc, #144]	; (8003194 <HAL_RCC_OscConfig+0x2b4>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003106:	f7fe fa65 	bl	80015d4 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800310e:	f7fe fa61 	bl	80015d4 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e144      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f0      	bne.n	800310e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a0 	beq.w	800327a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10f      	bne.n	800316a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a0e      	ldr	r2, [pc, #56]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003158:	6413      	str	r3, [r2, #64]	; 0x40
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003166:	2301      	movs	r3, #1
 8003168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_OscConfig+0x2b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d121      	bne.n	80031ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_RCC_OscConfig+0x2b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_RCC_OscConfig+0x2b8>)
 800317c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003182:	f7fe fa27 	bl	80015d4 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	e011      	b.n	80031ae <HAL_RCC_OscConfig+0x2ce>
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	42470000 	.word	0x42470000
 8003194:	42470e80 	.word	0x42470e80
 8003198:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319c:	f7fe fa1a 	bl	80015d4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e0fd      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b81      	ldr	r3, [pc, #516]	; (80033b4 <HAL_RCC_OscConfig+0x4d4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_OscConfig+0x2f0>
 80031c2:	4b7d      	ldr	r3, [pc, #500]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a7c      	ldr	r2, [pc, #496]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	e01c      	b.n	800320a <HAL_RCC_OscConfig+0x32a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d10c      	bne.n	80031f2 <HAL_RCC_OscConfig+0x312>
 80031d8:	4b77      	ldr	r3, [pc, #476]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	4a76      	ldr	r2, [pc, #472]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031de:	f043 0304 	orr.w	r3, r3, #4
 80031e2:	6713      	str	r3, [r2, #112]	; 0x70
 80031e4:	4b74      	ldr	r3, [pc, #464]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	4a73      	ldr	r2, [pc, #460]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6713      	str	r3, [r2, #112]	; 0x70
 80031f0:	e00b      	b.n	800320a <HAL_RCC_OscConfig+0x32a>
 80031f2:	4b71      	ldr	r3, [pc, #452]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a70      	ldr	r2, [pc, #448]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	6713      	str	r3, [r2, #112]	; 0x70
 80031fe:	4b6e      	ldr	r3, [pc, #440]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4a6d      	ldr	r2, [pc, #436]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d015      	beq.n	800323e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003212:	f7fe f9df 	bl	80015d4 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe f9db 	bl	80015d4 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0bc      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	4b61      	ldr	r3, [pc, #388]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ee      	beq.n	800321a <HAL_RCC_OscConfig+0x33a>
 800323c:	e014      	b.n	8003268 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7fe f9c9 	bl	80015d4 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fe f9c5 	bl	80015d4 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e0a6      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325c:	4b56      	ldr	r3, [pc, #344]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1ee      	bne.n	8003246 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326e:	4b52      	ldr	r3, [pc, #328]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a51      	ldr	r2, [pc, #324]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8092 	beq.w	80033a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003284:	4b4c      	ldr	r3, [pc, #304]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d05c      	beq.n	800334a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d141      	bne.n	800331c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003298:	4b48      	ldr	r3, [pc, #288]	; (80033bc <HAL_RCC_OscConfig+0x4dc>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fe f999 	bl	80015d4 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a6:	f7fe f995 	bl	80015d4 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e078      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b8:	4b3f      	ldr	r3, [pc, #252]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f0      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	019b      	lsls	r3, r3, #6
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	3b01      	subs	r3, #1
 80032de:	041b      	lsls	r3, r3, #16
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	061b      	lsls	r3, r3, #24
 80032e8:	4933      	ldr	r1, [pc, #204]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ee:	4b33      	ldr	r3, [pc, #204]	; (80033bc <HAL_RCC_OscConfig+0x4dc>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe f96e 	bl	80015d4 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe f96a 	bl	80015d4 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e04d      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x41c>
 800331a:	e045      	b.n	80033a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331c:	4b27      	ldr	r3, [pc, #156]	; (80033bc <HAL_RCC_OscConfig+0x4dc>)
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7fe f957 	bl	80015d4 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332a:	f7fe f953 	bl	80015d4 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e036      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333c:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f0      	bne.n	800332a <HAL_RCC_OscConfig+0x44a>
 8003348:	e02e      	b.n	80033a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e029      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003356:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	429a      	cmp	r2, r3
 8003368:	d11c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d115      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800337e:	4013      	ands	r3, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003384:	4293      	cmp	r3, r2
 8003386:	d10d      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d106      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40007000 	.word	0x40007000
 80033b8:	40023800 	.word	0x40023800
 80033bc:	42470060 	.word	0x42470060

080033c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0cc      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d4:	4b68      	ldr	r3, [pc, #416]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d90c      	bls.n	80033fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b65      	ldr	r3, [pc, #404]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b63      	ldr	r3, [pc, #396]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0b8      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003414:	4b59      	ldr	r3, [pc, #356]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a58      	ldr	r2, [pc, #352]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800341e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a52      	ldr	r2, [pc, #328]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b50      	ldr	r3, [pc, #320]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	494d      	ldr	r1, [pc, #308]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d044      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b47      	ldr	r3, [pc, #284]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d119      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d003      	beq.n	800347e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347a:	2b03      	cmp	r3, #3
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347e:	4b3f      	ldr	r3, [pc, #252]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e06f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e067      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f023 0203 	bic.w	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4934      	ldr	r1, [pc, #208]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b0:	f7fe f890 	bl	80015d4 <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b8:	f7fe f88c 	bl	80015d4 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e04f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 020c 	and.w	r2, r3, #12
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	429a      	cmp	r2, r3
 80034de:	d1eb      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d20c      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e032      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4916      	ldr	r1, [pc, #88]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	490e      	ldr	r1, [pc, #56]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003546:	f000 f821 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800354a:	4601      	mov	r1, r0
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	5cd3      	ldrb	r3, [r2, r3]
 800355a:	fa21 f303 	lsr.w	r3, r1, r3
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd fff0 	bl	800154c <HAL_InitTick>

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40023c00 	.word	0x40023c00
 800357c:	40023800 	.word	0x40023800
 8003580:	08008678 	.word	0x08008678
 8003584:	20000000 	.word	0x20000000
 8003588:	20000004 	.word	0x20000004

0800358c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	2300      	movs	r3, #0
 800359c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a2:	4b50      	ldr	r3, [pc, #320]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d007      	beq.n	80035be <HAL_RCC_GetSysClockFreq+0x32>
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d008      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x38>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 808d 	bne.w	80036d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80035ba:	60bb      	str	r3, [r7, #8]
       break;
 80035bc:	e08c      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035be:	4b4b      	ldr	r3, [pc, #300]	; (80036ec <HAL_RCC_GetSysClockFreq+0x160>)
 80035c0:	60bb      	str	r3, [r7, #8]
      break;
 80035c2:	e089      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c4:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ce:	4b45      	ldr	r3, [pc, #276]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d023      	beq.n	8003622 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035da:	4b42      	ldr	r3, [pc, #264]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	099b      	lsrs	r3, r3, #6
 80035e0:	f04f 0400 	mov.w	r4, #0
 80035e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	ea03 0501 	and.w	r5, r3, r1
 80035f0:	ea04 0602 	and.w	r6, r4, r2
 80035f4:	4a3d      	ldr	r2, [pc, #244]	; (80036ec <HAL_RCC_GetSysClockFreq+0x160>)
 80035f6:	fb02 f106 	mul.w	r1, r2, r6
 80035fa:	2200      	movs	r2, #0
 80035fc:	fb02 f205 	mul.w	r2, r2, r5
 8003600:	440a      	add	r2, r1
 8003602:	493a      	ldr	r1, [pc, #232]	; (80036ec <HAL_RCC_GetSysClockFreq+0x160>)
 8003604:	fba5 0101 	umull	r0, r1, r5, r1
 8003608:	1853      	adds	r3, r2, r1
 800360a:	4619      	mov	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f04f 0400 	mov.w	r4, #0
 8003612:	461a      	mov	r2, r3
 8003614:	4623      	mov	r3, r4
 8003616:	f7fd fad9 	bl	8000bcc <__aeabi_uldivmod>
 800361a:	4603      	mov	r3, r0
 800361c:	460c      	mov	r4, r1
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	e049      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	099b      	lsrs	r3, r3, #6
 8003628:	f04f 0400 	mov.w	r4, #0
 800362c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	ea03 0501 	and.w	r5, r3, r1
 8003638:	ea04 0602 	and.w	r6, r4, r2
 800363c:	4629      	mov	r1, r5
 800363e:	4632      	mov	r2, r6
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	f04f 0400 	mov.w	r4, #0
 8003648:	0154      	lsls	r4, r2, #5
 800364a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800364e:	014b      	lsls	r3, r1, #5
 8003650:	4619      	mov	r1, r3
 8003652:	4622      	mov	r2, r4
 8003654:	1b49      	subs	r1, r1, r5
 8003656:	eb62 0206 	sbc.w	r2, r2, r6
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	f04f 0400 	mov.w	r4, #0
 8003662:	0194      	lsls	r4, r2, #6
 8003664:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003668:	018b      	lsls	r3, r1, #6
 800366a:	1a5b      	subs	r3, r3, r1
 800366c:	eb64 0402 	sbc.w	r4, r4, r2
 8003670:	f04f 0100 	mov.w	r1, #0
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	00e2      	lsls	r2, r4, #3
 800367a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800367e:	00d9      	lsls	r1, r3, #3
 8003680:	460b      	mov	r3, r1
 8003682:	4614      	mov	r4, r2
 8003684:	195b      	adds	r3, r3, r5
 8003686:	eb44 0406 	adc.w	r4, r4, r6
 800368a:	f04f 0100 	mov.w	r1, #0
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	02a2      	lsls	r2, r4, #10
 8003694:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003698:	0299      	lsls	r1, r3, #10
 800369a:	460b      	mov	r3, r1
 800369c:	4614      	mov	r4, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	4621      	mov	r1, r4
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f04f 0400 	mov.w	r4, #0
 80036a8:	461a      	mov	r2, r3
 80036aa:	4623      	mov	r3, r4
 80036ac:	f7fd fa8e 	bl	8000bcc <__aeabi_uldivmod>
 80036b0:	4603      	mov	r3, r0
 80036b2:	460c      	mov	r4, r1
 80036b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	0c1b      	lsrs	r3, r3, #16
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	3301      	adds	r3, #1
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	60bb      	str	r3, [r7, #8]
      break;
 80036d0:	e002      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036d2:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80036d4:	60bb      	str	r3, [r7, #8]
      break;
 80036d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d8:	68bb      	ldr	r3, [r7, #8]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	00f42400 	.word	0x00f42400
 80036ec:	017d7840 	.word	0x017d7840

080036f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	20000000 	.word	0x20000000

08003708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800370c:	f7ff fff0 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 8003710:	4601      	mov	r1, r0
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	0a9b      	lsrs	r3, r3, #10
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4a03      	ldr	r2, [pc, #12]	; (800372c <HAL_RCC_GetPCLK1Freq+0x24>)
 800371e:	5cd3      	ldrb	r3, [r2, r3]
 8003720:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40023800 	.word	0x40023800
 800372c:	08008688 	.word	0x08008688

08003730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003734:	f7ff ffdc 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 8003738:	4601      	mov	r1, r0
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	0b5b      	lsrs	r3, r3, #13
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4a03      	ldr	r2, [pc, #12]	; (8003754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	fa21 f303 	lsr.w	r3, r1, r3
}
 800374c:	4618      	mov	r0, r3
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40023800 	.word	0x40023800
 8003754:	08008688 	.word	0x08008688

08003758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e03f      	b.n	80037ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd fdd6 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800379a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f829 	bl	80037f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003836:	f023 030c 	bic.w	r3, r3, #12
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	68f9      	ldr	r1, [r7, #12]
 8003840:	430b      	orrs	r3, r1
 8003842:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003862:	f040 818b 	bne.w	8003b7c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4ac1      	ldr	r2, [pc, #772]	; (8003b70 <UART_SetConfig+0x37c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d005      	beq.n	800387c <UART_SetConfig+0x88>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4abf      	ldr	r2, [pc, #764]	; (8003b74 <UART_SetConfig+0x380>)
 8003876:	4293      	cmp	r3, r2
 8003878:	f040 80bd 	bne.w	80039f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800387c:	f7ff ff58 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 8003880:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	461d      	mov	r5, r3
 8003886:	f04f 0600 	mov.w	r6, #0
 800388a:	46a8      	mov	r8, r5
 800388c:	46b1      	mov	r9, r6
 800388e:	eb18 0308 	adds.w	r3, r8, r8
 8003892:	eb49 0409 	adc.w	r4, r9, r9
 8003896:	4698      	mov	r8, r3
 8003898:	46a1      	mov	r9, r4
 800389a:	eb18 0805 	adds.w	r8, r8, r5
 800389e:	eb49 0906 	adc.w	r9, r9, r6
 80038a2:	f04f 0100 	mov.w	r1, #0
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038b6:	4688      	mov	r8, r1
 80038b8:	4691      	mov	r9, r2
 80038ba:	eb18 0005 	adds.w	r0, r8, r5
 80038be:	eb49 0106 	adc.w	r1, r9, r6
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	461d      	mov	r5, r3
 80038c8:	f04f 0600 	mov.w	r6, #0
 80038cc:	196b      	adds	r3, r5, r5
 80038ce:	eb46 0406 	adc.w	r4, r6, r6
 80038d2:	461a      	mov	r2, r3
 80038d4:	4623      	mov	r3, r4
 80038d6:	f7fd f979 	bl	8000bcc <__aeabi_uldivmod>
 80038da:	4603      	mov	r3, r0
 80038dc:	460c      	mov	r4, r1
 80038de:	461a      	mov	r2, r3
 80038e0:	4ba5      	ldr	r3, [pc, #660]	; (8003b78 <UART_SetConfig+0x384>)
 80038e2:	fba3 2302 	umull	r2, r3, r3, r2
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	461d      	mov	r5, r3
 80038f0:	f04f 0600 	mov.w	r6, #0
 80038f4:	46a9      	mov	r9, r5
 80038f6:	46b2      	mov	sl, r6
 80038f8:	eb19 0309 	adds.w	r3, r9, r9
 80038fc:	eb4a 040a 	adc.w	r4, sl, sl
 8003900:	4699      	mov	r9, r3
 8003902:	46a2      	mov	sl, r4
 8003904:	eb19 0905 	adds.w	r9, r9, r5
 8003908:	eb4a 0a06 	adc.w	sl, sl, r6
 800390c:	f04f 0100 	mov.w	r1, #0
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003918:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800391c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003920:	4689      	mov	r9, r1
 8003922:	4692      	mov	sl, r2
 8003924:	eb19 0005 	adds.w	r0, r9, r5
 8003928:	eb4a 0106 	adc.w	r1, sl, r6
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	461d      	mov	r5, r3
 8003932:	f04f 0600 	mov.w	r6, #0
 8003936:	196b      	adds	r3, r5, r5
 8003938:	eb46 0406 	adc.w	r4, r6, r6
 800393c:	461a      	mov	r2, r3
 800393e:	4623      	mov	r3, r4
 8003940:	f7fd f944 	bl	8000bcc <__aeabi_uldivmod>
 8003944:	4603      	mov	r3, r0
 8003946:	460c      	mov	r4, r1
 8003948:	461a      	mov	r2, r3
 800394a:	4b8b      	ldr	r3, [pc, #556]	; (8003b78 <UART_SetConfig+0x384>)
 800394c:	fba3 1302 	umull	r1, r3, r3, r2
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	2164      	movs	r1, #100	; 0x64
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	3332      	adds	r3, #50	; 0x32
 800395e:	4a86      	ldr	r2, [pc, #536]	; (8003b78 <UART_SetConfig+0x384>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800396c:	4498      	add	r8, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	461d      	mov	r5, r3
 8003972:	f04f 0600 	mov.w	r6, #0
 8003976:	46a9      	mov	r9, r5
 8003978:	46b2      	mov	sl, r6
 800397a:	eb19 0309 	adds.w	r3, r9, r9
 800397e:	eb4a 040a 	adc.w	r4, sl, sl
 8003982:	4699      	mov	r9, r3
 8003984:	46a2      	mov	sl, r4
 8003986:	eb19 0905 	adds.w	r9, r9, r5
 800398a:	eb4a 0a06 	adc.w	sl, sl, r6
 800398e:	f04f 0100 	mov.w	r1, #0
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800399a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800399e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039a2:	4689      	mov	r9, r1
 80039a4:	4692      	mov	sl, r2
 80039a6:	eb19 0005 	adds.w	r0, r9, r5
 80039aa:	eb4a 0106 	adc.w	r1, sl, r6
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	461d      	mov	r5, r3
 80039b4:	f04f 0600 	mov.w	r6, #0
 80039b8:	196b      	adds	r3, r5, r5
 80039ba:	eb46 0406 	adc.w	r4, r6, r6
 80039be:	461a      	mov	r2, r3
 80039c0:	4623      	mov	r3, r4
 80039c2:	f7fd f903 	bl	8000bcc <__aeabi_uldivmod>
 80039c6:	4603      	mov	r3, r0
 80039c8:	460c      	mov	r4, r1
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <UART_SetConfig+0x384>)
 80039ce:	fba3 1302 	umull	r1, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2164      	movs	r1, #100	; 0x64
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	3332      	adds	r3, #50	; 0x32
 80039e0:	4a65      	ldr	r2, [pc, #404]	; (8003b78 <UART_SetConfig+0x384>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	f003 0207 	and.w	r2, r3, #7
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4442      	add	r2, r8
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	e26f      	b.n	8003ed6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039f6:	f7ff fe87 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 80039fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	461d      	mov	r5, r3
 8003a00:	f04f 0600 	mov.w	r6, #0
 8003a04:	46a8      	mov	r8, r5
 8003a06:	46b1      	mov	r9, r6
 8003a08:	eb18 0308 	adds.w	r3, r8, r8
 8003a0c:	eb49 0409 	adc.w	r4, r9, r9
 8003a10:	4698      	mov	r8, r3
 8003a12:	46a1      	mov	r9, r4
 8003a14:	eb18 0805 	adds.w	r8, r8, r5
 8003a18:	eb49 0906 	adc.w	r9, r9, r6
 8003a1c:	f04f 0100 	mov.w	r1, #0
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a30:	4688      	mov	r8, r1
 8003a32:	4691      	mov	r9, r2
 8003a34:	eb18 0005 	adds.w	r0, r8, r5
 8003a38:	eb49 0106 	adc.w	r1, r9, r6
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	461d      	mov	r5, r3
 8003a42:	f04f 0600 	mov.w	r6, #0
 8003a46:	196b      	adds	r3, r5, r5
 8003a48:	eb46 0406 	adc.w	r4, r6, r6
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4623      	mov	r3, r4
 8003a50:	f7fd f8bc 	bl	8000bcc <__aeabi_uldivmod>
 8003a54:	4603      	mov	r3, r0
 8003a56:	460c      	mov	r4, r1
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4b47      	ldr	r3, [pc, #284]	; (8003b78 <UART_SetConfig+0x384>)
 8003a5c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	461d      	mov	r5, r3
 8003a6a:	f04f 0600 	mov.w	r6, #0
 8003a6e:	46a9      	mov	r9, r5
 8003a70:	46b2      	mov	sl, r6
 8003a72:	eb19 0309 	adds.w	r3, r9, r9
 8003a76:	eb4a 040a 	adc.w	r4, sl, sl
 8003a7a:	4699      	mov	r9, r3
 8003a7c:	46a2      	mov	sl, r4
 8003a7e:	eb19 0905 	adds.w	r9, r9, r5
 8003a82:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a86:	f04f 0100 	mov.w	r1, #0
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a9a:	4689      	mov	r9, r1
 8003a9c:	4692      	mov	sl, r2
 8003a9e:	eb19 0005 	adds.w	r0, r9, r5
 8003aa2:	eb4a 0106 	adc.w	r1, sl, r6
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	461d      	mov	r5, r3
 8003aac:	f04f 0600 	mov.w	r6, #0
 8003ab0:	196b      	adds	r3, r5, r5
 8003ab2:	eb46 0406 	adc.w	r4, r6, r6
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4623      	mov	r3, r4
 8003aba:	f7fd f887 	bl	8000bcc <__aeabi_uldivmod>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	4b2c      	ldr	r3, [pc, #176]	; (8003b78 <UART_SetConfig+0x384>)
 8003ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	2164      	movs	r1, #100	; 0x64
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	3332      	adds	r3, #50	; 0x32
 8003ad8:	4a27      	ldr	r2, [pc, #156]	; (8003b78 <UART_SetConfig+0x384>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ae6:	4498      	add	r8, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	461d      	mov	r5, r3
 8003aec:	f04f 0600 	mov.w	r6, #0
 8003af0:	46a9      	mov	r9, r5
 8003af2:	46b2      	mov	sl, r6
 8003af4:	eb19 0309 	adds.w	r3, r9, r9
 8003af8:	eb4a 040a 	adc.w	r4, sl, sl
 8003afc:	4699      	mov	r9, r3
 8003afe:	46a2      	mov	sl, r4
 8003b00:	eb19 0905 	adds.w	r9, r9, r5
 8003b04:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b1c:	4689      	mov	r9, r1
 8003b1e:	4692      	mov	sl, r2
 8003b20:	eb19 0005 	adds.w	r0, r9, r5
 8003b24:	eb4a 0106 	adc.w	r1, sl, r6
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	461d      	mov	r5, r3
 8003b2e:	f04f 0600 	mov.w	r6, #0
 8003b32:	196b      	adds	r3, r5, r5
 8003b34:	eb46 0406 	adc.w	r4, r6, r6
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4623      	mov	r3, r4
 8003b3c:	f7fd f846 	bl	8000bcc <__aeabi_uldivmod>
 8003b40:	4603      	mov	r3, r0
 8003b42:	460c      	mov	r4, r1
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <UART_SetConfig+0x384>)
 8003b48:	fba3 1302 	umull	r1, r3, r3, r2
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	2164      	movs	r1, #100	; 0x64
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	3332      	adds	r3, #50	; 0x32
 8003b5a:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <UART_SetConfig+0x384>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	f003 0207 	and.w	r2, r3, #7
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4442      	add	r2, r8
 8003b6c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003b6e:	e1b2      	b.n	8003ed6 <UART_SetConfig+0x6e2>
 8003b70:	40011000 	.word	0x40011000
 8003b74:	40011400 	.word	0x40011400
 8003b78:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4ad7      	ldr	r2, [pc, #860]	; (8003ee0 <UART_SetConfig+0x6ec>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d005      	beq.n	8003b92 <UART_SetConfig+0x39e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4ad6      	ldr	r2, [pc, #856]	; (8003ee4 <UART_SetConfig+0x6f0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	f040 80d1 	bne.w	8003d34 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b92:	f7ff fdcd 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 8003b96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	469a      	mov	sl, r3
 8003b9c:	f04f 0b00 	mov.w	fp, #0
 8003ba0:	46d0      	mov	r8, sl
 8003ba2:	46d9      	mov	r9, fp
 8003ba4:	eb18 0308 	adds.w	r3, r8, r8
 8003ba8:	eb49 0409 	adc.w	r4, r9, r9
 8003bac:	4698      	mov	r8, r3
 8003bae:	46a1      	mov	r9, r4
 8003bb0:	eb18 080a 	adds.w	r8, r8, sl
 8003bb4:	eb49 090b 	adc.w	r9, r9, fp
 8003bb8:	f04f 0100 	mov.w	r1, #0
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bcc:	4688      	mov	r8, r1
 8003bce:	4691      	mov	r9, r2
 8003bd0:	eb1a 0508 	adds.w	r5, sl, r8
 8003bd4:	eb4b 0609 	adc.w	r6, fp, r9
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	f04f 0400 	mov.w	r4, #0
 8003bea:	0094      	lsls	r4, r2, #2
 8003bec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bf0:	008b      	lsls	r3, r1, #2
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4623      	mov	r3, r4
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	4631      	mov	r1, r6
 8003bfa:	f7fc ffe7 	bl	8000bcc <__aeabi_uldivmod>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	460c      	mov	r4, r1
 8003c02:	461a      	mov	r2, r3
 8003c04:	4bb8      	ldr	r3, [pc, #736]	; (8003ee8 <UART_SetConfig+0x6f4>)
 8003c06:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	469b      	mov	fp, r3
 8003c14:	f04f 0c00 	mov.w	ip, #0
 8003c18:	46d9      	mov	r9, fp
 8003c1a:	46e2      	mov	sl, ip
 8003c1c:	eb19 0309 	adds.w	r3, r9, r9
 8003c20:	eb4a 040a 	adc.w	r4, sl, sl
 8003c24:	4699      	mov	r9, r3
 8003c26:	46a2      	mov	sl, r4
 8003c28:	eb19 090b 	adds.w	r9, r9, fp
 8003c2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c44:	4689      	mov	r9, r1
 8003c46:	4692      	mov	sl, r2
 8003c48:	eb1b 0509 	adds.w	r5, fp, r9
 8003c4c:	eb4c 060a 	adc.w	r6, ip, sl
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4619      	mov	r1, r3
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	f04f 0400 	mov.w	r4, #0
 8003c62:	0094      	lsls	r4, r2, #2
 8003c64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c68:	008b      	lsls	r3, r1, #2
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	4623      	mov	r3, r4
 8003c6e:	4628      	mov	r0, r5
 8003c70:	4631      	mov	r1, r6
 8003c72:	f7fc ffab 	bl	8000bcc <__aeabi_uldivmod>
 8003c76:	4603      	mov	r3, r0
 8003c78:	460c      	mov	r4, r1
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4b9a      	ldr	r3, [pc, #616]	; (8003ee8 <UART_SetConfig+0x6f4>)
 8003c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2164      	movs	r1, #100	; 0x64
 8003c86:	fb01 f303 	mul.w	r3, r1, r3
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	3332      	adds	r3, #50	; 0x32
 8003c90:	4a95      	ldr	r2, [pc, #596]	; (8003ee8 <UART_SetConfig+0x6f4>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c9c:	4498      	add	r8, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	469b      	mov	fp, r3
 8003ca2:	f04f 0c00 	mov.w	ip, #0
 8003ca6:	46d9      	mov	r9, fp
 8003ca8:	46e2      	mov	sl, ip
 8003caa:	eb19 0309 	adds.w	r3, r9, r9
 8003cae:	eb4a 040a 	adc.w	r4, sl, sl
 8003cb2:	4699      	mov	r9, r3
 8003cb4:	46a2      	mov	sl, r4
 8003cb6:	eb19 090b 	adds.w	r9, r9, fp
 8003cba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cbe:	f04f 0100 	mov.w	r1, #0
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cd2:	4689      	mov	r9, r1
 8003cd4:	4692      	mov	sl, r2
 8003cd6:	eb1b 0509 	adds.w	r5, fp, r9
 8003cda:	eb4c 060a 	adc.w	r6, ip, sl
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	f04f 0400 	mov.w	r4, #0
 8003cf0:	0094      	lsls	r4, r2, #2
 8003cf2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cf6:	008b      	lsls	r3, r1, #2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	4631      	mov	r1, r6
 8003d00:	f7fc ff64 	bl	8000bcc <__aeabi_uldivmod>
 8003d04:	4603      	mov	r3, r0
 8003d06:	460c      	mov	r4, r1
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b77      	ldr	r3, [pc, #476]	; (8003ee8 <UART_SetConfig+0x6f4>)
 8003d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	2164      	movs	r1, #100	; 0x64
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	3332      	adds	r3, #50	; 0x32
 8003d1e:	4a72      	ldr	r2, [pc, #456]	; (8003ee8 <UART_SetConfig+0x6f4>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	f003 020f 	and.w	r2, r3, #15
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4442      	add	r2, r8
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	e0d0      	b.n	8003ed6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d34:	f7ff fce8 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 8003d38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	469a      	mov	sl, r3
 8003d3e:	f04f 0b00 	mov.w	fp, #0
 8003d42:	46d0      	mov	r8, sl
 8003d44:	46d9      	mov	r9, fp
 8003d46:	eb18 0308 	adds.w	r3, r8, r8
 8003d4a:	eb49 0409 	adc.w	r4, r9, r9
 8003d4e:	4698      	mov	r8, r3
 8003d50:	46a1      	mov	r9, r4
 8003d52:	eb18 080a 	adds.w	r8, r8, sl
 8003d56:	eb49 090b 	adc.w	r9, r9, fp
 8003d5a:	f04f 0100 	mov.w	r1, #0
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d66:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d6a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d6e:	4688      	mov	r8, r1
 8003d70:	4691      	mov	r9, r2
 8003d72:	eb1a 0508 	adds.w	r5, sl, r8
 8003d76:	eb4b 0609 	adc.w	r6, fp, r9
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	f04f 0400 	mov.w	r4, #0
 8003d8c:	0094      	lsls	r4, r2, #2
 8003d8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d92:	008b      	lsls	r3, r1, #2
 8003d94:	461a      	mov	r2, r3
 8003d96:	4623      	mov	r3, r4
 8003d98:	4628      	mov	r0, r5
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	f7fc ff16 	bl	8000bcc <__aeabi_uldivmod>
 8003da0:	4603      	mov	r3, r0
 8003da2:	460c      	mov	r4, r1
 8003da4:	461a      	mov	r2, r3
 8003da6:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <UART_SetConfig+0x6f4>)
 8003da8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	469b      	mov	fp, r3
 8003db6:	f04f 0c00 	mov.w	ip, #0
 8003dba:	46d9      	mov	r9, fp
 8003dbc:	46e2      	mov	sl, ip
 8003dbe:	eb19 0309 	adds.w	r3, r9, r9
 8003dc2:	eb4a 040a 	adc.w	r4, sl, sl
 8003dc6:	4699      	mov	r9, r3
 8003dc8:	46a2      	mov	sl, r4
 8003dca:	eb19 090b 	adds.w	r9, r9, fp
 8003dce:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dd2:	f04f 0100 	mov.w	r1, #0
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003de2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003de6:	4689      	mov	r9, r1
 8003de8:	4692      	mov	sl, r2
 8003dea:	eb1b 0509 	adds.w	r5, fp, r9
 8003dee:	eb4c 060a 	adc.w	r6, ip, sl
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4619      	mov	r1, r3
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	f04f 0400 	mov.w	r4, #0
 8003e04:	0094      	lsls	r4, r2, #2
 8003e06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e0a:	008b      	lsls	r3, r1, #2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4623      	mov	r3, r4
 8003e10:	4628      	mov	r0, r5
 8003e12:	4631      	mov	r1, r6
 8003e14:	f7fc feda 	bl	8000bcc <__aeabi_uldivmod>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4b32      	ldr	r3, [pc, #200]	; (8003ee8 <UART_SetConfig+0x6f4>)
 8003e20:	fba3 1302 	umull	r1, r3, r3, r2
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	2164      	movs	r1, #100	; 0x64
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	3332      	adds	r3, #50	; 0x32
 8003e32:	4a2d      	ldr	r2, [pc, #180]	; (8003ee8 <UART_SetConfig+0x6f4>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e3e:	4498      	add	r8, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	469b      	mov	fp, r3
 8003e44:	f04f 0c00 	mov.w	ip, #0
 8003e48:	46d9      	mov	r9, fp
 8003e4a:	46e2      	mov	sl, ip
 8003e4c:	eb19 0309 	adds.w	r3, r9, r9
 8003e50:	eb4a 040a 	adc.w	r4, sl, sl
 8003e54:	4699      	mov	r9, r3
 8003e56:	46a2      	mov	sl, r4
 8003e58:	eb19 090b 	adds.w	r9, r9, fp
 8003e5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e74:	4689      	mov	r9, r1
 8003e76:	4692      	mov	sl, r2
 8003e78:	eb1b 0509 	adds.w	r5, fp, r9
 8003e7c:	eb4c 060a 	adc.w	r6, ip, sl
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4619      	mov	r1, r3
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	f04f 0400 	mov.w	r4, #0
 8003e92:	0094      	lsls	r4, r2, #2
 8003e94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e98:	008b      	lsls	r3, r1, #2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4623      	mov	r3, r4
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	4631      	mov	r1, r6
 8003ea2:	f7fc fe93 	bl	8000bcc <__aeabi_uldivmod>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <UART_SetConfig+0x6f4>)
 8003eae:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	2164      	movs	r1, #100	; 0x64
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	3332      	adds	r3, #50	; 0x32
 8003ec0:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <UART_SetConfig+0x6f4>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	f003 020f 	and.w	r2, r3, #15
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4442      	add	r2, r8
 8003ed2:	609a      	str	r2, [r3, #8]
}
 8003ed4:	e7ff      	b.n	8003ed6 <UART_SetConfig+0x6e2>
 8003ed6:	bf00      	nop
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee0:	40011000 	.word	0x40011000
 8003ee4:	40011400 	.word	0x40011400
 8003ee8:	51eb851f 	.word	0x51eb851f

08003eec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003eec:	b084      	sub	sp, #16
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	f107 001c 	add.w	r0, r7, #28
 8003efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d122      	bne.n	8003f4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d105      	bne.n	8003f3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f001 fab4 	bl	80054ac <USB_CoreReset>
 8003f44:	4603      	mov	r3, r0
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	e01a      	b.n	8003f80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f001 faa8 	bl	80054ac <USB_CoreReset>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	639a      	str	r2, [r3, #56]	; 0x38
 8003f72:	e005      	b.n	8003f80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d10b      	bne.n	8003f9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f043 0206 	orr.w	r2, r3, #6
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f043 0220 	orr.w	r2, r3, #32
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003faa:	b004      	add	sp, #16
 8003fac:	4770      	bx	lr
	...

08003fb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d165      	bne.n	8004090 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4a41      	ldr	r2, [pc, #260]	; (80040cc <USB_SetTurnaroundTime+0x11c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d906      	bls.n	8003fda <USB_SetTurnaroundTime+0x2a>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4a40      	ldr	r2, [pc, #256]	; (80040d0 <USB_SetTurnaroundTime+0x120>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d802      	bhi.n	8003fda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003fd4:	230f      	movs	r3, #15
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e062      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4a3c      	ldr	r2, [pc, #240]	; (80040d0 <USB_SetTurnaroundTime+0x120>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d906      	bls.n	8003ff0 <USB_SetTurnaroundTime+0x40>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4a3b      	ldr	r2, [pc, #236]	; (80040d4 <USB_SetTurnaroundTime+0x124>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d802      	bhi.n	8003ff0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003fea:	230e      	movs	r3, #14
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e057      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4a38      	ldr	r2, [pc, #224]	; (80040d4 <USB_SetTurnaroundTime+0x124>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d906      	bls.n	8004006 <USB_SetTurnaroundTime+0x56>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4a37      	ldr	r2, [pc, #220]	; (80040d8 <USB_SetTurnaroundTime+0x128>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d802      	bhi.n	8004006 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004000:	230d      	movs	r3, #13
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e04c      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4a33      	ldr	r2, [pc, #204]	; (80040d8 <USB_SetTurnaroundTime+0x128>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d906      	bls.n	800401c <USB_SetTurnaroundTime+0x6c>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4a32      	ldr	r2, [pc, #200]	; (80040dc <USB_SetTurnaroundTime+0x12c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d802      	bhi.n	800401c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004016:	230c      	movs	r3, #12
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e041      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4a2f      	ldr	r2, [pc, #188]	; (80040dc <USB_SetTurnaroundTime+0x12c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d906      	bls.n	8004032 <USB_SetTurnaroundTime+0x82>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4a2e      	ldr	r2, [pc, #184]	; (80040e0 <USB_SetTurnaroundTime+0x130>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d802      	bhi.n	8004032 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800402c:	230b      	movs	r3, #11
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	e036      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <USB_SetTurnaroundTime+0x130>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d906      	bls.n	8004048 <USB_SetTurnaroundTime+0x98>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4a29      	ldr	r2, [pc, #164]	; (80040e4 <USB_SetTurnaroundTime+0x134>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d802      	bhi.n	8004048 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004042:	230a      	movs	r3, #10
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e02b      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <USB_SetTurnaroundTime+0x134>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d906      	bls.n	800405e <USB_SetTurnaroundTime+0xae>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4a25      	ldr	r2, [pc, #148]	; (80040e8 <USB_SetTurnaroundTime+0x138>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d802      	bhi.n	800405e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004058:	2309      	movs	r3, #9
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	e020      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4a21      	ldr	r2, [pc, #132]	; (80040e8 <USB_SetTurnaroundTime+0x138>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d906      	bls.n	8004074 <USB_SetTurnaroundTime+0xc4>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4a20      	ldr	r2, [pc, #128]	; (80040ec <USB_SetTurnaroundTime+0x13c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d802      	bhi.n	8004074 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800406e:	2308      	movs	r3, #8
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e015      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <USB_SetTurnaroundTime+0x13c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d906      	bls.n	800408a <USB_SetTurnaroundTime+0xda>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4a1c      	ldr	r2, [pc, #112]	; (80040f0 <USB_SetTurnaroundTime+0x140>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d802      	bhi.n	800408a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004084:	2307      	movs	r3, #7
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e00a      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800408a:	2306      	movs	r3, #6
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e007      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004096:	2309      	movs	r3, #9
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	e001      	b.n	80040a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800409c:	2309      	movs	r3, #9
 800409e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	029b      	lsls	r3, r3, #10
 80040b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	00d8acbf 	.word	0x00d8acbf
 80040d0:	00e4e1bf 	.word	0x00e4e1bf
 80040d4:	00f423ff 	.word	0x00f423ff
 80040d8:	0106737f 	.word	0x0106737f
 80040dc:	011a499f 	.word	0x011a499f
 80040e0:	01312cff 	.word	0x01312cff
 80040e4:	014ca43f 	.word	0x014ca43f
 80040e8:	016e35ff 	.word	0x016e35ff
 80040ec:	01a6ab1f 	.word	0x01a6ab1f
 80040f0:	01e847ff 	.word	0x01e847ff

080040f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f043 0201 	orr.w	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d106      	bne.n	8004164 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	60da      	str	r2, [r3, #12]
 8004162:	e00b      	b.n	800417c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	e001      	b.n	800417c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e003      	b.n	8004184 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800417c:	2032      	movs	r0, #50	; 0x32
 800417e:	f7fd fa35 	bl	80015ec <HAL_Delay>

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800418c:	b084      	sub	sp, #16
 800418e:	b580      	push	{r7, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800419a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	e009      	b.n	80041c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	3340      	adds	r3, #64	; 0x40
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	2200      	movs	r2, #0
 80041b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	3301      	adds	r3, #1
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b0e      	cmp	r3, #14
 80041c4:	d9f2      	bls.n	80041ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d11c      	bne.n	8004206 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041da:	f043 0302 	orr.w	r3, r3, #2
 80041de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	639a      	str	r2, [r3, #56]	; 0x38
 8004204:	e00b      	b.n	800421e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004224:	461a      	mov	r2, r3
 8004226:	2300      	movs	r3, #0
 8004228:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004230:	4619      	mov	r1, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004238:	461a      	mov	r2, r3
 800423a:	680b      	ldr	r3, [r1, #0]
 800423c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004240:	2b01      	cmp	r3, #1
 8004242:	d10c      	bne.n	800425e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d104      	bne.n	8004254 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800424a:	2100      	movs	r1, #0
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f949 	bl	80044e4 <USB_SetDevSpeed>
 8004252:	e008      	b.n	8004266 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004254:	2101      	movs	r1, #1
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f944 	bl	80044e4 <USB_SetDevSpeed>
 800425c:	e003      	b.n	8004266 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800425e:	2103      	movs	r1, #3
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f93f 	bl	80044e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004266:	2110      	movs	r1, #16
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f8f3 	bl	8004454 <USB_FlushTxFifo>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f911 	bl	80044a0 <USB_FlushRxFifo>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428e:	461a      	mov	r2, r3
 8004290:	2300      	movs	r3, #0
 8004292:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429a:	461a      	mov	r2, r3
 800429c:	2300      	movs	r3, #0
 800429e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a6:	461a      	mov	r2, r3
 80042a8:	2300      	movs	r3, #0
 80042aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ac:	2300      	movs	r3, #0
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	e043      	b.n	800433a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042c8:	d118      	bne.n	80042fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042dc:	461a      	mov	r2, r3
 80042de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	e013      	b.n	800430e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f2:	461a      	mov	r2, r3
 80042f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e008      	b.n	800430e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	461a      	mov	r2, r3
 800430a:	2300      	movs	r3, #0
 800430c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431a:	461a      	mov	r2, r3
 800431c:	2300      	movs	r3, #0
 800431e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432c:	461a      	mov	r2, r3
 800432e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004332:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	3301      	adds	r3, #1
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	429a      	cmp	r2, r3
 8004340:	d3b7      	bcc.n	80042b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	e043      	b.n	80043d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800435a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800435e:	d118      	bne.n	8004392 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004372:	461a      	mov	r2, r3
 8004374:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e013      	b.n	80043a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	461a      	mov	r2, r3
 800438a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	e008      	b.n	80043a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439e:	461a      	mov	r2, r3
 80043a0:	2300      	movs	r3, #0
 80043a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	461a      	mov	r2, r3
 80043b2:	2300      	movs	r3, #0
 80043b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c2:	461a      	mov	r2, r3
 80043c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	3301      	adds	r3, #1
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d3b7      	bcc.n	8004348 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d105      	bne.n	800440c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f043 0210 	orr.w	r2, r3, #16
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <USB_DevInit+0x2c4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f043 0208 	orr.w	r2, r3, #8
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800442a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d107      	bne.n	8004440 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004438:	f043 0304 	orr.w	r3, r3, #4
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004440:	7dfb      	ldrb	r3, [r7, #23]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800444c:	b004      	add	sp, #16
 800444e:	4770      	bx	lr
 8004450:	803c3800 	.word	0x803c3800

08004454 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	019b      	lsls	r3, r3, #6
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3301      	adds	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4a09      	ldr	r2, [pc, #36]	; (800449c <USB_FlushTxFifo+0x48>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d901      	bls.n	8004480 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e006      	b.n	800448e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f003 0320 	and.w	r3, r3, #32
 8004488:	2b20      	cmp	r3, #32
 800448a:	d0f0      	beq.n	800446e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	00030d40 	.word	0x00030d40

080044a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2210      	movs	r2, #16
 80044b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3301      	adds	r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <USB_FlushRxFifo+0x40>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d901      	bls.n	80044c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e006      	b.n	80044d2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d0f0      	beq.n	80044b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	00030d40 	.word	0x00030d40

080044e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004504:	4313      	orrs	r3, r2
 8004506:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004516:	b480      	push	{r7}
 8004518:	b087      	sub	sp, #28
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0306 	and.w	r3, r3, #6
 800452e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d102      	bne.n	800453c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004536:	2300      	movs	r3, #0
 8004538:	75fb      	strb	r3, [r7, #23]
 800453a:	e00a      	b.n	8004552 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d002      	beq.n	8004548 <USB_GetDevSpeed+0x32>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b06      	cmp	r3, #6
 8004546:	d102      	bne.n	800454e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004548:	2302      	movs	r3, #2
 800454a:	75fb      	strb	r3, [r7, #23]
 800454c:	e001      	b.n	8004552 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800454e:	230f      	movs	r3, #15
 8004550:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004552:	7dfb      	ldrb	r3, [r7, #23]
}
 8004554:	4618      	mov	r0, r3
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	785b      	ldrb	r3, [r3, #1]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d13a      	bne.n	80045f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	2101      	movs	r1, #1
 800458e:	fa01 f303 	lsl.w	r3, r1, r3
 8004592:	b29b      	uxth	r3, r3
 8004594:	68f9      	ldr	r1, [r7, #12]
 8004596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800459a:	4313      	orrs	r3, r2
 800459c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d155      	bne.n	8004660 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	78db      	ldrb	r3, [r3, #3]
 80045ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	059b      	lsls	r3, r3, #22
 80045d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045d8:	4313      	orrs	r3, r2
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	0151      	lsls	r1, r2, #5
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	440a      	add	r2, r1
 80045e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	e036      	b.n	8004660 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f8:	69da      	ldr	r2, [r3, #28]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	2101      	movs	r1, #1
 8004604:	fa01 f303 	lsl.w	r3, r1, r3
 8004608:	041b      	lsls	r3, r3, #16
 800460a:	68f9      	ldr	r1, [r7, #12]
 800460c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004610:	4313      	orrs	r3, r2
 8004612:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d11a      	bne.n	8004660 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	78db      	ldrb	r3, [r3, #3]
 8004644:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004646:	430b      	orrs	r3, r1
 8004648:	4313      	orrs	r3, r2
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	0151      	lsls	r1, r2, #5
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	440a      	add	r2, r1
 8004652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	785b      	ldrb	r3, [r3, #1]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d161      	bne.n	8004750 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800469e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a2:	d11f      	bne.n	80046e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	0151      	lsls	r1, r2, #5
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	440a      	add	r2, r1
 80046ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	0151      	lsls	r1, r2, #5
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	440a      	add	r2, r1
 80046da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	2101      	movs	r1, #1
 80046f6:	fa01 f303 	lsl.w	r3, r1, r3
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	68f9      	ldr	r1, [r7, #12]
 8004700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004704:	4013      	ands	r3, r2
 8004706:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	2101      	movs	r1, #1
 800471a:	fa01 f303 	lsl.w	r3, r1, r3
 800471e:	b29b      	uxth	r3, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	68f9      	ldr	r1, [r7, #12]
 8004724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004728:	4013      	ands	r3, r2
 800472a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	0159      	lsls	r1, r3, #5
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	440b      	add	r3, r1
 8004742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004746:	4619      	mov	r1, r3
 8004748:	4b35      	ldr	r3, [pc, #212]	; (8004820 <USB_DeactivateEndpoint+0x1b0>)
 800474a:	4013      	ands	r3, r2
 800474c:	600b      	str	r3, [r1, #0]
 800474e:	e060      	b.n	8004812 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004766:	d11f      	bne.n	80047a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	0151      	lsls	r1, r2, #5
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	440a      	add	r2, r1
 800477e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004782:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004786:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	0151      	lsls	r1, r2, #5
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	440a      	add	r2, r1
 800479e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	2101      	movs	r1, #1
 80047ba:	fa01 f303 	lsl.w	r3, r1, r3
 80047be:	041b      	lsls	r3, r3, #16
 80047c0:	43db      	mvns	r3, r3
 80047c2:	68f9      	ldr	r1, [r7, #12]
 80047c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047c8:	4013      	ands	r3, r2
 80047ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	2101      	movs	r1, #1
 80047de:	fa01 f303 	lsl.w	r3, r1, r3
 80047e2:	041b      	lsls	r3, r3, #16
 80047e4:	43db      	mvns	r3, r3
 80047e6:	68f9      	ldr	r1, [r7, #12]
 80047e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047ec:	4013      	ands	r3, r2
 80047ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	0159      	lsls	r1, r3, #5
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	440b      	add	r3, r1
 8004806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480a:	4619      	mov	r1, r3
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <USB_DeactivateEndpoint+0x1b4>)
 800480e:	4013      	ands	r3, r2
 8004810:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	ec337800 	.word	0xec337800
 8004824:	eff37800 	.word	0xeff37800

08004828 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	4613      	mov	r3, r2
 8004834:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	785b      	ldrb	r3, [r3, #1]
 8004844:	2b01      	cmp	r3, #1
 8004846:	f040 815c 	bne.w	8004b02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d132      	bne.n	80048b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	0151      	lsls	r1, r2, #5
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	440a      	add	r2, r1
 8004868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004870:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004874:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	440a      	add	r2, r1
 800488c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004890:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004894:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b0:	0cdb      	lsrs	r3, r3, #19
 80048b2:	04db      	lsls	r3, r3, #19
 80048b4:	6113      	str	r3, [r2, #16]
 80048b6:	e074      	b.n	80049a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	0151      	lsls	r1, r2, #5
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	440a      	add	r2, r1
 80048ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d2:	0cdb      	lsrs	r3, r3, #19
 80048d4:	04db      	lsls	r3, r3, #19
 80048d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6959      	ldr	r1, [r3, #20]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	440b      	add	r3, r1
 8004914:	1e59      	subs	r1, r3, #1
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	fbb1 f3f3 	udiv	r3, r1, r3
 800491e:	04d9      	lsls	r1, r3, #19
 8004920:	4b9d      	ldr	r3, [pc, #628]	; (8004b98 <USB_EPStartXfer+0x370>)
 8004922:	400b      	ands	r3, r1
 8004924:	69b9      	ldr	r1, [r7, #24]
 8004926:	0148      	lsls	r0, r1, #5
 8004928:	69f9      	ldr	r1, [r7, #28]
 800492a:	4401      	add	r1, r0
 800492c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004930:	4313      	orrs	r3, r2
 8004932:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494a:	69b9      	ldr	r1, [r7, #24]
 800494c:	0148      	lsls	r0, r1, #5
 800494e:	69f9      	ldr	r1, [r7, #28]
 8004950:	4401      	add	r1, r0
 8004952:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004956:	4313      	orrs	r3, r2
 8004958:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	78db      	ldrb	r3, [r3, #3]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d11f      	bne.n	80049a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	440a      	add	r2, r1
 8004978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004980:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	440a      	add	r2, r1
 8004998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d14b      	bne.n	8004a40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d009      	beq.n	80049c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	461a      	mov	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	78db      	ldrb	r3, [r3, #3]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d128      	bne.n	8004a1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d110      	bne.n	80049fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	e00f      	b.n	8004a1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	0151      	lsls	r1, r2, #5
 8004a10:	69fa      	ldr	r2, [r7, #28]
 8004a12:	440a      	add	r2, r1
 8004a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	0151      	lsls	r1, r2, #5
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	440a      	add	r2, r1
 8004a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e12f      	b.n	8004ca0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	0151      	lsls	r1, r2, #5
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	440a      	add	r2, r1
 8004a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	78db      	ldrb	r3, [r3, #3]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d015      	beq.n	8004a94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8117 	beq.w	8004ca0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	2101      	movs	r1, #1
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	69f9      	ldr	r1, [r7, #28]
 8004a8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	634b      	str	r3, [r1, #52]	; 0x34
 8004a92:	e105      	b.n	8004ca0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d110      	bne.n	8004ac6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	e00f      	b.n	8004ae6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	0151      	lsls	r1, r2, #5
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	440a      	add	r2, r1
 8004adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	68d9      	ldr	r1, [r3, #12]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	781a      	ldrb	r2, [r3, #0]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	b298      	uxth	r0, r3
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	4603      	mov	r3, r0
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fa2b 	bl	8004f56 <USB_WritePacket>
 8004b00:	e0ce      	b.n	8004ca0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	0151      	lsls	r1, r2, #5
 8004b14:	69fa      	ldr	r2, [r7, #28]
 8004b16:	440a      	add	r2, r1
 8004b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b1c:	0cdb      	lsrs	r3, r3, #19
 8004b1e:	04db      	lsls	r3, r3, #19
 8004b20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	0151      	lsls	r1, r2, #5
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	440a      	add	r2, r1
 8004b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d126      	bne.n	8004b9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b64:	69b9      	ldr	r1, [r7, #24]
 8004b66:	0148      	lsls	r0, r1, #5
 8004b68:	69f9      	ldr	r1, [r7, #28]
 8004b6a:	4401      	add	r1, r0
 8004b6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b70:	4313      	orrs	r3, r2
 8004b72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	0151      	lsls	r1, r2, #5
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	440a      	add	r2, r1
 8004b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b92:	6113      	str	r3, [r2, #16]
 8004b94:	e036      	b.n	8004c04 <USB_EPStartXfer+0x3dc>
 8004b96:	bf00      	nop
 8004b98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	695a      	ldr	r2, [r3, #20]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	1e5a      	subs	r2, r3, #1
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	8afb      	ldrh	r3, [r7, #22]
 8004bc2:	04d9      	lsls	r1, r3, #19
 8004bc4:	4b39      	ldr	r3, [pc, #228]	; (8004cac <USB_EPStartXfer+0x484>)
 8004bc6:	400b      	ands	r3, r1
 8004bc8:	69b9      	ldr	r1, [r7, #24]
 8004bca:	0148      	lsls	r0, r1, #5
 8004bcc:	69f9      	ldr	r1, [r7, #28]
 8004bce:	4401      	add	r1, r0
 8004bd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	8af9      	ldrh	r1, [r7, #22]
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf4:	69b9      	ldr	r1, [r7, #24]
 8004bf6:	0148      	lsls	r0, r1, #5
 8004bf8:	69f9      	ldr	r1, [r7, #28]
 8004bfa:	4401      	add	r1, r0
 8004bfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c00:	4313      	orrs	r3, r2
 8004c02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d10d      	bne.n	8004c26 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	68d9      	ldr	r1, [r3, #12]
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c22:	460a      	mov	r2, r1
 8004c24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	78db      	ldrb	r3, [r3, #3]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d128      	bne.n	8004c80 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d110      	bne.n	8004c60 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	0151      	lsls	r1, r2, #5
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	440a      	add	r2, r1
 8004c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e00f      	b.n	8004c80 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	0151      	lsls	r1, r2, #5
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	440a      	add	r2, r1
 8004c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3720      	adds	r7, #32
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	1ff80000 	.word	0x1ff80000

08004cb0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	785b      	ldrb	r3, [r3, #1]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	f040 80cd 	bne.w	8004e6c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d132      	bne.n	8004d40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	0151      	lsls	r1, r2, #5
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	440a      	add	r2, r1
 8004cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	0151      	lsls	r1, r2, #5
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	440a      	add	r2, r1
 8004d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	0151      	lsls	r1, r2, #5
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	440a      	add	r2, r1
 8004d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d38:	0cdb      	lsrs	r3, r3, #19
 8004d3a:	04db      	lsls	r3, r3, #19
 8004d3c:	6113      	str	r3, [r2, #16]
 8004d3e:	e04e      	b.n	8004dde <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	0151      	lsls	r1, r2, #5
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	440a      	add	r2, r1
 8004d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5a:	0cdb      	lsrs	r3, r3, #19
 8004d5c:	04db      	lsls	r3, r3, #19
 8004d5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	0151      	lsls	r1, r2, #5
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	440a      	add	r2, r1
 8004d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	695a      	ldr	r2, [r3, #20]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d903      	bls.n	8004d98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004db6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dce:	6939      	ldr	r1, [r7, #16]
 8004dd0:	0148      	lsls	r0, r1, #5
 8004dd2:	6979      	ldr	r1, [r7, #20]
 8004dd4:	4401      	add	r1, r0
 8004dd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d11e      	bne.n	8004e22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d009      	beq.n	8004e00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df8:	461a      	mov	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	e092      	b.n	8004f48 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d07e      	beq.n	8004f48 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	6979      	ldr	r1, [r7, #20]
 8004e62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e66:	4313      	orrs	r3, r2
 8004e68:	634b      	str	r3, [r1, #52]	; 0x34
 8004e6a:	e06d      	b.n	8004f48 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e86:	0cdb      	lsrs	r3, r3, #19
 8004e88:	04db      	lsls	r3, r3, #19
 8004e8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	0151      	lsls	r1, r2, #5
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	440a      	add	r2, r1
 8004ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ede:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ef6:	6939      	ldr	r1, [r7, #16]
 8004ef8:	0148      	lsls	r0, r1, #5
 8004efa:	6979      	ldr	r1, [r7, #20]
 8004efc:	4401      	add	r1, r0
 8004efe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f02:	4313      	orrs	r3, r2
 8004f04:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d10d      	bne.n	8004f28 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	68d9      	ldr	r1, [r3, #12]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f24:	460a      	mov	r2, r1
 8004f26:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b089      	sub	sp, #36	; 0x24
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	4611      	mov	r1, r2
 8004f62:	461a      	mov	r2, r3
 8004f64:	460b      	mov	r3, r1
 8004f66:	71fb      	strb	r3, [r7, #7]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004f74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d11a      	bne.n	8004fb2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f7c:	88bb      	ldrh	r3, [r7, #4]
 8004f7e:	3303      	adds	r3, #3
 8004f80:	089b      	lsrs	r3, r3, #2
 8004f82:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	e00f      	b.n	8004faa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	031a      	lsls	r2, r3, #12
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f96:	461a      	mov	r2, r3
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d3eb      	bcc.n	8004f8a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3724      	adds	r7, #36	; 0x24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b089      	sub	sp, #36	; 0x24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	3303      	adds	r3, #3
 8004fda:	089b      	lsrs	r3, r3, #2
 8004fdc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	e00b      	b.n	8004ffc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	61bb      	str	r3, [r7, #24]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	429a      	cmp	r2, r3
 8005002:	d3ef      	bcc.n	8004fe4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005004:	69fb      	ldr	r3, [r7, #28]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3724      	adds	r7, #36	; 0x24
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d12c      	bne.n	8005088 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	db12      	blt.n	8005066 <USB_EPSetStall+0x54>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00f      	beq.n	8005066 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	440a      	add	r2, r1
 800505c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005060:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005064:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	0151      	lsls	r1, r2, #5
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	440a      	add	r2, r1
 800507c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005080:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e02b      	b.n	80050e0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	db12      	blt.n	80050c0 <USB_EPSetStall+0xae>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00f      	beq.n	80050c0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	0151      	lsls	r1, r2, #5
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	440a      	add	r2, r1
 80050b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050be:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	0151      	lsls	r1, r2, #5
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	440a      	add	r2, r1
 80050d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b085      	sub	sp, #20
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	785b      	ldrb	r3, [r3, #1]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d128      	bne.n	800515c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005124:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005128:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	78db      	ldrb	r3, [r3, #3]
 800512e:	2b03      	cmp	r3, #3
 8005130:	d003      	beq.n	800513a <USB_EPClearStall+0x4c>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	78db      	ldrb	r3, [r3, #3]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d138      	bne.n	80051ac <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	440a      	add	r2, r1
 8005150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e027      	b.n	80051ac <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005176:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800517a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	78db      	ldrb	r3, [r3, #3]
 8005180:	2b03      	cmp	r3, #3
 8005182:	d003      	beq.n	800518c <USB_EPClearStall+0x9e>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	78db      	ldrb	r3, [r3, #3]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d10f      	bne.n	80051ac <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051aa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	460b      	mov	r3, r1
 80051c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80051dc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80051ee:	68f9      	ldr	r1, [r7, #12]
 80051f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051f4:	4313      	orrs	r3, r2
 80051f6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005220:	f023 0302 	bic.w	r3, r3, #2
 8005224:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005226:	2003      	movs	r0, #3
 8005228:	f7fc f9e0 	bl	80015ec <HAL_Delay>

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005256:	2003      	movs	r0, #3
 8005258:	f7fc f9c8 	bl	80015ec <HAL_Delay>

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4013      	ands	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800527e:	68fb      	ldr	r3, [r7, #12]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	4013      	ands	r3, r2
 80052ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	0c1b      	lsrs	r3, r3, #16
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	4013      	ands	r3, r2
 80052e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	b29b      	uxth	r3, r3
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	4013      	ands	r3, r2
 8005320:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005322:	68bb      	ldr	r3, [r7, #8]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
 8005360:	01db      	lsls	r3, r3, #7
 8005362:	b2db      	uxtb	r3, r3
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4013      	ands	r3, r2
 800537c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800537e:	68bb      	ldr	r3, [r7, #8]
}
 8005380:	4618      	mov	r0, r3
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f003 0301 	and.w	r3, r3, #1
}
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053c6:	f023 0307 	bic.w	r3, r3, #7
 80053ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
	...

080053f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	460b      	mov	r3, r1
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	333c      	adds	r3, #60	; 0x3c
 8005406:	3304      	adds	r3, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	4a26      	ldr	r2, [pc, #152]	; (80054a8 <USB_EP0_OutStart+0xb8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d90a      	bls.n	800542a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005424:	d101      	bne.n	800542a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	e037      	b.n	800549a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005430:	461a      	mov	r2, r3
 8005432:	2300      	movs	r3, #0
 8005434:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005448:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005458:	f043 0318 	orr.w	r3, r3, #24
 800545c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005470:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005472:	7afb      	ldrb	r3, [r7, #11]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d10f      	bne.n	8005498 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	461a      	mov	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005492:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005496:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	4f54300a 	.word	0x4f54300a

080054ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4a13      	ldr	r2, [pc, #76]	; (8005510 <USB_CoreReset+0x64>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e01b      	b.n	8005502 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	daf2      	bge.n	80054b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f043 0201 	orr.w	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3301      	adds	r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <USB_CoreReset+0x64>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d901      	bls.n	80054f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e006      	b.n	8005502 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d0f0      	beq.n	80054e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	00030d40 	.word	0x00030d40

08005514 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005520:	2010      	movs	r0, #16
 8005522:	f001 ff01 	bl	8007328 <malloc>
 8005526:	4603      	mov	r3, r0
 8005528:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d105      	bne.n	800553c <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005538:	2302      	movs	r3, #2
 800553a:	e01b      	b.n	8005574 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	7c1b      	ldrb	r3, [r3, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d103      	bne.n	8005554 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2207      	movs	r2, #7
 8005550:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005552:	e002      	b.n	800555a <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	220a      	movs	r2, #10
 8005558:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800555a:	2304      	movs	r3, #4
 800555c:	2203      	movs	r2, #3
 800555e:	2181      	movs	r1, #129	; 0x81
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f001 fd7a 	bl	800705a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005588:	2181      	movs	r1, #129	; 0x81
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f001 fd8b 	bl	80070a6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 fec3 	bl	8007338 <free>
    pdev->pClassData = NULL;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055d4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d045      	beq.n	8005676 <USBD_HID_Setup+0xb2>
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	f040 80d4 	bne.w	8005798 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	3b02      	subs	r3, #2
 80055f6:	2b09      	cmp	r3, #9
 80055f8:	d835      	bhi.n	8005666 <USBD_HID_Setup+0xa2>
 80055fa:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <USBD_HID_Setup+0x3c>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005657 	.word	0x08005657
 8005604:	08005637 	.word	0x08005637
 8005608:	08005667 	.word	0x08005667
 800560c:	08005667 	.word	0x08005667
 8005610:	08005667 	.word	0x08005667
 8005614:	08005667 	.word	0x08005667
 8005618:	08005667 	.word	0x08005667
 800561c:	08005667 	.word	0x08005667
 8005620:	08005645 	.word	0x08005645
 8005624:	08005629 	.word	0x08005629
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	885b      	ldrh	r3, [r3, #2]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	601a      	str	r2, [r3, #0]
      break;
 8005634:	e01e      	b.n	8005674 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	4619      	mov	r1, r3
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f001 f9c8 	bl	80069d2 <USBD_CtlSendData>
      break;
 8005642:	e017      	b.n	8005674 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	885b      	ldrh	r3, [r3, #2]
 8005648:	0a1b      	lsrs	r3, r3, #8
 800564a:	b29b      	uxth	r3, r3
 800564c:	b2db      	uxtb	r3, r3
 800564e:	461a      	mov	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	605a      	str	r2, [r3, #4]
      break;
 8005654:	e00e      	b.n	8005674 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3304      	adds	r3, #4
 800565a:	2201      	movs	r2, #1
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f001 f9b7 	bl	80069d2 <USBD_CtlSendData>
      break;
 8005664:	e006      	b.n	8005674 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f001 f941 	bl	80068f0 <USBD_CtlError>
      ret = USBD_FAIL;
 800566e:	2303      	movs	r3, #3
 8005670:	75fb      	strb	r3, [r7, #23]
      break;
 8005672:	bf00      	nop
    }
    break;
 8005674:	e097      	b.n	80057a6 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	785b      	ldrb	r3, [r3, #1]
 800567a:	2b0b      	cmp	r3, #11
 800567c:	f200 8083 	bhi.w	8005786 <USBD_HID_Setup+0x1c2>
 8005680:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <USBD_HID_Setup+0xc4>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	080056b9 	.word	0x080056b9
 800568c:	08005795 	.word	0x08005795
 8005690:	08005787 	.word	0x08005787
 8005694:	08005787 	.word	0x08005787
 8005698:	08005787 	.word	0x08005787
 800569c:	08005787 	.word	0x08005787
 80056a0:	080056e1 	.word	0x080056e1
 80056a4:	08005787 	.word	0x08005787
 80056a8:	08005787 	.word	0x08005787
 80056ac:	08005787 	.word	0x08005787
 80056b0:	08005739 	.word	0x08005739
 80056b4:	08005761 	.word	0x08005761
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d107      	bne.n	80056d2 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80056c2:	f107 030a 	add.w	r3, r7, #10
 80056c6:	2202      	movs	r2, #2
 80056c8:	4619      	mov	r1, r3
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f001 f981 	bl	80069d2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80056d0:	e061      	b.n	8005796 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f001 f90b 	bl	80068f0 <USBD_CtlError>
        ret = USBD_FAIL;
 80056da:	2303      	movs	r3, #3
 80056dc:	75fb      	strb	r3, [r7, #23]
      break;
 80056de:	e05a      	b.n	8005796 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	885b      	ldrh	r3, [r3, #2]
 80056e4:	0a1b      	lsrs	r3, r3, #8
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b22      	cmp	r3, #34	; 0x22
 80056ea:	d108      	bne.n	80056fe <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	88db      	ldrh	r3, [r3, #6]
 80056f0:	2b4a      	cmp	r3, #74	; 0x4a
 80056f2:	bf28      	it	cs
 80056f4:	234a      	movcs	r3, #74	; 0x4a
 80056f6:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 80056f8:	4b2d      	ldr	r3, [pc, #180]	; (80057b0 <USBD_HID_Setup+0x1ec>)
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	e015      	b.n	800572a <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	885b      	ldrh	r3, [r3, #2]
 8005702:	0a1b      	lsrs	r3, r3, #8
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b21      	cmp	r3, #33	; 0x21
 8005708:	d108      	bne.n	800571c <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 800570a:	4b2a      	ldr	r3, [pc, #168]	; (80057b4 <USBD_HID_Setup+0x1f0>)
 800570c:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	88db      	ldrh	r3, [r3, #6]
 8005712:	2b09      	cmp	r3, #9
 8005714:	bf28      	it	cs
 8005716:	2309      	movcs	r3, #9
 8005718:	82bb      	strh	r3, [r7, #20]
 800571a:	e006      	b.n	800572a <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f001 f8e6 	bl	80068f0 <USBD_CtlError>
        ret = USBD_FAIL;
 8005724:	2303      	movs	r3, #3
 8005726:	75fb      	strb	r3, [r7, #23]
        break;
 8005728:	e035      	b.n	8005796 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800572a:	8abb      	ldrh	r3, [r7, #20]
 800572c:	461a      	mov	r2, r3
 800572e:	6939      	ldr	r1, [r7, #16]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f001 f94e 	bl	80069d2 <USBD_CtlSendData>
      break;
 8005736:	e02e      	b.n	8005796 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800573e:	2b03      	cmp	r3, #3
 8005740:	d107      	bne.n	8005752 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3308      	adds	r3, #8
 8005746:	2201      	movs	r2, #1
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f001 f941 	bl	80069d2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005750:	e021      	b.n	8005796 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8005752:	6839      	ldr	r1, [r7, #0]
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f001 f8cb 	bl	80068f0 <USBD_CtlError>
        ret = USBD_FAIL;
 800575a:	2303      	movs	r3, #3
 800575c:	75fb      	strb	r3, [r7, #23]
      break;
 800575e:	e01a      	b.n	8005796 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005766:	2b03      	cmp	r3, #3
 8005768:	d106      	bne.n	8005778 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	885b      	ldrh	r3, [r3, #2]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005776:	e00e      	b.n	8005796 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 f8b8 	bl	80068f0 <USBD_CtlError>
        ret = USBD_FAIL;
 8005780:	2303      	movs	r3, #3
 8005782:	75fb      	strb	r3, [r7, #23]
      break;
 8005784:	e007      	b.n	8005796 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005786:	6839      	ldr	r1, [r7, #0]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f001 f8b1 	bl	80068f0 <USBD_CtlError>
      ret = USBD_FAIL;
 800578e:	2303      	movs	r3, #3
 8005790:	75fb      	strb	r3, [r7, #23]
      break;
 8005792:	e000      	b.n	8005796 <USBD_HID_Setup+0x1d2>
      break;
 8005794:	bf00      	nop
    }
    break;
 8005796:	e006      	b.n	80057a6 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8005798:	6839      	ldr	r1, [r7, #0]
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 f8a8 	bl	80068f0 <USBD_CtlError>
    ret = USBD_FAIL;
 80057a0:	2303      	movs	r3, #3
 80057a2:	75fb      	strb	r3, [r7, #23]
    break;
 80057a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	200000c8 	.word	0x200000c8
 80057b4:	200000b0 	.word	0x200000b0

080057b8 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	4613      	mov	r3, r2
 80057c4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057cc:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d10c      	bne.n	80057f2 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	7b1b      	ldrb	r3, [r3, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d108      	bne.n	80057f2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2201      	movs	r2, #1
 80057e4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	2181      	movs	r1, #129	; 0x81
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f001 fd02 	bl	80071f6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	7c1b      	ldrb	r3, [r3, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d102      	bne.n	8005812 <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 800580c:	2308      	movs	r3, #8
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	e001      	b.n	8005816 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8005812:	230a      	movs	r3, #10
 8005814:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8005816:	68fb      	ldr	r3, [r7, #12]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2222      	movs	r2, #34	; 0x22
 8005830:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8005832:	4b03      	ldr	r3, [pc, #12]	; (8005840 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005834:	4618      	mov	r0, r3
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	20000044 	.word	0x20000044

08005844 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2222      	movs	r2, #34	; 0x22
 8005850:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8005852:	4b03      	ldr	r3, [pc, #12]	; (8005860 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	20000068 	.word	0x20000068

08005864 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2222      	movs	r2, #34	; 0x22
 8005870:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8005872:	4b03      	ldr	r3, [pc, #12]	; (8005880 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005874:	4618      	mov	r0, r3
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	2000008c 	.word	0x2000008c

08005884 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005896:	2200      	movs	r2, #0
 8005898:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	220a      	movs	r2, #10
 80058b4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80058b6:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	200000bc 	.word	0x200000bc

080058c8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	4613      	mov	r3, r2
 80058d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80058dc:	2303      	movs	r3, #3
 80058de:	e025      	b.n	800592c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	79fa      	ldrb	r2, [r7, #7]
 800591e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f001 fb33 	bl	8006f8c <USBD_LL_Init>
 8005926:	4603      	mov	r3, r0
 8005928:	75fb      	strb	r3, [r7, #23]

  return ret;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005948:	2303      	movs	r3, #3
 800594a:	e010      	b.n	800596e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	f107 020e 	add.w	r2, r7, #14
 8005960:	4610      	mov	r0, r2
 8005962:	4798      	blx	r3
 8005964:	4602      	mov	r2, r0
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 fb50 	bl	8007024 <USBD_LL_Start>
 8005984:	4603      	mov	r3, r0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80059b0:	2303      	movs	r3, #3
 80059b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	78fa      	ldrb	r2, [r7, #3]
 80059c8:	4611      	mov	r1, r2
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	4798      	blx	r3
 80059ce:	4603      	mov	r3, r0
 80059d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	78fa      	ldrb	r2, [r7, #3]
 80059fc:	4611      	mov	r1, r2
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	4798      	blx	r3
  }

  return USBD_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 ff2c 	bl	800687c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d00e      	beq.n	8005a66 <USBD_LL_SetupStage+0x5a>
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d302      	bcc.n	8005a52 <USBD_LL_SetupStage+0x46>
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d014      	beq.n	8005a7a <USBD_LL_SetupStage+0x6e>
 8005a50:	e01d      	b.n	8005a8e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fa18 	bl	8005e90 <USBD_StdDevReq>
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]
      break;
 8005a64:	e020      	b.n	8005aa8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fa7c 	bl	8005f6c <USBD_StdItfReq>
 8005a74:	4603      	mov	r3, r0
 8005a76:	73fb      	strb	r3, [r7, #15]
      break;
 8005a78:	e016      	b.n	8005aa8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a80:	4619      	mov	r1, r3
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fab8 	bl	8005ff8 <USBD_StdEPReq>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a8c:	e00c      	b.n	8005aa8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f001 fb21 	bl	80070e4 <USBD_LL_StallEP>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa6:	bf00      	nop
  }

  return ret;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b086      	sub	sp, #24
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	460b      	mov	r3, r1
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ac0:	7afb      	ldrb	r3, [r7, #11]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d137      	bne.n	8005b36 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005acc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d14a      	bne.n	8005b6e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d913      	bls.n	8005b0c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	1ad2      	subs	r2, r2, r3
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	4293      	cmp	r3, r2
 8005afc:	bf28      	it	cs
 8005afe:	4613      	movcs	r3, r2
 8005b00:	461a      	mov	r2, r3
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 ff90 	bl	8006a2a <USBD_CtlContinueRx>
 8005b0a:	e030      	b.n	8005b6e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00a      	beq.n	8005b2e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	d105      	bne.n	8005b2e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 ff8c 	bl	8006a4c <USBD_CtlSendStatus>
 8005b34:	e01b      	b.n	8005b6e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d013      	beq.n	8005b6a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d10e      	bne.n	8005b6a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	7afa      	ldrb	r2, [r7, #11]
 8005b56:	4611      	mov	r1, r2
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	4798      	blx	r3
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
 8005b68:	e002      	b.n	8005b70 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e000      	b.n	8005b70 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	460b      	mov	r3, r1
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005b86:	7afb      	ldrb	r3, [r7, #11]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d16a      	bne.n	8005c62 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3314      	adds	r3, #20
 8005b90:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d155      	bne.n	8005c48 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d914      	bls.n	8005bd2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	1ad2      	subs	r2, r2, r3
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 ff22 	bl	8006a08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2100      	movs	r1, #0
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f001 fb34 	bl	8007238 <USBD_LL_PrepareReceive>
 8005bd0:	e03a      	b.n	8005c48 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d11c      	bne.n	8005c18 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d316      	bcc.n	8005c18 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d20f      	bcs.n	8005c18 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 ff03 	bl	8006a08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2100      	movs	r1, #0
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f001 fb11 	bl	8007238 <USBD_LL_PrepareReceive>
 8005c16:	e017      	b.n	8005c48 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d105      	bne.n	8005c3a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c3a:	2180      	movs	r1, #128	; 0x80
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f001 fa51 	bl	80070e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 ff15 	bl	8006a72 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d123      	bne.n	8005c9a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f7ff fe9b 	bl	800598e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c60:	e01b      	b.n	8005c9a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d013      	beq.n	8005c96 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d10e      	bne.n	8005c96 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	7afa      	ldrb	r2, [r7, #11]
 8005c82:	4611      	mov	r1, r2
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	4798      	blx	r3
 8005c88:	4603      	mov	r3, r0
 8005c8a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
 8005c94:	e002      	b.n	8005c9c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e000      	b.n	8005c9c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d009      	beq.n	8005ce8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6852      	ldr	r2, [r2, #4]
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ce8:	2340      	movs	r3, #64	; 0x40
 8005cea:	2200      	movs	r2, #0
 8005cec:	2100      	movs	r1, #0
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f001 f9b3 	bl	800705a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2240      	movs	r2, #64	; 0x40
 8005d00:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d04:	2340      	movs	r3, #64	; 0x40
 8005d06:	2200      	movs	r2, #0
 8005d08:	2180      	movs	r1, #128	; 0x80
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 f9a5 	bl	800705a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2240      	movs	r2, #64	; 0x40
 8005d1a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d105      	bne.n	8005d8e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d10b      	bne.n	8005dc6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	460b      	mov	r3, r1
 8005df4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d009      	beq.n	8005e48 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6852      	ldr	r2, [r2, #4]
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	4611      	mov	r1, r2
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	4798      	blx	r3
  }

  return USBD_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b087      	sub	sp, #28
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	3301      	adds	r3, #1
 8005e68:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e70:	8a3b      	ldrh	r3, [r7, #16]
 8005e72:	021b      	lsls	r3, r3, #8
 8005e74:	b21a      	sxth	r2, r3
 8005e76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	b21b      	sxth	r3, r3
 8005e7e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005e80:	89fb      	ldrh	r3, [r7, #14]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
	...

08005e90 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d004      	beq.n	8005eb4 <USBD_StdDevReq+0x24>
 8005eaa:	2b40      	cmp	r3, #64	; 0x40
 8005eac:	d002      	beq.n	8005eb4 <USBD_StdDevReq+0x24>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <USBD_StdDevReq+0x38>
 8005eb2:	e050      	b.n	8005f56 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	4798      	blx	r3
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8005ec6:	e04b      	b.n	8005f60 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b09      	cmp	r3, #9
 8005ece:	d83c      	bhi.n	8005f4a <USBD_StdDevReq+0xba>
 8005ed0:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <USBD_StdDevReq+0x48>)
 8005ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed6:	bf00      	nop
 8005ed8:	08005f2d 	.word	0x08005f2d
 8005edc:	08005f41 	.word	0x08005f41
 8005ee0:	08005f4b 	.word	0x08005f4b
 8005ee4:	08005f37 	.word	0x08005f37
 8005ee8:	08005f4b 	.word	0x08005f4b
 8005eec:	08005f0b 	.word	0x08005f0b
 8005ef0:	08005f01 	.word	0x08005f01
 8005ef4:	08005f4b 	.word	0x08005f4b
 8005ef8:	08005f23 	.word	0x08005f23
 8005efc:	08005f15 	.word	0x08005f15
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f9ce 	bl	80062a4 <USBD_GetDescriptor>
      break;
 8005f08:	e024      	b.n	8005f54 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fb33 	bl	8006578 <USBD_SetAddress>
      break;
 8005f12:	e01f      	b.n	8005f54 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fb70 	bl	80065fc <USBD_SetConfig>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f20:	e018      	b.n	8005f54 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fc0d 	bl	8006744 <USBD_GetConfig>
      break;
 8005f2a:	e013      	b.n	8005f54 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fc3c 	bl	80067ac <USBD_GetStatus>
      break;
 8005f34:	e00e      	b.n	8005f54 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fc6a 	bl	8006812 <USBD_SetFeature>
      break;
 8005f3e:	e009      	b.n	8005f54 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fc79 	bl	800683a <USBD_ClrFeature>
      break;
 8005f48:	e004      	b.n	8005f54 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fccf 	bl	80068f0 <USBD_CtlError>
      break;
 8005f52:	bf00      	nop
    }
    break;
 8005f54:	e004      	b.n	8005f60 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fcc9 	bl	80068f0 <USBD_CtlError>
    break;
 8005f5e:	bf00      	nop
  }

  return ret;
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop

08005f6c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	d003      	beq.n	8005f8e <USBD_StdItfReq+0x22>
 8005f86:	2b40      	cmp	r3, #64	; 0x40
 8005f88:	d001      	beq.n	8005f8e <USBD_StdItfReq+0x22>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d12a      	bne.n	8005fe4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f94:	3b01      	subs	r3, #1
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d81d      	bhi.n	8005fd6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	889b      	ldrh	r3, [r3, #4]
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d813      	bhi.n	8005fcc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	88db      	ldrh	r3, [r3, #6]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d110      	bne.n	8005fe0 <USBD_StdItfReq+0x74>
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10d      	bne.n	8005fe0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fd41 	bl	8006a4c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005fca:	e009      	b.n	8005fe0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fc8e 	bl	80068f0 <USBD_CtlError>
      break;
 8005fd4:	e004      	b.n	8005fe0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fc89 	bl	80068f0 <USBD_CtlError>
      break;
 8005fde:	e000      	b.n	8005fe2 <USBD_StdItfReq+0x76>
      break;
 8005fe0:	bf00      	nop
    }
    break;
 8005fe2:	e004      	b.n	8005fee <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fc82 	bl	80068f0 <USBD_CtlError>
    break;
 8005fec:	bf00      	nop
  }

  return ret;
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	889b      	ldrh	r3, [r3, #4]
 800600a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006014:	2b20      	cmp	r3, #32
 8006016:	d004      	beq.n	8006022 <USBD_StdEPReq+0x2a>
 8006018:	2b40      	cmp	r3, #64	; 0x40
 800601a:	d002      	beq.n	8006022 <USBD_StdEPReq+0x2a>
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <USBD_StdEPReq+0x3e>
 8006020:	e135      	b.n	800628e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	4798      	blx	r3
 8006030:	4603      	mov	r3, r0
 8006032:	73fb      	strb	r3, [r7, #15]
    break;
 8006034:	e130      	b.n	8006298 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d03e      	beq.n	80060bc <USBD_StdEPReq+0xc4>
 800603e:	2b03      	cmp	r3, #3
 8006040:	d002      	beq.n	8006048 <USBD_StdEPReq+0x50>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d077      	beq.n	8006136 <USBD_StdEPReq+0x13e>
 8006046:	e11c      	b.n	8006282 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800604e:	2b02      	cmp	r3, #2
 8006050:	d002      	beq.n	8006058 <USBD_StdEPReq+0x60>
 8006052:	2b03      	cmp	r3, #3
 8006054:	d015      	beq.n	8006082 <USBD_StdEPReq+0x8a>
 8006056:	e02b      	b.n	80060b0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006058:	7bbb      	ldrb	r3, [r7, #14]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00c      	beq.n	8006078 <USBD_StdEPReq+0x80>
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	2b80      	cmp	r3, #128	; 0x80
 8006062:	d009      	beq.n	8006078 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006064:	7bbb      	ldrb	r3, [r7, #14]
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 f83b 	bl	80070e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800606e:	2180      	movs	r1, #128	; 0x80
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 f837 	bl	80070e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006076:	e020      	b.n	80060ba <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fc38 	bl	80068f0 <USBD_CtlError>
        break;
 8006080:	e01b      	b.n	80060ba <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	885b      	ldrh	r3, [r3, #2]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10e      	bne.n	80060a8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800608a:	7bbb      	ldrb	r3, [r7, #14]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00b      	beq.n	80060a8 <USBD_StdEPReq+0xb0>
 8006090:	7bbb      	ldrb	r3, [r7, #14]
 8006092:	2b80      	cmp	r3, #128	; 0x80
 8006094:	d008      	beq.n	80060a8 <USBD_StdEPReq+0xb0>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	88db      	ldrh	r3, [r3, #6]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d104      	bne.n	80060a8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 f81e 	bl	80070e4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fccf 	bl	8006a4c <USBD_CtlSendStatus>

        break;
 80060ae:	e004      	b.n	80060ba <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fc1c 	bl	80068f0 <USBD_CtlError>
        break;
 80060b8:	bf00      	nop
      }
      break;
 80060ba:	e0e7      	b.n	800628c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d002      	beq.n	80060cc <USBD_StdEPReq+0xd4>
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d015      	beq.n	80060f6 <USBD_StdEPReq+0xfe>
 80060ca:	e02d      	b.n	8006128 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060cc:	7bbb      	ldrb	r3, [r7, #14]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00c      	beq.n	80060ec <USBD_StdEPReq+0xf4>
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
 80060d4:	2b80      	cmp	r3, #128	; 0x80
 80060d6:	d009      	beq.n	80060ec <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80060d8:	7bbb      	ldrb	r3, [r7, #14]
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 f801 	bl	80070e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060e2:	2180      	movs	r1, #128	; 0x80
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fffd 	bl	80070e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80060ea:	e023      	b.n	8006134 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fbfe 	bl	80068f0 <USBD_CtlError>
        break;
 80060f4:	e01e      	b.n	8006134 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	885b      	ldrh	r3, [r3, #2]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d119      	bne.n	8006132 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80060fe:	7bbb      	ldrb	r3, [r7, #14]
 8006100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006104:	2b00      	cmp	r3, #0
 8006106:	d004      	beq.n	8006112 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006108:	7bbb      	ldrb	r3, [r7, #14]
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 f808 	bl	8007122 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fc9a 	bl	8006a4c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4798      	blx	r3
        }
        break;
 8006126:	e004      	b.n	8006132 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fbe0 	bl	80068f0 <USBD_CtlError>
        break;
 8006130:	e000      	b.n	8006134 <USBD_StdEPReq+0x13c>
        break;
 8006132:	bf00      	nop
      }
      break;
 8006134:	e0aa      	b.n	800628c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800613c:	2b02      	cmp	r3, #2
 800613e:	d002      	beq.n	8006146 <USBD_StdEPReq+0x14e>
 8006140:	2b03      	cmp	r3, #3
 8006142:	d032      	beq.n	80061aa <USBD_StdEPReq+0x1b2>
 8006144:	e097      	b.n	8006276 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006146:	7bbb      	ldrb	r3, [r7, #14]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <USBD_StdEPReq+0x164>
 800614c:	7bbb      	ldrb	r3, [r7, #14]
 800614e:	2b80      	cmp	r3, #128	; 0x80
 8006150:	d004      	beq.n	800615c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fbcb 	bl	80068f0 <USBD_CtlError>
          break;
 800615a:	e091      	b.n	8006280 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800615c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006160:	2b00      	cmp	r3, #0
 8006162:	da0b      	bge.n	800617c <USBD_StdEPReq+0x184>
 8006164:	7bbb      	ldrb	r3, [r7, #14]
 8006166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	3310      	adds	r3, #16
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	4413      	add	r3, r2
 8006178:	3304      	adds	r3, #4
 800617a:	e00b      	b.n	8006194 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	4413      	add	r3, r2
 8006192:	3304      	adds	r3, #4
 8006194:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2202      	movs	r2, #2
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fc15 	bl	80069d2 <USBD_CtlSendData>
        break;
 80061a8:	e06a      	b.n	8006280 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80061aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	da11      	bge.n	80061d6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061b2:	7bbb      	ldrb	r3, [r7, #14]
 80061b4:	f003 020f 	and.w	r2, r3, #15
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	440b      	add	r3, r1
 80061c4:	3324      	adds	r3, #36	; 0x24
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d117      	bne.n	80061fc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fb8e 	bl	80068f0 <USBD_CtlError>
            break;
 80061d4:	e054      	b.n	8006280 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061d6:	7bbb      	ldrb	r3, [r7, #14]
 80061d8:	f003 020f 	and.w	r2, r3, #15
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fb7b 	bl	80068f0 <USBD_CtlError>
            break;
 80061fa:	e041      	b.n	8006280 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006200:	2b00      	cmp	r3, #0
 8006202:	da0b      	bge.n	800621c <USBD_StdEPReq+0x224>
 8006204:	7bbb      	ldrb	r3, [r7, #14]
 8006206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	3310      	adds	r3, #16
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	4413      	add	r3, r2
 8006218:	3304      	adds	r3, #4
 800621a:	e00b      	b.n	8006234 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800621c:	7bbb      	ldrb	r3, [r7, #14]
 800621e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	4413      	add	r3, r2
 8006232:	3304      	adds	r3, #4
 8006234:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006236:	7bbb      	ldrb	r3, [r7, #14]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <USBD_StdEPReq+0x24a>
 800623c:	7bbb      	ldrb	r3, [r7, #14]
 800623e:	2b80      	cmp	r3, #128	; 0x80
 8006240:	d103      	bne.n	800624a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	e00e      	b.n	8006268 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800624a:	7bbb      	ldrb	r3, [r7, #14]
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 ff86 	bl	8007160 <USBD_LL_IsStallEP>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2201      	movs	r2, #1
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e002      	b.n	8006268 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2202      	movs	r2, #2
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fbaf 	bl	80069d2 <USBD_CtlSendData>
          break;
 8006274:	e004      	b.n	8006280 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fb39 	bl	80068f0 <USBD_CtlError>
        break;
 800627e:	bf00      	nop
      }
      break;
 8006280:	e004      	b.n	800628c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fb33 	bl	80068f0 <USBD_CtlError>
      break;
 800628a:	bf00      	nop
    }
    break;
 800628c:	e004      	b.n	8006298 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fb2d 	bl	80068f0 <USBD_CtlError>
    break;
 8006296:	bf00      	nop
  }

  return ret;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	885b      	ldrh	r3, [r3, #2]
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	2b06      	cmp	r3, #6
 80062c6:	f200 8128 	bhi.w	800651a <USBD_GetDescriptor+0x276>
 80062ca:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <USBD_GetDescriptor+0x2c>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	080062ed 	.word	0x080062ed
 80062d4:	08006305 	.word	0x08006305
 80062d8:	08006345 	.word	0x08006345
 80062dc:	0800651b 	.word	0x0800651b
 80062e0:	0800651b 	.word	0x0800651b
 80062e4:	080064bb 	.word	0x080064bb
 80062e8:	080064e7 	.word	0x080064e7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	7c12      	ldrb	r2, [r2, #16]
 80062f8:	f107 0108 	add.w	r1, r7, #8
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
 8006300:	60f8      	str	r0, [r7, #12]
    break;
 8006302:	e112      	b.n	800652a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	7c1b      	ldrb	r3, [r3, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10d      	bne.n	8006328 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	f107 0208 	add.w	r2, r7, #8
 8006318:	4610      	mov	r0, r2
 800631a:	4798      	blx	r3
 800631c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3301      	adds	r3, #1
 8006322:	2202      	movs	r2, #2
 8006324:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006326:	e100      	b.n	800652a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	f107 0208 	add.w	r2, r7, #8
 8006334:	4610      	mov	r0, r2
 8006336:	4798      	blx	r3
 8006338:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3301      	adds	r3, #1
 800633e:	2202      	movs	r2, #2
 8006340:	701a      	strb	r2, [r3, #0]
    break;
 8006342:	e0f2      	b.n	800652a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	885b      	ldrh	r3, [r3, #2]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b05      	cmp	r3, #5
 800634c:	f200 80ac 	bhi.w	80064a8 <USBD_GetDescriptor+0x204>
 8006350:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <USBD_GetDescriptor+0xb4>)
 8006352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006356:	bf00      	nop
 8006358:	08006371 	.word	0x08006371
 800635c:	080063a5 	.word	0x080063a5
 8006360:	080063d9 	.word	0x080063d9
 8006364:	0800640d 	.word	0x0800640d
 8006368:	08006441 	.word	0x08006441
 800636c:	08006475 	.word	0x08006475
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	7c12      	ldrb	r2, [r2, #16]
 8006388:	f107 0108 	add.w	r1, r7, #8
 800638c:	4610      	mov	r0, r2
 800638e:	4798      	blx	r3
 8006390:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006392:	e091      	b.n	80064b8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 faaa 	bl	80068f0 <USBD_CtlError>
        err++;
 800639c:	7afb      	ldrb	r3, [r7, #11]
 800639e:	3301      	adds	r3, #1
 80063a0:	72fb      	strb	r3, [r7, #11]
      break;
 80063a2:	e089      	b.n	80064b8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00b      	beq.n	80063c8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	7c12      	ldrb	r2, [r2, #16]
 80063bc:	f107 0108 	add.w	r1, r7, #8
 80063c0:	4610      	mov	r0, r2
 80063c2:	4798      	blx	r3
 80063c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063c6:	e077      	b.n	80064b8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fa90 	bl	80068f0 <USBD_CtlError>
        err++;
 80063d0:	7afb      	ldrb	r3, [r7, #11]
 80063d2:	3301      	adds	r3, #1
 80063d4:	72fb      	strb	r3, [r7, #11]
      break;
 80063d6:	e06f      	b.n	80064b8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00b      	beq.n	80063fc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	7c12      	ldrb	r2, [r2, #16]
 80063f0:	f107 0108 	add.w	r1, r7, #8
 80063f4:	4610      	mov	r0, r2
 80063f6:	4798      	blx	r3
 80063f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063fa:	e05d      	b.n	80064b8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa76 	bl	80068f0 <USBD_CtlError>
        err++;
 8006404:	7afb      	ldrb	r3, [r7, #11]
 8006406:	3301      	adds	r3, #1
 8006408:	72fb      	strb	r3, [r7, #11]
      break;
 800640a:	e055      	b.n	80064b8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00b      	beq.n	8006430 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	7c12      	ldrb	r2, [r2, #16]
 8006424:	f107 0108 	add.w	r1, r7, #8
 8006428:	4610      	mov	r0, r2
 800642a:	4798      	blx	r3
 800642c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800642e:	e043      	b.n	80064b8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fa5c 	bl	80068f0 <USBD_CtlError>
        err++;
 8006438:	7afb      	ldrb	r3, [r7, #11]
 800643a:	3301      	adds	r3, #1
 800643c:	72fb      	strb	r3, [r7, #11]
      break;
 800643e:	e03b      	b.n	80064b8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00b      	beq.n	8006464 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	7c12      	ldrb	r2, [r2, #16]
 8006458:	f107 0108 	add.w	r1, r7, #8
 800645c:	4610      	mov	r0, r2
 800645e:	4798      	blx	r3
 8006460:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006462:	e029      	b.n	80064b8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fa42 	bl	80068f0 <USBD_CtlError>
        err++;
 800646c:	7afb      	ldrb	r3, [r7, #11]
 800646e:	3301      	adds	r3, #1
 8006470:	72fb      	strb	r3, [r7, #11]
      break;
 8006472:	e021      	b.n	80064b8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	7c12      	ldrb	r2, [r2, #16]
 800648c:	f107 0108 	add.w	r1, r7, #8
 8006490:	4610      	mov	r0, r2
 8006492:	4798      	blx	r3
 8006494:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006496:	e00f      	b.n	80064b8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa28 	bl	80068f0 <USBD_CtlError>
        err++;
 80064a0:	7afb      	ldrb	r3, [r7, #11]
 80064a2:	3301      	adds	r3, #1
 80064a4:	72fb      	strb	r3, [r7, #11]
      break;
 80064a6:	e007      	b.n	80064b8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fa20 	bl	80068f0 <USBD_CtlError>
      err++;
 80064b0:	7afb      	ldrb	r3, [r7, #11]
 80064b2:	3301      	adds	r3, #1
 80064b4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80064b6:	bf00      	nop
    }
    break;
 80064b8:	e037      	b.n	800652a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	7c1b      	ldrb	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ca:	f107 0208 	add.w	r2, r7, #8
 80064ce:	4610      	mov	r0, r2
 80064d0:	4798      	blx	r3
 80064d2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80064d4:	e029      	b.n	800652a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fa09 	bl	80068f0 <USBD_CtlError>
      err++;
 80064de:	7afb      	ldrb	r3, [r7, #11]
 80064e0:	3301      	adds	r3, #1
 80064e2:	72fb      	strb	r3, [r7, #11]
    break;
 80064e4:	e021      	b.n	800652a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	7c1b      	ldrb	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10d      	bne.n	800650a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	f107 0208 	add.w	r2, r7, #8
 80064fa:	4610      	mov	r0, r2
 80064fc:	4798      	blx	r3
 80064fe:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3301      	adds	r3, #1
 8006504:	2207      	movs	r2, #7
 8006506:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006508:	e00f      	b.n	800652a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f9ef 	bl	80068f0 <USBD_CtlError>
      err++;
 8006512:	7afb      	ldrb	r3, [r7, #11]
 8006514:	3301      	adds	r3, #1
 8006516:	72fb      	strb	r3, [r7, #11]
    break;
 8006518:	e007      	b.n	800652a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f9e7 	bl	80068f0 <USBD_CtlError>
    err++;
 8006522:	7afb      	ldrb	r3, [r7, #11]
 8006524:	3301      	adds	r3, #1
 8006526:	72fb      	strb	r3, [r7, #11]
    break;
 8006528:	bf00      	nop
  }

  if (err != 0U)
 800652a:	7afb      	ldrb	r3, [r7, #11]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d11e      	bne.n	800656e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	88db      	ldrh	r3, [r3, #6]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d016      	beq.n	8006566 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006538:	893b      	ldrh	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00e      	beq.n	800655c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	88da      	ldrh	r2, [r3, #6]
 8006542:	893b      	ldrh	r3, [r7, #8]
 8006544:	4293      	cmp	r3, r2
 8006546:	bf28      	it	cs
 8006548:	4613      	movcs	r3, r2
 800654a:	b29b      	uxth	r3, r3
 800654c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800654e:	893b      	ldrh	r3, [r7, #8]
 8006550:	461a      	mov	r2, r3
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fa3c 	bl	80069d2 <USBD_CtlSendData>
 800655a:	e009      	b.n	8006570 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f9c6 	bl	80068f0 <USBD_CtlError>
 8006564:	e004      	b.n	8006570 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa70 	bl	8006a4c <USBD_CtlSendStatus>
 800656c:	e000      	b.n	8006570 <USBD_GetDescriptor+0x2cc>
    return;
 800656e:	bf00      	nop
    }
  }
}
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop

08006578 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	889b      	ldrh	r3, [r3, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d130      	bne.n	80065ec <USBD_SetAddress+0x74>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	88db      	ldrh	r3, [r3, #6]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d12c      	bne.n	80065ec <USBD_SetAddress+0x74>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	885b      	ldrh	r3, [r3, #2]
 8006596:	2b7f      	cmp	r3, #127	; 0x7f
 8006598:	d828      	bhi.n	80065ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	885b      	ldrh	r3, [r3, #2]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d104      	bne.n	80065ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f99c 	bl	80068f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b8:	e01c      	b.n	80065f4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	7bfa      	ldrb	r2, [r7, #15]
 80065be:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fdf6 	bl	80071b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fa3d 	bl	8006a4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d004      	beq.n	80065e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e0:	e008      	b.n	80065f4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ea:	e003      	b.n	80065f4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f97e 	bl	80068f0 <USBD_CtlError>
  }
}
 80065f4:	bf00      	nop
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	885b      	ldrh	r3, [r3, #2]
 800660e:	b2da      	uxtb	r2, r3
 8006610:	4b4b      	ldr	r3, [pc, #300]	; (8006740 <USBD_SetConfig+0x144>)
 8006612:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006614:	4b4a      	ldr	r3, [pc, #296]	; (8006740 <USBD_SetConfig+0x144>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d905      	bls.n	8006628 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f966 	bl	80068f0 <USBD_CtlError>
    return USBD_FAIL;
 8006624:	2303      	movs	r3, #3
 8006626:	e087      	b.n	8006738 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800662e:	2b02      	cmp	r3, #2
 8006630:	d002      	beq.n	8006638 <USBD_SetConfig+0x3c>
 8006632:	2b03      	cmp	r3, #3
 8006634:	d025      	beq.n	8006682 <USBD_SetConfig+0x86>
 8006636:	e071      	b.n	800671c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006638:	4b41      	ldr	r3, [pc, #260]	; (8006740 <USBD_SetConfig+0x144>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01c      	beq.n	800667a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006640:	4b3f      	ldr	r3, [pc, #252]	; (8006740 <USBD_SetConfig+0x144>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800664a:	4b3d      	ldr	r3, [pc, #244]	; (8006740 <USBD_SetConfig+0x144>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff f9a7 	bl	80059a4 <USBD_SetClassConfig>
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f944 	bl	80068f0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006668:	e065      	b.n	8006736 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f9ee 	bl	8006a4c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2203      	movs	r2, #3
 8006674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006678:	e05d      	b.n	8006736 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f9e6 	bl	8006a4c <USBD_CtlSendStatus>
    break;
 8006680:	e059      	b.n	8006736 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006682:	4b2f      	ldr	r3, [pc, #188]	; (8006740 <USBD_SetConfig+0x144>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d112      	bne.n	80066b0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006692:	4b2b      	ldr	r3, [pc, #172]	; (8006740 <USBD_SetConfig+0x144>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800669c:	4b28      	ldr	r3, [pc, #160]	; (8006740 <USBD_SetConfig+0x144>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff f99a 	bl	80059dc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f9cf 	bl	8006a4c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80066ae:	e042      	b.n	8006736 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80066b0:	4b23      	ldr	r3, [pc, #140]	; (8006740 <USBD_SetConfig+0x144>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	461a      	mov	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d02a      	beq.n	8006714 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	4619      	mov	r1, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff f988 	bl	80059dc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80066cc:	4b1c      	ldr	r3, [pc, #112]	; (8006740 <USBD_SetConfig+0x144>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80066d6:	4b1a      	ldr	r3, [pc, #104]	; (8006740 <USBD_SetConfig+0x144>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	4619      	mov	r1, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7ff f961 	bl	80059a4 <USBD_SetClassConfig>
 80066e2:	4603      	mov	r3, r0
 80066e4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00f      	beq.n	800670c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f8fe 	bl	80068f0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff f96d 	bl	80059dc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2202      	movs	r2, #2
 8006706:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800670a:	e014      	b.n	8006736 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f99d 	bl	8006a4c <USBD_CtlSendStatus>
    break;
 8006712:	e010      	b.n	8006736 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f999 	bl	8006a4c <USBD_CtlSendStatus>
    break;
 800671a:	e00c      	b.n	8006736 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f8e6 	bl	80068f0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <USBD_SetConfig+0x144>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff f956 	bl	80059dc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006730:	2303      	movs	r3, #3
 8006732:	73fb      	strb	r3, [r7, #15]
    break;
 8006734:	bf00      	nop
  }

  return ret;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	200001e8 	.word	0x200001e8

08006744 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	88db      	ldrh	r3, [r3, #6]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d004      	beq.n	8006760 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f8c9 	bl	80068f0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800675e:	e021      	b.n	80067a4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006766:	2b01      	cmp	r3, #1
 8006768:	db17      	blt.n	800679a <USBD_GetConfig+0x56>
 800676a:	2b02      	cmp	r3, #2
 800676c:	dd02      	ble.n	8006774 <USBD_GetConfig+0x30>
 800676e:	2b03      	cmp	r3, #3
 8006770:	d00b      	beq.n	800678a <USBD_GetConfig+0x46>
 8006772:	e012      	b.n	800679a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3308      	adds	r3, #8
 800677e:	2201      	movs	r2, #1
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f925 	bl	80069d2 <USBD_CtlSendData>
      break;
 8006788:	e00c      	b.n	80067a4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3304      	adds	r3, #4
 800678e:	2201      	movs	r2, #1
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f91d 	bl	80069d2 <USBD_CtlSendData>
      break;
 8006798:	e004      	b.n	80067a4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f8a7 	bl	80068f0 <USBD_CtlError>
      break;
 80067a2:	bf00      	nop
}
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067bc:	3b01      	subs	r3, #1
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d81e      	bhi.n	8006800 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	88db      	ldrh	r3, [r3, #6]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d004      	beq.n	80067d4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f88f 	bl	80068f0 <USBD_CtlError>
      break;
 80067d2:	e01a      	b.n	800680a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f043 0202 	orr.w	r2, r3, #2
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	330c      	adds	r3, #12
 80067f4:	2202      	movs	r2, #2
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f8ea 	bl	80069d2 <USBD_CtlSendData>
    break;
 80067fe:	e004      	b.n	800680a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f874 	bl	80068f0 <USBD_CtlError>
    break;
 8006808:	bf00      	nop
  }
}
 800680a:	bf00      	nop
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	885b      	ldrh	r3, [r3, #2]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d106      	bne.n	8006832 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f90d 	bl	8006a4c <USBD_CtlSendStatus>
  }
}
 8006832:	bf00      	nop
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800684a:	3b01      	subs	r3, #1
 800684c:	2b02      	cmp	r3, #2
 800684e:	d80b      	bhi.n	8006868 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	885b      	ldrh	r3, [r3, #2]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d10c      	bne.n	8006872 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f8f3 	bl	8006a4c <USBD_CtlSendStatus>
      }
      break;
 8006866:	e004      	b.n	8006872 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f840 	bl	80068f0 <USBD_CtlError>
      break;
 8006870:	e000      	b.n	8006874 <USBD_ClrFeature+0x3a>
      break;
 8006872:	bf00      	nop
  }
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	781a      	ldrb	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3301      	adds	r3, #1
 8006896:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3301      	adds	r3, #1
 80068a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f7ff fad3 	bl	8005e52 <SWAPBYTE>
 80068ac:	4603      	mov	r3, r0
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3301      	adds	r3, #1
 80068be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7ff fac6 	bl	8005e52 <SWAPBYTE>
 80068c6:	4603      	mov	r3, r0
 80068c8:	461a      	mov	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3301      	adds	r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3301      	adds	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7ff fab9 	bl	8005e52 <SWAPBYTE>
 80068e0:	4603      	mov	r3, r0
 80068e2:	461a      	mov	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	80da      	strh	r2, [r3, #6]
}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80068fa:	2180      	movs	r1, #128	; 0x80
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fbf1 	bl	80070e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006902:	2100      	movs	r1, #0
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fbed 	bl	80070e4 <USBD_LL_StallEP>
}
 800690a:	bf00      	nop
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b086      	sub	sp, #24
 8006916:	af00      	add	r7, sp, #0
 8006918:	60f8      	str	r0, [r7, #12]
 800691a:	60b9      	str	r1, [r7, #8]
 800691c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d036      	beq.n	8006996 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800692c:	6938      	ldr	r0, [r7, #16]
 800692e:	f000 f836 	bl	800699e <USBD_GetLen>
 8006932:	4603      	mov	r3, r0
 8006934:	3301      	adds	r3, #1
 8006936:	b29b      	uxth	r3, r3
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006940:	7dfb      	ldrb	r3, [r7, #23]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	4413      	add	r3, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	7812      	ldrb	r2, [r2, #0]
 800694a:	701a      	strb	r2, [r3, #0]
  idx++;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	3301      	adds	r3, #1
 8006950:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	4413      	add	r3, r2
 8006958:	2203      	movs	r2, #3
 800695a:	701a      	strb	r2, [r3, #0]
  idx++;
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	3301      	adds	r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006962:	e013      	b.n	800698c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	4413      	add	r3, r2
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	7812      	ldrb	r2, [r2, #0]
 800696e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	3301      	adds	r3, #1
 8006974:	613b      	str	r3, [r7, #16]
    idx++;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	3301      	adds	r3, #1
 800697a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	4413      	add	r3, r2
 8006982:	2200      	movs	r2, #0
 8006984:	701a      	strb	r2, [r3, #0]
    idx++;
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	3301      	adds	r3, #1
 800698a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e7      	bne.n	8006964 <USBD_GetString+0x52>
 8006994:	e000      	b.n	8006998 <USBD_GetString+0x86>
    return;
 8006996:	bf00      	nop
  }
}
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800699e:	b480      	push	{r7}
 80069a0:	b085      	sub	sp, #20
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80069ae:	e005      	b.n	80069bc <USBD_GetLen+0x1e>
  {
    len++;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	3301      	adds	r3, #1
 80069b4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	3301      	adds	r3, #1
 80069ba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1f5      	bne.n	80069b0 <USBD_GetLen+0x12>
  }

  return len;
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2202      	movs	r2, #2
 80069e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	2100      	movs	r1, #0
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 fbfc 	bl	80071f6 <USBD_LL_Transmit>

  return USBD_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	2100      	movs	r1, #0
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fbeb 	bl	80071f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 fbfb 	bl	8007238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2204      	movs	r2, #4
 8006a58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2100      	movs	r1, #0
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fbc7 	bl	80071f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b082      	sub	sp, #8
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2205      	movs	r2, #5
 8006a7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a82:	2300      	movs	r3, #0
 8006a84:	2200      	movs	r2, #0
 8006a86:	2100      	movs	r1, #0
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fbd5 	bl	8007238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	490e      	ldr	r1, [pc, #56]	; (8006ad8 <MX_USB_DEVICE_Init+0x40>)
 8006aa0:	480e      	ldr	r0, [pc, #56]	; (8006adc <MX_USB_DEVICE_Init+0x44>)
 8006aa2:	f7fe ff11 	bl	80058c8 <USBD_Init>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006aac:	f7fa fc10 	bl	80012d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006ab0:	490b      	ldr	r1, [pc, #44]	; (8006ae0 <MX_USB_DEVICE_Init+0x48>)
 8006ab2:	480a      	ldr	r0, [pc, #40]	; (8006adc <MX_USB_DEVICE_Init+0x44>)
 8006ab4:	f7fe ff3e 	bl	8005934 <USBD_RegisterClass>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006abe:	f7fa fc07 	bl	80012d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ac2:	4806      	ldr	r0, [pc, #24]	; (8006adc <MX_USB_DEVICE_Init+0x44>)
 8006ac4:	f7fe ff57 	bl	8005976 <USBD_Start>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006ace:	f7fa fbff 	bl	80012d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ad2:	bf00      	nop
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000114 	.word	0x20000114
 8006adc:	20000238 	.word	0x20000238
 8006ae0:	2000000c 	.word	0x2000000c

08006ae4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	6039      	str	r1, [r7, #0]
 8006aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2212      	movs	r2, #18
 8006af4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006af6:	4b03      	ldr	r3, [pc, #12]	; (8006b04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	20000130 	.word	0x20000130

08006b08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	4603      	mov	r3, r0
 8006b10:	6039      	str	r1, [r7, #0]
 8006b12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2204      	movs	r2, #4
 8006b18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b1a:	4b03      	ldr	r3, [pc, #12]	; (8006b28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	20000144 	.word	0x20000144

08006b2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	6039      	str	r1, [r7, #0]
 8006b36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b38:	79fb      	ldrb	r3, [r7, #7]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d105      	bne.n	8006b4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	4907      	ldr	r1, [pc, #28]	; (8006b60 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b42:	4808      	ldr	r0, [pc, #32]	; (8006b64 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b44:	f7ff fee5 	bl	8006912 <USBD_GetString>
 8006b48:	e004      	b.n	8006b54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	4904      	ldr	r1, [pc, #16]	; (8006b60 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b4e:	4805      	ldr	r0, [pc, #20]	; (8006b64 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b50:	f7ff fedf 	bl	8006912 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b54:	4b02      	ldr	r3, [pc, #8]	; (8006b60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000508 	.word	0x20000508
 8006b64:	08008630 	.word	0x08008630

08006b68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	6039      	str	r1, [r7, #0]
 8006b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	4904      	ldr	r1, [pc, #16]	; (8006b88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006b78:	4804      	ldr	r0, [pc, #16]	; (8006b8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006b7a:	f7ff feca 	bl	8006912 <USBD_GetString>
  return USBD_StrDesc;
 8006b7e:	4b02      	ldr	r3, [pc, #8]	; (8006b88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	20000508 	.word	0x20000508
 8006b8c:	08008648 	.word	0x08008648

08006b90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4603      	mov	r3, r0
 8006b98:	6039      	str	r1, [r7, #0]
 8006b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	221a      	movs	r2, #26
 8006ba0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006ba2:	f000 f843 	bl	8006c2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006ba6:	4b02      	ldr	r3, [pc, #8]	; (8006bb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20000148 	.word	0x20000148

08006bb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	6039      	str	r1, [r7, #0]
 8006bbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d105      	bne.n	8006bd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	4907      	ldr	r1, [pc, #28]	; (8006be8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bca:	4808      	ldr	r0, [pc, #32]	; (8006bec <USBD_FS_ConfigStrDescriptor+0x38>)
 8006bcc:	f7ff fea1 	bl	8006912 <USBD_GetString>
 8006bd0:	e004      	b.n	8006bdc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	4904      	ldr	r1, [pc, #16]	; (8006be8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bd6:	4805      	ldr	r0, [pc, #20]	; (8006bec <USBD_FS_ConfigStrDescriptor+0x38>)
 8006bd8:	f7ff fe9b 	bl	8006912 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bdc:	4b02      	ldr	r3, [pc, #8]	; (8006be8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20000508 	.word	0x20000508
 8006bec:	0800865c 	.word	0x0800865c

08006bf0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	6039      	str	r1, [r7, #0]
 8006bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d105      	bne.n	8006c0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	4907      	ldr	r1, [pc, #28]	; (8006c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c06:	4808      	ldr	r0, [pc, #32]	; (8006c28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c08:	f7ff fe83 	bl	8006912 <USBD_GetString>
 8006c0c:	e004      	b.n	8006c18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	4904      	ldr	r1, [pc, #16]	; (8006c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c12:	4805      	ldr	r0, [pc, #20]	; (8006c28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c14:	f7ff fe7d 	bl	8006912 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c18:	4b02      	ldr	r3, [pc, #8]	; (8006c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20000508 	.word	0x20000508
 8006c28:	08008668 	.word	0x08008668

08006c2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c32:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <Get_SerialNum+0x44>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c38:	4b0e      	ldr	r3, [pc, #56]	; (8006c74 <Get_SerialNum+0x48>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c3e:	4b0e      	ldr	r3, [pc, #56]	; (8006c78 <Get_SerialNum+0x4c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d009      	beq.n	8006c66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c52:	2208      	movs	r2, #8
 8006c54:	4909      	ldr	r1, [pc, #36]	; (8006c7c <Get_SerialNum+0x50>)
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 f814 	bl	8006c84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c5c:	2204      	movs	r2, #4
 8006c5e:	4908      	ldr	r1, [pc, #32]	; (8006c80 <Get_SerialNum+0x54>)
 8006c60:	68b8      	ldr	r0, [r7, #8]
 8006c62:	f000 f80f 	bl	8006c84 <IntToUnicode>
  }
}
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	1fff7a10 	.word	0x1fff7a10
 8006c74:	1fff7a14 	.word	0x1fff7a14
 8006c78:	1fff7a18 	.word	0x1fff7a18
 8006c7c:	2000014a 	.word	0x2000014a
 8006c80:	2000015a 	.word	0x2000015a

08006c84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c96:	2300      	movs	r3, #0
 8006c98:	75fb      	strb	r3, [r7, #23]
 8006c9a:	e027      	b.n	8006cec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	0f1b      	lsrs	r3, r3, #28
 8006ca0:	2b09      	cmp	r3, #9
 8006ca2:	d80b      	bhi.n	8006cbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	0f1b      	lsrs	r3, r3, #28
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	4619      	mov	r1, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	440b      	add	r3, r1
 8006cb4:	3230      	adds	r2, #48	; 0x30
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]
 8006cba:	e00a      	b.n	8006cd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	0f1b      	lsrs	r3, r3, #28
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	440b      	add	r3, r1
 8006ccc:	3237      	adds	r2, #55	; 0x37
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	3301      	adds	r3, #1
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	75fb      	strb	r3, [r7, #23]
 8006cec:	7dfa      	ldrb	r2, [r7, #23]
 8006cee:	79fb      	ldrb	r3, [r7, #7]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d3d3      	bcc.n	8006c9c <IntToUnicode+0x18>
  }
}
 8006cf4:	bf00      	nop
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08a      	sub	sp, #40	; 0x28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d08:	f107 0314 	add.w	r3, r7, #20
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	609a      	str	r2, [r3, #8]
 8006d14:	60da      	str	r2, [r3, #12]
 8006d16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d20:	d13a      	bne.n	8006d98 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d22:	2300      	movs	r3, #0
 8006d24:	613b      	str	r3, [r7, #16]
 8006d26:	4b1e      	ldr	r3, [pc, #120]	; (8006da0 <HAL_PCD_MspInit+0xa0>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	4a1d      	ldr	r2, [pc, #116]	; (8006da0 <HAL_PCD_MspInit+0xa0>)
 8006d2c:	f043 0301 	orr.w	r3, r3, #1
 8006d30:	6313      	str	r3, [r2, #48]	; 0x30
 8006d32:	4b1b      	ldr	r3, [pc, #108]	; (8006da0 <HAL_PCD_MspInit+0xa0>)
 8006d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006d3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d44:	2302      	movs	r3, #2
 8006d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d50:	230a      	movs	r3, #10
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d54:	f107 0314 	add.w	r3, r7, #20
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4812      	ldr	r0, [pc, #72]	; (8006da4 <HAL_PCD_MspInit+0xa4>)
 8006d5c:	f7fa fd7a 	bl	8001854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d60:	4b0f      	ldr	r3, [pc, #60]	; (8006da0 <HAL_PCD_MspInit+0xa0>)
 8006d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d64:	4a0e      	ldr	r2, [pc, #56]	; (8006da0 <HAL_PCD_MspInit+0xa0>)
 8006d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d6a:	6353      	str	r3, [r2, #52]	; 0x34
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	4b0b      	ldr	r3, [pc, #44]	; (8006da0 <HAL_PCD_MspInit+0xa0>)
 8006d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d74:	4a0a      	ldr	r2, [pc, #40]	; (8006da0 <HAL_PCD_MspInit+0xa0>)
 8006d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d7a:	6453      	str	r3, [r2, #68]	; 0x44
 8006d7c:	4b08      	ldr	r3, [pc, #32]	; (8006da0 <HAL_PCD_MspInit+0xa0>)
 8006d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	2043      	movs	r0, #67	; 0x43
 8006d8e:	f7fa fd2a 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d92:	2043      	movs	r0, #67	; 0x43
 8006d94:	f7fa fd43 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d98:	bf00      	nop
 8006d9a:	3728      	adds	r7, #40	; 0x28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	40023800 	.word	0x40023800
 8006da4:	40020000 	.word	0x40020000

08006da8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	f7fe fe24 	bl	8005a0c <USBD_LL_SetupStage>
}
 8006dc4:	bf00      	nop
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006dde:	78fa      	ldrb	r2, [r7, #3]
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	1a9b      	subs	r3, r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	4619      	mov	r1, r3
 8006df6:	f7fe fe5c 	bl	8005ab2 <USBD_LL_DataOutStage>
}
 8006dfa:	bf00      	nop
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006e14:	78fa      	ldrb	r2, [r7, #3]
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	1a9b      	subs	r3, r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	3348      	adds	r3, #72	; 0x48
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	78fb      	ldrb	r3, [r7, #3]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	f7fe fea5 	bl	8005b78 <USBD_LL_DataInStage>
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fe ffa9 	bl	8005d9c <USBD_LL_SOF>
}
 8006e4a:	bf00      	nop
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d102      	bne.n	8006e6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
 8006e6a:	e008      	b.n	8006e7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d102      	bne.n	8006e7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006e74:	2301      	movs	r3, #1
 8006e76:	73fb      	strb	r3, [r7, #15]
 8006e78:	e001      	b.n	8006e7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006e7a:	f7fa fa29 	bl	80012d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e84:	7bfa      	ldrb	r2, [r7, #15]
 8006e86:	4611      	mov	r1, r2
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fe ff4c 	bl	8005d26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe ff05 	bl	8005ca4 <USBD_LL_Reset>
}
 8006e9a:	bf00      	nop
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe ff47 	bl	8005d46 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6812      	ldr	r2, [r2, #0]
 8006ec6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006eca:	f043 0301 	orr.w	r3, r3, #1
 8006ece:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ed8:	4b04      	ldr	r3, [pc, #16]	; (8006eec <HAL_PCD_SuspendCallback+0x48>)
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	4a03      	ldr	r2, [pc, #12]	; (8006eec <HAL_PCD_SuspendCallback+0x48>)
 8006ede:	f043 0306 	orr.w	r3, r3, #6
 8006ee2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ee4:	bf00      	nop
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	e000ed00 	.word	0xe000ed00

08006ef0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe ff36 	bl	8005d70 <USBD_LL_Resume>
}
 8006f04:	bf00      	nop
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f1e:	78fa      	ldrb	r2, [r7, #3]
 8006f20:	4611      	mov	r1, r2
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe ff61 	bl	8005dea <USBD_LL_IsoOUTIncomplete>
}
 8006f28:	bf00      	nop
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f42:	78fa      	ldrb	r2, [r7, #3]
 8006f44:	4611      	mov	r1, r2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe ff42 	bl	8005dd0 <USBD_LL_IsoINIncomplete>
}
 8006f4c:	bf00      	nop
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe ff4e 	bl	8005e04 <USBD_LL_DevConnected>
}
 8006f68:	bf00      	nop
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe ff4b 	bl	8005e1a <USBD_LL_DevDisconnected>
}
 8006f84:	bf00      	nop
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d13c      	bne.n	8007016 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006f9c:	4a20      	ldr	r2, [pc, #128]	; (8007020 <USBD_LL_Init+0x94>)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a1e      	ldr	r2, [pc, #120]	; (8007020 <USBD_LL_Init+0x94>)
 8006fa8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006fac:	4b1c      	ldr	r3, [pc, #112]	; (8007020 <USBD_LL_Init+0x94>)
 8006fae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006fb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006fb4:	4b1a      	ldr	r3, [pc, #104]	; (8007020 <USBD_LL_Init+0x94>)
 8006fb6:	2204      	movs	r2, #4
 8006fb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006fba:	4b19      	ldr	r3, [pc, #100]	; (8007020 <USBD_LL_Init+0x94>)
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006fc0:	4b17      	ldr	r3, [pc, #92]	; (8007020 <USBD_LL_Init+0x94>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006fc6:	4b16      	ldr	r3, [pc, #88]	; (8007020 <USBD_LL_Init+0x94>)
 8006fc8:	2202      	movs	r2, #2
 8006fca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006fcc:	4b14      	ldr	r3, [pc, #80]	; (8007020 <USBD_LL_Init+0x94>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006fd2:	4b13      	ldr	r3, [pc, #76]	; (8007020 <USBD_LL_Init+0x94>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006fd8:	4b11      	ldr	r3, [pc, #68]	; (8007020 <USBD_LL_Init+0x94>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006fde:	4b10      	ldr	r3, [pc, #64]	; (8007020 <USBD_LL_Init+0x94>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006fe4:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <USBD_LL_Init+0x94>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006fea:	480d      	ldr	r0, [pc, #52]	; (8007020 <USBD_LL_Init+0x94>)
 8006fec:	f7fa fe0d 	bl	8001c0a <HAL_PCD_Init>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006ff6:	f7fa f96b 	bl	80012d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006ffa:	2180      	movs	r1, #128	; 0x80
 8006ffc:	4808      	ldr	r0, [pc, #32]	; (8007020 <USBD_LL_Init+0x94>)
 8006ffe:	f7fb ff52 	bl	8002ea6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007002:	2240      	movs	r2, #64	; 0x40
 8007004:	2100      	movs	r1, #0
 8007006:	4806      	ldr	r0, [pc, #24]	; (8007020 <USBD_LL_Init+0x94>)
 8007008:	f7fb ff06 	bl	8002e18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800700c:	2280      	movs	r2, #128	; 0x80
 800700e:	2101      	movs	r1, #1
 8007010:	4803      	ldr	r0, [pc, #12]	; (8007020 <USBD_LL_Init+0x94>)
 8007012:	f7fb ff01 	bl	8002e18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	20000708 	.word	0x20000708

08007024 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800703a:	4618      	mov	r0, r3
 800703c:	f7fa ff02 	bl	8001e44 <HAL_PCD_Start>
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007044:	7bfb      	ldrb	r3, [r7, #15]
 8007046:	4618      	mov	r0, r3
 8007048:	f000 f918 	bl	800727c <USBD_Get_USB_Status>
 800704c:	4603      	mov	r3, r0
 800704e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007050:	7bbb      	ldrb	r3, [r7, #14]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	4608      	mov	r0, r1
 8007064:	4611      	mov	r1, r2
 8007066:	461a      	mov	r2, r3
 8007068:	4603      	mov	r3, r0
 800706a:	70fb      	strb	r3, [r7, #3]
 800706c:	460b      	mov	r3, r1
 800706e:	70bb      	strb	r3, [r7, #2]
 8007070:	4613      	mov	r3, r2
 8007072:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007082:	78bb      	ldrb	r3, [r7, #2]
 8007084:	883a      	ldrh	r2, [r7, #0]
 8007086:	78f9      	ldrb	r1, [r7, #3]
 8007088:	f7fb fae6 	bl	8002658 <HAL_PCD_EP_Open>
 800708c:	4603      	mov	r3, r0
 800708e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	4618      	mov	r0, r3
 8007094:	f000 f8f2 	bl	800727c <USBD_Get_USB_Status>
 8007098:	4603      	mov	r3, r0
 800709a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800709c:	7bbb      	ldrb	r3, [r7, #14]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	460b      	mov	r3, r1
 80070b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070c0:	78fa      	ldrb	r2, [r7, #3]
 80070c2:	4611      	mov	r1, r2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fb fb2f 	bl	8002728 <HAL_PCD_EP_Close>
 80070ca:	4603      	mov	r3, r0
 80070cc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 f8d3 	bl	800727c <USBD_Get_USB_Status>
 80070d6:	4603      	mov	r3, r0
 80070d8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80070da:	7bbb      	ldrb	r3, [r7, #14]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070fe:	78fa      	ldrb	r2, [r7, #3]
 8007100:	4611      	mov	r1, r2
 8007102:	4618      	mov	r0, r3
 8007104:	f7fb fbef 	bl	80028e6 <HAL_PCD_EP_SetStall>
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	4618      	mov	r0, r3
 8007110:	f000 f8b4 	bl	800727c <USBD_Get_USB_Status>
 8007114:	4603      	mov	r3, r0
 8007116:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007118:	7bbb      	ldrb	r3, [r7, #14]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	460b      	mov	r3, r1
 800712c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800713c:	78fa      	ldrb	r2, [r7, #3]
 800713e:	4611      	mov	r1, r2
 8007140:	4618      	mov	r0, r3
 8007142:	f7fb fc34 	bl	80029ae <HAL_PCD_EP_ClrStall>
 8007146:	4603      	mov	r3, r0
 8007148:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	4618      	mov	r0, r3
 800714e:	f000 f895 	bl	800727c <USBD_Get_USB_Status>
 8007152:	4603      	mov	r3, r0
 8007154:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8007156:	7bbb      	ldrb	r3, [r7, #14]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007172:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007178:	2b00      	cmp	r3, #0
 800717a:	da0b      	bge.n	8007194 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007182:	68f9      	ldr	r1, [r7, #12]
 8007184:	4613      	mov	r3, r2
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	1a9b      	subs	r3, r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	333e      	adds	r3, #62	; 0x3e
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	e00b      	b.n	80071ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800719a:	68f9      	ldr	r1, [r7, #12]
 800719c:	4613      	mov	r3, r2
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	440b      	add	r3, r1
 80071a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071d2:	78fa      	ldrb	r2, [r7, #3]
 80071d4:	4611      	mov	r1, r2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fb fa19 	bl	800260e <HAL_PCD_SetAddress>
 80071dc:	4603      	mov	r3, r0
 80071de:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 f84a 	bl	800727c <USBD_Get_USB_Status>
 80071e8:	4603      	mov	r3, r0
 80071ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b086      	sub	sp, #24
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
 8007202:	460b      	mov	r3, r1
 8007204:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007214:	7af9      	ldrb	r1, [r7, #11]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	f7fb fb1a 	bl	8002852 <HAL_PCD_EP_Transmit>
 800721e:	4603      	mov	r3, r0
 8007220:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007222:	7dfb      	ldrb	r3, [r7, #23]
 8007224:	4618      	mov	r0, r3
 8007226:	f000 f829 	bl	800727c <USBD_Get_USB_Status>
 800722a:	4603      	mov	r3, r0
 800722c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800722e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	607a      	str	r2, [r7, #4]
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	460b      	mov	r3, r1
 8007246:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007256:	7af9      	ldrb	r1, [r7, #11]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	f7fb faae 	bl	80027bc <HAL_PCD_EP_Receive>
 8007260:	4603      	mov	r3, r0
 8007262:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007264:	7dfb      	ldrb	r3, [r7, #23]
 8007266:	4618      	mov	r0, r3
 8007268:	f000 f808 	bl	800727c <USBD_Get_USB_Status>
 800726c:	4603      	mov	r3, r0
 800726e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007270:	7dbb      	ldrb	r3, [r7, #22]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	2b03      	cmp	r3, #3
 800728e:	d817      	bhi.n	80072c0 <USBD_Get_USB_Status+0x44>
 8007290:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <USBD_Get_USB_Status+0x1c>)
 8007292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007296:	bf00      	nop
 8007298:	080072a9 	.word	0x080072a9
 800729c:	080072af 	.word	0x080072af
 80072a0:	080072b5 	.word	0x080072b5
 80072a4:	080072bb 	.word	0x080072bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	73fb      	strb	r3, [r7, #15]
    break;
 80072ac:	e00b      	b.n	80072c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072ae:	2303      	movs	r3, #3
 80072b0:	73fb      	strb	r3, [r7, #15]
    break;
 80072b2:	e008      	b.n	80072c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072b4:	2301      	movs	r3, #1
 80072b6:	73fb      	strb	r3, [r7, #15]
    break;
 80072b8:	e005      	b.n	80072c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072ba:	2303      	movs	r3, #3
 80072bc:	73fb      	strb	r3, [r7, #15]
    break;
 80072be:	e002      	b.n	80072c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80072c0:	2303      	movs	r3, #3
 80072c2:	73fb      	strb	r3, [r7, #15]
    break;
 80072c4:	bf00      	nop
  }
  return usb_status;
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <__errno>:
 80072d4:	4b01      	ldr	r3, [pc, #4]	; (80072dc <__errno+0x8>)
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	20000164 	.word	0x20000164

080072e0 <__libc_init_array>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	4e0d      	ldr	r6, [pc, #52]	; (8007318 <__libc_init_array+0x38>)
 80072e4:	4c0d      	ldr	r4, [pc, #52]	; (800731c <__libc_init_array+0x3c>)
 80072e6:	1ba4      	subs	r4, r4, r6
 80072e8:	10a4      	asrs	r4, r4, #2
 80072ea:	2500      	movs	r5, #0
 80072ec:	42a5      	cmp	r5, r4
 80072ee:	d109      	bne.n	8007304 <__libc_init_array+0x24>
 80072f0:	4e0b      	ldr	r6, [pc, #44]	; (8007320 <__libc_init_array+0x40>)
 80072f2:	4c0c      	ldr	r4, [pc, #48]	; (8007324 <__libc_init_array+0x44>)
 80072f4:	f001 f98e 	bl	8008614 <_init>
 80072f8:	1ba4      	subs	r4, r4, r6
 80072fa:	10a4      	asrs	r4, r4, #2
 80072fc:	2500      	movs	r5, #0
 80072fe:	42a5      	cmp	r5, r4
 8007300:	d105      	bne.n	800730e <__libc_init_array+0x2e>
 8007302:	bd70      	pop	{r4, r5, r6, pc}
 8007304:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007308:	4798      	blx	r3
 800730a:	3501      	adds	r5, #1
 800730c:	e7ee      	b.n	80072ec <__libc_init_array+0xc>
 800730e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007312:	4798      	blx	r3
 8007314:	3501      	adds	r5, #1
 8007316:	e7f2      	b.n	80072fe <__libc_init_array+0x1e>
 8007318:	08008870 	.word	0x08008870
 800731c:	08008870 	.word	0x08008870
 8007320:	08008870 	.word	0x08008870
 8007324:	08008874 	.word	0x08008874

08007328 <malloc>:
 8007328:	4b02      	ldr	r3, [pc, #8]	; (8007334 <malloc+0xc>)
 800732a:	4601      	mov	r1, r0
 800732c:	6818      	ldr	r0, [r3, #0]
 800732e:	f000 b861 	b.w	80073f4 <_malloc_r>
 8007332:	bf00      	nop
 8007334:	20000164 	.word	0x20000164

08007338 <free>:
 8007338:	4b02      	ldr	r3, [pc, #8]	; (8007344 <free+0xc>)
 800733a:	4601      	mov	r1, r0
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	f000 b80b 	b.w	8007358 <_free_r>
 8007342:	bf00      	nop
 8007344:	20000164 	.word	0x20000164

08007348 <memset>:
 8007348:	4402      	add	r2, r0
 800734a:	4603      	mov	r3, r0
 800734c:	4293      	cmp	r3, r2
 800734e:	d100      	bne.n	8007352 <memset+0xa>
 8007350:	4770      	bx	lr
 8007352:	f803 1b01 	strb.w	r1, [r3], #1
 8007356:	e7f9      	b.n	800734c <memset+0x4>

08007358 <_free_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4605      	mov	r5, r0
 800735c:	2900      	cmp	r1, #0
 800735e:	d045      	beq.n	80073ec <_free_r+0x94>
 8007360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007364:	1f0c      	subs	r4, r1, #4
 8007366:	2b00      	cmp	r3, #0
 8007368:	bfb8      	it	lt
 800736a:	18e4      	addlt	r4, r4, r3
 800736c:	f000 f8ac 	bl	80074c8 <__malloc_lock>
 8007370:	4a1f      	ldr	r2, [pc, #124]	; (80073f0 <_free_r+0x98>)
 8007372:	6813      	ldr	r3, [r2, #0]
 8007374:	4610      	mov	r0, r2
 8007376:	b933      	cbnz	r3, 8007386 <_free_r+0x2e>
 8007378:	6063      	str	r3, [r4, #4]
 800737a:	6014      	str	r4, [r2, #0]
 800737c:	4628      	mov	r0, r5
 800737e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007382:	f000 b8a2 	b.w	80074ca <__malloc_unlock>
 8007386:	42a3      	cmp	r3, r4
 8007388:	d90c      	bls.n	80073a4 <_free_r+0x4c>
 800738a:	6821      	ldr	r1, [r4, #0]
 800738c:	1862      	adds	r2, r4, r1
 800738e:	4293      	cmp	r3, r2
 8007390:	bf04      	itt	eq
 8007392:	681a      	ldreq	r2, [r3, #0]
 8007394:	685b      	ldreq	r3, [r3, #4]
 8007396:	6063      	str	r3, [r4, #4]
 8007398:	bf04      	itt	eq
 800739a:	1852      	addeq	r2, r2, r1
 800739c:	6022      	streq	r2, [r4, #0]
 800739e:	6004      	str	r4, [r0, #0]
 80073a0:	e7ec      	b.n	800737c <_free_r+0x24>
 80073a2:	4613      	mov	r3, r2
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	b10a      	cbz	r2, 80073ac <_free_r+0x54>
 80073a8:	42a2      	cmp	r2, r4
 80073aa:	d9fa      	bls.n	80073a2 <_free_r+0x4a>
 80073ac:	6819      	ldr	r1, [r3, #0]
 80073ae:	1858      	adds	r0, r3, r1
 80073b0:	42a0      	cmp	r0, r4
 80073b2:	d10b      	bne.n	80073cc <_free_r+0x74>
 80073b4:	6820      	ldr	r0, [r4, #0]
 80073b6:	4401      	add	r1, r0
 80073b8:	1858      	adds	r0, r3, r1
 80073ba:	4282      	cmp	r2, r0
 80073bc:	6019      	str	r1, [r3, #0]
 80073be:	d1dd      	bne.n	800737c <_free_r+0x24>
 80073c0:	6810      	ldr	r0, [r2, #0]
 80073c2:	6852      	ldr	r2, [r2, #4]
 80073c4:	605a      	str	r2, [r3, #4]
 80073c6:	4401      	add	r1, r0
 80073c8:	6019      	str	r1, [r3, #0]
 80073ca:	e7d7      	b.n	800737c <_free_r+0x24>
 80073cc:	d902      	bls.n	80073d4 <_free_r+0x7c>
 80073ce:	230c      	movs	r3, #12
 80073d0:	602b      	str	r3, [r5, #0]
 80073d2:	e7d3      	b.n	800737c <_free_r+0x24>
 80073d4:	6820      	ldr	r0, [r4, #0]
 80073d6:	1821      	adds	r1, r4, r0
 80073d8:	428a      	cmp	r2, r1
 80073da:	bf04      	itt	eq
 80073dc:	6811      	ldreq	r1, [r2, #0]
 80073de:	6852      	ldreq	r2, [r2, #4]
 80073e0:	6062      	str	r2, [r4, #4]
 80073e2:	bf04      	itt	eq
 80073e4:	1809      	addeq	r1, r1, r0
 80073e6:	6021      	streq	r1, [r4, #0]
 80073e8:	605c      	str	r4, [r3, #4]
 80073ea:	e7c7      	b.n	800737c <_free_r+0x24>
 80073ec:	bd38      	pop	{r3, r4, r5, pc}
 80073ee:	bf00      	nop
 80073f0:	200001ec 	.word	0x200001ec

080073f4 <_malloc_r>:
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	1ccd      	adds	r5, r1, #3
 80073f8:	f025 0503 	bic.w	r5, r5, #3
 80073fc:	3508      	adds	r5, #8
 80073fe:	2d0c      	cmp	r5, #12
 8007400:	bf38      	it	cc
 8007402:	250c      	movcc	r5, #12
 8007404:	2d00      	cmp	r5, #0
 8007406:	4606      	mov	r6, r0
 8007408:	db01      	blt.n	800740e <_malloc_r+0x1a>
 800740a:	42a9      	cmp	r1, r5
 800740c:	d903      	bls.n	8007416 <_malloc_r+0x22>
 800740e:	230c      	movs	r3, #12
 8007410:	6033      	str	r3, [r6, #0]
 8007412:	2000      	movs	r0, #0
 8007414:	bd70      	pop	{r4, r5, r6, pc}
 8007416:	f000 f857 	bl	80074c8 <__malloc_lock>
 800741a:	4a21      	ldr	r2, [pc, #132]	; (80074a0 <_malloc_r+0xac>)
 800741c:	6814      	ldr	r4, [r2, #0]
 800741e:	4621      	mov	r1, r4
 8007420:	b991      	cbnz	r1, 8007448 <_malloc_r+0x54>
 8007422:	4c20      	ldr	r4, [pc, #128]	; (80074a4 <_malloc_r+0xb0>)
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	b91b      	cbnz	r3, 8007430 <_malloc_r+0x3c>
 8007428:	4630      	mov	r0, r6
 800742a:	f000 f83d 	bl	80074a8 <_sbrk_r>
 800742e:	6020      	str	r0, [r4, #0]
 8007430:	4629      	mov	r1, r5
 8007432:	4630      	mov	r0, r6
 8007434:	f000 f838 	bl	80074a8 <_sbrk_r>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d124      	bne.n	8007486 <_malloc_r+0x92>
 800743c:	230c      	movs	r3, #12
 800743e:	6033      	str	r3, [r6, #0]
 8007440:	4630      	mov	r0, r6
 8007442:	f000 f842 	bl	80074ca <__malloc_unlock>
 8007446:	e7e4      	b.n	8007412 <_malloc_r+0x1e>
 8007448:	680b      	ldr	r3, [r1, #0]
 800744a:	1b5b      	subs	r3, r3, r5
 800744c:	d418      	bmi.n	8007480 <_malloc_r+0x8c>
 800744e:	2b0b      	cmp	r3, #11
 8007450:	d90f      	bls.n	8007472 <_malloc_r+0x7e>
 8007452:	600b      	str	r3, [r1, #0]
 8007454:	50cd      	str	r5, [r1, r3]
 8007456:	18cc      	adds	r4, r1, r3
 8007458:	4630      	mov	r0, r6
 800745a:	f000 f836 	bl	80074ca <__malloc_unlock>
 800745e:	f104 000b 	add.w	r0, r4, #11
 8007462:	1d23      	adds	r3, r4, #4
 8007464:	f020 0007 	bic.w	r0, r0, #7
 8007468:	1ac3      	subs	r3, r0, r3
 800746a:	d0d3      	beq.n	8007414 <_malloc_r+0x20>
 800746c:	425a      	negs	r2, r3
 800746e:	50e2      	str	r2, [r4, r3]
 8007470:	e7d0      	b.n	8007414 <_malloc_r+0x20>
 8007472:	428c      	cmp	r4, r1
 8007474:	684b      	ldr	r3, [r1, #4]
 8007476:	bf16      	itet	ne
 8007478:	6063      	strne	r3, [r4, #4]
 800747a:	6013      	streq	r3, [r2, #0]
 800747c:	460c      	movne	r4, r1
 800747e:	e7eb      	b.n	8007458 <_malloc_r+0x64>
 8007480:	460c      	mov	r4, r1
 8007482:	6849      	ldr	r1, [r1, #4]
 8007484:	e7cc      	b.n	8007420 <_malloc_r+0x2c>
 8007486:	1cc4      	adds	r4, r0, #3
 8007488:	f024 0403 	bic.w	r4, r4, #3
 800748c:	42a0      	cmp	r0, r4
 800748e:	d005      	beq.n	800749c <_malloc_r+0xa8>
 8007490:	1a21      	subs	r1, r4, r0
 8007492:	4630      	mov	r0, r6
 8007494:	f000 f808 	bl	80074a8 <_sbrk_r>
 8007498:	3001      	adds	r0, #1
 800749a:	d0cf      	beq.n	800743c <_malloc_r+0x48>
 800749c:	6025      	str	r5, [r4, #0]
 800749e:	e7db      	b.n	8007458 <_malloc_r+0x64>
 80074a0:	200001ec 	.word	0x200001ec
 80074a4:	200001f0 	.word	0x200001f0

080074a8 <_sbrk_r>:
 80074a8:	b538      	push	{r3, r4, r5, lr}
 80074aa:	4c06      	ldr	r4, [pc, #24]	; (80074c4 <_sbrk_r+0x1c>)
 80074ac:	2300      	movs	r3, #0
 80074ae:	4605      	mov	r5, r0
 80074b0:	4608      	mov	r0, r1
 80074b2:	6023      	str	r3, [r4, #0]
 80074b4:	f7f9 ffbc 	bl	8001430 <_sbrk>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	d102      	bne.n	80074c2 <_sbrk_r+0x1a>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	b103      	cbz	r3, 80074c2 <_sbrk_r+0x1a>
 80074c0:	602b      	str	r3, [r5, #0]
 80074c2:	bd38      	pop	{r3, r4, r5, pc}
 80074c4:	20000b10 	.word	0x20000b10

080074c8 <__malloc_lock>:
 80074c8:	4770      	bx	lr

080074ca <__malloc_unlock>:
 80074ca:	4770      	bx	lr
 80074cc:	0000      	movs	r0, r0
	...

080074d0 <cos>:
 80074d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074d2:	ec51 0b10 	vmov	r0, r1, d0
 80074d6:	4a1e      	ldr	r2, [pc, #120]	; (8007550 <cos+0x80>)
 80074d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074dc:	4293      	cmp	r3, r2
 80074de:	dc06      	bgt.n	80074ee <cos+0x1e>
 80074e0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8007548 <cos+0x78>
 80074e4:	f000 fac0 	bl	8007a68 <__kernel_cos>
 80074e8:	ec51 0b10 	vmov	r0, r1, d0
 80074ec:	e007      	b.n	80074fe <cos+0x2e>
 80074ee:	4a19      	ldr	r2, [pc, #100]	; (8007554 <cos+0x84>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	dd09      	ble.n	8007508 <cos+0x38>
 80074f4:	ee10 2a10 	vmov	r2, s0
 80074f8:	460b      	mov	r3, r1
 80074fa:	f7f8 fe7d 	bl	80001f8 <__aeabi_dsub>
 80074fe:	ec41 0b10 	vmov	d0, r0, r1
 8007502:	b005      	add	sp, #20
 8007504:	f85d fb04 	ldr.w	pc, [sp], #4
 8007508:	4668      	mov	r0, sp
 800750a:	f000 f8b9 	bl	8007680 <__ieee754_rem_pio2>
 800750e:	f000 0003 	and.w	r0, r0, #3
 8007512:	2801      	cmp	r0, #1
 8007514:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007518:	ed9d 0b00 	vldr	d0, [sp]
 800751c:	d007      	beq.n	800752e <cos+0x5e>
 800751e:	2802      	cmp	r0, #2
 8007520:	d00e      	beq.n	8007540 <cos+0x70>
 8007522:	2800      	cmp	r0, #0
 8007524:	d0de      	beq.n	80074e4 <cos+0x14>
 8007526:	2001      	movs	r0, #1
 8007528:	f000 fea6 	bl	8008278 <__kernel_sin>
 800752c:	e7dc      	b.n	80074e8 <cos+0x18>
 800752e:	f000 fea3 	bl	8008278 <__kernel_sin>
 8007532:	ec53 2b10 	vmov	r2, r3, d0
 8007536:	ee10 0a10 	vmov	r0, s0
 800753a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800753e:	e7de      	b.n	80074fe <cos+0x2e>
 8007540:	f000 fa92 	bl	8007a68 <__kernel_cos>
 8007544:	e7f5      	b.n	8007532 <cos+0x62>
 8007546:	bf00      	nop
	...
 8007550:	3fe921fb 	.word	0x3fe921fb
 8007554:	7fefffff 	.word	0x7fefffff

08007558 <round>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	ec57 6b10 	vmov	r6, r7, d0
 800755e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8007562:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8007566:	2c13      	cmp	r4, #19
 8007568:	463b      	mov	r3, r7
 800756a:	463d      	mov	r5, r7
 800756c:	dc17      	bgt.n	800759e <round+0x46>
 800756e:	2c00      	cmp	r4, #0
 8007570:	da09      	bge.n	8007586 <round+0x2e>
 8007572:	3401      	adds	r4, #1
 8007574:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8007578:	d103      	bne.n	8007582 <round+0x2a>
 800757a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800757e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007582:	2100      	movs	r1, #0
 8007584:	e02c      	b.n	80075e0 <round+0x88>
 8007586:	4a18      	ldr	r2, [pc, #96]	; (80075e8 <round+0x90>)
 8007588:	4122      	asrs	r2, r4
 800758a:	4217      	tst	r7, r2
 800758c:	d100      	bne.n	8007590 <round+0x38>
 800758e:	b19e      	cbz	r6, 80075b8 <round+0x60>
 8007590:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007594:	4123      	asrs	r3, r4
 8007596:	442b      	add	r3, r5
 8007598:	ea23 0302 	bic.w	r3, r3, r2
 800759c:	e7f1      	b.n	8007582 <round+0x2a>
 800759e:	2c33      	cmp	r4, #51	; 0x33
 80075a0:	dd0d      	ble.n	80075be <round+0x66>
 80075a2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80075a6:	d107      	bne.n	80075b8 <round+0x60>
 80075a8:	4630      	mov	r0, r6
 80075aa:	4639      	mov	r1, r7
 80075ac:	ee10 2a10 	vmov	r2, s0
 80075b0:	f7f8 fe24 	bl	80001fc <__adddf3>
 80075b4:	4606      	mov	r6, r0
 80075b6:	460f      	mov	r7, r1
 80075b8:	ec47 6b10 	vmov	d0, r6, r7
 80075bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075be:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80075c2:	f04f 30ff 	mov.w	r0, #4294967295
 80075c6:	40d0      	lsrs	r0, r2
 80075c8:	4206      	tst	r6, r0
 80075ca:	d0f5      	beq.n	80075b8 <round+0x60>
 80075cc:	2201      	movs	r2, #1
 80075ce:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80075d2:	fa02 f404 	lsl.w	r4, r2, r4
 80075d6:	1931      	adds	r1, r6, r4
 80075d8:	bf28      	it	cs
 80075da:	189b      	addcs	r3, r3, r2
 80075dc:	ea21 0100 	bic.w	r1, r1, r0
 80075e0:	461f      	mov	r7, r3
 80075e2:	460e      	mov	r6, r1
 80075e4:	e7e8      	b.n	80075b8 <round+0x60>
 80075e6:	bf00      	nop
 80075e8:	000fffff 	.word	0x000fffff
 80075ec:	00000000 	.word	0x00000000

080075f0 <sin>:
 80075f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075f2:	ec51 0b10 	vmov	r0, r1, d0
 80075f6:	4a20      	ldr	r2, [pc, #128]	; (8007678 <sin+0x88>)
 80075f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80075fc:	4293      	cmp	r3, r2
 80075fe:	dc07      	bgt.n	8007610 <sin+0x20>
 8007600:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8007670 <sin+0x80>
 8007604:	2000      	movs	r0, #0
 8007606:	f000 fe37 	bl	8008278 <__kernel_sin>
 800760a:	ec51 0b10 	vmov	r0, r1, d0
 800760e:	e007      	b.n	8007620 <sin+0x30>
 8007610:	4a1a      	ldr	r2, [pc, #104]	; (800767c <sin+0x8c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	dd09      	ble.n	800762a <sin+0x3a>
 8007616:	ee10 2a10 	vmov	r2, s0
 800761a:	460b      	mov	r3, r1
 800761c:	f7f8 fdec 	bl	80001f8 <__aeabi_dsub>
 8007620:	ec41 0b10 	vmov	d0, r0, r1
 8007624:	b005      	add	sp, #20
 8007626:	f85d fb04 	ldr.w	pc, [sp], #4
 800762a:	4668      	mov	r0, sp
 800762c:	f000 f828 	bl	8007680 <__ieee754_rem_pio2>
 8007630:	f000 0003 	and.w	r0, r0, #3
 8007634:	2801      	cmp	r0, #1
 8007636:	ed9d 1b02 	vldr	d1, [sp, #8]
 800763a:	ed9d 0b00 	vldr	d0, [sp]
 800763e:	d004      	beq.n	800764a <sin+0x5a>
 8007640:	2802      	cmp	r0, #2
 8007642:	d005      	beq.n	8007650 <sin+0x60>
 8007644:	b970      	cbnz	r0, 8007664 <sin+0x74>
 8007646:	2001      	movs	r0, #1
 8007648:	e7dd      	b.n	8007606 <sin+0x16>
 800764a:	f000 fa0d 	bl	8007a68 <__kernel_cos>
 800764e:	e7dc      	b.n	800760a <sin+0x1a>
 8007650:	2001      	movs	r0, #1
 8007652:	f000 fe11 	bl	8008278 <__kernel_sin>
 8007656:	ec53 2b10 	vmov	r2, r3, d0
 800765a:	ee10 0a10 	vmov	r0, s0
 800765e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007662:	e7dd      	b.n	8007620 <sin+0x30>
 8007664:	f000 fa00 	bl	8007a68 <__kernel_cos>
 8007668:	e7f5      	b.n	8007656 <sin+0x66>
 800766a:	bf00      	nop
 800766c:	f3af 8000 	nop.w
	...
 8007678:	3fe921fb 	.word	0x3fe921fb
 800767c:	7fefffff 	.word	0x7fefffff

08007680 <__ieee754_rem_pio2>:
 8007680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	ec57 6b10 	vmov	r6, r7, d0
 8007688:	4bc3      	ldr	r3, [pc, #780]	; (8007998 <__ieee754_rem_pio2+0x318>)
 800768a:	b08d      	sub	sp, #52	; 0x34
 800768c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007690:	4598      	cmp	r8, r3
 8007692:	4604      	mov	r4, r0
 8007694:	9704      	str	r7, [sp, #16]
 8007696:	dc07      	bgt.n	80076a8 <__ieee754_rem_pio2+0x28>
 8007698:	2200      	movs	r2, #0
 800769a:	2300      	movs	r3, #0
 800769c:	ed84 0b00 	vstr	d0, [r4]
 80076a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80076a4:	2500      	movs	r5, #0
 80076a6:	e027      	b.n	80076f8 <__ieee754_rem_pio2+0x78>
 80076a8:	4bbc      	ldr	r3, [pc, #752]	; (800799c <__ieee754_rem_pio2+0x31c>)
 80076aa:	4598      	cmp	r8, r3
 80076ac:	dc75      	bgt.n	800779a <__ieee754_rem_pio2+0x11a>
 80076ae:	9b04      	ldr	r3, [sp, #16]
 80076b0:	4dbb      	ldr	r5, [pc, #748]	; (80079a0 <__ieee754_rem_pio2+0x320>)
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	ee10 0a10 	vmov	r0, s0
 80076b8:	a3a9      	add	r3, pc, #676	; (adr r3, 8007960 <__ieee754_rem_pio2+0x2e0>)
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	4639      	mov	r1, r7
 80076c0:	dd36      	ble.n	8007730 <__ieee754_rem_pio2+0xb0>
 80076c2:	f7f8 fd99 	bl	80001f8 <__aeabi_dsub>
 80076c6:	45a8      	cmp	r8, r5
 80076c8:	4606      	mov	r6, r0
 80076ca:	460f      	mov	r7, r1
 80076cc:	d018      	beq.n	8007700 <__ieee754_rem_pio2+0x80>
 80076ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8007968 <__ieee754_rem_pio2+0x2e8>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f7f8 fd90 	bl	80001f8 <__aeabi_dsub>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	e9c4 2300 	strd	r2, r3, [r4]
 80076e0:	4630      	mov	r0, r6
 80076e2:	4639      	mov	r1, r7
 80076e4:	f7f8 fd88 	bl	80001f8 <__aeabi_dsub>
 80076e8:	a39f      	add	r3, pc, #636	; (adr r3, 8007968 <__ieee754_rem_pio2+0x2e8>)
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	f7f8 fd83 	bl	80001f8 <__aeabi_dsub>
 80076f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80076f6:	2501      	movs	r5, #1
 80076f8:	4628      	mov	r0, r5
 80076fa:	b00d      	add	sp, #52	; 0x34
 80076fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007700:	a39b      	add	r3, pc, #620	; (adr r3, 8007970 <__ieee754_rem_pio2+0x2f0>)
 8007702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007706:	f7f8 fd77 	bl	80001f8 <__aeabi_dsub>
 800770a:	a39b      	add	r3, pc, #620	; (adr r3, 8007978 <__ieee754_rem_pio2+0x2f8>)
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	4606      	mov	r6, r0
 8007712:	460f      	mov	r7, r1
 8007714:	f7f8 fd70 	bl	80001f8 <__aeabi_dsub>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	e9c4 2300 	strd	r2, r3, [r4]
 8007720:	4630      	mov	r0, r6
 8007722:	4639      	mov	r1, r7
 8007724:	f7f8 fd68 	bl	80001f8 <__aeabi_dsub>
 8007728:	a393      	add	r3, pc, #588	; (adr r3, 8007978 <__ieee754_rem_pio2+0x2f8>)
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	e7de      	b.n	80076ee <__ieee754_rem_pio2+0x6e>
 8007730:	f7f8 fd64 	bl	80001fc <__adddf3>
 8007734:	45a8      	cmp	r8, r5
 8007736:	4606      	mov	r6, r0
 8007738:	460f      	mov	r7, r1
 800773a:	d016      	beq.n	800776a <__ieee754_rem_pio2+0xea>
 800773c:	a38a      	add	r3, pc, #552	; (adr r3, 8007968 <__ieee754_rem_pio2+0x2e8>)
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	f7f8 fd5b 	bl	80001fc <__adddf3>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	e9c4 2300 	strd	r2, r3, [r4]
 800774e:	4630      	mov	r0, r6
 8007750:	4639      	mov	r1, r7
 8007752:	f7f8 fd51 	bl	80001f8 <__aeabi_dsub>
 8007756:	a384      	add	r3, pc, #528	; (adr r3, 8007968 <__ieee754_rem_pio2+0x2e8>)
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	f7f8 fd4e 	bl	80001fc <__adddf3>
 8007760:	f04f 35ff 	mov.w	r5, #4294967295
 8007764:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007768:	e7c6      	b.n	80076f8 <__ieee754_rem_pio2+0x78>
 800776a:	a381      	add	r3, pc, #516	; (adr r3, 8007970 <__ieee754_rem_pio2+0x2f0>)
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	f7f8 fd44 	bl	80001fc <__adddf3>
 8007774:	a380      	add	r3, pc, #512	; (adr r3, 8007978 <__ieee754_rem_pio2+0x2f8>)
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	4606      	mov	r6, r0
 800777c:	460f      	mov	r7, r1
 800777e:	f7f8 fd3d 	bl	80001fc <__adddf3>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	e9c4 2300 	strd	r2, r3, [r4]
 800778a:	4630      	mov	r0, r6
 800778c:	4639      	mov	r1, r7
 800778e:	f7f8 fd33 	bl	80001f8 <__aeabi_dsub>
 8007792:	a379      	add	r3, pc, #484	; (adr r3, 8007978 <__ieee754_rem_pio2+0x2f8>)
 8007794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007798:	e7e0      	b.n	800775c <__ieee754_rem_pio2+0xdc>
 800779a:	4b82      	ldr	r3, [pc, #520]	; (80079a4 <__ieee754_rem_pio2+0x324>)
 800779c:	4598      	cmp	r8, r3
 800779e:	f300 80d0 	bgt.w	8007942 <__ieee754_rem_pio2+0x2c2>
 80077a2:	f000 fe23 	bl	80083ec <fabs>
 80077a6:	ec57 6b10 	vmov	r6, r7, d0
 80077aa:	ee10 0a10 	vmov	r0, s0
 80077ae:	a374      	add	r3, pc, #464	; (adr r3, 8007980 <__ieee754_rem_pio2+0x300>)
 80077b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b4:	4639      	mov	r1, r7
 80077b6:	f7f8 fed7 	bl	8000568 <__aeabi_dmul>
 80077ba:	2200      	movs	r2, #0
 80077bc:	4b7a      	ldr	r3, [pc, #488]	; (80079a8 <__ieee754_rem_pio2+0x328>)
 80077be:	f7f8 fd1d 	bl	80001fc <__adddf3>
 80077c2:	f7f9 f96b 	bl	8000a9c <__aeabi_d2iz>
 80077c6:	4605      	mov	r5, r0
 80077c8:	f7f8 fe64 	bl	8000494 <__aeabi_i2d>
 80077cc:	a364      	add	r3, pc, #400	; (adr r3, 8007960 <__ieee754_rem_pio2+0x2e0>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077d6:	f7f8 fec7 	bl	8000568 <__aeabi_dmul>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4630      	mov	r0, r6
 80077e0:	4639      	mov	r1, r7
 80077e2:	f7f8 fd09 	bl	80001f8 <__aeabi_dsub>
 80077e6:	a360      	add	r3, pc, #384	; (adr r3, 8007968 <__ieee754_rem_pio2+0x2e8>)
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	4682      	mov	sl, r0
 80077ee:	468b      	mov	fp, r1
 80077f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077f4:	f7f8 feb8 	bl	8000568 <__aeabi_dmul>
 80077f8:	2d1f      	cmp	r5, #31
 80077fa:	4606      	mov	r6, r0
 80077fc:	460f      	mov	r7, r1
 80077fe:	dc0c      	bgt.n	800781a <__ieee754_rem_pio2+0x19a>
 8007800:	1e6a      	subs	r2, r5, #1
 8007802:	4b6a      	ldr	r3, [pc, #424]	; (80079ac <__ieee754_rem_pio2+0x32c>)
 8007804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007808:	4543      	cmp	r3, r8
 800780a:	d006      	beq.n	800781a <__ieee754_rem_pio2+0x19a>
 800780c:	4632      	mov	r2, r6
 800780e:	463b      	mov	r3, r7
 8007810:	4650      	mov	r0, sl
 8007812:	4659      	mov	r1, fp
 8007814:	f7f8 fcf0 	bl	80001f8 <__aeabi_dsub>
 8007818:	e00e      	b.n	8007838 <__ieee754_rem_pio2+0x1b8>
 800781a:	4632      	mov	r2, r6
 800781c:	463b      	mov	r3, r7
 800781e:	4650      	mov	r0, sl
 8007820:	4659      	mov	r1, fp
 8007822:	f7f8 fce9 	bl	80001f8 <__aeabi_dsub>
 8007826:	ea4f 5328 	mov.w	r3, r8, asr #20
 800782a:	9305      	str	r3, [sp, #20]
 800782c:	9a05      	ldr	r2, [sp, #20]
 800782e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b10      	cmp	r3, #16
 8007836:	dc02      	bgt.n	800783e <__ieee754_rem_pio2+0x1be>
 8007838:	e9c4 0100 	strd	r0, r1, [r4]
 800783c:	e039      	b.n	80078b2 <__ieee754_rem_pio2+0x232>
 800783e:	a34c      	add	r3, pc, #304	; (adr r3, 8007970 <__ieee754_rem_pio2+0x2f0>)
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007848:	f7f8 fe8e 	bl	8000568 <__aeabi_dmul>
 800784c:	4606      	mov	r6, r0
 800784e:	460f      	mov	r7, r1
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4650      	mov	r0, sl
 8007856:	4659      	mov	r1, fp
 8007858:	f7f8 fcce 	bl	80001f8 <__aeabi_dsub>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4680      	mov	r8, r0
 8007862:	4689      	mov	r9, r1
 8007864:	4650      	mov	r0, sl
 8007866:	4659      	mov	r1, fp
 8007868:	f7f8 fcc6 	bl	80001f8 <__aeabi_dsub>
 800786c:	4632      	mov	r2, r6
 800786e:	463b      	mov	r3, r7
 8007870:	f7f8 fcc2 	bl	80001f8 <__aeabi_dsub>
 8007874:	a340      	add	r3, pc, #256	; (adr r3, 8007978 <__ieee754_rem_pio2+0x2f8>)
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	4606      	mov	r6, r0
 800787c:	460f      	mov	r7, r1
 800787e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007882:	f7f8 fe71 	bl	8000568 <__aeabi_dmul>
 8007886:	4632      	mov	r2, r6
 8007888:	463b      	mov	r3, r7
 800788a:	f7f8 fcb5 	bl	80001f8 <__aeabi_dsub>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4606      	mov	r6, r0
 8007894:	460f      	mov	r7, r1
 8007896:	4640      	mov	r0, r8
 8007898:	4649      	mov	r1, r9
 800789a:	f7f8 fcad 	bl	80001f8 <__aeabi_dsub>
 800789e:	9a05      	ldr	r2, [sp, #20]
 80078a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	2b31      	cmp	r3, #49	; 0x31
 80078a8:	dc20      	bgt.n	80078ec <__ieee754_rem_pio2+0x26c>
 80078aa:	e9c4 0100 	strd	r0, r1, [r4]
 80078ae:	46c2      	mov	sl, r8
 80078b0:	46cb      	mov	fp, r9
 80078b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80078b6:	4650      	mov	r0, sl
 80078b8:	4642      	mov	r2, r8
 80078ba:	464b      	mov	r3, r9
 80078bc:	4659      	mov	r1, fp
 80078be:	f7f8 fc9b 	bl	80001f8 <__aeabi_dsub>
 80078c2:	463b      	mov	r3, r7
 80078c4:	4632      	mov	r2, r6
 80078c6:	f7f8 fc97 	bl	80001f8 <__aeabi_dsub>
 80078ca:	9b04      	ldr	r3, [sp, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80078d2:	f6bf af11 	bge.w	80076f8 <__ieee754_rem_pio2+0x78>
 80078d6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80078da:	6063      	str	r3, [r4, #4]
 80078dc:	f8c4 8000 	str.w	r8, [r4]
 80078e0:	60a0      	str	r0, [r4, #8]
 80078e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078e6:	60e3      	str	r3, [r4, #12]
 80078e8:	426d      	negs	r5, r5
 80078ea:	e705      	b.n	80076f8 <__ieee754_rem_pio2+0x78>
 80078ec:	a326      	add	r3, pc, #152	; (adr r3, 8007988 <__ieee754_rem_pio2+0x308>)
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078f6:	f7f8 fe37 	bl	8000568 <__aeabi_dmul>
 80078fa:	4606      	mov	r6, r0
 80078fc:	460f      	mov	r7, r1
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4640      	mov	r0, r8
 8007904:	4649      	mov	r1, r9
 8007906:	f7f8 fc77 	bl	80001f8 <__aeabi_dsub>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	4682      	mov	sl, r0
 8007910:	468b      	mov	fp, r1
 8007912:	4640      	mov	r0, r8
 8007914:	4649      	mov	r1, r9
 8007916:	f7f8 fc6f 	bl	80001f8 <__aeabi_dsub>
 800791a:	4632      	mov	r2, r6
 800791c:	463b      	mov	r3, r7
 800791e:	f7f8 fc6b 	bl	80001f8 <__aeabi_dsub>
 8007922:	a31b      	add	r3, pc, #108	; (adr r3, 8007990 <__ieee754_rem_pio2+0x310>)
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	4606      	mov	r6, r0
 800792a:	460f      	mov	r7, r1
 800792c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007930:	f7f8 fe1a 	bl	8000568 <__aeabi_dmul>
 8007934:	4632      	mov	r2, r6
 8007936:	463b      	mov	r3, r7
 8007938:	f7f8 fc5e 	bl	80001f8 <__aeabi_dsub>
 800793c:	4606      	mov	r6, r0
 800793e:	460f      	mov	r7, r1
 8007940:	e764      	b.n	800780c <__ieee754_rem_pio2+0x18c>
 8007942:	4b1b      	ldr	r3, [pc, #108]	; (80079b0 <__ieee754_rem_pio2+0x330>)
 8007944:	4598      	cmp	r8, r3
 8007946:	dd35      	ble.n	80079b4 <__ieee754_rem_pio2+0x334>
 8007948:	ee10 2a10 	vmov	r2, s0
 800794c:	463b      	mov	r3, r7
 800794e:	4630      	mov	r0, r6
 8007950:	4639      	mov	r1, r7
 8007952:	f7f8 fc51 	bl	80001f8 <__aeabi_dsub>
 8007956:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800795a:	e9c4 0100 	strd	r0, r1, [r4]
 800795e:	e6a1      	b.n	80076a4 <__ieee754_rem_pio2+0x24>
 8007960:	54400000 	.word	0x54400000
 8007964:	3ff921fb 	.word	0x3ff921fb
 8007968:	1a626331 	.word	0x1a626331
 800796c:	3dd0b461 	.word	0x3dd0b461
 8007970:	1a600000 	.word	0x1a600000
 8007974:	3dd0b461 	.word	0x3dd0b461
 8007978:	2e037073 	.word	0x2e037073
 800797c:	3ba3198a 	.word	0x3ba3198a
 8007980:	6dc9c883 	.word	0x6dc9c883
 8007984:	3fe45f30 	.word	0x3fe45f30
 8007988:	2e000000 	.word	0x2e000000
 800798c:	3ba3198a 	.word	0x3ba3198a
 8007990:	252049c1 	.word	0x252049c1
 8007994:	397b839a 	.word	0x397b839a
 8007998:	3fe921fb 	.word	0x3fe921fb
 800799c:	4002d97b 	.word	0x4002d97b
 80079a0:	3ff921fb 	.word	0x3ff921fb
 80079a4:	413921fb 	.word	0x413921fb
 80079a8:	3fe00000 	.word	0x3fe00000
 80079ac:	08008690 	.word	0x08008690
 80079b0:	7fefffff 	.word	0x7fefffff
 80079b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80079b8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80079bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80079c0:	4630      	mov	r0, r6
 80079c2:	460f      	mov	r7, r1
 80079c4:	f7f9 f86a 	bl	8000a9c <__aeabi_d2iz>
 80079c8:	f7f8 fd64 	bl	8000494 <__aeabi_i2d>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4630      	mov	r0, r6
 80079d2:	4639      	mov	r1, r7
 80079d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80079d8:	f7f8 fc0e 	bl	80001f8 <__aeabi_dsub>
 80079dc:	2200      	movs	r2, #0
 80079de:	4b1f      	ldr	r3, [pc, #124]	; (8007a5c <__ieee754_rem_pio2+0x3dc>)
 80079e0:	f7f8 fdc2 	bl	8000568 <__aeabi_dmul>
 80079e4:	460f      	mov	r7, r1
 80079e6:	4606      	mov	r6, r0
 80079e8:	f7f9 f858 	bl	8000a9c <__aeabi_d2iz>
 80079ec:	f7f8 fd52 	bl	8000494 <__aeabi_i2d>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4630      	mov	r0, r6
 80079f6:	4639      	mov	r1, r7
 80079f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079fc:	f7f8 fbfc 	bl	80001f8 <__aeabi_dsub>
 8007a00:	2200      	movs	r2, #0
 8007a02:	4b16      	ldr	r3, [pc, #88]	; (8007a5c <__ieee754_rem_pio2+0x3dc>)
 8007a04:	f7f8 fdb0 	bl	8000568 <__aeabi_dmul>
 8007a08:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007a0c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007a10:	f04f 0803 	mov.w	r8, #3
 8007a14:	2600      	movs	r6, #0
 8007a16:	2700      	movs	r7, #0
 8007a18:	4632      	mov	r2, r6
 8007a1a:	463b      	mov	r3, r7
 8007a1c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007a20:	f108 3aff 	add.w	sl, r8, #4294967295
 8007a24:	f7f9 f808 	bl	8000a38 <__aeabi_dcmpeq>
 8007a28:	b9b0      	cbnz	r0, 8007a58 <__ieee754_rem_pio2+0x3d8>
 8007a2a:	4b0d      	ldr	r3, [pc, #52]	; (8007a60 <__ieee754_rem_pio2+0x3e0>)
 8007a2c:	9301      	str	r3, [sp, #4]
 8007a2e:	2302      	movs	r3, #2
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	462a      	mov	r2, r5
 8007a34:	4643      	mov	r3, r8
 8007a36:	4621      	mov	r1, r4
 8007a38:	a806      	add	r0, sp, #24
 8007a3a:	f000 f8dd 	bl	8007bf8 <__kernel_rem_pio2>
 8007a3e:	9b04      	ldr	r3, [sp, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	4605      	mov	r5, r0
 8007a44:	f6bf ae58 	bge.w	80076f8 <__ieee754_rem_pio2+0x78>
 8007a48:	6863      	ldr	r3, [r4, #4]
 8007a4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007a4e:	6063      	str	r3, [r4, #4]
 8007a50:	68e3      	ldr	r3, [r4, #12]
 8007a52:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007a56:	e746      	b.n	80078e6 <__ieee754_rem_pio2+0x266>
 8007a58:	46d0      	mov	r8, sl
 8007a5a:	e7dd      	b.n	8007a18 <__ieee754_rem_pio2+0x398>
 8007a5c:	41700000 	.word	0x41700000
 8007a60:	08008710 	.word	0x08008710
 8007a64:	00000000 	.word	0x00000000

08007a68 <__kernel_cos>:
 8007a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6c:	ec59 8b10 	vmov	r8, r9, d0
 8007a70:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8007a74:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007a78:	ed2d 8b02 	vpush	{d8}
 8007a7c:	eeb0 8a41 	vmov.f32	s16, s2
 8007a80:	eef0 8a61 	vmov.f32	s17, s3
 8007a84:	da07      	bge.n	8007a96 <__kernel_cos+0x2e>
 8007a86:	ee10 0a10 	vmov	r0, s0
 8007a8a:	4649      	mov	r1, r9
 8007a8c:	f7f9 f806 	bl	8000a9c <__aeabi_d2iz>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	f000 8089 	beq.w	8007ba8 <__kernel_cos+0x140>
 8007a96:	4642      	mov	r2, r8
 8007a98:	464b      	mov	r3, r9
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	f7f8 fd63 	bl	8000568 <__aeabi_dmul>
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	4b4e      	ldr	r3, [pc, #312]	; (8007be0 <__kernel_cos+0x178>)
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	460d      	mov	r5, r1
 8007aaa:	f7f8 fd5d 	bl	8000568 <__aeabi_dmul>
 8007aae:	a340      	add	r3, pc, #256	; (adr r3, 8007bb0 <__kernel_cos+0x148>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	4682      	mov	sl, r0
 8007ab6:	468b      	mov	fp, r1
 8007ab8:	4620      	mov	r0, r4
 8007aba:	4629      	mov	r1, r5
 8007abc:	f7f8 fd54 	bl	8000568 <__aeabi_dmul>
 8007ac0:	a33d      	add	r3, pc, #244	; (adr r3, 8007bb8 <__kernel_cos+0x150>)
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	f7f8 fb99 	bl	80001fc <__adddf3>
 8007aca:	4622      	mov	r2, r4
 8007acc:	462b      	mov	r3, r5
 8007ace:	f7f8 fd4b 	bl	8000568 <__aeabi_dmul>
 8007ad2:	a33b      	add	r3, pc, #236	; (adr r3, 8007bc0 <__kernel_cos+0x158>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f7f8 fb8e 	bl	80001f8 <__aeabi_dsub>
 8007adc:	4622      	mov	r2, r4
 8007ade:	462b      	mov	r3, r5
 8007ae0:	f7f8 fd42 	bl	8000568 <__aeabi_dmul>
 8007ae4:	a338      	add	r3, pc, #224	; (adr r3, 8007bc8 <__kernel_cos+0x160>)
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	f7f8 fb87 	bl	80001fc <__adddf3>
 8007aee:	4622      	mov	r2, r4
 8007af0:	462b      	mov	r3, r5
 8007af2:	f7f8 fd39 	bl	8000568 <__aeabi_dmul>
 8007af6:	a336      	add	r3, pc, #216	; (adr r3, 8007bd0 <__kernel_cos+0x168>)
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	f7f8 fb7c 	bl	80001f8 <__aeabi_dsub>
 8007b00:	4622      	mov	r2, r4
 8007b02:	462b      	mov	r3, r5
 8007b04:	f7f8 fd30 	bl	8000568 <__aeabi_dmul>
 8007b08:	a333      	add	r3, pc, #204	; (adr r3, 8007bd8 <__kernel_cos+0x170>)
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	f7f8 fb75 	bl	80001fc <__adddf3>
 8007b12:	4622      	mov	r2, r4
 8007b14:	462b      	mov	r3, r5
 8007b16:	f7f8 fd27 	bl	8000568 <__aeabi_dmul>
 8007b1a:	4622      	mov	r2, r4
 8007b1c:	462b      	mov	r3, r5
 8007b1e:	f7f8 fd23 	bl	8000568 <__aeabi_dmul>
 8007b22:	ec53 2b18 	vmov	r2, r3, d8
 8007b26:	4604      	mov	r4, r0
 8007b28:	460d      	mov	r5, r1
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	f7f8 fd1b 	bl	8000568 <__aeabi_dmul>
 8007b32:	460b      	mov	r3, r1
 8007b34:	4602      	mov	r2, r0
 8007b36:	4629      	mov	r1, r5
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f7f8 fb5d 	bl	80001f8 <__aeabi_dsub>
 8007b3e:	4b29      	ldr	r3, [pc, #164]	; (8007be4 <__kernel_cos+0x17c>)
 8007b40:	429e      	cmp	r6, r3
 8007b42:	4680      	mov	r8, r0
 8007b44:	4689      	mov	r9, r1
 8007b46:	dc11      	bgt.n	8007b6c <__kernel_cos+0x104>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4650      	mov	r0, sl
 8007b4e:	4659      	mov	r1, fp
 8007b50:	f7f8 fb52 	bl	80001f8 <__aeabi_dsub>
 8007b54:	460b      	mov	r3, r1
 8007b56:	4924      	ldr	r1, [pc, #144]	; (8007be8 <__kernel_cos+0x180>)
 8007b58:	4602      	mov	r2, r0
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	f7f8 fb4c 	bl	80001f8 <__aeabi_dsub>
 8007b60:	ecbd 8b02 	vpop	{d8}
 8007b64:	ec41 0b10 	vmov	d0, r0, r1
 8007b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6c:	4b1f      	ldr	r3, [pc, #124]	; (8007bec <__kernel_cos+0x184>)
 8007b6e:	491e      	ldr	r1, [pc, #120]	; (8007be8 <__kernel_cos+0x180>)
 8007b70:	429e      	cmp	r6, r3
 8007b72:	bfcc      	ite	gt
 8007b74:	4d1e      	ldrgt	r5, [pc, #120]	; (8007bf0 <__kernel_cos+0x188>)
 8007b76:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8007b7a:	2400      	movs	r4, #0
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	462b      	mov	r3, r5
 8007b80:	2000      	movs	r0, #0
 8007b82:	f7f8 fb39 	bl	80001f8 <__aeabi_dsub>
 8007b86:	4622      	mov	r2, r4
 8007b88:	4606      	mov	r6, r0
 8007b8a:	460f      	mov	r7, r1
 8007b8c:	462b      	mov	r3, r5
 8007b8e:	4650      	mov	r0, sl
 8007b90:	4659      	mov	r1, fp
 8007b92:	f7f8 fb31 	bl	80001f8 <__aeabi_dsub>
 8007b96:	4642      	mov	r2, r8
 8007b98:	464b      	mov	r3, r9
 8007b9a:	f7f8 fb2d 	bl	80001f8 <__aeabi_dsub>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	4639      	mov	r1, r7
 8007ba6:	e7d9      	b.n	8007b5c <__kernel_cos+0xf4>
 8007ba8:	2000      	movs	r0, #0
 8007baa:	490f      	ldr	r1, [pc, #60]	; (8007be8 <__kernel_cos+0x180>)
 8007bac:	e7d8      	b.n	8007b60 <__kernel_cos+0xf8>
 8007bae:	bf00      	nop
 8007bb0:	be8838d4 	.word	0xbe8838d4
 8007bb4:	bda8fae9 	.word	0xbda8fae9
 8007bb8:	bdb4b1c4 	.word	0xbdb4b1c4
 8007bbc:	3e21ee9e 	.word	0x3e21ee9e
 8007bc0:	809c52ad 	.word	0x809c52ad
 8007bc4:	3e927e4f 	.word	0x3e927e4f
 8007bc8:	19cb1590 	.word	0x19cb1590
 8007bcc:	3efa01a0 	.word	0x3efa01a0
 8007bd0:	16c15177 	.word	0x16c15177
 8007bd4:	3f56c16c 	.word	0x3f56c16c
 8007bd8:	5555554c 	.word	0x5555554c
 8007bdc:	3fa55555 	.word	0x3fa55555
 8007be0:	3fe00000 	.word	0x3fe00000
 8007be4:	3fd33332 	.word	0x3fd33332
 8007be8:	3ff00000 	.word	0x3ff00000
 8007bec:	3fe90000 	.word	0x3fe90000
 8007bf0:	3fd20000 	.word	0x3fd20000
 8007bf4:	00000000 	.word	0x00000000

08007bf8 <__kernel_rem_pio2>:
 8007bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfc:	ed2d 8b02 	vpush	{d8}
 8007c00:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007c04:	1ed4      	subs	r4, r2, #3
 8007c06:	9308      	str	r3, [sp, #32]
 8007c08:	9101      	str	r1, [sp, #4]
 8007c0a:	4bc5      	ldr	r3, [pc, #788]	; (8007f20 <__kernel_rem_pio2+0x328>)
 8007c0c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007c0e:	9009      	str	r0, [sp, #36]	; 0x24
 8007c10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c14:	9304      	str	r3, [sp, #16]
 8007c16:	9b08      	ldr	r3, [sp, #32]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	9307      	str	r3, [sp, #28]
 8007c1c:	2318      	movs	r3, #24
 8007c1e:	fb94 f4f3 	sdiv	r4, r4, r3
 8007c22:	f06f 0317 	mvn.w	r3, #23
 8007c26:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8007c2a:	fb04 3303 	mla	r3, r4, r3, r3
 8007c2e:	eb03 0a02 	add.w	sl, r3, r2
 8007c32:	9b04      	ldr	r3, [sp, #16]
 8007c34:	9a07      	ldr	r2, [sp, #28]
 8007c36:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007f10 <__kernel_rem_pio2+0x318>
 8007c3a:	eb03 0802 	add.w	r8, r3, r2
 8007c3e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007c40:	1aa7      	subs	r7, r4, r2
 8007c42:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007c46:	ae22      	add	r6, sp, #136	; 0x88
 8007c48:	2500      	movs	r5, #0
 8007c4a:	4545      	cmp	r5, r8
 8007c4c:	dd13      	ble.n	8007c76 <__kernel_rem_pio2+0x7e>
 8007c4e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8007f10 <__kernel_rem_pio2+0x318>
 8007c52:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007c56:	2600      	movs	r6, #0
 8007c58:	9b04      	ldr	r3, [sp, #16]
 8007c5a:	429e      	cmp	r6, r3
 8007c5c:	dc32      	bgt.n	8007cc4 <__kernel_rem_pio2+0xcc>
 8007c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c60:	9302      	str	r3, [sp, #8]
 8007c62:	9b08      	ldr	r3, [sp, #32]
 8007c64:	199d      	adds	r5, r3, r6
 8007c66:	ab22      	add	r3, sp, #136	; 0x88
 8007c68:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007c6c:	9306      	str	r3, [sp, #24]
 8007c6e:	ec59 8b18 	vmov	r8, r9, d8
 8007c72:	2700      	movs	r7, #0
 8007c74:	e01f      	b.n	8007cb6 <__kernel_rem_pio2+0xbe>
 8007c76:	42ef      	cmn	r7, r5
 8007c78:	d407      	bmi.n	8007c8a <__kernel_rem_pio2+0x92>
 8007c7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007c7e:	f7f8 fc09 	bl	8000494 <__aeabi_i2d>
 8007c82:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007c86:	3501      	adds	r5, #1
 8007c88:	e7df      	b.n	8007c4a <__kernel_rem_pio2+0x52>
 8007c8a:	ec51 0b18 	vmov	r0, r1, d8
 8007c8e:	e7f8      	b.n	8007c82 <__kernel_rem_pio2+0x8a>
 8007c90:	9906      	ldr	r1, [sp, #24]
 8007c92:	9d02      	ldr	r5, [sp, #8]
 8007c94:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007c98:	9106      	str	r1, [sp, #24]
 8007c9a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8007c9e:	9502      	str	r5, [sp, #8]
 8007ca0:	f7f8 fc62 	bl	8000568 <__aeabi_dmul>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4640      	mov	r0, r8
 8007caa:	4649      	mov	r1, r9
 8007cac:	f7f8 faa6 	bl	80001fc <__adddf3>
 8007cb0:	3701      	adds	r7, #1
 8007cb2:	4680      	mov	r8, r0
 8007cb4:	4689      	mov	r9, r1
 8007cb6:	9b07      	ldr	r3, [sp, #28]
 8007cb8:	429f      	cmp	r7, r3
 8007cba:	dde9      	ble.n	8007c90 <__kernel_rem_pio2+0x98>
 8007cbc:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007cc0:	3601      	adds	r6, #1
 8007cc2:	e7c9      	b.n	8007c58 <__kernel_rem_pio2+0x60>
 8007cc4:	9b04      	ldr	r3, [sp, #16]
 8007cc6:	aa0e      	add	r2, sp, #56	; 0x38
 8007cc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ccc:	930c      	str	r3, [sp, #48]	; 0x30
 8007cce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007cd0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007cd4:	9c04      	ldr	r4, [sp, #16]
 8007cd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cd8:	ab9a      	add	r3, sp, #616	; 0x268
 8007cda:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8007cde:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ce2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ce6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8007cea:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8007cee:	ab9a      	add	r3, sp, #616	; 0x268
 8007cf0:	445b      	add	r3, fp
 8007cf2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8007cf6:	2500      	movs	r5, #0
 8007cf8:	1b63      	subs	r3, r4, r5
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	dc78      	bgt.n	8007df0 <__kernel_rem_pio2+0x1f8>
 8007cfe:	4650      	mov	r0, sl
 8007d00:	ec49 8b10 	vmov	d0, r8, r9
 8007d04:	f000 fc00 	bl	8008508 <scalbn>
 8007d08:	ec57 6b10 	vmov	r6, r7, d0
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007d12:	ee10 0a10 	vmov	r0, s0
 8007d16:	4639      	mov	r1, r7
 8007d18:	f7f8 fc26 	bl	8000568 <__aeabi_dmul>
 8007d1c:	ec41 0b10 	vmov	d0, r0, r1
 8007d20:	f000 fb6e 	bl	8008400 <floor>
 8007d24:	2200      	movs	r2, #0
 8007d26:	ec51 0b10 	vmov	r0, r1, d0
 8007d2a:	4b7e      	ldr	r3, [pc, #504]	; (8007f24 <__kernel_rem_pio2+0x32c>)
 8007d2c:	f7f8 fc1c 	bl	8000568 <__aeabi_dmul>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4630      	mov	r0, r6
 8007d36:	4639      	mov	r1, r7
 8007d38:	f7f8 fa5e 	bl	80001f8 <__aeabi_dsub>
 8007d3c:	460f      	mov	r7, r1
 8007d3e:	4606      	mov	r6, r0
 8007d40:	f7f8 feac 	bl	8000a9c <__aeabi_d2iz>
 8007d44:	9006      	str	r0, [sp, #24]
 8007d46:	f7f8 fba5 	bl	8000494 <__aeabi_i2d>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4630      	mov	r0, r6
 8007d50:	4639      	mov	r1, r7
 8007d52:	f7f8 fa51 	bl	80001f8 <__aeabi_dsub>
 8007d56:	f1ba 0f00 	cmp.w	sl, #0
 8007d5a:	4606      	mov	r6, r0
 8007d5c:	460f      	mov	r7, r1
 8007d5e:	dd6c      	ble.n	8007e3a <__kernel_rem_pio2+0x242>
 8007d60:	1e62      	subs	r2, r4, #1
 8007d62:	ab0e      	add	r3, sp, #56	; 0x38
 8007d64:	f1ca 0118 	rsb	r1, sl, #24
 8007d68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007d6c:	9d06      	ldr	r5, [sp, #24]
 8007d6e:	fa40 f301 	asr.w	r3, r0, r1
 8007d72:	441d      	add	r5, r3
 8007d74:	408b      	lsls	r3, r1
 8007d76:	1ac0      	subs	r0, r0, r3
 8007d78:	ab0e      	add	r3, sp, #56	; 0x38
 8007d7a:	9506      	str	r5, [sp, #24]
 8007d7c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007d80:	f1ca 0317 	rsb	r3, sl, #23
 8007d84:	fa40 f303 	asr.w	r3, r0, r3
 8007d88:	9302      	str	r3, [sp, #8]
 8007d8a:	9b02      	ldr	r3, [sp, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	dd62      	ble.n	8007e56 <__kernel_rem_pio2+0x25e>
 8007d90:	9b06      	ldr	r3, [sp, #24]
 8007d92:	2200      	movs	r2, #0
 8007d94:	3301      	adds	r3, #1
 8007d96:	9306      	str	r3, [sp, #24]
 8007d98:	4615      	mov	r5, r2
 8007d9a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007d9e:	4294      	cmp	r4, r2
 8007da0:	f300 8095 	bgt.w	8007ece <__kernel_rem_pio2+0x2d6>
 8007da4:	f1ba 0f00 	cmp.w	sl, #0
 8007da8:	dd07      	ble.n	8007dba <__kernel_rem_pio2+0x1c2>
 8007daa:	f1ba 0f01 	cmp.w	sl, #1
 8007dae:	f000 80a2 	beq.w	8007ef6 <__kernel_rem_pio2+0x2fe>
 8007db2:	f1ba 0f02 	cmp.w	sl, #2
 8007db6:	f000 80c1 	beq.w	8007f3c <__kernel_rem_pio2+0x344>
 8007dba:	9b02      	ldr	r3, [sp, #8]
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d14a      	bne.n	8007e56 <__kernel_rem_pio2+0x25e>
 8007dc0:	4632      	mov	r2, r6
 8007dc2:	463b      	mov	r3, r7
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	4958      	ldr	r1, [pc, #352]	; (8007f28 <__kernel_rem_pio2+0x330>)
 8007dc8:	f7f8 fa16 	bl	80001f8 <__aeabi_dsub>
 8007dcc:	4606      	mov	r6, r0
 8007dce:	460f      	mov	r7, r1
 8007dd0:	2d00      	cmp	r5, #0
 8007dd2:	d040      	beq.n	8007e56 <__kernel_rem_pio2+0x25e>
 8007dd4:	4650      	mov	r0, sl
 8007dd6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007f18 <__kernel_rem_pio2+0x320>
 8007dda:	f000 fb95 	bl	8008508 <scalbn>
 8007dde:	4630      	mov	r0, r6
 8007de0:	4639      	mov	r1, r7
 8007de2:	ec53 2b10 	vmov	r2, r3, d0
 8007de6:	f7f8 fa07 	bl	80001f8 <__aeabi_dsub>
 8007dea:	4606      	mov	r6, r0
 8007dec:	460f      	mov	r7, r1
 8007dee:	e032      	b.n	8007e56 <__kernel_rem_pio2+0x25e>
 8007df0:	2200      	movs	r2, #0
 8007df2:	4b4e      	ldr	r3, [pc, #312]	; (8007f2c <__kernel_rem_pio2+0x334>)
 8007df4:	4640      	mov	r0, r8
 8007df6:	4649      	mov	r1, r9
 8007df8:	f7f8 fbb6 	bl	8000568 <__aeabi_dmul>
 8007dfc:	f7f8 fe4e 	bl	8000a9c <__aeabi_d2iz>
 8007e00:	f7f8 fb48 	bl	8000494 <__aeabi_i2d>
 8007e04:	2200      	movs	r2, #0
 8007e06:	4b4a      	ldr	r3, [pc, #296]	; (8007f30 <__kernel_rem_pio2+0x338>)
 8007e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e0c:	f7f8 fbac 	bl	8000568 <__aeabi_dmul>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4640      	mov	r0, r8
 8007e16:	4649      	mov	r1, r9
 8007e18:	f7f8 f9ee 	bl	80001f8 <__aeabi_dsub>
 8007e1c:	f7f8 fe3e 	bl	8000a9c <__aeabi_d2iz>
 8007e20:	ab0e      	add	r3, sp, #56	; 0x38
 8007e22:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8007e26:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e2e:	f7f8 f9e5 	bl	80001fc <__adddf3>
 8007e32:	3501      	adds	r5, #1
 8007e34:	4680      	mov	r8, r0
 8007e36:	4689      	mov	r9, r1
 8007e38:	e75e      	b.n	8007cf8 <__kernel_rem_pio2+0x100>
 8007e3a:	d105      	bne.n	8007e48 <__kernel_rem_pio2+0x250>
 8007e3c:	1e63      	subs	r3, r4, #1
 8007e3e:	aa0e      	add	r2, sp, #56	; 0x38
 8007e40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007e44:	15c3      	asrs	r3, r0, #23
 8007e46:	e79f      	b.n	8007d88 <__kernel_rem_pio2+0x190>
 8007e48:	2200      	movs	r2, #0
 8007e4a:	4b3a      	ldr	r3, [pc, #232]	; (8007f34 <__kernel_rem_pio2+0x33c>)
 8007e4c:	f7f8 fe12 	bl	8000a74 <__aeabi_dcmpge>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d139      	bne.n	8007ec8 <__kernel_rem_pio2+0x2d0>
 8007e54:	9002      	str	r0, [sp, #8]
 8007e56:	2200      	movs	r2, #0
 8007e58:	2300      	movs	r3, #0
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	f7f8 fdeb 	bl	8000a38 <__aeabi_dcmpeq>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	f000 80c7 	beq.w	8007ff6 <__kernel_rem_pio2+0x3fe>
 8007e68:	1e65      	subs	r5, r4, #1
 8007e6a:	462b      	mov	r3, r5
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	9904      	ldr	r1, [sp, #16]
 8007e70:	428b      	cmp	r3, r1
 8007e72:	da6a      	bge.n	8007f4a <__kernel_rem_pio2+0x352>
 8007e74:	2a00      	cmp	r2, #0
 8007e76:	f000 8088 	beq.w	8007f8a <__kernel_rem_pio2+0x392>
 8007e7a:	ab0e      	add	r3, sp, #56	; 0x38
 8007e7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007e80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 80b4 	beq.w	8007ff2 <__kernel_rem_pio2+0x3fa>
 8007e8a:	4650      	mov	r0, sl
 8007e8c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007f18 <__kernel_rem_pio2+0x320>
 8007e90:	f000 fb3a 	bl	8008508 <scalbn>
 8007e94:	00ec      	lsls	r4, r5, #3
 8007e96:	ab72      	add	r3, sp, #456	; 0x1c8
 8007e98:	191e      	adds	r6, r3, r4
 8007e9a:	ec59 8b10 	vmov	r8, r9, d0
 8007e9e:	f106 0a08 	add.w	sl, r6, #8
 8007ea2:	462f      	mov	r7, r5
 8007ea4:	2f00      	cmp	r7, #0
 8007ea6:	f280 80df 	bge.w	8008068 <__kernel_rem_pio2+0x470>
 8007eaa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8007f10 <__kernel_rem_pio2+0x318>
 8007eae:	f04f 0a00 	mov.w	sl, #0
 8007eb2:	eba5 030a 	sub.w	r3, r5, sl
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f2c0 810a 	blt.w	80080d0 <__kernel_rem_pio2+0x4d8>
 8007ebc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007f38 <__kernel_rem_pio2+0x340>
 8007ec0:	ec59 8b18 	vmov	r8, r9, d8
 8007ec4:	2700      	movs	r7, #0
 8007ec6:	e0f5      	b.n	80080b4 <__kernel_rem_pio2+0x4bc>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	9302      	str	r3, [sp, #8]
 8007ecc:	e760      	b.n	8007d90 <__kernel_rem_pio2+0x198>
 8007ece:	ab0e      	add	r3, sp, #56	; 0x38
 8007ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed4:	b94d      	cbnz	r5, 8007eea <__kernel_rem_pio2+0x2f2>
 8007ed6:	b12b      	cbz	r3, 8007ee4 <__kernel_rem_pio2+0x2ec>
 8007ed8:	a80e      	add	r0, sp, #56	; 0x38
 8007eda:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007ede:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	3201      	adds	r2, #1
 8007ee6:	461d      	mov	r5, r3
 8007ee8:	e759      	b.n	8007d9e <__kernel_rem_pio2+0x1a6>
 8007eea:	a80e      	add	r0, sp, #56	; 0x38
 8007eec:	1acb      	subs	r3, r1, r3
 8007eee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007ef2:	462b      	mov	r3, r5
 8007ef4:	e7f6      	b.n	8007ee4 <__kernel_rem_pio2+0x2ec>
 8007ef6:	1e62      	subs	r2, r4, #1
 8007ef8:	ab0e      	add	r3, sp, #56	; 0x38
 8007efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007f02:	a90e      	add	r1, sp, #56	; 0x38
 8007f04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007f08:	e757      	b.n	8007dba <__kernel_rem_pio2+0x1c2>
 8007f0a:	bf00      	nop
 8007f0c:	f3af 8000 	nop.w
	...
 8007f1c:	3ff00000 	.word	0x3ff00000
 8007f20:	08008858 	.word	0x08008858
 8007f24:	40200000 	.word	0x40200000
 8007f28:	3ff00000 	.word	0x3ff00000
 8007f2c:	3e700000 	.word	0x3e700000
 8007f30:	41700000 	.word	0x41700000
 8007f34:	3fe00000 	.word	0x3fe00000
 8007f38:	08008818 	.word	0x08008818
 8007f3c:	1e62      	subs	r2, r4, #1
 8007f3e:	ab0e      	add	r3, sp, #56	; 0x38
 8007f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f44:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007f48:	e7db      	b.n	8007f02 <__kernel_rem_pio2+0x30a>
 8007f4a:	a90e      	add	r1, sp, #56	; 0x38
 8007f4c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	430a      	orrs	r2, r1
 8007f54:	e78b      	b.n	8007e6e <__kernel_rem_pio2+0x276>
 8007f56:	3301      	adds	r3, #1
 8007f58:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007f5c:	2900      	cmp	r1, #0
 8007f5e:	d0fa      	beq.n	8007f56 <__kernel_rem_pio2+0x35e>
 8007f60:	9a08      	ldr	r2, [sp, #32]
 8007f62:	4422      	add	r2, r4
 8007f64:	00d2      	lsls	r2, r2, #3
 8007f66:	a922      	add	r1, sp, #136	; 0x88
 8007f68:	18e3      	adds	r3, r4, r3
 8007f6a:	9206      	str	r2, [sp, #24]
 8007f6c:	440a      	add	r2, r1
 8007f6e:	9302      	str	r3, [sp, #8]
 8007f70:	f10b 0108 	add.w	r1, fp, #8
 8007f74:	f102 0308 	add.w	r3, r2, #8
 8007f78:	1c66      	adds	r6, r4, #1
 8007f7a:	910a      	str	r1, [sp, #40]	; 0x28
 8007f7c:	2500      	movs	r5, #0
 8007f7e:	930d      	str	r3, [sp, #52]	; 0x34
 8007f80:	9b02      	ldr	r3, [sp, #8]
 8007f82:	42b3      	cmp	r3, r6
 8007f84:	da04      	bge.n	8007f90 <__kernel_rem_pio2+0x398>
 8007f86:	461c      	mov	r4, r3
 8007f88:	e6a6      	b.n	8007cd8 <__kernel_rem_pio2+0xe0>
 8007f8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e7e3      	b.n	8007f58 <__kernel_rem_pio2+0x360>
 8007f90:	9b06      	ldr	r3, [sp, #24]
 8007f92:	18ef      	adds	r7, r5, r3
 8007f94:	ab22      	add	r3, sp, #136	; 0x88
 8007f96:	441f      	add	r7, r3
 8007f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f9a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007f9e:	f7f8 fa79 	bl	8000494 <__aeabi_i2d>
 8007fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa4:	461c      	mov	r4, r3
 8007fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fa8:	e9c7 0100 	strd	r0, r1, [r7]
 8007fac:	eb03 0b05 	add.w	fp, r3, r5
 8007fb0:	2700      	movs	r7, #0
 8007fb2:	f04f 0800 	mov.w	r8, #0
 8007fb6:	f04f 0900 	mov.w	r9, #0
 8007fba:	9b07      	ldr	r3, [sp, #28]
 8007fbc:	429f      	cmp	r7, r3
 8007fbe:	dd08      	ble.n	8007fd2 <__kernel_rem_pio2+0x3da>
 8007fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc2:	aa72      	add	r2, sp, #456	; 0x1c8
 8007fc4:	18eb      	adds	r3, r5, r3
 8007fc6:	4413      	add	r3, r2
 8007fc8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8007fcc:	3601      	adds	r6, #1
 8007fce:	3508      	adds	r5, #8
 8007fd0:	e7d6      	b.n	8007f80 <__kernel_rem_pio2+0x388>
 8007fd2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007fd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007fda:	f7f8 fac5 	bl	8000568 <__aeabi_dmul>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4640      	mov	r0, r8
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	f7f8 f909 	bl	80001fc <__adddf3>
 8007fea:	3701      	adds	r7, #1
 8007fec:	4680      	mov	r8, r0
 8007fee:	4689      	mov	r9, r1
 8007ff0:	e7e3      	b.n	8007fba <__kernel_rem_pio2+0x3c2>
 8007ff2:	3d01      	subs	r5, #1
 8007ff4:	e741      	b.n	8007e7a <__kernel_rem_pio2+0x282>
 8007ff6:	f1ca 0000 	rsb	r0, sl, #0
 8007ffa:	ec47 6b10 	vmov	d0, r6, r7
 8007ffe:	f000 fa83 	bl	8008508 <scalbn>
 8008002:	ec57 6b10 	vmov	r6, r7, d0
 8008006:	2200      	movs	r2, #0
 8008008:	4b99      	ldr	r3, [pc, #612]	; (8008270 <__kernel_rem_pio2+0x678>)
 800800a:	ee10 0a10 	vmov	r0, s0
 800800e:	4639      	mov	r1, r7
 8008010:	f7f8 fd30 	bl	8000a74 <__aeabi_dcmpge>
 8008014:	b1f8      	cbz	r0, 8008056 <__kernel_rem_pio2+0x45e>
 8008016:	2200      	movs	r2, #0
 8008018:	4b96      	ldr	r3, [pc, #600]	; (8008274 <__kernel_rem_pio2+0x67c>)
 800801a:	4630      	mov	r0, r6
 800801c:	4639      	mov	r1, r7
 800801e:	f7f8 faa3 	bl	8000568 <__aeabi_dmul>
 8008022:	f7f8 fd3b 	bl	8000a9c <__aeabi_d2iz>
 8008026:	4680      	mov	r8, r0
 8008028:	f7f8 fa34 	bl	8000494 <__aeabi_i2d>
 800802c:	2200      	movs	r2, #0
 800802e:	4b90      	ldr	r3, [pc, #576]	; (8008270 <__kernel_rem_pio2+0x678>)
 8008030:	f7f8 fa9a 	bl	8000568 <__aeabi_dmul>
 8008034:	460b      	mov	r3, r1
 8008036:	4602      	mov	r2, r0
 8008038:	4639      	mov	r1, r7
 800803a:	4630      	mov	r0, r6
 800803c:	f7f8 f8dc 	bl	80001f8 <__aeabi_dsub>
 8008040:	f7f8 fd2c 	bl	8000a9c <__aeabi_d2iz>
 8008044:	1c65      	adds	r5, r4, #1
 8008046:	ab0e      	add	r3, sp, #56	; 0x38
 8008048:	f10a 0a18 	add.w	sl, sl, #24
 800804c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008050:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008054:	e719      	b.n	8007e8a <__kernel_rem_pio2+0x292>
 8008056:	4630      	mov	r0, r6
 8008058:	4639      	mov	r1, r7
 800805a:	f7f8 fd1f 	bl	8000a9c <__aeabi_d2iz>
 800805e:	ab0e      	add	r3, sp, #56	; 0x38
 8008060:	4625      	mov	r5, r4
 8008062:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008066:	e710      	b.n	8007e8a <__kernel_rem_pio2+0x292>
 8008068:	ab0e      	add	r3, sp, #56	; 0x38
 800806a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800806e:	f7f8 fa11 	bl	8000494 <__aeabi_i2d>
 8008072:	4642      	mov	r2, r8
 8008074:	464b      	mov	r3, r9
 8008076:	f7f8 fa77 	bl	8000568 <__aeabi_dmul>
 800807a:	2200      	movs	r2, #0
 800807c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008080:	4b7c      	ldr	r3, [pc, #496]	; (8008274 <__kernel_rem_pio2+0x67c>)
 8008082:	4640      	mov	r0, r8
 8008084:	4649      	mov	r1, r9
 8008086:	f7f8 fa6f 	bl	8000568 <__aeabi_dmul>
 800808a:	3f01      	subs	r7, #1
 800808c:	4680      	mov	r8, r0
 800808e:	4689      	mov	r9, r1
 8008090:	e708      	b.n	8007ea4 <__kernel_rem_pio2+0x2ac>
 8008092:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800809e:	f7f8 fa63 	bl	8000568 <__aeabi_dmul>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4640      	mov	r0, r8
 80080a8:	4649      	mov	r1, r9
 80080aa:	f7f8 f8a7 	bl	80001fc <__adddf3>
 80080ae:	3701      	adds	r7, #1
 80080b0:	4680      	mov	r8, r0
 80080b2:	4689      	mov	r9, r1
 80080b4:	9b04      	ldr	r3, [sp, #16]
 80080b6:	429f      	cmp	r7, r3
 80080b8:	dc01      	bgt.n	80080be <__kernel_rem_pio2+0x4c6>
 80080ba:	45ba      	cmp	sl, r7
 80080bc:	dae9      	bge.n	8008092 <__kernel_rem_pio2+0x49a>
 80080be:	ab4a      	add	r3, sp, #296	; 0x128
 80080c0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80080c4:	e9c3 8900 	strd	r8, r9, [r3]
 80080c8:	f10a 0a01 	add.w	sl, sl, #1
 80080cc:	3e08      	subs	r6, #8
 80080ce:	e6f0      	b.n	8007eb2 <__kernel_rem_pio2+0x2ba>
 80080d0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d85b      	bhi.n	800818e <__kernel_rem_pio2+0x596>
 80080d6:	e8df f003 	tbb	[pc, r3]
 80080da:	264a      	.short	0x264a
 80080dc:	0226      	.short	0x0226
 80080de:	ab9a      	add	r3, sp, #616	; 0x268
 80080e0:	441c      	add	r4, r3
 80080e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80080e6:	46a2      	mov	sl, r4
 80080e8:	46ab      	mov	fp, r5
 80080ea:	f1bb 0f00 	cmp.w	fp, #0
 80080ee:	dc6c      	bgt.n	80081ca <__kernel_rem_pio2+0x5d2>
 80080f0:	46a2      	mov	sl, r4
 80080f2:	46ab      	mov	fp, r5
 80080f4:	f1bb 0f01 	cmp.w	fp, #1
 80080f8:	f300 8086 	bgt.w	8008208 <__kernel_rem_pio2+0x610>
 80080fc:	2000      	movs	r0, #0
 80080fe:	2100      	movs	r1, #0
 8008100:	2d01      	cmp	r5, #1
 8008102:	f300 80a0 	bgt.w	8008246 <__kernel_rem_pio2+0x64e>
 8008106:	9b02      	ldr	r3, [sp, #8]
 8008108:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800810c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8008110:	2b00      	cmp	r3, #0
 8008112:	f040 809e 	bne.w	8008252 <__kernel_rem_pio2+0x65a>
 8008116:	9b01      	ldr	r3, [sp, #4]
 8008118:	e9c3 7800 	strd	r7, r8, [r3]
 800811c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008120:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008124:	e033      	b.n	800818e <__kernel_rem_pio2+0x596>
 8008126:	3408      	adds	r4, #8
 8008128:	ab4a      	add	r3, sp, #296	; 0x128
 800812a:	441c      	add	r4, r3
 800812c:	462e      	mov	r6, r5
 800812e:	2000      	movs	r0, #0
 8008130:	2100      	movs	r1, #0
 8008132:	2e00      	cmp	r6, #0
 8008134:	da3a      	bge.n	80081ac <__kernel_rem_pio2+0x5b4>
 8008136:	9b02      	ldr	r3, [sp, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d03d      	beq.n	80081b8 <__kernel_rem_pio2+0x5c0>
 800813c:	4602      	mov	r2, r0
 800813e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008142:	9c01      	ldr	r4, [sp, #4]
 8008144:	e9c4 2300 	strd	r2, r3, [r4]
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008150:	f7f8 f852 	bl	80001f8 <__aeabi_dsub>
 8008154:	ae4c      	add	r6, sp, #304	; 0x130
 8008156:	2401      	movs	r4, #1
 8008158:	42a5      	cmp	r5, r4
 800815a:	da30      	bge.n	80081be <__kernel_rem_pio2+0x5c6>
 800815c:	9b02      	ldr	r3, [sp, #8]
 800815e:	b113      	cbz	r3, 8008166 <__kernel_rem_pio2+0x56e>
 8008160:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008164:	4619      	mov	r1, r3
 8008166:	9b01      	ldr	r3, [sp, #4]
 8008168:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800816c:	e00f      	b.n	800818e <__kernel_rem_pio2+0x596>
 800816e:	ab9a      	add	r3, sp, #616	; 0x268
 8008170:	441c      	add	r4, r3
 8008172:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008176:	2000      	movs	r0, #0
 8008178:	2100      	movs	r1, #0
 800817a:	2d00      	cmp	r5, #0
 800817c:	da10      	bge.n	80081a0 <__kernel_rem_pio2+0x5a8>
 800817e:	9b02      	ldr	r3, [sp, #8]
 8008180:	b113      	cbz	r3, 8008188 <__kernel_rem_pio2+0x590>
 8008182:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008186:	4619      	mov	r1, r3
 8008188:	9b01      	ldr	r3, [sp, #4]
 800818a:	e9c3 0100 	strd	r0, r1, [r3]
 800818e:	9b06      	ldr	r3, [sp, #24]
 8008190:	f003 0007 	and.w	r0, r3, #7
 8008194:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008198:	ecbd 8b02 	vpop	{d8}
 800819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80081a4:	f7f8 f82a 	bl	80001fc <__adddf3>
 80081a8:	3d01      	subs	r5, #1
 80081aa:	e7e6      	b.n	800817a <__kernel_rem_pio2+0x582>
 80081ac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80081b0:	f7f8 f824 	bl	80001fc <__adddf3>
 80081b4:	3e01      	subs	r6, #1
 80081b6:	e7bc      	b.n	8008132 <__kernel_rem_pio2+0x53a>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	e7c1      	b.n	8008142 <__kernel_rem_pio2+0x54a>
 80081be:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80081c2:	f7f8 f81b 	bl	80001fc <__adddf3>
 80081c6:	3401      	adds	r4, #1
 80081c8:	e7c6      	b.n	8008158 <__kernel_rem_pio2+0x560>
 80081ca:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80081ce:	ed3a 7b02 	vldmdb	sl!, {d7}
 80081d2:	4640      	mov	r0, r8
 80081d4:	ec53 2b17 	vmov	r2, r3, d7
 80081d8:	4649      	mov	r1, r9
 80081da:	ed8d 7b04 	vstr	d7, [sp, #16]
 80081de:	f7f8 f80d 	bl	80001fc <__adddf3>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4606      	mov	r6, r0
 80081e8:	460f      	mov	r7, r1
 80081ea:	4640      	mov	r0, r8
 80081ec:	4649      	mov	r1, r9
 80081ee:	f7f8 f803 	bl	80001f8 <__aeabi_dsub>
 80081f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081f6:	f7f8 f801 	bl	80001fc <__adddf3>
 80081fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80081fe:	e9ca 0100 	strd	r0, r1, [sl]
 8008202:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8008206:	e770      	b.n	80080ea <__kernel_rem_pio2+0x4f2>
 8008208:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800820c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8008210:	4630      	mov	r0, r6
 8008212:	ec53 2b17 	vmov	r2, r3, d7
 8008216:	4639      	mov	r1, r7
 8008218:	ed8d 7b04 	vstr	d7, [sp, #16]
 800821c:	f7f7 ffee 	bl	80001fc <__adddf3>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4680      	mov	r8, r0
 8008226:	4689      	mov	r9, r1
 8008228:	4630      	mov	r0, r6
 800822a:	4639      	mov	r1, r7
 800822c:	f7f7 ffe4 	bl	80001f8 <__aeabi_dsub>
 8008230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008234:	f7f7 ffe2 	bl	80001fc <__adddf3>
 8008238:	f10b 3bff 	add.w	fp, fp, #4294967295
 800823c:	e9ca 0100 	strd	r0, r1, [sl]
 8008240:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8008244:	e756      	b.n	80080f4 <__kernel_rem_pio2+0x4fc>
 8008246:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800824a:	f7f7 ffd7 	bl	80001fc <__adddf3>
 800824e:	3d01      	subs	r5, #1
 8008250:	e756      	b.n	8008100 <__kernel_rem_pio2+0x508>
 8008252:	9b01      	ldr	r3, [sp, #4]
 8008254:	9a01      	ldr	r2, [sp, #4]
 8008256:	601f      	str	r7, [r3, #0]
 8008258:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800825c:	605c      	str	r4, [r3, #4]
 800825e:	609d      	str	r5, [r3, #8]
 8008260:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008264:	60d3      	str	r3, [r2, #12]
 8008266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800826a:	6110      	str	r0, [r2, #16]
 800826c:	6153      	str	r3, [r2, #20]
 800826e:	e78e      	b.n	800818e <__kernel_rem_pio2+0x596>
 8008270:	41700000 	.word	0x41700000
 8008274:	3e700000 	.word	0x3e700000

08008278 <__kernel_sin>:
 8008278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	ec55 4b10 	vmov	r4, r5, d0
 8008280:	b085      	sub	sp, #20
 8008282:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008286:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800828a:	ed8d 1b00 	vstr	d1, [sp]
 800828e:	9002      	str	r0, [sp, #8]
 8008290:	da06      	bge.n	80082a0 <__kernel_sin+0x28>
 8008292:	ee10 0a10 	vmov	r0, s0
 8008296:	4629      	mov	r1, r5
 8008298:	f7f8 fc00 	bl	8000a9c <__aeabi_d2iz>
 800829c:	2800      	cmp	r0, #0
 800829e:	d051      	beq.n	8008344 <__kernel_sin+0xcc>
 80082a0:	4622      	mov	r2, r4
 80082a2:	462b      	mov	r3, r5
 80082a4:	4620      	mov	r0, r4
 80082a6:	4629      	mov	r1, r5
 80082a8:	f7f8 f95e 	bl	8000568 <__aeabi_dmul>
 80082ac:	4682      	mov	sl, r0
 80082ae:	468b      	mov	fp, r1
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4620      	mov	r0, r4
 80082b6:	4629      	mov	r1, r5
 80082b8:	f7f8 f956 	bl	8000568 <__aeabi_dmul>
 80082bc:	a341      	add	r3, pc, #260	; (adr r3, 80083c4 <__kernel_sin+0x14c>)
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	4680      	mov	r8, r0
 80082c4:	4689      	mov	r9, r1
 80082c6:	4650      	mov	r0, sl
 80082c8:	4659      	mov	r1, fp
 80082ca:	f7f8 f94d 	bl	8000568 <__aeabi_dmul>
 80082ce:	a33f      	add	r3, pc, #252	; (adr r3, 80083cc <__kernel_sin+0x154>)
 80082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d4:	f7f7 ff90 	bl	80001f8 <__aeabi_dsub>
 80082d8:	4652      	mov	r2, sl
 80082da:	465b      	mov	r3, fp
 80082dc:	f7f8 f944 	bl	8000568 <__aeabi_dmul>
 80082e0:	a33c      	add	r3, pc, #240	; (adr r3, 80083d4 <__kernel_sin+0x15c>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	f7f7 ff89 	bl	80001fc <__adddf3>
 80082ea:	4652      	mov	r2, sl
 80082ec:	465b      	mov	r3, fp
 80082ee:	f7f8 f93b 	bl	8000568 <__aeabi_dmul>
 80082f2:	a33a      	add	r3, pc, #232	; (adr r3, 80083dc <__kernel_sin+0x164>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f7 ff7e 	bl	80001f8 <__aeabi_dsub>
 80082fc:	4652      	mov	r2, sl
 80082fe:	465b      	mov	r3, fp
 8008300:	f7f8 f932 	bl	8000568 <__aeabi_dmul>
 8008304:	a337      	add	r3, pc, #220	; (adr r3, 80083e4 <__kernel_sin+0x16c>)
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f7f7 ff77 	bl	80001fc <__adddf3>
 800830e:	9b02      	ldr	r3, [sp, #8]
 8008310:	4606      	mov	r6, r0
 8008312:	460f      	mov	r7, r1
 8008314:	b9db      	cbnz	r3, 800834e <__kernel_sin+0xd6>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	4650      	mov	r0, sl
 800831c:	4659      	mov	r1, fp
 800831e:	f7f8 f923 	bl	8000568 <__aeabi_dmul>
 8008322:	a325      	add	r3, pc, #148	; (adr r3, 80083b8 <__kernel_sin+0x140>)
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	f7f7 ff66 	bl	80001f8 <__aeabi_dsub>
 800832c:	4642      	mov	r2, r8
 800832e:	464b      	mov	r3, r9
 8008330:	f7f8 f91a 	bl	8000568 <__aeabi_dmul>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	4620      	mov	r0, r4
 800833a:	4629      	mov	r1, r5
 800833c:	f7f7 ff5e 	bl	80001fc <__adddf3>
 8008340:	4604      	mov	r4, r0
 8008342:	460d      	mov	r5, r1
 8008344:	ec45 4b10 	vmov	d0, r4, r5
 8008348:	b005      	add	sp, #20
 800834a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834e:	2200      	movs	r2, #0
 8008350:	4b1b      	ldr	r3, [pc, #108]	; (80083c0 <__kernel_sin+0x148>)
 8008352:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008356:	f7f8 f907 	bl	8000568 <__aeabi_dmul>
 800835a:	4632      	mov	r2, r6
 800835c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008360:	463b      	mov	r3, r7
 8008362:	4640      	mov	r0, r8
 8008364:	4649      	mov	r1, r9
 8008366:	f7f8 f8ff 	bl	8000568 <__aeabi_dmul>
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008372:	f7f7 ff41 	bl	80001f8 <__aeabi_dsub>
 8008376:	4652      	mov	r2, sl
 8008378:	465b      	mov	r3, fp
 800837a:	f7f8 f8f5 	bl	8000568 <__aeabi_dmul>
 800837e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008382:	f7f7 ff39 	bl	80001f8 <__aeabi_dsub>
 8008386:	a30c      	add	r3, pc, #48	; (adr r3, 80083b8 <__kernel_sin+0x140>)
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	4606      	mov	r6, r0
 800838e:	460f      	mov	r7, r1
 8008390:	4640      	mov	r0, r8
 8008392:	4649      	mov	r1, r9
 8008394:	f7f8 f8e8 	bl	8000568 <__aeabi_dmul>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	4630      	mov	r0, r6
 800839e:	4639      	mov	r1, r7
 80083a0:	f7f7 ff2c 	bl	80001fc <__adddf3>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4620      	mov	r0, r4
 80083aa:	4629      	mov	r1, r5
 80083ac:	f7f7 ff24 	bl	80001f8 <__aeabi_dsub>
 80083b0:	e7c6      	b.n	8008340 <__kernel_sin+0xc8>
 80083b2:	bf00      	nop
 80083b4:	f3af 8000 	nop.w
 80083b8:	55555549 	.word	0x55555549
 80083bc:	3fc55555 	.word	0x3fc55555
 80083c0:	3fe00000 	.word	0x3fe00000
 80083c4:	5acfd57c 	.word	0x5acfd57c
 80083c8:	3de5d93a 	.word	0x3de5d93a
 80083cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80083d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80083d4:	57b1fe7d 	.word	0x57b1fe7d
 80083d8:	3ec71de3 	.word	0x3ec71de3
 80083dc:	19c161d5 	.word	0x19c161d5
 80083e0:	3f2a01a0 	.word	0x3f2a01a0
 80083e4:	1110f8a6 	.word	0x1110f8a6
 80083e8:	3f811111 	.word	0x3f811111

080083ec <fabs>:
 80083ec:	ec51 0b10 	vmov	r0, r1, d0
 80083f0:	ee10 2a10 	vmov	r2, s0
 80083f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80083f8:	ec43 2b10 	vmov	d0, r2, r3
 80083fc:	4770      	bx	lr
	...

08008400 <floor>:
 8008400:	ec51 0b10 	vmov	r0, r1, d0
 8008404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008408:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800840c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008410:	2e13      	cmp	r6, #19
 8008412:	460c      	mov	r4, r1
 8008414:	ee10 5a10 	vmov	r5, s0
 8008418:	4680      	mov	r8, r0
 800841a:	dc34      	bgt.n	8008486 <floor+0x86>
 800841c:	2e00      	cmp	r6, #0
 800841e:	da16      	bge.n	800844e <floor+0x4e>
 8008420:	a335      	add	r3, pc, #212	; (adr r3, 80084f8 <floor+0xf8>)
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	f7f7 fee9 	bl	80001fc <__adddf3>
 800842a:	2200      	movs	r2, #0
 800842c:	2300      	movs	r3, #0
 800842e:	f7f8 fb2b 	bl	8000a88 <__aeabi_dcmpgt>
 8008432:	b148      	cbz	r0, 8008448 <floor+0x48>
 8008434:	2c00      	cmp	r4, #0
 8008436:	da59      	bge.n	80084ec <floor+0xec>
 8008438:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800843c:	4a30      	ldr	r2, [pc, #192]	; (8008500 <floor+0x100>)
 800843e:	432b      	orrs	r3, r5
 8008440:	2500      	movs	r5, #0
 8008442:	42ab      	cmp	r3, r5
 8008444:	bf18      	it	ne
 8008446:	4614      	movne	r4, r2
 8008448:	4621      	mov	r1, r4
 800844a:	4628      	mov	r0, r5
 800844c:	e025      	b.n	800849a <floor+0x9a>
 800844e:	4f2d      	ldr	r7, [pc, #180]	; (8008504 <floor+0x104>)
 8008450:	4137      	asrs	r7, r6
 8008452:	ea01 0307 	and.w	r3, r1, r7
 8008456:	4303      	orrs	r3, r0
 8008458:	d01f      	beq.n	800849a <floor+0x9a>
 800845a:	a327      	add	r3, pc, #156	; (adr r3, 80084f8 <floor+0xf8>)
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	f7f7 fecc 	bl	80001fc <__adddf3>
 8008464:	2200      	movs	r2, #0
 8008466:	2300      	movs	r3, #0
 8008468:	f7f8 fb0e 	bl	8000a88 <__aeabi_dcmpgt>
 800846c:	2800      	cmp	r0, #0
 800846e:	d0eb      	beq.n	8008448 <floor+0x48>
 8008470:	2c00      	cmp	r4, #0
 8008472:	bfbe      	ittt	lt
 8008474:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008478:	fa43 f606 	asrlt.w	r6, r3, r6
 800847c:	19a4      	addlt	r4, r4, r6
 800847e:	ea24 0407 	bic.w	r4, r4, r7
 8008482:	2500      	movs	r5, #0
 8008484:	e7e0      	b.n	8008448 <floor+0x48>
 8008486:	2e33      	cmp	r6, #51	; 0x33
 8008488:	dd0b      	ble.n	80084a2 <floor+0xa2>
 800848a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800848e:	d104      	bne.n	800849a <floor+0x9a>
 8008490:	ee10 2a10 	vmov	r2, s0
 8008494:	460b      	mov	r3, r1
 8008496:	f7f7 feb1 	bl	80001fc <__adddf3>
 800849a:	ec41 0b10 	vmov	d0, r0, r1
 800849e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084a2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80084a6:	f04f 33ff 	mov.w	r3, #4294967295
 80084aa:	fa23 f707 	lsr.w	r7, r3, r7
 80084ae:	4207      	tst	r7, r0
 80084b0:	d0f3      	beq.n	800849a <floor+0x9a>
 80084b2:	a311      	add	r3, pc, #68	; (adr r3, 80084f8 <floor+0xf8>)
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f7f7 fea0 	bl	80001fc <__adddf3>
 80084bc:	2200      	movs	r2, #0
 80084be:	2300      	movs	r3, #0
 80084c0:	f7f8 fae2 	bl	8000a88 <__aeabi_dcmpgt>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d0bf      	beq.n	8008448 <floor+0x48>
 80084c8:	2c00      	cmp	r4, #0
 80084ca:	da02      	bge.n	80084d2 <floor+0xd2>
 80084cc:	2e14      	cmp	r6, #20
 80084ce:	d103      	bne.n	80084d8 <floor+0xd8>
 80084d0:	3401      	adds	r4, #1
 80084d2:	ea25 0507 	bic.w	r5, r5, r7
 80084d6:	e7b7      	b.n	8008448 <floor+0x48>
 80084d8:	2301      	movs	r3, #1
 80084da:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80084de:	fa03 f606 	lsl.w	r6, r3, r6
 80084e2:	4435      	add	r5, r6
 80084e4:	4545      	cmp	r5, r8
 80084e6:	bf38      	it	cc
 80084e8:	18e4      	addcc	r4, r4, r3
 80084ea:	e7f2      	b.n	80084d2 <floor+0xd2>
 80084ec:	2500      	movs	r5, #0
 80084ee:	462c      	mov	r4, r5
 80084f0:	e7aa      	b.n	8008448 <floor+0x48>
 80084f2:	bf00      	nop
 80084f4:	f3af 8000 	nop.w
 80084f8:	8800759c 	.word	0x8800759c
 80084fc:	7e37e43c 	.word	0x7e37e43c
 8008500:	bff00000 	.word	0xbff00000
 8008504:	000fffff 	.word	0x000fffff

08008508 <scalbn>:
 8008508:	b570      	push	{r4, r5, r6, lr}
 800850a:	ec55 4b10 	vmov	r4, r5, d0
 800850e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008512:	4606      	mov	r6, r0
 8008514:	462b      	mov	r3, r5
 8008516:	b9aa      	cbnz	r2, 8008544 <scalbn+0x3c>
 8008518:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800851c:	4323      	orrs	r3, r4
 800851e:	d03b      	beq.n	8008598 <scalbn+0x90>
 8008520:	4b31      	ldr	r3, [pc, #196]	; (80085e8 <scalbn+0xe0>)
 8008522:	4629      	mov	r1, r5
 8008524:	2200      	movs	r2, #0
 8008526:	ee10 0a10 	vmov	r0, s0
 800852a:	f7f8 f81d 	bl	8000568 <__aeabi_dmul>
 800852e:	4b2f      	ldr	r3, [pc, #188]	; (80085ec <scalbn+0xe4>)
 8008530:	429e      	cmp	r6, r3
 8008532:	4604      	mov	r4, r0
 8008534:	460d      	mov	r5, r1
 8008536:	da12      	bge.n	800855e <scalbn+0x56>
 8008538:	a327      	add	r3, pc, #156	; (adr r3, 80085d8 <scalbn+0xd0>)
 800853a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853e:	f7f8 f813 	bl	8000568 <__aeabi_dmul>
 8008542:	e009      	b.n	8008558 <scalbn+0x50>
 8008544:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008548:	428a      	cmp	r2, r1
 800854a:	d10c      	bne.n	8008566 <scalbn+0x5e>
 800854c:	ee10 2a10 	vmov	r2, s0
 8008550:	4620      	mov	r0, r4
 8008552:	4629      	mov	r1, r5
 8008554:	f7f7 fe52 	bl	80001fc <__adddf3>
 8008558:	4604      	mov	r4, r0
 800855a:	460d      	mov	r5, r1
 800855c:	e01c      	b.n	8008598 <scalbn+0x90>
 800855e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008562:	460b      	mov	r3, r1
 8008564:	3a36      	subs	r2, #54	; 0x36
 8008566:	4432      	add	r2, r6
 8008568:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800856c:	428a      	cmp	r2, r1
 800856e:	dd0b      	ble.n	8008588 <scalbn+0x80>
 8008570:	ec45 4b11 	vmov	d1, r4, r5
 8008574:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80085e0 <scalbn+0xd8>
 8008578:	f000 f83c 	bl	80085f4 <copysign>
 800857c:	a318      	add	r3, pc, #96	; (adr r3, 80085e0 <scalbn+0xd8>)
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	ec51 0b10 	vmov	r0, r1, d0
 8008586:	e7da      	b.n	800853e <scalbn+0x36>
 8008588:	2a00      	cmp	r2, #0
 800858a:	dd08      	ble.n	800859e <scalbn+0x96>
 800858c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008590:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008594:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008598:	ec45 4b10 	vmov	d0, r4, r5
 800859c:	bd70      	pop	{r4, r5, r6, pc}
 800859e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80085a2:	da0d      	bge.n	80085c0 <scalbn+0xb8>
 80085a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80085a8:	429e      	cmp	r6, r3
 80085aa:	ec45 4b11 	vmov	d1, r4, r5
 80085ae:	dce1      	bgt.n	8008574 <scalbn+0x6c>
 80085b0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80085d8 <scalbn+0xd0>
 80085b4:	f000 f81e 	bl	80085f4 <copysign>
 80085b8:	a307      	add	r3, pc, #28	; (adr r3, 80085d8 <scalbn+0xd0>)
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	e7e0      	b.n	8008582 <scalbn+0x7a>
 80085c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80085c4:	3236      	adds	r2, #54	; 0x36
 80085c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80085ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80085ce:	4620      	mov	r0, r4
 80085d0:	4629      	mov	r1, r5
 80085d2:	2200      	movs	r2, #0
 80085d4:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <scalbn+0xe8>)
 80085d6:	e7b2      	b.n	800853e <scalbn+0x36>
 80085d8:	c2f8f359 	.word	0xc2f8f359
 80085dc:	01a56e1f 	.word	0x01a56e1f
 80085e0:	8800759c 	.word	0x8800759c
 80085e4:	7e37e43c 	.word	0x7e37e43c
 80085e8:	43500000 	.word	0x43500000
 80085ec:	ffff3cb0 	.word	0xffff3cb0
 80085f0:	3c900000 	.word	0x3c900000

080085f4 <copysign>:
 80085f4:	ec51 0b10 	vmov	r0, r1, d0
 80085f8:	ee11 0a90 	vmov	r0, s3
 80085fc:	ee10 2a10 	vmov	r2, s0
 8008600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008604:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008608:	ea41 0300 	orr.w	r3, r1, r0
 800860c:	ec43 2b10 	vmov	d0, r2, r3
 8008610:	4770      	bx	lr
	...

08008614 <_init>:
 8008614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008616:	bf00      	nop
 8008618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800861a:	bc08      	pop	{r3}
 800861c:	469e      	mov	lr, r3
 800861e:	4770      	bx	lr

08008620 <_fini>:
 8008620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008622:	bf00      	nop
 8008624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008626:	bc08      	pop	{r3}
 8008628:	469e      	mov	lr, r3
 800862a:	4770      	bx	lr
