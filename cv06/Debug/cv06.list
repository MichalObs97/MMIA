
cv06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001740  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001800  08001800  00011800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001830  08001830  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001830  08001830  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001830  08001830  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001830  08001830  00011830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001834  08001834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001844  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001844  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003695  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f6b  00000000  00000000  000236c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003c0  00000000  00000000  00024638  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000328  00000000  00000000  000249f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000bc8f  00000000  00000000  00024d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000049c1  00000000  00000000  000309af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00040766  00000000  00000000  00035370  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00075ad6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b6c  00000000  00000000  00075b54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080017e8 	.word	0x080017e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080017e8 	.word	0x080017e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <OWInit>:
/******************************************************************
 * LOW LEVEL functions for 1-wire bus
 ******************************************************************/

void OWInit(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
    OWSetLink(1);
 8000224:	2390      	movs	r3, #144	; 0x90
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	2280      	movs	r2, #128	; 0x80
 800022a:	00d2      	lsls	r2, r2, #3
 800022c:	619a      	str	r2, [r3, #24]
    OWInitHw();

    OWReset();
 800022e:	f000 f803 	bl	8000238 <OWReset>
}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <OWReset>:

uint8_t OWReset(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800023e:	b672      	cpsid	i
    uint8_t result;

    DELAY_G;
    __disable_irq();
    OWSetLink(0);
 8000240:	2390      	movs	r3, #144	; 0x90
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	2280      	movs	r2, #128	; 0x80
 8000246:	00d2      	lsls	r2, r2, #3
 8000248:	629a      	str	r2, [r3, #40]	; 0x28
 800024a:	23ff      	movs	r3, #255	; 0xff
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	603b      	str	r3, [r7, #0]

/* Dumb delay for F030. Tuned for default clock configuration, i.e. 48MHz with 1 wait state. */
__attribute__((always_inline))
inline static void _delay_us(volatile uint32_t micros)
{
    micros = (micros * 19) / 4; /* Go to clock cycles */
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	0013      	movs	r3, r2
 8000254:	00db      	lsls	r3, r3, #3
 8000256:	189b      	adds	r3, r3, r2
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	189b      	adds	r3, r3, r2
 800025c:	089b      	lsrs	r3, r3, #2
 800025e:	603b      	str	r3, [r7, #0]
    while (micros--); /* Wait till done */
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	603a      	str	r2, [r7, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d1fa      	bne.n	8000260 <OWReset+0x28>
    DELAY_H;
    OWSetLink(1);
 800026a:	2390      	movs	r3, #144	; 0x90
 800026c:	05db      	lsls	r3, r3, #23
 800026e:	2280      	movs	r2, #128	; 0x80
 8000270:	00d2      	lsls	r2, r2, #3
 8000272:	619a      	str	r2, [r3, #24]
 8000274:	2346      	movs	r3, #70	; 0x46
 8000276:	60bb      	str	r3, [r7, #8]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 8000278:	68ba      	ldr	r2, [r7, #8]
 800027a:	0013      	movs	r3, r2
 800027c:	00db      	lsls	r3, r3, #3
 800027e:	189b      	adds	r3, r3, r2
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	189b      	adds	r3, r3, r2
 8000284:	089b      	lsrs	r3, r3, #2
 8000286:	60bb      	str	r3, [r7, #8]
    while (micros--); /* Wait till done */
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	1e5a      	subs	r2, r3, #1
 800028c:	60ba      	str	r2, [r7, #8]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d1fa      	bne.n	8000288 <OWReset+0x50>
    DELAY_I;
    result = OWGetLink();
 8000292:	2390      	movs	r3, #144	; 0x90
 8000294:	05db      	lsls	r3, r3, #23
 8000296:	691a      	ldr	r2, [r3, #16]
 8000298:	2380      	movs	r3, #128	; 0x80
 800029a:	00db      	lsls	r3, r3, #3
 800029c:	4013      	ands	r3, r2
 800029e:	1e5a      	subs	r2, r3, #1
 80002a0:	4193      	sbcs	r3, r2
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	230f      	movs	r3, #15
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80002aa:	b662      	cpsie	i
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <OWReset+0xa0>)
 80002ae:	607b      	str	r3, [r7, #4]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	0013      	movs	r3, r2
 80002b4:	00db      	lsls	r3, r3, #3
 80002b6:	189b      	adds	r3, r3, r2
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	189b      	adds	r3, r3, r2
 80002bc:	089b      	lsrs	r3, r3, #2
 80002be:	607b      	str	r3, [r7, #4]
    while (micros--); /* Wait till done */
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	1e5a      	subs	r2, r3, #1
 80002c4:	607a      	str	r2, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d1fa      	bne.n	80002c0 <OWReset+0x88>
    __enable_irq();
    DELAY_J;
    return result;
 80002ca:	230f      	movs	r3, #15
 80002cc:	18fb      	adds	r3, r7, r3
 80002ce:	781b      	ldrb	r3, [r3, #0]
}
 80002d0:	0018      	movs	r0, r3
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b004      	add	sp, #16
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	00000d0c 	.word	0x00000d0c

080002dc <OWWriteBit>:

void OWWriteBit(uint8_t bit)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	0002      	movs	r2, r0
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80002e8:	b672      	cpsid	i
    __disable_irq();
    if (bit) {
 80002ea:	1dfb      	adds	r3, r7, #7
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d028      	beq.n	8000344 <OWWriteBit+0x68>
        OWSetLink(0);
 80002f2:	2390      	movs	r3, #144	; 0x90
 80002f4:	05db      	lsls	r3, r3, #23
 80002f6:	2280      	movs	r2, #128	; 0x80
 80002f8:	00d2      	lsls	r2, r2, #3
 80002fa:	629a      	str	r2, [r3, #40]	; 0x28
 80002fc:	2304      	movs	r3, #4
 80002fe:	60bb      	str	r3, [r7, #8]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 8000300:	68ba      	ldr	r2, [r7, #8]
 8000302:	0013      	movs	r3, r2
 8000304:	00db      	lsls	r3, r3, #3
 8000306:	189b      	adds	r3, r3, r2
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	189b      	adds	r3, r3, r2
 800030c:	089b      	lsrs	r3, r3, #2
 800030e:	60bb      	str	r3, [r7, #8]
    while (micros--); /* Wait till done */
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	1e5a      	subs	r2, r3, #1
 8000314:	60ba      	str	r2, [r7, #8]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d1fa      	bne.n	8000310 <OWWriteBit+0x34>
        DELAY_A;
        OWSetLink(1);
 800031a:	2390      	movs	r3, #144	; 0x90
 800031c:	05db      	lsls	r3, r3, #23
 800031e:	2280      	movs	r2, #128	; 0x80
 8000320:	00d2      	lsls	r2, r2, #3
 8000322:	619a      	str	r2, [r3, #24]
 8000324:	2342      	movs	r3, #66	; 0x42
 8000326:	60fb      	str	r3, [r7, #12]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	0013      	movs	r3, r2
 800032c:	00db      	lsls	r3, r3, #3
 800032e:	189b      	adds	r3, r3, r2
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	189b      	adds	r3, r3, r2
 8000334:	089b      	lsrs	r3, r3, #2
 8000336:	60fb      	str	r3, [r7, #12]
    while (micros--); /* Wait till done */
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	1e5a      	subs	r2, r3, #1
 800033c:	60fa      	str	r2, [r7, #12]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d1fa      	bne.n	8000338 <OWWriteBit+0x5c>
 8000342:	e027      	b.n	8000394 <OWWriteBit+0xb8>
        DELAY_B;
    } else {
        OWSetLink(0);
 8000344:	2390      	movs	r3, #144	; 0x90
 8000346:	05db      	lsls	r3, r3, #23
 8000348:	2280      	movs	r2, #128	; 0x80
 800034a:	00d2      	lsls	r2, r2, #3
 800034c:	629a      	str	r2, [r3, #40]	; 0x28
 800034e:	2341      	movs	r3, #65	; 0x41
 8000350:	613b      	str	r3, [r7, #16]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 8000352:	693a      	ldr	r2, [r7, #16]
 8000354:	0013      	movs	r3, r2
 8000356:	00db      	lsls	r3, r3, #3
 8000358:	189b      	adds	r3, r3, r2
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	189b      	adds	r3, r3, r2
 800035e:	089b      	lsrs	r3, r3, #2
 8000360:	613b      	str	r3, [r7, #16]
    while (micros--); /* Wait till done */
 8000362:	693b      	ldr	r3, [r7, #16]
 8000364:	1e5a      	subs	r2, r3, #1
 8000366:	613a      	str	r2, [r7, #16]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d1fa      	bne.n	8000362 <OWWriteBit+0x86>
        DELAY_C;
        OWSetLink(1);
 800036c:	2390      	movs	r3, #144	; 0x90
 800036e:	05db      	lsls	r3, r3, #23
 8000370:	2280      	movs	r2, #128	; 0x80
 8000372:	00d2      	lsls	r2, r2, #3
 8000374:	619a      	str	r2, [r3, #24]
 8000376:	2305      	movs	r3, #5
 8000378:	617b      	str	r3, [r7, #20]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 800037a:	697a      	ldr	r2, [r7, #20]
 800037c:	0013      	movs	r3, r2
 800037e:	00db      	lsls	r3, r3, #3
 8000380:	189b      	adds	r3, r3, r2
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	189b      	adds	r3, r3, r2
 8000386:	089b      	lsrs	r3, r3, #2
 8000388:	617b      	str	r3, [r7, #20]
    while (micros--); /* Wait till done */
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	1e5a      	subs	r2, r3, #1
 800038e:	617a      	str	r2, [r7, #20]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1fa      	bne.n	800038a <OWWriteBit+0xae>
  __ASM volatile ("cpsie i" : : : "memory");
 8000394:	b662      	cpsie	i
        DELAY_D;
    }
    __enable_irq();
}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	46bd      	mov	sp, r7
 800039a:	b006      	add	sp, #24
 800039c:	bd80      	pop	{r7, pc}

0800039e <OWReadBit>:

uint8_t OWReadBit(void)
{
 800039e:	b580      	push	{r7, lr}
 80003a0:	b084      	sub	sp, #16
 80003a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80003a4:	b672      	cpsid	i
    uint8_t result;

    __disable_irq();
    OWSetLink(0);
 80003a6:	2390      	movs	r3, #144	; 0x90
 80003a8:	05db      	lsls	r3, r3, #23
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	00d2      	lsls	r2, r2, #3
 80003ae:	629a      	str	r2, [r3, #40]	; 0x28
 80003b0:	2304      	movs	r3, #4
 80003b2:	603b      	str	r3, [r7, #0]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 80003b4:	683a      	ldr	r2, [r7, #0]
 80003b6:	0013      	movs	r3, r2
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	189b      	adds	r3, r3, r2
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	189b      	adds	r3, r3, r2
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	603b      	str	r3, [r7, #0]
    while (micros--); /* Wait till done */
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	1e5a      	subs	r2, r3, #1
 80003c8:	603a      	str	r2, [r7, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d1fa      	bne.n	80003c4 <OWReadBit+0x26>
    DELAY_A;
    OWSetLink(1);
 80003ce:	2390      	movs	r3, #144	; 0x90
 80003d0:	05db      	lsls	r3, r3, #23
 80003d2:	2280      	movs	r2, #128	; 0x80
 80003d4:	00d2      	lsls	r2, r2, #3
 80003d6:	619a      	str	r2, [r3, #24]
 80003d8:	2309      	movs	r3, #9
 80003da:	60bb      	str	r3, [r7, #8]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 80003dc:	68ba      	ldr	r2, [r7, #8]
 80003de:	0013      	movs	r3, r2
 80003e0:	00db      	lsls	r3, r3, #3
 80003e2:	189b      	adds	r3, r3, r2
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	189b      	adds	r3, r3, r2
 80003e8:	089b      	lsrs	r3, r3, #2
 80003ea:	60bb      	str	r3, [r7, #8]
    while (micros--); /* Wait till done */
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	1e5a      	subs	r2, r3, #1
 80003f0:	60ba      	str	r2, [r7, #8]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1fa      	bne.n	80003ec <OWReadBit+0x4e>
    DELAY_E;
    result = OWGetLink();
 80003f6:	2390      	movs	r3, #144	; 0x90
 80003f8:	05db      	lsls	r3, r3, #23
 80003fa:	691a      	ldr	r2, [r3, #16]
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	4013      	ands	r3, r2
 8000402:	1e5a      	subs	r2, r3, #1
 8000404:	4193      	sbcs	r3, r2
 8000406:	b2da      	uxtb	r2, r3
 8000408:	230f      	movs	r3, #15
 800040a:	18fb      	adds	r3, r7, r3
 800040c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800040e:	b662      	cpsie	i
 8000410:	2337      	movs	r3, #55	; 0x37
 8000412:	607b      	str	r3, [r7, #4]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	0013      	movs	r3, r2
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	189b      	adds	r3, r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	189b      	adds	r3, r3, r2
 8000420:	089b      	lsrs	r3, r3, #2
 8000422:	607b      	str	r3, [r7, #4]
    while (micros--); /* Wait till done */
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	1e5a      	subs	r2, r3, #1
 8000428:	607a      	str	r2, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d1fa      	bne.n	8000424 <OWReadBit+0x86>
    __enable_irq();
    DELAY_F;
    return result;
 800042e:	230f      	movs	r3, #15
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	781b      	ldrb	r3, [r3, #0]
}
 8000434:	0018      	movs	r0, r3
 8000436:	46bd      	mov	sp, r7
 8000438:	b004      	add	sp, #16
 800043a:	bd80      	pop	{r7, pc}

0800043c <OWWriteByte>:

void OWWriteByte(uint8_t data)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	0002      	movs	r2, r0
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8000448:	230f      	movs	r3, #15
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
 8000450:	e012      	b.n	8000478 <OWWriteByte+0x3c>
        OWWriteBit(data & 0x01);
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2201      	movs	r2, #1
 8000458:	4013      	ands	r3, r2
 800045a:	b2db      	uxtb	r3, r3
 800045c:	0018      	movs	r0, r3
 800045e:	f7ff ff3d 	bl	80002dc <OWWriteBit>
        data >>= 1;
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	1dfa      	adds	r2, r7, #7
 8000466:	7812      	ldrb	r2, [r2, #0]
 8000468:	0852      	lsrs	r2, r2, #1
 800046a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++) {
 800046c:	210f      	movs	r1, #15
 800046e:	187b      	adds	r3, r7, r1
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	187b      	adds	r3, r7, r1
 8000474:	3201      	adds	r2, #1
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	230f      	movs	r3, #15
 800047a:	18fb      	adds	r3, r7, r3
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b07      	cmp	r3, #7
 8000480:	d9e7      	bls.n	8000452 <OWWriteByte+0x16>
    }
}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	b004      	add	sp, #16
 8000488:	bd80      	pop	{r7, pc}

0800048a <OWReadByte>:

uint8_t OWReadByte(void)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
    int i, result = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	603b      	str	r3, [r7, #0]

    for (i = 0; i < 8; i++) {
 8000494:	2300      	movs	r3, #0
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	e00d      	b.n	80004b6 <OWReadByte+0x2c>
        result >>= 1;
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	105b      	asrs	r3, r3, #1
 800049e:	603b      	str	r3, [r7, #0]
        if (OWReadBit())
 80004a0:	f7ff ff7d 	bl	800039e <OWReadBit>
 80004a4:	1e03      	subs	r3, r0, #0
 80004a6:	d003      	beq.n	80004b0 <OWReadByte+0x26>
            result |= 0x80;
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	2280      	movs	r2, #128	; 0x80
 80004ac:	4313      	orrs	r3, r2
 80004ae:	603b      	str	r3, [r7, #0]
    for (i = 0; i < 8; i++) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3301      	adds	r3, #1
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2b07      	cmp	r3, #7
 80004ba:	ddee      	ble.n	800049a <OWReadByte+0x10>
    }
    return result;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	b2db      	uxtb	r3, r3
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b002      	add	sp, #8
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <OWSendCmd>:

void OWSendCmd(uint8_t *ROM, uint8_t cmd)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	000a      	movs	r2, r1
 80004d2:	1cfb      	adds	r3, r7, #3
 80004d4:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    OWReset();
 80004d6:	f7ff feaf 	bl	8000238 <OWReset>
    if (ROM == NULL) {
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d103      	bne.n	80004e8 <OWSendCmd+0x20>
        OWWriteByte(OW_SKIP_ROM_CMD);
 80004e0:	20cc      	movs	r0, #204	; 0xcc
 80004e2:	f7ff ffab 	bl	800043c <OWWriteByte>
 80004e6:	e01a      	b.n	800051e <OWSendCmd+0x56>
    } else {
        OWWriteByte(OW_MATCH_ROM_CMD);
 80004e8:	2055      	movs	r0, #85	; 0x55
 80004ea:	f7ff ffa7 	bl	800043c <OWWriteByte>
        for (i = 0; i < 8; i++)
 80004ee:	230f      	movs	r3, #15
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
 80004f6:	e00d      	b.n	8000514 <OWSendCmd+0x4c>
            OWWriteByte(ROM[i]);
 80004f8:	240f      	movs	r4, #15
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	18d3      	adds	r3, r2, r3
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	0018      	movs	r0, r3
 8000506:	f7ff ff99 	bl	800043c <OWWriteByte>
        for (i = 0; i < 8; i++)
 800050a:	193b      	adds	r3, r7, r4
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	193b      	adds	r3, r7, r4
 8000510:	3201      	adds	r2, #1
 8000512:	701a      	strb	r2, [r3, #0]
 8000514:	230f      	movs	r3, #15
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b07      	cmp	r3, #7
 800051c:	d9ec      	bls.n	80004f8 <OWSendCmd+0x30>
    }
    OWWriteByte(cmd);
 800051e:	1cfb      	adds	r3, r7, #3
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	0018      	movs	r0, r3
 8000524:	f7ff ff8a 	bl	800043c <OWWriteByte>
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b005      	add	sp, #20
 800052e:	bd90      	pop	{r4, r7, pc}

08000530 <OWCRC>:

void OWCRC(uint8_t x, uint8_t *crc)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	0002      	movs	r2, r0
 8000538:	6039      	str	r1, [r7, #0]
 800053a:	1dfb      	adds	r3, r7, #7
 800053c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 8; i; i--) {
 800053e:	230f      	movs	r3, #15
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	2208      	movs	r2, #8
 8000544:	701a      	strb	r2, [r3, #0]
 8000546:	e027      	b.n	8000598 <OWCRC+0x68>
        uint8_t mix = (*crc ^ x) & 0x01;
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	781a      	ldrb	r2, [r3, #0]
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4053      	eors	r3, r2
 8000552:	b2da      	uxtb	r2, r3
 8000554:	200e      	movs	r0, #14
 8000556:	183b      	adds	r3, r7, r0
 8000558:	2101      	movs	r1, #1
 800055a:	400a      	ands	r2, r1
 800055c:	701a      	strb	r2, [r3, #0]
        *crc >>= 1;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	085b      	lsrs	r3, r3, #1
 8000564:	b2da      	uxtb	r2, r3
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	701a      	strb	r2, [r3, #0]
        if (mix) {
 800056a:	183b      	adds	r3, r7, r0
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d007      	beq.n	8000582 <OWCRC+0x52>
            *crc ^= 0x8C;
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2274      	movs	r2, #116	; 0x74
 8000578:	4252      	negs	r2, r2
 800057a:	4053      	eors	r3, r2
 800057c:	b2da      	uxtb	r2, r3
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	701a      	strb	r2, [r3, #0]
        }
        x >>= 1;
 8000582:	1dfb      	adds	r3, r7, #7
 8000584:	1dfa      	adds	r2, r7, #7
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	0852      	lsrs	r2, r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 8; i; i--) {
 800058c:	210f      	movs	r1, #15
 800058e:	187b      	adds	r3, r7, r1
 8000590:	781a      	ldrb	r2, [r3, #0]
 8000592:	187b      	adds	r3, r7, r1
 8000594:	3a01      	subs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	230f      	movs	r3, #15
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1d2      	bne.n	8000548 <OWCRC+0x18>
    }
}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b004      	add	sp, #16
 80005a8:	bd80      	pop	{r7, pc}

080005aa <OWConvertAll>:

    return 1;
}

void OWConvertAll(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
    OWSendCmd(NULL, OW_CONVERT_T_CMD);
 80005ae:	2144      	movs	r1, #68	; 0x44
 80005b0:	2000      	movs	r0, #0
 80005b2:	f7ff ff89 	bl	80004c8 <OWSendCmd>
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <OWReadTemperature>:

uint8_t OWReadTemperature(int16_t *result)
{
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    uint8_t i, crc = 0, buf[8];
 80005c4:	2316      	movs	r3, #22
 80005c6:	18fb      	adds	r3, r7, r3
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]

    OWSendCmd(NULL, OW_RD_SCR_CMD);
 80005cc:	21be      	movs	r1, #190	; 0xbe
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff ff7a 	bl	80004c8 <OWSendCmd>
    for (i = 0; i < 8; i++) {
 80005d4:	2317      	movs	r3, #23
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e01a      	b.n	8000614 <OWReadTemperature+0x58>
        buf[i] = OWReadByte();
 80005de:	2417      	movs	r4, #23
 80005e0:	0025      	movs	r5, r4
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	781c      	ldrb	r4, [r3, #0]
 80005e6:	f7ff ff50 	bl	800048a <OWReadByte>
 80005ea:	0003      	movs	r3, r0
 80005ec:	001a      	movs	r2, r3
 80005ee:	210c      	movs	r1, #12
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	551a      	strb	r2, [r3, r4]
        OWCRC(buf[i], &crc);
 80005f4:	002c      	movs	r4, r5
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	187a      	adds	r2, r7, r1
 80005fc:	5cd3      	ldrb	r3, [r2, r3]
 80005fe:	2216      	movs	r2, #22
 8000600:	18ba      	adds	r2, r7, r2
 8000602:	0011      	movs	r1, r2
 8000604:	0018      	movs	r0, r3
 8000606:	f7ff ff93 	bl	8000530 <OWCRC>
    for (i = 0; i < 8; i++) {
 800060a:	193b      	adds	r3, r7, r4
 800060c:	781a      	ldrb	r2, [r3, #0]
 800060e:	193b      	adds	r3, r7, r4
 8000610:	3201      	adds	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	2317      	movs	r3, #23
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b07      	cmp	r3, #7
 800061c:	d9df      	bls.n	80005de <OWReadTemperature+0x22>
    }
    if (crc != OWReadByte()) {
 800061e:	f7ff ff34 	bl	800048a <OWReadByte>
 8000622:	0003      	movs	r3, r0
 8000624:	001a      	movs	r2, r3
 8000626:	2316      	movs	r3, #22
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	429a      	cmp	r2, r3
 800062e:	d004      	beq.n	800063a <OWReadTemperature+0x7e>
        *result = OW_ERR_BADCRC;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a15      	ldr	r2, [pc, #84]	; (8000688 <OWReadTemperature+0xcc>)
 8000634:	801a      	strh	r2, [r3, #0]
        return 0;
 8000636:	2300      	movs	r3, #0
 8000638:	e021      	b.n	800067e <OWReadTemperature+0xc2>
    }

    *result = (int8_t)((buf[1] << 4) | (buf[0] >> 4)) * 100 + (buf[0] & 0x0F) * 100 / 16;
 800063a:	210c      	movs	r1, #12
 800063c:	187b      	adds	r3, r7, r1
 800063e:	785b      	ldrb	r3, [r3, #1]
 8000640:	011b      	lsls	r3, r3, #4
 8000642:	b25a      	sxtb	r2, r3
 8000644:	187b      	adds	r3, r7, r1
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	091b      	lsrs	r3, r3, #4
 800064a:	b2db      	uxtb	r3, r3
 800064c:	b25b      	sxtb	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b25b      	sxtb	r3, r3
 8000652:	b29b      	uxth	r3, r3
 8000654:	2264      	movs	r2, #100	; 0x64
 8000656:	4353      	muls	r3, r2
 8000658:	b29a      	uxth	r2, r3
 800065a:	187b      	adds	r3, r7, r1
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	0019      	movs	r1, r3
 8000660:	230f      	movs	r3, #15
 8000662:	400b      	ands	r3, r1
 8000664:	2164      	movs	r1, #100	; 0x64
 8000666:	434b      	muls	r3, r1
 8000668:	2b00      	cmp	r3, #0
 800066a:	da00      	bge.n	800066e <OWReadTemperature+0xb2>
 800066c:	330f      	adds	r3, #15
 800066e:	111b      	asrs	r3, r3, #4
 8000670:	b29b      	uxth	r3, r3
 8000672:	18d3      	adds	r3, r2, r3
 8000674:	b29b      	uxth	r3, r3
 8000676:	b21a      	sxth	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	801a      	strh	r2, [r3, #0]

    return 1;
 800067c:	2301      	movs	r3, #1
}
 800067e:	0018      	movs	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	b006      	add	sp, #24
 8000684:	bdb0      	pop	{r4, r5, r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	ffff8000 	.word	0xffff8000

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 f967 	bl	8000964 <HAL_Init>

  /* USER CODE BEGIN Init */
  OWInit();
 8000696:	f7ff fdc3 	bl	8000220 <OWInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f80f 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 f84d 	bl	800073c <MX_GPIO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	int16_t temp_18b20;
	OWConvertAll();
 80006a2:	f7ff ff82 	bl	80005aa <OWConvertAll>
	HAL_Delay(CONVERT_T_DELAY);
 80006a6:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <main+0x2c>)
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 f9bf 	bl	8000a2c <HAL_Delay>
	OWReadTemperature(&temp_18b20);
 80006ae:	1dbb      	adds	r3, r7, #6
 80006b0:	0018      	movs	r0, r3
 80006b2:	f7ff ff83 	bl	80005bc <OWReadTemperature>
  {
 80006b6:	e7f4      	b.n	80006a2 <main+0x16>
 80006b8:	000002ee 	.word	0x000002ee

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b091      	sub	sp, #68	; 0x44
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	2410      	movs	r4, #16
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	0018      	movs	r0, r3
 80006c8:	2330      	movs	r3, #48	; 0x30
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f001 f883 	bl	80017d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d2:	003b      	movs	r3, r7
 80006d4:	0018      	movs	r0, r3
 80006d6:	2310      	movs	r3, #16
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f001 f87c 	bl	80017d8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	0021      	movs	r1, r4
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2202      	movs	r2, #2
 80006e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2201      	movs	r2, #1
 80006ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2210      	movs	r2, #16
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 fbf9 	bl	8000ef4 <HAL_RCC_OscConfig>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000706:	f000 f8bb 	bl	8000880 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	003b      	movs	r3, r7
 800070c:	2207      	movs	r2, #7
 800070e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000710:	003b      	movs	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	003b      	movs	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071c:	003b      	movs	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000722:	003b      	movs	r3, r7
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f000 ff00 	bl	800152c <HAL_RCC_ClockConfig>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000730:	f000 f8a6 	bl	8000880 <Error_Handler>
  }
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b011      	add	sp, #68	; 0x44
 800073a:	bd90      	pop	{r4, r7, pc}

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	240c      	movs	r4, #12
 8000744:	193b      	adds	r3, r7, r4
 8000746:	0018      	movs	r0, r3
 8000748:	2314      	movs	r3, #20
 800074a:	001a      	movs	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	f001 f843 	bl	80017d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b47      	ldr	r3, [pc, #284]	; (8000870 <MX_GPIO_Init+0x134>)
 8000754:	695a      	ldr	r2, [r3, #20]
 8000756:	4b46      	ldr	r3, [pc, #280]	; (8000870 <MX_GPIO_Init+0x134>)
 8000758:	2180      	movs	r1, #128	; 0x80
 800075a:	0309      	lsls	r1, r1, #12
 800075c:	430a      	orrs	r2, r1
 800075e:	615a      	str	r2, [r3, #20]
 8000760:	4b43      	ldr	r3, [pc, #268]	; (8000870 <MX_GPIO_Init+0x134>)
 8000762:	695a      	ldr	r2, [r3, #20]
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	031b      	lsls	r3, r3, #12
 8000768:	4013      	ands	r3, r2
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b40      	ldr	r3, [pc, #256]	; (8000870 <MX_GPIO_Init+0x134>)
 8000770:	695a      	ldr	r2, [r3, #20]
 8000772:	4b3f      	ldr	r3, [pc, #252]	; (8000870 <MX_GPIO_Init+0x134>)
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0289      	lsls	r1, r1, #10
 8000778:	430a      	orrs	r2, r1
 800077a:	615a      	str	r2, [r3, #20]
 800077c:	4b3c      	ldr	r3, [pc, #240]	; (8000870 <MX_GPIO_Init+0x134>)
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	029b      	lsls	r3, r3, #10
 8000784:	4013      	ands	r3, r2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b39      	ldr	r3, [pc, #228]	; (8000870 <MX_GPIO_Init+0x134>)
 800078c:	695a      	ldr	r2, [r3, #20]
 800078e:	4b38      	ldr	r3, [pc, #224]	; (8000870 <MX_GPIO_Init+0x134>)
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	02c9      	lsls	r1, r1, #11
 8000794:	430a      	orrs	r2, r1
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	4b35      	ldr	r3, [pc, #212]	; (8000870 <MX_GPIO_Init+0x134>)
 800079a:	695a      	ldr	r2, [r3, #20]
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	02db      	lsls	r3, r3, #11
 80007a0:	4013      	ands	r3, r2
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80007a6:	2390      	movs	r3, #144	; 0x90
 80007a8:	05db      	lsls	r3, r3, #23
 80007aa:	2200      	movs	r2, #0
 80007ac:	2110      	movs	r1, #16
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 fb82 	bl	8000eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin 
 80007b4:	492f      	ldr	r1, [pc, #188]	; (8000874 <MX_GPIO_Init+0x138>)
 80007b6:	4b30      	ldr	r3, [pc, #192]	; (8000878 <MX_GPIO_Init+0x13c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 fb7c 	bl	8000eb8 <HAL_GPIO_WritePin>
                          |SCT_NLA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DQ_GPIO_Port, DQ_Pin, GPIO_PIN_SET);
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	00d9      	lsls	r1, r3, #3
 80007c4:	2390      	movs	r3, #144	; 0x90
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	2201      	movs	r2, #1
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 fb74 	bl	8000eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	2203      	movs	r2, #3
 80007d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2201      	movs	r2, #1
 80007e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	4a25      	ldr	r2, [pc, #148]	; (800087c <MX_GPIO_Init+0x140>)
 80007e6:	0019      	movs	r1, r3
 80007e8:	0010      	movs	r0, r2
 80007ea:	f000 f9f5 	bl	8000bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2210      	movs	r2, #16
 80007f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2201      	movs	r2, #1
 80007f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000806:	193a      	adds	r2, r7, r4
 8000808:	2390      	movs	r3, #144	; 0x90
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	0011      	movs	r1, r2
 800080e:	0018      	movs	r0, r3
 8000810:	f000 f9e2 	bl	8000bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin SCT_NOE_Pin SCT_CLK_Pin SCT_SDI_Pin 
                           SCT_NLA_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin 
 8000814:	0021      	movs	r1, r4
 8000816:	187b      	adds	r3, r7, r1
 8000818:	4a16      	ldr	r2, [pc, #88]	; (8000874 <MX_GPIO_Init+0x138>)
 800081a:	601a      	str	r2, [r3, #0]
                          |SCT_NLA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2201      	movs	r2, #1
 8000820:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	000c      	movs	r4, r1
 8000830:	187b      	adds	r3, r7, r1
 8000832:	4a11      	ldr	r2, [pc, #68]	; (8000878 <MX_GPIO_Init+0x13c>)
 8000834:	0019      	movs	r1, r3
 8000836:	0010      	movs	r0, r2
 8000838:	f000 f9ce 	bl	8000bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DQ_Pin */
  GPIO_InitStruct.Pin = DQ_Pin;
 800083c:	0021      	movs	r1, r4
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	00d2      	lsls	r2, r2, #3
 8000844:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2211      	movs	r2, #17
 800084a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DQ_GPIO_Port, &GPIO_InitStruct);
 8000858:	187a      	adds	r2, r7, r1
 800085a:	2390      	movs	r3, #144	; 0x90
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	0011      	movs	r1, r2
 8000860:	0018      	movs	r0, r3
 8000862:	f000 f9b9 	bl	8000bd8 <HAL_GPIO_Init>

}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b009      	add	sp, #36	; 0x24
 800086c:	bd90      	pop	{r4, r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	40021000 	.word	0x40021000
 8000874:	00000439 	.word	0x00000439
 8000878:	48000400 	.word	0x48000400
 800087c:	48000800 	.word	0x48000800

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_MspInit+0x44>)
 8000894:	699a      	ldr	r2, [r3, #24]
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_MspInit+0x44>)
 8000898:	2101      	movs	r1, #1
 800089a:	430a      	orrs	r2, r1
 800089c:	619a      	str	r2, [r3, #24]
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_MspInit+0x44>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	2201      	movs	r2, #1
 80008a4:	4013      	ands	r3, r2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x44>)
 80008ac:	69da      	ldr	r2, [r3, #28]
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_MspInit+0x44>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0549      	lsls	r1, r1, #21
 80008b4:	430a      	orrs	r2, r1
 80008b6:	61da      	str	r2, [r3, #28]
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_MspInit+0x44>)
 80008ba:	69da      	ldr	r2, [r3, #28]
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	055b      	lsls	r3, r3, #21
 80008c0:	4013      	ands	r3, r2
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b002      	add	sp, #8
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	40021000 	.word	0x40021000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f87a 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000912:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <LoopForever+0x6>)
  ldr r1, =_edata
 8000916:	490e      	ldr	r1, [pc, #56]	; (8000950 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000918:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <LoopForever+0xe>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <LoopForever+0x12>)
  ldr r4, =_ebss
 800092c:	4c0b      	ldr	r4, [pc, #44]	; (800095c <LoopForever+0x16>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800093a:	f7ff ffe4 	bl	8000906 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800093e:	f000 ff27 	bl	8001790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000942:	f7ff fea3 	bl	800068c <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   r0, =_estack
 8000948:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000954:	08001838 	.word	0x08001838
  ldr r2, =_sbss
 8000958:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800095c:	2000002c 	.word	0x2000002c

08000960 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC1_IRQHandler>
	...

08000964 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <HAL_Init+0x24>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_Init+0x24>)
 800096e:	2110      	movs	r1, #16
 8000970:	430a      	orrs	r2, r1
 8000972:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000974:	2000      	movs	r0, #0
 8000976:	f000 f809 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097a:	f7ff ff87 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
}
 8000980:	0018      	movs	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_InitTick+0x5c>)
 8000996:	681c      	ldr	r4, [r3, #0]
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_InitTick+0x60>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	0019      	movs	r1, r3
 800099e:	23fa      	movs	r3, #250	; 0xfa
 80009a0:	0098      	lsls	r0, r3, #2
 80009a2:	f7ff fbb1 	bl	8000108 <__udivsi3>
 80009a6:	0003      	movs	r3, r0
 80009a8:	0019      	movs	r1, r3
 80009aa:	0020      	movs	r0, r4
 80009ac:	f7ff fbac 	bl	8000108 <__udivsi3>
 80009b0:	0003      	movs	r3, r0
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 f903 	bl	8000bbe <HAL_SYSTICK_Config>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	e00f      	b.n	80009e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d80b      	bhi.n	80009de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	2301      	movs	r3, #1
 80009ca:	425b      	negs	r3, r3
 80009cc:	2200      	movs	r2, #0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 f8e0 	bl	8000b94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_InitTick+0x64>)
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	0018      	movs	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b003      	add	sp, #12
 80009e6:	bd90      	pop	{r4, r7, pc}
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_IncTick+0x1c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	001a      	movs	r2, r3
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x20>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	18d2      	adds	r2, r2, r3
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <HAL_IncTick+0x20>)
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000028 	.word	0x20000028

08000a18 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <HAL_GetTick+0x10>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	20000028 	.word	0x20000028

08000a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a34:	f7ff fff0 	bl	8000a18 <HAL_GetTick>
 8000a38:	0003      	movs	r3, r0
 8000a3a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	3301      	adds	r3, #1
 8000a44:	d005      	beq.n	8000a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_Delay+0x40>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	189b      	adds	r3, r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	f7ff ffe0 	bl	8000a18 <HAL_GetTick>
 8000a58:	0002      	movs	r2, r0
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d8f7      	bhi.n	8000a54 <HAL_Delay+0x28>
  {
  }
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b004      	add	sp, #16
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000008 	.word	0x20000008

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	0002      	movs	r2, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b7f      	cmp	r3, #127	; 0x7f
 8000a84:	d828      	bhi.n	8000ad8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a86:	4a2f      	ldr	r2, [pc, #188]	; (8000b44 <__NVIC_SetPriority+0xd4>)
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	33c0      	adds	r3, #192	; 0xc0
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	589b      	ldr	r3, [r3, r2]
 8000a96:	1dfa      	adds	r2, r7, #7
 8000a98:	7812      	ldrb	r2, [r2, #0]
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	400a      	ands	r2, r1
 8000aa0:	00d2      	lsls	r2, r2, #3
 8000aa2:	21ff      	movs	r1, #255	; 0xff
 8000aa4:	4091      	lsls	r1, r2
 8000aa6:	000a      	movs	r2, r1
 8000aa8:	43d2      	mvns	r2, r2
 8000aaa:	401a      	ands	r2, r3
 8000aac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	019b      	lsls	r3, r3, #6
 8000ab2:	22ff      	movs	r2, #255	; 0xff
 8000ab4:	401a      	ands	r2, r3
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	0018      	movs	r0, r3
 8000abc:	2303      	movs	r3, #3
 8000abe:	4003      	ands	r3, r0
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac4:	481f      	ldr	r0, [pc, #124]	; (8000b44 <__NVIC_SetPriority+0xd4>)
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	089b      	lsrs	r3, r3, #2
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	33c0      	adds	r3, #192	; 0xc0
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ad6:	e031      	b.n	8000b3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <__NVIC_SetPriority+0xd8>)
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	0019      	movs	r1, r3
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	400b      	ands	r3, r1
 8000ae4:	3b08      	subs	r3, #8
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	3306      	adds	r3, #6
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	18d3      	adds	r3, r2, r3
 8000aee:	3304      	adds	r3, #4
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	1dfa      	adds	r2, r7, #7
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	0011      	movs	r1, r2
 8000af8:	2203      	movs	r2, #3
 8000afa:	400a      	ands	r2, r1
 8000afc:	00d2      	lsls	r2, r2, #3
 8000afe:	21ff      	movs	r1, #255	; 0xff
 8000b00:	4091      	lsls	r1, r2
 8000b02:	000a      	movs	r2, r1
 8000b04:	43d2      	mvns	r2, r2
 8000b06:	401a      	ands	r2, r3
 8000b08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	22ff      	movs	r2, #255	; 0xff
 8000b10:	401a      	ands	r2, r3
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	0018      	movs	r0, r3
 8000b18:	2303      	movs	r3, #3
 8000b1a:	4003      	ands	r3, r0
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <__NVIC_SetPriority+0xd8>)
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	001c      	movs	r4, r3
 8000b28:	230f      	movs	r3, #15
 8000b2a:	4023      	ands	r3, r4
 8000b2c:	3b08      	subs	r3, #8
 8000b2e:	089b      	lsrs	r3, r3, #2
 8000b30:	430a      	orrs	r2, r1
 8000b32:	3306      	adds	r3, #6
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	18c3      	adds	r3, r0, r3
 8000b38:	3304      	adds	r3, #4
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b003      	add	sp, #12
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <SysTick_Config+0x40>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d901      	bls.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e010      	b.n	8000b84 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <SysTick_Config+0x44>)
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	3a01      	subs	r2, #1
 8000b68:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	425b      	negs	r3, r3
 8000b6e:	2103      	movs	r1, #3
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff ff7d 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SysTick_Config+0x44>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SysTick_Config+0x44>)
 8000b7e:	2207      	movs	r2, #7
 8000b80:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b002      	add	sp, #8
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	00ffffff 	.word	0x00ffffff
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	1c02      	adds	r2, r0, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	0011      	movs	r1, r2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff ff5d 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b004      	add	sp, #16
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff ffbf 	bl	8000b4c <SysTick_Config>
 8000bce:	0003      	movs	r3, r0
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b002      	add	sp, #8
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be6:	e14f      	b.n	8000e88 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2101      	movs	r1, #1
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d100      	bne.n	8000c00 <HAL_GPIO_Init+0x28>
 8000bfe:	e140      	b.n	8000e82 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d003      	beq.n	8000c10 <HAL_GPIO_Init+0x38>
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b12      	cmp	r3, #18
 8000c0e:	d123      	bne.n	8000c58 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	08da      	lsrs	r2, r3, #3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3208      	adds	r2, #8
 8000c18:	0092      	lsls	r2, r2, #2
 8000c1a:	58d3      	ldr	r3, [r2, r3]
 8000c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	2207      	movs	r2, #7
 8000c22:	4013      	ands	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	220f      	movs	r2, #15
 8000c28:	409a      	lsls	r2, r3
 8000c2a:	0013      	movs	r3, r2
 8000c2c:	43da      	mvns	r2, r3
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	691a      	ldr	r2, [r3, #16]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	2107      	movs	r1, #7
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	409a      	lsls	r2, r3
 8000c42:	0013      	movs	r3, r2
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	08da      	lsrs	r2, r3, #3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3208      	adds	r2, #8
 8000c52:	0092      	lsls	r2, r2, #2
 8000c54:	6939      	ldr	r1, [r7, #16]
 8000c56:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2203      	movs	r2, #3
 8000c64:	409a      	lsls	r2, r3
 8000c66:	0013      	movs	r3, r2
 8000c68:	43da      	mvns	r2, r3
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2203      	movs	r2, #3
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	0013      	movs	r3, r2
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d00b      	beq.n	8000cac <HAL_GPIO_Init+0xd4>
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d007      	beq.n	8000cac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca0:	2b11      	cmp	r3, #17
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b12      	cmp	r3, #18
 8000caa:	d130      	bne.n	8000d0e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	409a      	lsls	r2, r3
 8000cba:	0013      	movs	r3, r2
 8000cbc:	43da      	mvns	r2, r3
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68da      	ldr	r2, [r3, #12]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	409a      	lsls	r2, r3
 8000cce:	0013      	movs	r3, r2
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	0013      	movs	r3, r2
 8000cea:	43da      	mvns	r2, r3
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	091b      	lsrs	r3, r3, #4
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
 8000d00:	0013      	movs	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	055b      	lsls	r3, r3, #21
 8000d46:	4013      	ands	r3, r2
 8000d48:	d100      	bne.n	8000d4c <HAL_GPIO_Init+0x174>
 8000d4a:	e09a      	b.n	8000e82 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4c:	4b54      	ldr	r3, [pc, #336]	; (8000ea0 <HAL_GPIO_Init+0x2c8>)
 8000d4e:	699a      	ldr	r2, [r3, #24]
 8000d50:	4b53      	ldr	r3, [pc, #332]	; (8000ea0 <HAL_GPIO_Init+0x2c8>)
 8000d52:	2101      	movs	r1, #1
 8000d54:	430a      	orrs	r2, r1
 8000d56:	619a      	str	r2, [r3, #24]
 8000d58:	4b51      	ldr	r3, [pc, #324]	; (8000ea0 <HAL_GPIO_Init+0x2c8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4013      	ands	r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d64:	4a4f      	ldr	r2, [pc, #316]	; (8000ea4 <HAL_GPIO_Init+0x2cc>)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	589b      	ldr	r3, [r3, r2]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	2203      	movs	r2, #3
 8000d76:	4013      	ands	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	409a      	lsls	r2, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	43da      	mvns	r2, r3
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	2390      	movs	r3, #144	; 0x90
 8000d8c:	05db      	lsls	r3, r3, #23
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0x1e2>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a44      	ldr	r2, [pc, #272]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d00d      	beq.n	8000db6 <HAL_GPIO_Init+0x1de>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a43      	ldr	r2, [pc, #268]	; (8000eac <HAL_GPIO_Init+0x2d4>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d007      	beq.n	8000db2 <HAL_GPIO_Init+0x1da>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a42      	ldr	r2, [pc, #264]	; (8000eb0 <HAL_GPIO_Init+0x2d8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d101      	bne.n	8000dae <HAL_GPIO_Init+0x1d6>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x1e4>
 8000dae:	2305      	movs	r3, #5
 8000db0:	e004      	b.n	8000dbc <HAL_GPIO_Init+0x1e4>
 8000db2:	2302      	movs	r3, #2
 8000db4:	e002      	b.n	8000dbc <HAL_GPIO_Init+0x1e4>
 8000db6:	2301      	movs	r3, #1
 8000db8:	e000      	b.n	8000dbc <HAL_GPIO_Init+0x1e4>
 8000dba:	2300      	movs	r3, #0
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	2103      	movs	r1, #3
 8000dc0:	400a      	ands	r2, r1
 8000dc2:	0092      	lsls	r2, r2, #2
 8000dc4:	4093      	lsls	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dcc:	4935      	ldr	r1, [pc, #212]	; (8000ea4 <HAL_GPIO_Init+0x2cc>)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dda:	4b36      	ldr	r3, [pc, #216]	; (8000eb4 <HAL_GPIO_Init+0x2dc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	43da      	mvns	r2, r3
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	025b      	lsls	r3, r3, #9
 8000df2:	4013      	ands	r3, r2
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dfe:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <HAL_GPIO_Init+0x2dc>)
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e04:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <HAL_GPIO_Init+0x2dc>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	43da      	mvns	r2, r3
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e28:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <HAL_GPIO_Init+0x2dc>)
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <HAL_GPIO_Init+0x2dc>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	43da      	mvns	r2, r3
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	035b      	lsls	r3, r3, #13
 8000e46:	4013      	ands	r3, r2
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_GPIO_Init+0x2dc>)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_GPIO_Init+0x2dc>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	43da      	mvns	r2, r3
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	039b      	lsls	r3, r3, #14
 8000e70:	4013      	ands	r3, r2
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_GPIO_Init+0x2dc>)
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3301      	adds	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	40da      	lsrs	r2, r3
 8000e90:	1e13      	subs	r3, r2, #0
 8000e92:	d000      	beq.n	8000e96 <HAL_GPIO_Init+0x2be>
 8000e94:	e6a8      	b.n	8000be8 <HAL_GPIO_Init+0x10>
  } 
}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b006      	add	sp, #24
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40010000 	.word	0x40010000
 8000ea8:	48000400 	.word	0x48000400
 8000eac:	48000800 	.word	0x48000800
 8000eb0:	48000c00 	.word	0x48000c00
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	0008      	movs	r0, r1
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	1cbb      	adds	r3, r7, #2
 8000ec6:	1c02      	adds	r2, r0, #0
 8000ec8:	801a      	strh	r2, [r3, #0]
 8000eca:	1c7b      	adds	r3, r7, #1
 8000ecc:	1c0a      	adds	r2, r1, #0
 8000ece:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed0:	1c7b      	adds	r3, r7, #1
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d004      	beq.n	8000ee2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ed8:	1cbb      	adds	r3, r7, #2
 8000eda:	881a      	ldrh	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ee0:	e003      	b.n	8000eea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ee2:	1cbb      	adds	r3, r7, #2
 8000ee4:	881a      	ldrh	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e303      	b.n	800150e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d100      	bne.n	8000f12 <HAL_RCC_OscConfig+0x1e>
 8000f10:	e08d      	b.n	800102e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f12:	4bc4      	ldr	r3, [pc, #784]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	220c      	movs	r2, #12
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d00e      	beq.n	8000f3c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f1e:	4bc1      	ldr	r3, [pc, #772]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	220c      	movs	r2, #12
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b08      	cmp	r3, #8
 8000f28:	d116      	bne.n	8000f58 <HAL_RCC_OscConfig+0x64>
 8000f2a:	4bbe      	ldr	r3, [pc, #760]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	025b      	lsls	r3, r3, #9
 8000f32:	401a      	ands	r2, r3
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	025b      	lsls	r3, r3, #9
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d10d      	bne.n	8000f58 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	4bb9      	ldr	r3, [pc, #740]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	029b      	lsls	r3, r3, #10
 8000f44:	4013      	ands	r3, r2
 8000f46:	d100      	bne.n	8000f4a <HAL_RCC_OscConfig+0x56>
 8000f48:	e070      	b.n	800102c <HAL_RCC_OscConfig+0x138>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d000      	beq.n	8000f54 <HAL_RCC_OscConfig+0x60>
 8000f52:	e06b      	b.n	800102c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e2da      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d107      	bne.n	8000f70 <HAL_RCC_OscConfig+0x7c>
 8000f60:	4bb0      	ldr	r3, [pc, #704]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4baf      	ldr	r3, [pc, #700]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000f66:	2180      	movs	r1, #128	; 0x80
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e02f      	b.n	8000fd0 <HAL_RCC_OscConfig+0xdc>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10c      	bne.n	8000f92 <HAL_RCC_OscConfig+0x9e>
 8000f78:	4baa      	ldr	r3, [pc, #680]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4ba9      	ldr	r3, [pc, #676]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000f7e:	49aa      	ldr	r1, [pc, #680]	; (8001228 <HAL_RCC_OscConfig+0x334>)
 8000f80:	400a      	ands	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	4ba7      	ldr	r3, [pc, #668]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4ba6      	ldr	r3, [pc, #664]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000f8a:	49a8      	ldr	r1, [pc, #672]	; (800122c <HAL_RCC_OscConfig+0x338>)
 8000f8c:	400a      	ands	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e01e      	b.n	8000fd0 <HAL_RCC_OscConfig+0xdc>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	d10e      	bne.n	8000fb8 <HAL_RCC_OscConfig+0xc4>
 8000f9a:	4ba2      	ldr	r3, [pc, #648]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4ba1      	ldr	r3, [pc, #644]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	02c9      	lsls	r1, r1, #11
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	4b9e      	ldr	r3, [pc, #632]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b9d      	ldr	r3, [pc, #628]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	0249      	lsls	r1, r1, #9
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e00b      	b.n	8000fd0 <HAL_RCC_OscConfig+0xdc>
 8000fb8:	4b9a      	ldr	r3, [pc, #616]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b99      	ldr	r3, [pc, #612]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000fbe:	499a      	ldr	r1, [pc, #616]	; (8001228 <HAL_RCC_OscConfig+0x334>)
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	4b97      	ldr	r3, [pc, #604]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b96      	ldr	r3, [pc, #600]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000fca:	4998      	ldr	r1, [pc, #608]	; (800122c <HAL_RCC_OscConfig+0x338>)
 8000fcc:	400a      	ands	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d014      	beq.n	8001002 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fd1e 	bl	8000a18 <HAL_GetTick>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fd19 	bl	8000a18 <HAL_GetTick>
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b64      	cmp	r3, #100	; 0x64
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e28c      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff4:	4b8b      	ldr	r3, [pc, #556]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	029b      	lsls	r3, r3, #10
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0xee>
 8001000:	e015      	b.n	800102e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001002:	f7ff fd09 	bl	8000a18 <HAL_GetTick>
 8001006:	0003      	movs	r3, r0
 8001008:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff fd04 	bl	8000a18 <HAL_GetTick>
 8001010:	0002      	movs	r2, r0
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e277      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101e:	4b81      	ldr	r3, [pc, #516]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	029b      	lsls	r3, r3, #10
 8001026:	4013      	ands	r3, r2
 8001028:	d1f0      	bne.n	800100c <HAL_RCC_OscConfig+0x118>
 800102a:	e000      	b.n	800102e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2202      	movs	r2, #2
 8001034:	4013      	ands	r3, r2
 8001036:	d100      	bne.n	800103a <HAL_RCC_OscConfig+0x146>
 8001038:	e069      	b.n	800110e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800103a:	4b7a      	ldr	r3, [pc, #488]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	220c      	movs	r2, #12
 8001040:	4013      	ands	r3, r2
 8001042:	d00b      	beq.n	800105c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001044:	4b77      	ldr	r3, [pc, #476]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	220c      	movs	r2, #12
 800104a:	4013      	ands	r3, r2
 800104c:	2b08      	cmp	r3, #8
 800104e:	d11c      	bne.n	800108a <HAL_RCC_OscConfig+0x196>
 8001050:	4b74      	ldr	r3, [pc, #464]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	025b      	lsls	r3, r3, #9
 8001058:	4013      	ands	r3, r2
 800105a:	d116      	bne.n	800108a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105c:	4b71      	ldr	r3, [pc, #452]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2202      	movs	r2, #2
 8001062:	4013      	ands	r3, r2
 8001064:	d005      	beq.n	8001072 <HAL_RCC_OscConfig+0x17e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d001      	beq.n	8001072 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e24d      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001072:	4b6c      	ldr	r3, [pc, #432]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	22f8      	movs	r2, #248	; 0xf8
 8001078:	4393      	bics	r3, r2
 800107a:	0019      	movs	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	00da      	lsls	r2, r3, #3
 8001082:	4b68      	ldr	r3, [pc, #416]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001088:	e041      	b.n	800110e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d024      	beq.n	80010dc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001092:	4b64      	ldr	r3, [pc, #400]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b63      	ldr	r3, [pc, #396]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8001098:	2101      	movs	r1, #1
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff fcbb 	bl	8000a18 <HAL_GetTick>
 80010a2:	0003      	movs	r3, r0
 80010a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a8:	f7ff fcb6 	bl	8000a18 <HAL_GetTick>
 80010ac:	0002      	movs	r2, r0
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e229      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ba:	4b5a      	ldr	r3, [pc, #360]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2202      	movs	r2, #2
 80010c0:	4013      	ands	r3, r2
 80010c2:	d0f1      	beq.n	80010a8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c4:	4b57      	ldr	r3, [pc, #348]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	22f8      	movs	r2, #248	; 0xf8
 80010ca:	4393      	bics	r3, r2
 80010cc:	0019      	movs	r1, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	00da      	lsls	r2, r3, #3
 80010d4:	4b53      	ldr	r3, [pc, #332]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 80010d6:	430a      	orrs	r2, r1
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	e018      	b.n	800110e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010dc:	4b51      	ldr	r3, [pc, #324]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b50      	ldr	r3, [pc, #320]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 80010e2:	2101      	movs	r1, #1
 80010e4:	438a      	bics	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fc96 	bl	8000a18 <HAL_GetTick>
 80010ec:	0003      	movs	r3, r0
 80010ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f2:	f7ff fc91 	bl	8000a18 <HAL_GetTick>
 80010f6:	0002      	movs	r2, r0
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e204      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001104:	4b47      	ldr	r3, [pc, #284]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2202      	movs	r2, #2
 800110a:	4013      	ands	r3, r2
 800110c:	d1f1      	bne.n	80010f2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2208      	movs	r2, #8
 8001114:	4013      	ands	r3, r2
 8001116:	d036      	beq.n	8001186 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d019      	beq.n	8001154 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001120:	4b40      	ldr	r3, [pc, #256]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8001122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001124:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8001126:	2101      	movs	r1, #1
 8001128:	430a      	orrs	r2, r1
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112c:	f7ff fc74 	bl	8000a18 <HAL_GetTick>
 8001130:	0003      	movs	r3, r0
 8001132:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001136:	f7ff fc6f 	bl	8000a18 <HAL_GetTick>
 800113a:	0002      	movs	r2, r0
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e1e2      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001148:	4b36      	ldr	r3, [pc, #216]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	2202      	movs	r2, #2
 800114e:	4013      	ands	r3, r2
 8001150:	d0f1      	beq.n	8001136 <HAL_RCC_OscConfig+0x242>
 8001152:	e018      	b.n	8001186 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001154:	4b33      	ldr	r3, [pc, #204]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8001156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001158:	4b32      	ldr	r3, [pc, #200]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 800115a:	2101      	movs	r1, #1
 800115c:	438a      	bics	r2, r1
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001160:	f7ff fc5a 	bl	8000a18 <HAL_GetTick>
 8001164:	0003      	movs	r3, r0
 8001166:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800116a:	f7ff fc55 	bl	8000a18 <HAL_GetTick>
 800116e:	0002      	movs	r2, r0
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e1c8      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	2202      	movs	r2, #2
 8001182:	4013      	ands	r3, r2
 8001184:	d1f1      	bne.n	800116a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2204      	movs	r2, #4
 800118c:	4013      	ands	r3, r2
 800118e:	d100      	bne.n	8001192 <HAL_RCC_OscConfig+0x29e>
 8001190:	e0b6      	b.n	8001300 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001192:	231f      	movs	r3, #31
 8001194:	18fb      	adds	r3, r7, r3
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 800119c:	69da      	ldr	r2, [r3, #28]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	055b      	lsls	r3, r3, #21
 80011a2:	4013      	ands	r3, r2
 80011a4:	d111      	bne.n	80011ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 80011a8:	69da      	ldr	r2, [r3, #28]
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	0549      	lsls	r1, r1, #21
 80011b0:	430a      	orrs	r2, r1
 80011b2:	61da      	str	r2, [r3, #28]
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 80011b6:	69da      	ldr	r2, [r3, #28]
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	055b      	lsls	r3, r3, #21
 80011bc:	4013      	ands	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011c2:	231f      	movs	r3, #31
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_RCC_OscConfig+0x33c>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4013      	ands	r3, r2
 80011d4:	d11a      	bne.n	800120c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <HAL_RCC_OscConfig+0x33c>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_RCC_OscConfig+0x33c>)
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	0049      	lsls	r1, r1, #1
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011e4:	f7ff fc18 	bl	8000a18 <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ee:	f7ff fc13 	bl	8000a18 <HAL_GetTick>
 80011f2:	0002      	movs	r2, r0
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b64      	cmp	r3, #100	; 0x64
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e186      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_RCC_OscConfig+0x33c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4013      	ands	r3, r2
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d10f      	bne.n	8001234 <HAL_RCC_OscConfig+0x340>
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 8001216:	6a1a      	ldr	r2, [r3, #32]
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <HAL_RCC_OscConfig+0x330>)
 800121a:	2101      	movs	r1, #1
 800121c:	430a      	orrs	r2, r1
 800121e:	621a      	str	r2, [r3, #32]
 8001220:	e036      	b.n	8001290 <HAL_RCC_OscConfig+0x39c>
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	40021000 	.word	0x40021000
 8001228:	fffeffff 	.word	0xfffeffff
 800122c:	fffbffff 	.word	0xfffbffff
 8001230:	40007000 	.word	0x40007000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10c      	bne.n	8001256 <HAL_RCC_OscConfig+0x362>
 800123c:	4bb6      	ldr	r3, [pc, #728]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 800123e:	6a1a      	ldr	r2, [r3, #32]
 8001240:	4bb5      	ldr	r3, [pc, #724]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001242:	2101      	movs	r1, #1
 8001244:	438a      	bics	r2, r1
 8001246:	621a      	str	r2, [r3, #32]
 8001248:	4bb3      	ldr	r3, [pc, #716]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 800124a:	6a1a      	ldr	r2, [r3, #32]
 800124c:	4bb2      	ldr	r3, [pc, #712]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 800124e:	2104      	movs	r1, #4
 8001250:	438a      	bics	r2, r1
 8001252:	621a      	str	r2, [r3, #32]
 8001254:	e01c      	b.n	8001290 <HAL_RCC_OscConfig+0x39c>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b05      	cmp	r3, #5
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x384>
 800125e:	4bae      	ldr	r3, [pc, #696]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001260:	6a1a      	ldr	r2, [r3, #32]
 8001262:	4bad      	ldr	r3, [pc, #692]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001264:	2104      	movs	r1, #4
 8001266:	430a      	orrs	r2, r1
 8001268:	621a      	str	r2, [r3, #32]
 800126a:	4bab      	ldr	r3, [pc, #684]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 800126c:	6a1a      	ldr	r2, [r3, #32]
 800126e:	4baa      	ldr	r3, [pc, #680]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001270:	2101      	movs	r1, #1
 8001272:	430a      	orrs	r2, r1
 8001274:	621a      	str	r2, [r3, #32]
 8001276:	e00b      	b.n	8001290 <HAL_RCC_OscConfig+0x39c>
 8001278:	4ba7      	ldr	r3, [pc, #668]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 800127a:	6a1a      	ldr	r2, [r3, #32]
 800127c:	4ba6      	ldr	r3, [pc, #664]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 800127e:	2101      	movs	r1, #1
 8001280:	438a      	bics	r2, r1
 8001282:	621a      	str	r2, [r3, #32]
 8001284:	4ba4      	ldr	r3, [pc, #656]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001286:	6a1a      	ldr	r2, [r3, #32]
 8001288:	4ba3      	ldr	r3, [pc, #652]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 800128a:	2104      	movs	r1, #4
 800128c:	438a      	bics	r2, r1
 800128e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d014      	beq.n	80012c2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001298:	f7ff fbbe 	bl	8000a18 <HAL_GetTick>
 800129c:	0003      	movs	r3, r0
 800129e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a0:	e009      	b.n	80012b6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff fbb9 	bl	8000a18 <HAL_GetTick>
 80012a6:	0002      	movs	r2, r0
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4a9b      	ldr	r2, [pc, #620]	; (800151c <HAL_RCC_OscConfig+0x628>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e12b      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b6:	4b98      	ldr	r3, [pc, #608]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	2202      	movs	r2, #2
 80012bc:	4013      	ands	r3, r2
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x3ae>
 80012c0:	e013      	b.n	80012ea <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fba9 	bl	8000a18 <HAL_GetTick>
 80012c6:	0003      	movs	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ca:	e009      	b.n	80012e0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012cc:	f7ff fba4 	bl	8000a18 <HAL_GetTick>
 80012d0:	0002      	movs	r2, r0
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	4a91      	ldr	r2, [pc, #580]	; (800151c <HAL_RCC_OscConfig+0x628>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e116      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e0:	4b8d      	ldr	r3, [pc, #564]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	2202      	movs	r2, #2
 80012e6:	4013      	ands	r3, r2
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012ea:	231f      	movs	r3, #31
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d105      	bne.n	8001300 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f4:	4b88      	ldr	r3, [pc, #544]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 80012f6:	69da      	ldr	r2, [r3, #28]
 80012f8:	4b87      	ldr	r3, [pc, #540]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 80012fa:	4989      	ldr	r1, [pc, #548]	; (8001520 <HAL_RCC_OscConfig+0x62c>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2210      	movs	r2, #16
 8001306:	4013      	ands	r3, r2
 8001308:	d063      	beq.n	80013d2 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d12a      	bne.n	8001368 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001312:	4b81      	ldr	r3, [pc, #516]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001316:	4b80      	ldr	r3, [pc, #512]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001318:	2104      	movs	r1, #4
 800131a:	430a      	orrs	r2, r1
 800131c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800131e:	4b7e      	ldr	r3, [pc, #504]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001322:	4b7d      	ldr	r3, [pc, #500]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001324:	2101      	movs	r1, #1
 8001326:	430a      	orrs	r2, r1
 8001328:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff fb75 	bl	8000a18 <HAL_GetTick>
 800132e:	0003      	movs	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001334:	f7ff fb70 	bl	8000a18 <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e0e3      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001346:	4b74      	ldr	r3, [pc, #464]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	d0f1      	beq.n	8001334 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001350:	4b71      	ldr	r3, [pc, #452]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001354:	22f8      	movs	r2, #248	; 0xf8
 8001356:	4393      	bics	r3, r2
 8001358:	0019      	movs	r1, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	00da      	lsls	r2, r3, #3
 8001360:	4b6d      	ldr	r3, [pc, #436]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001362:	430a      	orrs	r2, r1
 8001364:	635a      	str	r2, [r3, #52]	; 0x34
 8001366:	e034      	b.n	80013d2 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	3305      	adds	r3, #5
 800136e:	d111      	bne.n	8001394 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001370:	4b69      	ldr	r3, [pc, #420]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001374:	4b68      	ldr	r3, [pc, #416]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001376:	2104      	movs	r1, #4
 8001378:	438a      	bics	r2, r1
 800137a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800137c:	4b66      	ldr	r3, [pc, #408]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 800137e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001380:	22f8      	movs	r2, #248	; 0xf8
 8001382:	4393      	bics	r3, r2
 8001384:	0019      	movs	r1, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	00da      	lsls	r2, r3, #3
 800138c:	4b62      	ldr	r3, [pc, #392]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 800138e:	430a      	orrs	r2, r1
 8001390:	635a      	str	r2, [r3, #52]	; 0x34
 8001392:	e01e      	b.n	80013d2 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001394:	4b60      	ldr	r3, [pc, #384]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001398:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 800139a:	2104      	movs	r1, #4
 800139c:	430a      	orrs	r2, r1
 800139e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013a0:	4b5d      	ldr	r3, [pc, #372]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 80013a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a4:	4b5c      	ldr	r3, [pc, #368]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 80013a6:	2101      	movs	r1, #1
 80013a8:	438a      	bics	r2, r1
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ac:	f7ff fb34 	bl	8000a18 <HAL_GetTick>
 80013b0:	0003      	movs	r3, r0
 80013b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013b6:	f7ff fb2f 	bl	8000a18 <HAL_GetTick>
 80013ba:	0002      	movs	r2, r0
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e0a2      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013c8:	4b53      	ldr	r3, [pc, #332]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 80013ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013cc:	2202      	movs	r2, #2
 80013ce:	4013      	ands	r3, r2
 80013d0:	d1f1      	bne.n	80013b6 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d100      	bne.n	80013dc <HAL_RCC_OscConfig+0x4e8>
 80013da:	e097      	b.n	800150c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013dc:	4b4e      	ldr	r3, [pc, #312]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	220c      	movs	r2, #12
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d100      	bne.n	80013ea <HAL_RCC_OscConfig+0x4f6>
 80013e8:	e06b      	b.n	80014c2 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d14c      	bne.n	800148c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f2:	4b49      	ldr	r3, [pc, #292]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b48      	ldr	r3, [pc, #288]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 80013f8:	494a      	ldr	r1, [pc, #296]	; (8001524 <HAL_RCC_OscConfig+0x630>)
 80013fa:	400a      	ands	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff fb0b 	bl	8000a18 <HAL_GetTick>
 8001402:	0003      	movs	r3, r0
 8001404:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001408:	f7ff fb06 	bl	8000a18 <HAL_GetTick>
 800140c:	0002      	movs	r2, r0
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e079      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141a:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	049b      	lsls	r3, r3, #18
 8001422:	4013      	ands	r3, r2
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001426:	4b3c      	ldr	r3, [pc, #240]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	220f      	movs	r2, #15
 800142c:	4393      	bics	r3, r2
 800142e:	0019      	movs	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001434:	4b38      	ldr	r3, [pc, #224]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001436:	430a      	orrs	r2, r1
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4a3a      	ldr	r2, [pc, #232]	; (8001528 <HAL_RCC_OscConfig+0x634>)
 8001440:	4013      	ands	r3, r2
 8001442:	0019      	movs	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	431a      	orrs	r2, r3
 800144e:	4b32      	ldr	r3, [pc, #200]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001450:	430a      	orrs	r2, r1
 8001452:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001454:	4b30      	ldr	r3, [pc, #192]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	0449      	lsls	r1, r1, #17
 800145e:	430a      	orrs	r2, r1
 8001460:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff fad9 	bl	8000a18 <HAL_GetTick>
 8001466:	0003      	movs	r3, r0
 8001468:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff fad4 	bl	8000a18 <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e047      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	049b      	lsls	r3, r3, #18
 8001486:	4013      	ands	r3, r2
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x578>
 800148a:	e03f      	b.n	800150c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 8001492:	4924      	ldr	r1, [pc, #144]	; (8001524 <HAL_RCC_OscConfig+0x630>)
 8001494:	400a      	ands	r2, r1
 8001496:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fabe 	bl	8000a18 <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a2:	f7ff fab9 	bl	8000a18 <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e02c      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b4:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	049b      	lsls	r3, r3, #18
 80014bc:	4013      	ands	r3, r2
 80014be:	d1f0      	bne.n	80014a2 <HAL_RCC_OscConfig+0x5ae>
 80014c0:	e024      	b.n	800150c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e01f      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014d4:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_RCC_OscConfig+0x624>)
 80014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	025b      	lsls	r3, r3, #9
 80014e0:	401a      	ands	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d10e      	bne.n	8001508 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	220f      	movs	r2, #15
 80014ee:	401a      	ands	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	23f0      	movs	r3, #240	; 0xf0
 80014fc:	039b      	lsls	r3, r3, #14
 80014fe:	401a      	ands	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	0018      	movs	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	b008      	add	sp, #32
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	40021000 	.word	0x40021000
 800151c:	00001388 	.word	0x00001388
 8001520:	efffffff 	.word	0xefffffff
 8001524:	feffffff 	.word	0xfeffffff
 8001528:	ffc2ffff 	.word	0xffc2ffff

0800152c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0b3      	b.n	80016a8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001540:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <HAL_RCC_ClockConfig+0x184>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2201      	movs	r2, #1
 8001546:	4013      	ands	r3, r2
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d911      	bls.n	8001572 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154e:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <HAL_RCC_ClockConfig+0x184>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	4393      	bics	r3, r2
 8001556:	0019      	movs	r1, r3
 8001558:	4b55      	ldr	r3, [pc, #340]	; (80016b0 <HAL_RCC_ClockConfig+0x184>)
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001560:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <HAL_RCC_ClockConfig+0x184>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	4013      	ands	r3, r2
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d001      	beq.n	8001572 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e09a      	b.n	80016a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2202      	movs	r2, #2
 8001578:	4013      	ands	r3, r2
 800157a:	d015      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2204      	movs	r2, #4
 8001582:	4013      	ands	r3, r2
 8001584:	d006      	beq.n	8001594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001586:	4b4b      	ldr	r3, [pc, #300]	; (80016b4 <HAL_RCC_ClockConfig+0x188>)
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <HAL_RCC_ClockConfig+0x188>)
 800158c:	21e0      	movs	r1, #224	; 0xe0
 800158e:	00c9      	lsls	r1, r1, #3
 8001590:	430a      	orrs	r2, r1
 8001592:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001594:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HAL_RCC_ClockConfig+0x188>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	22f0      	movs	r2, #240	; 0xf0
 800159a:	4393      	bics	r3, r2
 800159c:	0019      	movs	r1, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <HAL_RCC_ClockConfig+0x188>)
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2201      	movs	r2, #1
 80015ae:	4013      	ands	r3, r2
 80015b0:	d040      	beq.n	8001634 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <HAL_RCC_ClockConfig+0x188>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	029b      	lsls	r3, r3, #10
 80015c2:	4013      	ands	r3, r2
 80015c4:	d114      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e06e      	b.n	80016a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <HAL_RCC_ClockConfig+0x188>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	049b      	lsls	r3, r3, #18
 80015da:	4013      	ands	r3, r2
 80015dc:	d108      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e062      	b.n	80016a8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <HAL_RCC_ClockConfig+0x188>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2202      	movs	r2, #2
 80015e8:	4013      	ands	r3, r2
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e05b      	b.n	80016a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f0:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <HAL_RCC_ClockConfig+0x188>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2203      	movs	r2, #3
 80015f6:	4393      	bics	r3, r2
 80015f8:	0019      	movs	r1, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <HAL_RCC_ClockConfig+0x188>)
 8001600:	430a      	orrs	r2, r1
 8001602:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001604:	f7ff fa08 	bl	8000a18 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160c:	e009      	b.n	8001622 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160e:	f7ff fa03 	bl	8000a18 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	4a27      	ldr	r2, [pc, #156]	; (80016b8 <HAL_RCC_ClockConfig+0x18c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e042      	b.n	80016a8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_RCC_ClockConfig+0x188>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	220c      	movs	r2, #12
 8001628:	401a      	ands	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	429a      	cmp	r2, r3
 8001632:	d1ec      	bne.n	800160e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001634:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <HAL_RCC_ClockConfig+0x184>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2201      	movs	r2, #1
 800163a:	4013      	ands	r3, r2
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d211      	bcs.n	8001666 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_RCC_ClockConfig+0x184>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	4393      	bics	r3, r2
 800164a:	0019      	movs	r1, r3
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_RCC_ClockConfig+0x184>)
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <HAL_RCC_ClockConfig+0x184>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	4013      	ands	r3, r2
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d001      	beq.n	8001666 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e020      	b.n	80016a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2204      	movs	r2, #4
 800166c:	4013      	ands	r3, r2
 800166e:	d009      	beq.n	8001684 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_RCC_ClockConfig+0x188>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_RCC_ClockConfig+0x190>)
 8001676:	4013      	ands	r3, r2
 8001678:	0019      	movs	r1, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_RCC_ClockConfig+0x188>)
 8001680:	430a      	orrs	r2, r1
 8001682:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001684:	f000 f820 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8001688:	0001      	movs	r1, r0
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_RCC_ClockConfig+0x188>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	091b      	lsrs	r3, r3, #4
 8001690:	220f      	movs	r2, #15
 8001692:	4013      	ands	r3, r2
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_RCC_ClockConfig+0x194>)
 8001696:	5cd3      	ldrb	r3, [r2, r3]
 8001698:	000a      	movs	r2, r1
 800169a:	40da      	lsrs	r2, r3
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_RCC_ClockConfig+0x198>)
 800169e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff f973 	bl	800098c <HAL_InitTick>
  
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b004      	add	sp, #16
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40022000 	.word	0x40022000
 80016b4:	40021000 	.word	0x40021000
 80016b8:	00001388 	.word	0x00001388
 80016bc:	fffff8ff 	.word	0xfffff8ff
 80016c0:	08001820 	.word	0x08001820
 80016c4:	20000000 	.word	0x20000000

080016c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b08f      	sub	sp, #60	; 0x3c
 80016cc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016ce:	2314      	movs	r3, #20
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	4a2b      	ldr	r2, [pc, #172]	; (8001780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016d6:	c313      	stmia	r3!, {r0, r1, r4}
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	4a29      	ldr	r2, [pc, #164]	; (8001784 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016e2:	c313      	stmia	r3!, {r0, r1, r4}
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	220c      	movs	r2, #12
 8001706:	4013      	ands	r3, r2
 8001708:	2b04      	cmp	r3, #4
 800170a:	d002      	beq.n	8001712 <HAL_RCC_GetSysClockFreq+0x4a>
 800170c:	2b08      	cmp	r3, #8
 800170e:	d003      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0x50>
 8001710:	e02d      	b.n	800176e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001716:	e02d      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171a:	0c9b      	lsrs	r3, r3, #18
 800171c:	220f      	movs	r2, #15
 800171e:	4013      	ands	r3, r2
 8001720:	2214      	movs	r2, #20
 8001722:	18ba      	adds	r2, r7, r2
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_RCC_GetSysClockFreq+0xc0>)
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	220f      	movs	r2, #15
 800172e:	4013      	ands	r3, r2
 8001730:	1d3a      	adds	r2, r7, #4
 8001732:	5cd3      	ldrb	r3, [r2, r3]
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	025b      	lsls	r3, r3, #9
 800173c:	4013      	ands	r3, r2
 800173e:	d009      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001742:	4812      	ldr	r0, [pc, #72]	; (800178c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001744:	f7fe fce0 	bl	8000108 <__udivsi3>
 8001748:	0003      	movs	r3, r0
 800174a:	001a      	movs	r2, r3
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	4353      	muls	r3, r2
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
 8001752:	e009      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001756:	000a      	movs	r2, r1
 8001758:	0152      	lsls	r2, r2, #5
 800175a:	1a52      	subs	r2, r2, r1
 800175c:	0193      	lsls	r3, r2, #6
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	185b      	adds	r3, r3, r1
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800176c:	e002      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001772:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001776:	0018      	movs	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	b00f      	add	sp, #60	; 0x3c
 800177c:	bd90      	pop	{r4, r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	08001800 	.word	0x08001800
 8001784:	08001810 	.word	0x08001810
 8001788:	40021000 	.word	0x40021000
 800178c:	007a1200 	.word	0x007a1200

08001790 <__libc_init_array>:
 8001790:	b570      	push	{r4, r5, r6, lr}
 8001792:	2600      	movs	r6, #0
 8001794:	4d0c      	ldr	r5, [pc, #48]	; (80017c8 <__libc_init_array+0x38>)
 8001796:	4c0d      	ldr	r4, [pc, #52]	; (80017cc <__libc_init_array+0x3c>)
 8001798:	1b64      	subs	r4, r4, r5
 800179a:	10a4      	asrs	r4, r4, #2
 800179c:	42a6      	cmp	r6, r4
 800179e:	d109      	bne.n	80017b4 <__libc_init_array+0x24>
 80017a0:	2600      	movs	r6, #0
 80017a2:	f000 f821 	bl	80017e8 <_init>
 80017a6:	4d0a      	ldr	r5, [pc, #40]	; (80017d0 <__libc_init_array+0x40>)
 80017a8:	4c0a      	ldr	r4, [pc, #40]	; (80017d4 <__libc_init_array+0x44>)
 80017aa:	1b64      	subs	r4, r4, r5
 80017ac:	10a4      	asrs	r4, r4, #2
 80017ae:	42a6      	cmp	r6, r4
 80017b0:	d105      	bne.n	80017be <__libc_init_array+0x2e>
 80017b2:	bd70      	pop	{r4, r5, r6, pc}
 80017b4:	00b3      	lsls	r3, r6, #2
 80017b6:	58eb      	ldr	r3, [r5, r3]
 80017b8:	4798      	blx	r3
 80017ba:	3601      	adds	r6, #1
 80017bc:	e7ee      	b.n	800179c <__libc_init_array+0xc>
 80017be:	00b3      	lsls	r3, r6, #2
 80017c0:	58eb      	ldr	r3, [r5, r3]
 80017c2:	4798      	blx	r3
 80017c4:	3601      	adds	r6, #1
 80017c6:	e7f2      	b.n	80017ae <__libc_init_array+0x1e>
 80017c8:	08001830 	.word	0x08001830
 80017cc:	08001830 	.word	0x08001830
 80017d0:	08001830 	.word	0x08001830
 80017d4:	08001834 	.word	0x08001834

080017d8 <memset>:
 80017d8:	0003      	movs	r3, r0
 80017da:	1812      	adds	r2, r2, r0
 80017dc:	4293      	cmp	r3, r2
 80017de:	d100      	bne.n	80017e2 <memset+0xa>
 80017e0:	4770      	bx	lr
 80017e2:	7019      	strb	r1, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	e7f9      	b.n	80017dc <memset+0x4>

080017e8 <_init>:
 80017e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ee:	bc08      	pop	{r3}
 80017f0:	469e      	mov	lr, r3
 80017f2:	4770      	bx	lr

080017f4 <_fini>:
 80017f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017fa:	bc08      	pop	{r3}
 80017fc:	469e      	mov	lr, r3
 80017fe:	4770      	bx	lr
